PROMPT CREATE OR REPLACE PACKAGE im_claim_endorsement
CREATE OR REPLACE PACKAGE im_claim_endorsement as

function IM_CLAIM_ENDORSEMENT_FN (ENDORSEMENT_PK NUMBER,ATYPE number,APROVIDERCODE NUMBER,ABROKERCODE NUMBER,AGROUPCODE NUMBER,APOLICYCODE NUMBER,AINDIVIDUALPOLICYCODE NUMBER,AMEMBERCODE NUMBER) return VARCHAR2;

function IM_REVERSE_ENDORSEMENT_FN (ENDORSEMENT_PK NUMBER,ATYPE number,APROVIDERCODE NUMBER,ABROKERCODE NUMBER,AGROUPCODE NUMBER,APOLICYCODE NUMBER,AINDIVIDUALPOLICYCODE NUMBER,AMEMBERCODE NUMBER) return VARCHAR2;

end;
/

PROMPT CREATE OR REPLACE PACKAGE BODY im_claim_endorsement
CREATE OR REPLACE package body im_claim_endorsement as

function IM_CLAIM_ENDORSEMENT_FN (ENDORSEMENT_PK NUMBER,
  ATYPE number,APROVIDERCODE NUMBER,
  ABROKERCODE NUMBER,AGROUPCODE
  NUMBER,APOLICYCODE NUMBER,
  AINDIVIDUALPOLICYCODE NUMBER,
  AMEMBERCODE NUMBER) return VARCHAR2 AS


ASUBDTLCODEPKEY number(19);
ASUBDTLSERIALNO number(19);
ATRATYPE number(3);
AADMINISTRATEDBY number(3);
ACLAMCOUNT number(5);
ASUBGROUPCODE number(19);
ISEXCLUDE number(1) default 0;
L_MEMBERAMOUNT NUMBER;
BEGIN


delete from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK;
insert into IM_ENDPOSTCLAIMDTL_EXCL select * from IM_ENDPOSTCLAIMDTL where nvl(INCLUDE_CLAIM,0)=1;
--select CLAIMCODE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK;
delete from IM_ENDPOSTCLAIMDTL where ENDORESMENTCODE=ENDORSEMENT_PK;

commit;
--ADMINISTRATEDBY, TPATYPE
select nvl(max(TPATYPE),0), nvl(max(ADMINISTEREDBY),0),nvl(max(ACCOUNTDESIGNATION),0)  into ATRATYPE,AADMINISTRATEDBY,ASUBGROUPCODE from IM_ENDORSEMENTPOSTING where ENDORESMENTCODE=ENDORSEMENT_PK;


--FROM TABLE(SF_ENDORESMENTPOSTINGNEW(ATYPE,APROVIDERCODE,ABROKERCODE,AGROUPCODE,APOLICYCODE,AINDIVIDUALPOLICYCODE,AMEMBERCODE)) TBL;

if(ATYPE=8) then --Provider Reimbursment Claims
FOR C IN (
  select * from IM_CLAIM_PROCESS_HEADER c
  where
  AUTHORIZEDSTATUS<>0 and ISPOSTED=0 and PROVIDER_CODE=APROVIDERCODE and ((ATRATYPE=0 and C.Request_Type in (3,4)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  )

LOOP

IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;
select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL 
join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 
and DTL.CLAIMCODE=C.CLAIM_CODE and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0)+Nvl(L_MEMBERAMOUNT,0)));

end loop;

/*elsif(ATYPE=0) then --Provider Paper or Eclaims

FOR C IN (
  select CLAIM_CODE from IM_CLAIM_PROCESS_HEADER c
  where CLAIM_STATUS = 2 AND NEXTCARECLAIMHDRCODE IS NULL AND TPACLAIMHDRCODE IS NULL AND
  AUTHORIZEDSTATUS<>0 and NVL(ISPOSTED,0)=0  AND NVL(ISREVERSEDFORCREDIT,0) = 0 AND  NVL(ISREVERSEDFORDEBIT,0) = 0 AND NVL(FINANCE,0) = 0 and PROVIDER_CODE=APROVIDERCODE and ((ATRATYPE=0 and C.Request_Type not in (3,4)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  )

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE ;

if(ACLAMCOUNT=1) then
    continue;
end if;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;*/


elsif(ATYPE=0 AND ATRATYPE = 0) then --Provider Paper or Eclaims

DELETE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE = ENDORSEMENT_PK;
COMMIT;

INSERT INTO IM_ENDPOSTCLAIMDTL
SELECT
(SELECT NVL(MAX(CLAIMDLTCODE),100000000000000000)+1 FROM IM_ENDPOSTCLAIMDTL)+ROWNUM,
ENDORSEMENT_PK,HDR.CLAIM_CODE,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
100000000000000002,1,1,(SELECT NVL(MAX(SERIALNO),0)+1 FROM IM_ENDPOSTCLAIMDTL)+ROWNUM,
0 ISEXCLUDE,
0,0,NVL(HDR.APPROVED_AMOUNT,0) + Decode(HDR.REQUEST_TYPE,1,Nvl((SELECT SUM(Nvl(DENIEDAMOUNT,0)) FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = HDR.CLAIM_CODE),0),
2,Nvl((SELECT SUM(Nvl(DENIEDAMOUNT,0)) FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = HDR.CLAIM_CODE),0),0) 
FROM IM_CLAIM_PROCESS_HEADER HDR
WHERE CLAIM_STATUS = 2 AND NEXTCARECLAIMHDRCODE IS NULL AND TPACLAIMHDRCODE IS NULL AND
AUTHORIZEDSTATUS<>0 and
ISPOSTED = 0   AND
FINANCE = 0 and PROVIDER_CODE=APROVIDERCODE;
COMMIT;


elsif(ATYPE=0 AND ATRATYPE <> 0) then --Provider Paper or Eclaims

DELETE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE = ENDORSEMENT_PK;
COMMIT;

INSERT INTO IM_ENDPOSTCLAIMDTL
SELECT
(SELECT NVL(MAX(CLAIMDLTCODE),100000000000000000)+1 FROM IM_ENDPOSTCLAIMDTL)+ROWNUM,
ENDORSEMENT_PK,HDR.CLAIM_CODE,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
100000000000000002,1,1,(SELECT NVL(MAX(SERIALNO),0)+1 FROM IM_ENDPOSTCLAIMDTL)+ROWNUM,
0 ISEXCLUDE,
0,0,NVL(HDR.APPROVED_AMOUNT,0) + Decode(HDR.REQUEST_TYPE,1,Nvl((SELECT SUM(Nvl(DENIEDAMOUNT,0)) FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = HDR.CLAIM_CODE),0),
2,Nvl((SELECT SUM(Nvl(DENIEDAMOUNT,0)) FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = HDR.CLAIM_CODE),0),0) FROM IM_CLAIM_PROCESS_HEADER HDR
LEFT JOIN IM_ENDPOSTCLAIMDTL_EXCL EXCL ON EXCL.CLAIMCODE = HDR.CLAIM_CODE
WHERE CLAIM_STATUS = 2 AND NEXTCARECLAIMHDRCODE IS NULL AND TPACLAIMHDRCODE IS NULL AND
AUTHORIZEDSTATUS<>0 and
ISPOSTED = 0   AND
FINANCE = 0 and PROVIDER_CODE=APROVIDERCODE and
((ATRATYPE=0 and HDR.REQUEST_TYPE not in (3,4)) or
(ATRATYPE<>0 and HDR.NETWORKTYPE=ATRATYPE and HDR.ADMINISTRATEDBY=AADMINISTRATEDBY))
;
COMMIT;

elsif(ATYPE=1) then --Broker

FOR C IN (
  select CLAIM_CODE,C.REQUEST_TYPE,C.APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER C
  join Im_Memberpolicy MP on C.Member_Code = MP.Membercode and C.policycode=MP.policycode and MP.Typee =1
  join Im_policy Pol on Pol.PolicyCode=C.PolicyCode
  where --C.request_type=3 and -- Reimrepsemnt only
   C.AUTHORIZEDSTATUS=1 and C.ISPOSTED=0 and Pol.BROKERCODE=ABROKERCODE  and ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
   and  C.CLAIM_CODE not in (select CLAIMCODE  from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0)
  union all
  select CLAIM_CODE,C.REQUEST_TYPE,C.APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER C
  join Im_Memberpolicy MP on C.Member_Code = MP.Membercode and MP.Typee =2
  join Im_Individualpolicy Pol on Pol.IndividualPolicyCode=C.PolicyCode
  where --C.request_type=3 and -- Reimrepsemnt only
  C.AUTHORIZEDSTATUS<>0 and C.ISPOSTED=0 and Pol.BROKERCODE=ABROKERCODE  and ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  and  C.CLAIM_CODE not in (select CLAIMCODE  from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0)
  )
LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;
IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;

select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));

end loop;

elsif(ATYPE=2) then --Group
FOR C IN (
  select C.CLAIM_CODE,C.PolicyCode,C.REQUEST_TYPE,C.APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER C
  --join im_members imp on C.member_code=imp.member_code and  nvl(PARENTGROUPCODE,GROUP_CODE)=nvl(decode(ASUBGROUPCODE,0,null),AGROUPCODE)
  left join im_memberpolicy  imp on C.member_code=imp.membercode and c.policycode= imp.policycode and  c.CATEGORY_CODE=imp.CATEGORYCODE
  --join Im_policy Pol on Pol.PolicyCode=C.PolicyCode
  where  --C.request_type=3 and -- Reimrepsemnt only
  C.AUTHORIZEDSTATUS<>0 and C.ISPOSTED=0 /*and Pol.GROUPCODE=AGROUPCODE*/  and  ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
    and (ATRATYPE<>0 or (nvl(ASUBGROUPCODE,0)=0 or nvl(imp.A_SUBGROUPCODE,imp.GROUPCODE)=ASUBGROUPCODE)) )
LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;
IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;


update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1 where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));
end loop;
elsif(ATYPE=3) THEN --POLICY

FOR C IN (
  select c.CLAIM_CODE,c.PolicyCode,C.APPROVED_AMOUNT,C.REQUEST_TYPE from IM_CLAIM_PROCESS_HEADER c
  left join im_memberpolicy  imp on C.member_code=imp.membercode and c.policycode= imp.policycode and  c.CATEGORY_CODE=imp.CATEGORYCODE
  --left join im_members imp on C.member_code=imp.member_code
  --where  C.request_type=3 and -- Reimrepsemnt only
   --AUTHORIZEDSTATUS=1 and ISPOSTED=0 and POLICYCODE=APOLICYCODE
  --join IM_MemberPolicy MP on nvl(C.member_code,mp.membercode) = mp.membercode and c.policycode=mp.policycode and MP.typee=1
  Join  IM_POLICY IP on IP.policycode = C.policycode and IP.policycode =APOLICYCODE
  where  c.AUTHORIZEDSTATUS<>0 and  NVL(ISPOSTED,0)=0--and C.request_type=3
  and  ((NVL(ATRATYPE,0)=0 and (C.Request_Type in (3) OR (NVL(ISREVERSEDFORDEBIT,0) = 1 AND NVL(ISDECLINEDPOSTED,0) = 0))) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))--  ((IP.OWNERCODE in (1,5) and C.request_type=4) or (IP.OWNERCODE not in (1,5) and C.request_type=3))
  and (ATRATYPE<>0 or (nvl(ASUBGROUPCODE,0)=0 or nvl(imp.GROUPCODE,0)=ASUBGROUPCODE) or nvl(imp.a_subgroupcode,0) = ASUBGROUPCODE)
   )

LOOP
select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)  where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;
IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));

end loop;

elsif(ATYPE=4) then --Individual policy

FOR C IN (
  select C.CLAIM_CODE,c.policycode,C.REQUEST_TYPE,C.APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER  C
  --join IM_MemberPolicy MP on nvl(C.member_code,mp.membercode) = mp.membercode and c.policycode=mp.policycode and MP.typee=2
  Join  Im_Individualpolicy IP on IP.Individualpolicycode = C.policycode and IP.individualPolicyCode =AINDIVIDUALPOLICYCODE
  where  c.AUTHORIZEDSTATUS<>0 and ISPOSTED=0 and  ((ATRATYPE=0 and (C.Request_Type in (3) OR (NVL(ISREVERSEDFORDEBIT,0) = 1 AND NVL(ISDECLINEDPOSTED,0) = 0))) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY)) )

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE   and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=2 where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;
IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));

end loop;

elsif(ATYPE=5) then --Member

FOR C IN (select CLAIM_CODE,PolicyCode,REQUEST_TYPE,APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER  where AUTHORIZEDSTATUS<>0 and ISPOSTED=0 --AND  request_type=3
and MEMBER_CODE=AMEMBERCODE and ((ATRATYPE=0 and Request_Type in (3)) or (ATRATYPE<>0 and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY)))

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set
(policycode,policytype,groupcode) = (select im.policycode,im.policytype,im.group_code from im_members im where im.member_code=AMEMBERCODE)
--IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
--groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)
where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;
IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;


INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));

end loop;

elsif(ATYPE=6 or ATYPE=7) then --Innet / Outnet

FOR C IN (select CLAIM_CODE,PolicyCode,REQUEST_TYPE,APPROVED_AMOUNT from IM_CLAIM_PROCESS_HEADER  where AUTHORIZEDSTATUS<>0 and ISPOSTED=0 AND  request_type=4
and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY  AND NEXTCARECLAIMHDRCODE IS NULL AND TPACLAIMHDRCODE  IS NULL)
--and MEMBER_CODE=AMEMBERCODE and ((ATRATYPE=0 and Request_Type in (3)) or (ATRATYPE<>0 and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY)))

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set
(policycode,policytype,groupcode) = (select im.policycode,im.policytype,im.group_code from im_members im where im.member_code=AMEMBERCODE)
--IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
--groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)
where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;
 IF C.REQUEST_TYPE = 1 OR C.REQUEST_TYPE = 2 THEN
SELECT Sum(Nvl(DENIEDAMOUNT,0)) INTO L_MEMBERAMOUNT FROM IM_DECLINEAMOUNT_VW WHERE CLAIM_CODE = C.CLAIM_CODE;
END IF;


INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.CLAIMAMOUNT)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL),(Nvl(C.APPROVED_AMOUNT,0) + Nvl(L_MEMBERAMOUNT,0)));

end loop;

end if;

NGI_GETMAX_REC('IM_ENDPOSTCLAIMDTL','SERIALNO');
COMMIT;

select max(SUBDTLCODE),max(SERIALNO) into ASUBDTLCODEPKEY,ASUBDTLSERIALNO from IM_ENDORESMENTPOSTINGSUBDTL;

delete from IM_ENDORESMENTPOSTINGSUBDTL where ENDORESMENTCODE=ENDORSEMENT_PK;
insert into IM_ENDORESMENTPOSTINGSUBDTL (SUBDTLCODE, ENDORESMENTCODE, POLICYTYPECODE, POLICYID, POLICYNAME, DENIALAMOUNT, COMPANYCODE, LOCATIONCODE, SERIALNO, PROVIDERCODE, MEMBERCODE, GROUPCODE, CLAIMCODE, POLICYCODE, TYPECODE, AGENTCODE, BROKERCODE)
SELECT ASUBDTLCODEPKEY+rownum SUBDTLCODE,ENDORSEMENT_PK ENDORESMENTCODE, POLICYTYPECODE, POLICYID, POLICYNAME, round(DENIALAMOUNT,2) DENIALAMOUNT,1 COMPANYCODE,1 LOCATIONCODE,ASUBDTLSERIALNO+rownum SERIALNO, PROVIDERCODE, MEMBERCODE, nvl(ASUBGROUPCODE,TBL.GROUPCODE) GROUPCODE,null CLAIMCODE, POLICYCODE, TYPECODE, AGENTCODE, BROKERCODE
FROM TABLE(sf_endoresmentpostingPK(ENDORSEMENT_PK)) TBL;

NGI_GETMAX_REC('IM_ENDORESMENTPOSTINGSUBDTL','SERIALNO');
COMMIT;
RETURN 'OK';

END;



function IM_REVERSE_ENDORSEMENT_FN (ENDORSEMENT_PK NUMBER,
  ATYPE number,APROVIDERCODE NUMBER,
  ABROKERCODE NUMBER,AGROUPCODE
  NUMBER,APOLICYCODE NUMBER,
  AINDIVIDUALPOLICYCODE NUMBER,
  AMEMBERCODE NUMBER) return VARCHAR2 AS


ASUBDTLCODEPKEY number(19);
ASUBDTLSERIALNO number(19);
ATRATYPE number(3);
AADMINISTRATEDBY number(3);
ACLAMCOUNT number(5);
ASUBGROUPCODE number(19);
ISEXCLUDE number(1) default 0;
L_RECOVERDENIALAMOUNT NUMBER;
BEGIN


delete from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK;
insert into IM_ENDPOSTCLAIMDTL_EXCL select * from IM_ENDPOSTCLAIMDTL where nvl(INCLUDE_CLAIM,0)=1;
--select CLAIMCODE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK;
delete from IM_ENDPOSTCLAIMDTL where ENDORESMENTCODE=ENDORSEMENT_PK;

commit;
--ADMINISTRATEDBY, TPATYPE
select nvl(max(TPATYPE),0), nvl(max(ADMINISTEREDBY),0),nvl(max(ACCOUNTDESIGNATION),0)  into ATRATYPE,AADMINISTRATEDBY,ASUBGROUPCODE from IM_ENDORSEMENTPOSTING where ENDORESMENTCODE=ENDORSEMENT_PK;


--FROM TABLE(SF_ENDORESMENTPOSTINGNEW(ATYPE,APROVIDERCODE,ABROKERCODE,AGROUPCODE,APOLICYCODE,AINDIVIDUALPOLICYCODE,AMEMBERCODE)) TBL;

if(ATYPE=8) then --Provider Reimbursment Claims
FOR C IN (
  select CLAIM_CODE from IM_CLAIM_PROCESS_HEADER c
  where
  AUTHORIZEDSTATUS<>0 and ISPOSTED=0 and PROVIDER_CODE=APROVIDERCODE and ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  )

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=0) then --Provider Paper or Eclaims

FOR C IN (
  select CLAIM_CODE from IM_CLAIM_PROCESS_HEADER c
  where CLAIM_STATUS = 2 AND
  AUTHORIZEDSTATUS<>0 and NVL(ISPOSTED,0)=0  AND NVL(ISREVERSEDFORDEBIT,0) = 1 AND NVL(FINANCE,0) = 0 and PROVIDER_CODE=APROVIDERCODE and ((ATRATYPE=0 and C.Request_Type not in (3,4)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  )

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE ;

if(ACLAMCOUNT=1) then
    continue;
end if;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=1) then --Broker

FOR C IN (
  select CLAIM_CODE from IM_CLAIM_PROCESS_HEADER C
  join Im_Memberpolicy MP on C.Member_Code = MP.Membercode and C.policycode=MP.policycode and MP.Typee =1
  join Im_policy Pol on Pol.PolicyCode=C.PolicyCode
  where --C.request_type=3 and -- Reimrepsemnt only
   C.AUTHORIZEDSTATUS=1 and C.ISPOSTED=0 and Pol.BROKERCODE=ABROKERCODE  and ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
   and  C.CLAIM_CODE not in (select CLAIMCODE  from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0)
  union all
  select CLAIM_CODE from IM_CLAIM_PROCESS_HEADER C
  join Im_Memberpolicy MP on C.Member_Code = MP.Membercode and MP.Typee =2
  join Im_Individualpolicy Pol on Pol.IndividualPolicyCode=C.PolicyCode
  where --C.request_type=3 and -- Reimrepsemnt only
  C.AUTHORIZEDSTATUS<>0 and C.ISPOSTED=0 and Pol.BROKERCODE=ABROKERCODE  and ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
  and  C.CLAIM_CODE not in (select CLAIMCODE  from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0)
  )
LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=2) then --Group
FOR C IN (
  select C.CLAIM_CODE,C.PolicyCode from IM_CLAIM_PROCESS_HEADER C
  --join im_members imp on C.member_code=imp.member_code and  nvl(PARENTGROUPCODE,GROUP_CODE)=nvl(decode(ASUBGROUPCODE,0,null),AGROUPCODE)
  left join im_memberpolicy  imp on C.member_code=imp.membercode and c.policycode= imp.policycode and  c.CATEGORY_CODE=imp.CATEGORYCODE
  --join Im_policy Pol on Pol.PolicyCode=C.PolicyCode
  where  --C.request_type=3 and -- Reimrepsemnt only
  C.AUTHORIZEDSTATUS<>0 and C.ISPOSTED=0 /*and Pol.GROUPCODE=AGROUPCODE*/  and  ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))
    and (ATRATYPE<>0 or (nvl(ASUBGROUPCODE,0)=0 or nvl(imp.A_SUBGROUPCODE,imp.GROUPCODE)=ASUBGROUPCODE)) )
LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1 where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));
end loop;
elsif(ATYPE=3) THEN --POLICY

FOR C IN (
  select c.CLAIM_CODE,c.PolicyCode from IM_CLAIM_PROCESS_HEADER c
  left join im_memberpolicy  imp on C.member_code=imp.membercode and c.policycode= imp.policycode and  c.CATEGORY_CODE=imp.CATEGORYCODE
  --left join im_members imp on C.member_code=imp.member_code
  --where  C.request_type=3 and -- Reimrepsemnt only
   --AUTHORIZEDSTATUS=1 and ISPOSTED=0 and POLICYCODE=APOLICYCODE
  --join IM_MemberPolicy MP on nvl(C.member_code,mp.membercode) = mp.membercode and c.policycode=mp.policycode and MP.typee=1
  Join  IM_POLICY IP on IP.policycode = C.policycode and IP.policycode =APOLICYCODE
  where  c.AUTHORIZEDSTATUS<>0 and ISPOSTED=0 --and C.request_type=3
  and  ((NVL(ATRATYPE,0)=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY))--  ((IP.OWNERCODE in (1,5) and C.request_type=4) or (IP.OWNERCODE not in (1,5) and C.request_type=3))
  and (ATRATYPE<>0 or (nvl(ASUBGROUPCODE,0)=0 or nvl(imp.A_SUBGROUPCODE,imp.GROUPCODE)=ASUBGROUPCODE))
   )

LOOP
select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)  where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=4) then --Individual policy

FOR C IN (
  select C.CLAIM_CODE,c.policycode from IM_CLAIM_PROCESS_HEADER  C
  --join IM_MemberPolicy MP on nvl(C.member_code,mp.membercode) = mp.membercode and c.policycode=mp.policycode and MP.typee=2
  Join  Im_Individualpolicy IP on IP.Individualpolicycode = C.policycode and IP.individualPolicyCode =AINDIVIDUALPOLICYCODE
  where  c.AUTHORIZEDSTATUS<>0 and ISPOSTED=0 and  ((ATRATYPE=0 and C.Request_Type in (3)) or (ATRATYPE<>0 and C.NETWORKTYPE=ATRATYPE and C.ADMINISTRATEDBY=AADMINISTRATEDBY)) )

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE   and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=2 where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=5) then --Member

FOR C IN (select CLAIM_CODE,PolicyCode from IM_CLAIM_PROCESS_HEADER  where AUTHORIZEDSTATUS<>0 and ISPOSTED=0 --AND  request_type=3
and MEMBER_CODE=AMEMBERCODE and ((ATRATYPE=0 and Request_Type in (3)) or (ATRATYPE<>0 and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY)))

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set
(policycode,policytype,groupcode) = (select im.policycode,im.policytype,im.group_code from im_members im where im.member_code=AMEMBERCODE)
--IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
--groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)
where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

elsif(ATYPE=6 or ATYPE=7) then --Innet / Outnet

FOR C IN (select CLAIM_CODE,PolicyCode from IM_CLAIM_PROCESS_HEADER  where AUTHORIZEDSTATUS<>0 and ISPOSTED=0 AND  request_type=4
and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY  )
--and MEMBER_CODE=AMEMBERCODE and ((ATRATYPE=0 and Request_Type in (3)) or (ATRATYPE<>0 and NETWORKTYPE=ATRATYPE and ADMINISTRATEDBY=AADMINISTRATEDBY)))

LOOP

select count(*)  into ACLAMCOUNT from IM_ENDPOSTCLAIMDTL DTL join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and POS.AUTHORIZEDSTATUS=0 and DTL.CLAIMCODE=C.CLAIM_CODE  and  nvl(DTL.INCLUDE_CLAIM,0)=0;

if(ACLAMCOUNT=1) then
    continue;
end if;

update IM_ENDORSEMENTPOSTING set
(policycode,policytype,groupcode) = (select im.policycode,im.policytype,im.group_code from im_members im where im.member_code=AMEMBERCODE)
--IM_ENDORSEMENTPOSTING.policycode=C.PolicyCode,IM_ENDORSEMENTPOSTING.policytype=1,
--groupcode=(select im_policy.groupcode from im_policy where im_policy.policycode= C.PolicyCode)
where IM_ENDORSEMENTPOSTING.ENDORESMENTCODE=ENDORSEMENT_PK;
select decode(count(*),0,0,1) into ISEXCLUDE from IM_ENDPOSTCLAIMDTL_EXCL where ENDORESMENTCODE=ENDORSEMENT_PK and CLAIMCODE=C.CLAIM_CODE;

INSERT INTO IM_ENDPOSTCLAIMDTL D
(D.INCLUDE_CLAIM,D.CLAIMDLTCODE, D.ENDORESMENTCODE, D.CLAIMCODE,
D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO)
VALUES
(ISEXCLUDE,(select nvl(max(CLAIMDLTCODE),100000000000000000)+1 from IM_ENDPOSTCLAIMDTL), ENDORSEMENT_PK,C.CLAIM_CODE,
SYSDATE, '100000000000000002', SYSDATE,
'100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_ENDPOSTCLAIMDTL));

end loop;

end if;

NGI_GETMAX_REC('IM_ENDPOSTCLAIMDTL','SERIALNO');
COMMIT;

select max(SUBDTLCODE),max(SERIALNO) into ASUBDTLCODEPKEY,ASUBDTLSERIALNO from IM_ENDORESMENTPOSTINGSUBDTL;

delete from IM_ENDORESMENTPOSTINGSUBDTL where ENDORESMENTCODE=ENDORSEMENT_PK;
insert into IM_ENDORESMENTPOSTINGSUBDTL (SUBDTLCODE, ENDORESMENTCODE, POLICYTYPECODE, POLICYID, POLICYNAME, DENIALAMOUNT, COMPANYCODE, LOCATIONCODE, SERIALNO, PROVIDERCODE, MEMBERCODE, GROUPCODE, CLAIMCODE, POLICYCODE, TYPECODE, AGENTCODE, BROKERCODE)
SELECT ASUBDTLCODEPKEY+rownum SUBDTLCODE,ENDORSEMENT_PK ENDORESMENTCODE, POLICYTYPECODE, POLICYID, POLICYNAME, (round(DENIALAMOUNT,2)*-1) DENIALAMOUNT,1 COMPANYCODE,1 LOCATIONCODE,ASUBDTLSERIALNO+rownum SERIALNO, PROVIDERCODE, MEMBERCODE, nvl(ASUBGROUPCODE,TBL.GROUPCODE) GROUPCODE,null CLAIMCODE, POLICYCODE, TYPECODE, AGENTCODE, BROKERCODE
FROM TABLE(sf_reverseendoresmentpostingpk(ENDORSEMENT_PK)) TBL;


SELECT MAX(DENIALAMOUNT) INTO L_RECOVERDENIALAMOUNT FROM IM_ENDORESMENTPOSTINGSUBDTL where ENDORESMENTCODE=ENDORSEMENT_PK;
IF L_RECOVERDENIALAMOUNT <> 0 AND L_RECOVERDENIALAMOUNT IS NOT NULL THEN
update IM_ENDORSEMENTPOSTING set AuthorizedStatus = 0 Where ENDORESMENTCODE=ENDORSEMENT_PK;
END IF;
NGI_GETMAX_REC('IM_ENDORESMENTPOSTINGSUBDTL','SERIALNO');
COMMIT;
RETURN 'OK';

END;

end;
/

