// Pay Roll Run Screen 
var GActivityType = 0;
var AbsPersonID = 0;
var AbsEmpName = '';
var DateMsg = 0;
var Employee_Absence_Code = '';
var Paymentfilter = 0;
var IsAddNewExistPatient = '';
var IsAddNewExistPatientArry = [];
var CollectionsSearchSelectID = '';
var DefaultClinicCode = 0;
var DefaultPatientType = 0;
var DefaultDHAType = 0;
var DefaultCoInsurer = '', DefaultDeductable = '', DefaultClaimSourseType = ''; DefaultReceptionCode = 1; MeOnlineClaimSelectedRecordRow = '';
var PayerSelectCount = 0; DefaultScreenCode = ''; var DefaultApprovedRequired = false;
function PYPayrolRun(form, login) {

    var PeriodCode = Ext.getCmp('PYPayrolRun-PeriodCode');
    var EmployeeCode = Ext.getCmp('PYPayrolRun-EmpCode');
    var PayrollCode = Ext.getCmp('PYPayrolRun-PayrollCode');
    var PrePaymentbtn = Ext.getCmp('PYPayrolRun-PrePaymentbtn');
    var Costingbtn = Ext.getCmp('PYPayrolRun-Costingbtn');
    var PAYbtn = Ext.getCmp('PYPayrolRun-PAYbtn');
    var TransferToGLbtn = Ext.getCmp('PYPayrolRun-TransferToGLbtn');

    if (PayrollCode) PayrollCode.on('select', function (combo, record, index) {
        PeriodCode.clearValue(); EmployeeCode.clearValue();

        // Clearing the Values 

        Ext.getCmp('PYPayrolRun-PeriodStart').setValue(null);
        Ext.getCmp('PYPayrolRun-PeriodEnd').setValue(null);
        Ext.getCmp('PYPayrolRun-RunStartAt').setValue(null);
        Ext.getCmp('PYPayrolRun-RunEndAt').setValue(null);
        Ext.getCmp('PYPayrolRun-Emplyoee').setValue(null);
        Ext.getCmp('PYPayrolRun-AssignmentSet').setValue(null);
        Ext.getCmp('PYPayrolRun-Element').setValue(null);
        Ext.getCmp('PYPayrolRun-ElementSet').setValue(null);
        Ext.getCmp('PYPayrolRun-Costed').setValue(null);
        Ext.getCmp('PYPayrolRun-PrePayment').setValue(null);
        Ext.getCmp('PYPayrolRun-TransferredToGL').setValue(null);
        Ext.getCmp('PYPayrolRun-Paid').setValue(null);
        Ext.getCmp('PYPayrolRun-Cheque').setValue(null);
        Ext.getCmp('PYPayrolRun-Close').setValue(null);
        Ext.getCmp('PYPayrolRun-PaymentNumber').setValue(null);
        Ext.getCmp('PYPayrolRun-JVName').setValue(null);;

    }, this);

    if (PayrollCode) PayrollCode.on('clear', function (e) {
        PeriodCode.clearValue(); EmployeeCode.clearValue();
    }, this);

    if (PeriodCode) PeriodCode.on('beforequery', function (evt) {
        var PayrollCode = Ext.getCmp('PYPayrolRun-PayrollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PERIOD_CODE in (select PY.PERIOD_CODE from PY_Payroll_Periods PY where PY.PAYROLL_CODE=" + PayrollCode + ")";
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var PayrollCode = Ext.getCmp('PYPayrolRun-PayrollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " Sysdate Between Emp.Effective_Start_Date and NVL(Emp.Effective_End_Date,Sysdate) and  Emp.PAYROLL_CODE = " + PayrollCode;
    }, this);

    var Lines = Ext.getCmp('PYPayrolRunDetailList');
    Lines.on('rowclick', function (grid, rowIndex, Record) {
        var Record = grid.store.getAt(rowIndex);
        Ext.getCmp('PYPayrolRun-PeriodStart').setValue(Record.get('Start_Date'));
        Ext.getCmp('PYPayrolRun-PeriodEnd').setValue(Record.get('End_Date'));
        Ext.getCmp('PYPayrolRun-RunStartAt').setValue(Record.get('Start_at'));
        Ext.getCmp('PYPayrolRun-RunEndAt').setValue(Record.get('End_at'));
        Ext.getCmp('PYPayrolRun-Emplyoee').setValue(Record.get('EmployeeName'));
        Ext.getCmp('PYPayrolRun-AssignmentSet').setValue(Record.get('Assignment_setName'));
        Ext.getCmp('PYPayrolRun-Element').setValue(Record.get('ElementName'));
        Ext.getCmp('PYPayrolRun-ElementSet').setValue(Record.get('Element_setName'));
        Ext.getCmp('PYPayrolRun-Costed').setValue(Record.get('Costing'));
        Ext.getCmp('PYPayrolRun-PrePayment').setValue(Record.get('Prepayment'));
        Ext.getCmp('PYPayrolRun-TransferredToGL').setValue(Record.get('Transfer_to_gl'));
        Ext.getCmp('PYPayrolRun-Paid').setValue(Record.get('Pay'));
        Ext.getCmp('PYPayrolRun-Cheque').setValue(Record.get('Cheque'));
        Ext.getCmp('PYPayrolRun-Close').setValue(Record.get('Close_period'));
        Ext.getCmp('PYPayrolRun-PaymentNumber').setValue(Record.get('Misc_payment_id'));
        Ext.getCmp('PYPayrolRun-JVName').setValue(Record.get('Jv_id'));

        var Close = Ext.getCmp('PYPayrolRun-Close').getValue();
        if (Close == true) {
            PrePaymentbtn.disable();
            Costingbtn.disable();
            PAYbtn.disable();
            TransferToGLbtn.disable();
        }
        else {
            PrePaymentbtn.enable();
            Costingbtn.enable();
            PAYbtn.enable();
            TransferToGLbtn.enable();
        }
    }, this);

    var PYPayrolRunDetailList = Ext.getCmp('PYPayrolRunDetailList');
    Ext.getCmp('PYPayrolRunDetailList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Ext.getCmp('PYPayrolRunDetailList').selectedAttdID = Record.get('ID');
    }, this);
}

// PayRoll Run Find Button Function 
function PayrollRunFindHandler(form, login) {

    var FilterQry = '';
    var PeriodCode = Ext.getCmp('PYPayrolRun-PeriodCode');
    var EmployeeCode = Ext.getCmp('PYPayrolRun-EmpCode');
    var PayrollCode = Ext.getCmp('PYPayrolRun-PayrollCode');

    if (PayrollCode.getValue() != '' && PayrollCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyr.PAYROLL_ID=" + PayrollCode.getValue();
        else
            FilterQry += " and pyr.PAYROLL_ID=" + PayrollCode.getValue();
    }

    if (PeriodCode.getValue() != '' && PeriodCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyr.PERIOD_ID=" + PeriodCode.getValue();
        else
            FilterQry += " and pyr.PERIOD_ID=" + PeriodCode.getValue();
    }

    if (EmployeeCode.getValue() != '' && EmployeeCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " Run_code in (Select Run_ID from py_payroll_assignment_results where EMPLOYEE=" + EmployeeCode.getValue() + ")";
        else
            FilterQry += " and Run_code in (Select Run_ID from py_payroll_assignment_results where EMPLOYEE=" + EmployeeCode.getValue() + ")";
    }

    FilterQry = encodeURIComponent(FilterQry);
    DetailStore = Ext.getCmp('PYPayrolRunDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYPayrolRunDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}
function PayRolrunFindButtonHandler(form, login) {

}

// PayRoll Run Button - Pop Up the New Window and Inserting the Values in the Grid 

function PayRollButton(form, login) {
    var Primkey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    /*
    if (!Ext.getCmp('PYPayrolRunDetailList').selectedAttdID) {

        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }
    */
    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'getPayRollRunForm'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', getPayRollRunFormReqComplete, this);

        }
    }, this);


}

function getPayRollRunFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', getPayRollRunFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.GeneratePayrollRunForm = new Ext.form.FormPanel(responseText.PayrollCofig);
    this.GeneratePayrollRunForm.addButton({
        text: 'OK',
        handler: function () { // Getting the Values of the Pop window and Passing the Values

            var Payroll = Ext.getCmp('PayRollRun-Payroll_Code').getValue();
            var Period = Ext.getCmp('PayRollRun-Period_Code').getValue();
            var Assignment_setCode = Ext.getCmp('PayRollRun-Assignment_setCode').getValue();
            var Element_setCode = Ext.getCmp('PayRollRun-Element_setCode').getValue();
            var ElementCode = Ext.getCmp('PayRollRun-ElementCode').getValue();
            var EmployeeCode = Ext.getCmp('PayRollRun-EmployeeCode').getValue();
            Ext.MessageBox.wait('Pay Roll Progress....', login.modulename);
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'GeneratePayRollRunProcess',
                    P_Payroll_ID: (Payroll == '' ? 0 : Payroll), // Checking the Null Values
                    P_Period_ID: (Period == '' ? 0 : Period),
                    P_Assignment_Set_Id: (Assignment_setCode == '' ? 0 : Assignment_setCode),
                    P_Element_Set_ID: (Element_setCode == '' ? 0 : Element_setCode),
                    P_Element_ID: (ElementCode == '' ? 0 : ElementCode),
                    P_Person_ID: (EmployeeCode == '' ? 0 : EmployeeCode),
                    P_Started: 1
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PayrollprocessrequestComplete, this);

        },
        scope: this,
        formBind: true,
        tabIndex: this.GeneratePayrollRunForm.FormFieldsCount + 2
    });
    this.GeneratePayrollRunForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.GeneratePayrollRunFormWindow.close();

            Ext.getCmp('PYPayrolRunDetailList').store.load({
                params: {
                    start: 0,
                    limit: 15
                }
            });
        },
        scope: this,
        tabIndex: this.GeneratePayrollRunForm.FormFieldsCount + 2

    });
    this.GeneratePayrollRunFormWindow = new Ext.Window({
        id: 'GeneratePayrollRunFormWindow',
        title: 'PayRoll Run',
        closable: true,
        minimizable: false,
        width: this.GeneratePayrollRunForm.width + 10,
        height: this.GeneratePayrollRunForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.GeneratePayrollRunForm]
    });

    this.GeneratePayrollRunForm.on('render', GeneratePayrollRunFormRender, this);
    this.GeneratePayrollRunFormWindow.show();
}

function PayrollprocessrequestComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', PayrollprocessrequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        //var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        Ext.getCmp('PYPayrolRunDetailList').store.load({
            params: {
                start: 0,
                limit: 15
            }
        });
    }
}

function PayrollprocessrequestCompleteOld(conn, response) {
    Ext.Ajax.un('requestcomplete', PayrollprocessrequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    try {
        Ext.MessageBox.hide();
    }
    catch (e) {
        var er = 1;
    }
    Ext.MessageBox.wait(responseText.Msg, login.modulename);
    /*
    Ext.MessageBox.show({
        title: login.modulename,
        msg: responseText.Msg,
        buttons: Ext.MessageBox.OK
    });
    */
    //Ext.MessageBox.alert(login.modulename, responseText.Msg);
    if (typeof (responseText.PendingImages) != 'undefined' && (responseText.PendingImages == '-1' || responseText.PendingImages == '0')) {
        Ext.MessageBox.hide();
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }

    var Payroll = Ext.getCmp('PayRollRun-Payroll_Code').getValue();
    var Period = Ext.getCmp('PayRollRun-Period_Code').getValue();
    var Assignment_setCode = Ext.getCmp('PayRollRun-Assignment_setCode').getValue();
    var Element_setCode = Ext.getCmp('PayRollRun-Element_setCode').getValue();
    var ElementCode = Ext.getCmp('PayRollRun-ElementCode').getValue();
    var EmployeeCode = Ext.getCmp('PayRollRun-EmployeeCode').getValue();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'GeneratePayRollRunProcess',
            P_Payroll_ID: (Payroll == '' ? 0 : Payroll), // Checking the Null Values
            P_Period_ID: (Period == '' ? 0 : Period),
            P_Assignment_Set_Id: (Assignment_setCode == '' ? 0 : Assignment_setCode),
            P_Element_Set_ID: (Element_setCode == '' ? 0 : Element_setCode),
            P_Element_ID: (ElementCode == '' ? 0 : ElementCode),
            P_Person_ID: (EmployeeCode == '' ? 0 : EmployeeCode),
            P_Started: 0
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PayrollprocessrequestComplete, this);
}

function GeneratePayrollRunFormRender(form, login) {

    var Period_Code = Ext.getCmp('PayRollRun-Period_Code');
    var Start_Date = Ext.getCmp('PayRollRun-Start_Date');
    var End_Date = Ext.getCmp('PayRollRun-End_Date');
    var EmployeeCode = Ext.getCmp('PayRollRun-EmployeeCode');
    var Payroll_Code = Ext.getCmp('PayRollRun-Payroll_Code');
    var Assignment_setCode = Ext.getCmp('PayRollRun-Assignment_setCode');

    if (Payroll_Code) Payroll_Code.on('select', function (combo, record, index) {
        Period_Code.clearValue(); EmployeeCode.clearValue(); Assignment_setCode.clearValue();
    }, this);

    if (Payroll_Code) Payroll_Code.on('clear', function (e) {
        Period_Code.clearValue(); EmployeeCode.clearValue(); Assignment_setCode.clearValue();
    }, this);

    if (Assignment_setCode) Assignment_setCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    if (Assignment_setCode) Assignment_setCode.on('clear', function (e) {
        EmployeeCode.clearValue();
    }, this);


    if (Period_Code) Period_Code.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PayRollRun-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PERIOD_CODE in (select pyperiod.PERIOD_CODE from py_payroll_periods pyperiod where pyperiod.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);


    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PayRollRun-Payroll_Code').editValue;
        var Assignment_setCode = Ext.getCmp('PayRollRun-Assignment_setCode').editValue;
        var Period_Code = Ext.getCmp('PayRollRun-Period_Code').editValue;
        if (Payroll_Code != 0) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " PERSON_CODE in (select hper.PERSON_CODE from GEN_CONTACTS hper where hper.PAYROLL_CODE=" + Payroll_Code + ")";
        }

        if (Payroll_Code != 0 && Assignment_setCode != 0) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " PAYROLL_CODE=" + Payroll_Code + " and PERSON_CODE in (select PERSON_CODE from PY_AssignmentS_set_DETAILS where ASSIGNMENT_SET_CODE=" + Assignment_setCode + ")";
        }

        //if (Payroll_Code = 0 && Assignment_setCode == 0 && Period_Code == 0) {
        //    evt.combo.lastQuery = '1=2';
        //    evt.combo.store.baseParams.filter = "1=1";
        //}
    }, this);


    if (Assignment_setCode) Assignment_setCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PayRollRun-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ASSIGNMENT_SET_CODE in (select Pyass.ASSIGNMENT_SET_CODE from PY_ASSIGNMENTS_SET_HEADER Pyass where Pyass.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

}

function GeneratePayRollRunComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', GeneratePayRollRunComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        this.GeneratePayrollRunFormWindow.close();
        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}

// PayRoll Run- PrePayment Button
function PYPrePaymentButtonHandler(form, login) {

    var PrePayment = Ext.getCmp('PYPayrolRun-PrePayment').getValue();
    if (PrePayment == true) {
        Ext.MessageBox.alert(login.modulename, 'Already Pre Payment Done !');
        return;
    }
    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!PrimKey) {
        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }


    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PrePayment',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PrePaymentClosed, this);

        }
    }, this);

}

function PrePaymentClosed(conn, response) {
    Ext.Ajax.un('requestcomplete', PrePaymentClosed, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}

//PayRoll Run Costing Button
function PayRollRunCostingButtonHandler(form, login) {

    var PrePayment = Ext.getCmp('PYPayrolRun-Costed').getValue();
    if (PrePayment == true) {
        Ext.MessageBox.alert(login.modulename, 'Already Costing Done !');
        return;
    }

    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!Ext.getCmp('PYPayrolRunDetailList').selectedAttdID) {
        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'Costing',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', CostingClosed, this);

        }
    }, this);

}

function CostingClosed(conn, response) {
    Ext.Ajax.un('requestcomplete', CostingClosed, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}


function PayRollRunCloseButtonHandler(form, login) {

    var Close = Ext.getCmp('PYPayrolRun-Close').getValue();
    var PrePaymentbtn = Ext.getCmp('PYPayrolRun-PrePaymentbtn');
    var Costingbtn = Ext.getCmp('PYPayrolRun-Costingbtn');
    var PAYbtn = Ext.getCmp('PYPayrolRun-PAYbtn');
    var TransferToGLbtn = Ext.getCmp('PYPayrolRun-TransferToGLbtn');

    if (Close == true) {
        Ext.MessageBox.alert(login.modulename, ' Pay Roll Run Closed !');
        return;
    }
    PrePaymentbtn.disable();
    Costingbtn.disable();
    PAYbtn.disable();
    TransferToGLbtn.disable();

    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;

    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'Close',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', RunClosed, this);

        }
    }, this);

}

function RunClosed(conn, response) {
    Ext.Ajax.un('requestcomplete', RunClosed, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();

    }
}

// PayRoll Run RollBack Button

function PayRollRunRollBackButtonHandler(form, login) {
    var Primkey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!Primkey) {
        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'getRollBackForm'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', getRollBackFormReqComplete, this);

        }
    }, this);


}

function getRollBackFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', getRollBackFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.GenerateRollBackForm = new Ext.form.FormPanel(responseText.RollBackCofig);
    this.GenerateRollBackForm.addButton({
        text: 'OK',
        handler: function () { // Getting the Values of the Pop window and Passing the Values

            var RollBackCode = Ext.getCmp('PayRollRunRollBack-RollBackCode').getValue();
            var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'GenerateRollBack',
                    RollBack: RollBackCode,
                    PrimKey: PrimKey

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', GenerateRollBackComplete, this);

        },
        scope: this,
        tabIndex: this.GenerateRollBackForm.FormFieldsCount + 2
    });
    this.GenerateRollBackForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.GenerateRollBackFormWindow.close();
        },
        scope: this,
        tabIndex: this.GenerateRollBackForm.FormFieldsCount + 2
    });
    this.GenerateRollBackFormWindow = new Ext.Window({
        id: 'GenerateRollBackFormWindow',
        title: 'RollBack',
        closable: true,
        minimizable: false,
        width: this.GenerateRollBackForm.width + 10,
        height: this.GenerateRollBackForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.GenerateRollBackForm]
    });

    this.GenerateRollBackFormWindow.show();

}


function GenerateRollBackComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', GenerateRollBackComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        this.GenerateRollBackFormWindow.close();
        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}

// PayRoll Run PAY Button
function PayRollRunPayButtonHandler(form, login) {

    var Paid = Ext.getCmp('PYPayrolRun-Paid').getValue();
    if (Paid == true) {
        Ext.MessageBox.alert(login.modulename, 'Payment Already Processed !');
        return;
    }

    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!Ext.getCmp('PYPayrolRunDetailList').selectedAttdID) {

        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'Pay',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PayClosed, this);

        }
    }, this);


}

function PayClosed(conn, response) {
    Ext.Ajax.un('requestcomplete', PayClosed, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}

// PayRoll Run Transfer To GL Button 

function TransferToGLButtonHandler(form, login) {

    var TransferredToGL = Ext.getCmp('PYPayrolRun-TransferredToGL').getValue();
    if (TransferredToGL == true) {
        Ext.MessageBox.alert(login.modulename, 'Transfer To GL Already Processed !');
        return;
    }

    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!Ext.getCmp('PYPayrolRunDetailList').selectedAttdID) {

        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'TransferGL',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', TransferClosedComplete, this);

        }
    }, this);


}

function TransferClosedComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', TransferClosedComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}



// PayRoll Run Cheque Button

function PayRollRunChequeButtonHandler(form, login) {

    var Cheque = Ext.getCmp('PYPayrolRun-Cheque').getValue();
    if (Cheque == true) {
        Ext.MessageBox.alert(login.modulename, ' PayRoll Run- Cheque Already Completed  !');
        return;
    }

    var PrimKey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;

    Ext.MessageBox.confirm(login.modulename, 'Are you sure, you want to make this operation ?', function (button) {
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'Cheque',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', ChequeClosed, this);

        }
    }, this);


}

function ChequeClosed(conn, response) {
    Ext.Ajax.un('requestcomplete', ChequeClosed, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('PYPayrolRunDetailList').getStore();
        store.reload();
    }
}

// PayRoll RunResult Button 

function ViewPayrollHandler(form, login) {

    var Primkey = Ext.getCmp('PYPayrolRunDetailList').selectedAttdID;
    if (!Ext.getCmp('PYPayrolRunDetailList').selectedAttdID) {

        Ext.MessageBox.alert(login.modulename, 'Please Select the Payroll Detail to View Payroll !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewPayroll',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewPayrollComplete, this);
}

function ViewPayrollComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ViewPayrollComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.ViewPayrollForm = new Ext.form.FormPanel(responseText.ViewPayrollCofig);
    this.ViewPayrollForm.addButton({
        text: 'CLOSE',
        handler: function () {
            Ext.MessageBox.confirm(login.modulename, 'Are You sure to close the window?', function (button) {
                if (button == 'yes') {
                    this.ViewPayrollFormWindow.close();
                }
            }, this);
        },

        scope: this,
        tabIndex: this.ViewPayrollForm.FormFieldsCount + 2
    });

    this.ViewPayrollFormWindow = new Ext.Window({
        id: 'ViewPayrollFormWindow',
        title: 'View Payroll',
        closable: true,
        minimizable: false,
        width: this.ViewPayrollForm.width + 10,
        height: this.ViewPayrollForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ViewPayrollForm]
    });

    this.ViewPayrollForm.on('render', ViewPayrollFormWindowRendeer, this);

    this.ViewPayrollFormWindow.show();

}

// View Payroll Load and RowSelect Event

function ViewPayrollFormWindowRendeer(form, login) {

    var Lines = Ext.getCmp('PYPayrollPayslipVList').getStore();
    var PYPayRollAvgResultViewList = Ext.getCmp('PYPayRollAvgResultViewList').getStore();
    var MonthlyTotal = Ext.getCmp('PYPayrollRunResults-MonthlyTotal');
    var TotalEarningCtl = Ext.getCmp('PYPayrollRunResults-Earning');
    var TotalDeductionCtl = Ext.getCmp('PYPayrollRunResults-Deduction');
    var TotalAmountCtl = Ext.getCmp('PYPayrollRunResults-Total');


    Lines.on('load', function (store, records, options) {

        var TotalEarning = 0;
        var TotalDeduction = 0;
        var TotalAmount = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TotalEarning += (1 * record.get('Earning'));
            TotalDeduction += (1 * record.get('Deduction'));
        }
        TotalAmount = (TotalEarning - TotalDeduction);

        TotalEarningCtl.setValue(TotalEarning);
        TotalDeductionCtl.setValue(TotalDeduction);
        TotalAmountCtl.setValue(TotalAmount);

    }, this);

    PYPayRollAvgResultViewList.on('load', function (store, records, options) {

        var TotalAmt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TotalAmt += (1 * record.get('Net_Value'));

        }
        MonthlyTotal.setValue(TotalAmt);

    }, this);


    var PYPayrollCosting = Ext.getCmp('PYPayrollCostingResultVList').getSelectionModel();

    var PYPayrollCost = Ext.getCmp('PYPayrollCostingResultVList');

    PYPayrollCosting.on('rowselect', function (SelectionModel, rowIndex, Record) {

        Ext.getCmp('PYPayrollRunResult-CostFactorDescription').setValue(Record.get('Account_CodeDisplay'));
        Ext.getCmp('PYPayrollRunResult-AccountName').setValue(Record.get('Account_CodeDisplay'));
    }, this);

    PYPayrollCost.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        Ext.getCmp('PYPayrollRunResult-CostFactorDescription').setValue(Record.get('Account_CodeDisplay'));
        Ext.getCmp('PYPayrollRunResult-AccountName').setValue(Record.get('Account_CodeDisplay'));
    }, this);


}


function AbsenceAfterPayrollConfirmButtonHandler(form, login) {

    alert('Confirm Button Called !');
}

function AbsenceAfterPayrollPaymentButtonHandler(form, login) {

    alert('Payment Button Called !');
}

function AbsenceAfterPayrollFindButtonHandler(form, login) {

    alert('Find Button Called !');
}

function AbsenceAfterPayrollShowButtonHandler(form, login) {



}

function AbsenceAfterPayrollPostButtonHandler(form, login) {

    var Employee = Ext.getCmp('HRAbsenceAfterPayroll-Person_Code').getValue();
    var FilterDate = Ext.getCmp('HRAbsenceAfterPayroll-Att_Date').getValue();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Time_Post',
            Employee: (Employee == '' ? 0 : Employee),
            FilterDate: (FilterDate == '' ? 0 : FilterDate)


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostTimeStatus, this);
}

function PostTimeStatus(conn, response) {
    Ext.Ajax.un('requestcomplete', PostTimeStatus, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();
        store.reload();
    }
}



function ActiveAbsenceFindHandler(form, login) {
    var FilterQry = '';
    var Name = Ext.getCmp('HRAbsenceAfterPayroll-FullName');
    var Absence_Code = Ext.getCmp('HRAbsenceAfterPayroll-Absence_Code');

    if (Name.getValue() != '' && Name.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(hrname.FULLNAME) like upper('%" + Name.getValue() + "%')");
        else
            FilterQry += (" and upper(hrname.FULLNAME) like upper('%" + Name.getValue() + "%')");
    }

    if (Absence_Code.getValue() != '' && Absence_Code.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "hrab.ABSENCE_CODE=" + Absence_Code.getValue();
        else
            FilterQry += " and hrab.ABSENCE_CODE=" + Absence_Code.getValue();
    }

    if (FilterQry == '') {
        FilterQry = "1=2";
    }
    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('ActiveAbsencesList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.ActiveAbsences&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

    DetailStore = Ext.getCmp('HRDeletedAbsencesList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.HRDeletedAbsences&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

    var FilterQry1 = '';
    if (Name.getValue() != '' && Name.getValue() != null) {
        if (FilterQry1 == '')
            FilterQry1 += ("upper(hrname.FULLNAME) like upper('%" + Name.getValue() + "%')");
        else
            FilterQry1 += (" and upper(hrname.FULLNAME) like upper('%" + Name.getValue() + "%')");
    }

    FilterQry1 = encodeURIComponent(FilterQry1);

    DetailStore = Ext.getCmp('HRAbsenceTicketList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.HRAbsenceTicket&filter=" + FilterQry1;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
    Ext.getCmp('HRAbsenceAfterPayroll-TotalAmount').setValue(null);
    Ext.getCmp('HRAbsenceAfterPayroll-Comments').setValue(null);
    var grdFunctionality = Ext.getCmp('HRTicketDetailList');
    if (grdFunctionality.store.getCount() > 0) {
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
    }


    var FilterQry2 = '';
    if (Name.getValue() != '' && Name.getValue() != null) {
        if (FilterQry2 == '')
            FilterQry2 += ("upper(hrattd.FULLNAME) like upper('%" + Name.getValue() + "%')");
        else
            FilterQry2 += (" and upper(hrattd.FULLNAME) like upper('%" + Name.getValue() + "%')");
    }

    FilterQry2 = encodeURIComponent(FilterQry2);

    DetailStore = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYAttendanceTimeEntriesDetail&filter=" + FilterQry2;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }


}


// Define Absences Screen
function Absence(form, login) {

    var BaseElement_Code = Ext.getCmp('Absence-BaseElement_Code');
    var AbsenceCode = Ext.getCmp('Absence-AbsencesCode');
    Ext.getCmp('Absence-Balance_Code').on('select', function (combo, record, index) {
        BaseElement_Code.clearValue();
    }, this);
    if (BaseElement_Code) BaseElement_Code.on('beforequery', function (evt) {
        var Balance_Code = Ext.getCmp('Absence-Balance_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ELEMENT_CODE in (select ELM.ELEMENT_CODE from PY_BALANCE_ELEMENTS ELM where ELM.BALANCE_CODE=" + Balance_Code + ")";
    }, this);

    if (AbsenceCode) AbsenceCode.on('beforequery', function (evt) {
        var Balance_Code = Ext.getCmp('Absence-Balance_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ELEMENT_CODE in (select ELM.ELEMENT_CODE from PY_BALANCE_ELEMENTS ELM where ELM.BALANCE_CODE=" + Balance_Code + ")";
    }, this);
}

// Absence After Payroll Screen 
function HRAbsenceAfterPayroll(form, login) {

    var ActiveAbsencesList = Ext.getCmp('ActiveAbsencesList');
    Ext.getCmp('ActiveAbsencesList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Ext.getCmp('HRAbsenceAfterPayroll-Comments').setValue(Record.get('Comments'))
    }, this);

    ActiveAbsencesList.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        Ext.getCmp('HRAbsenceAfterPayroll-Comments').setValue(Record.get('Comments'));
    }, this);

    // Sum of the Basic Hours and Basic Overtime Hours
    var grdhour = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
    var TotalBasicHours = Ext.getCmp('HRAbsenceAfterPayroll-TotalBasicHours');
    var TotalOvertimeHours = Ext.getCmp('HRAbsenceAfterPayroll-TotalOvertimeHours');
    grdhour.on('afteredit', function (e) {
        var TtlBasicHrs = 0;
        var TtlOvertimeHrs = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            TtlBasicHrs += (1 * e.grid.store.getAt(i).get('Basic_Hours'));
            TtlOvertimeHrs += (1 * e.grid.store.getAt(i).get('Overtime_Hours'));
        }
        TotalBasicHours.setValue(TtlBasicHrs);
        TotalOvertimeHours.setValue(TtlOvertimeHrs);
    }, this);


    grdhour.filter = null;
    grdhour.store.on('load', TotalHrs, this);

    function TotalHrs(store, result) {
        var grdtck = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
        var TotalBasicHours = Ext.getCmp('HRAbsenceAfterPayroll-TotalBasicHours');
        var TotalOvertimeHours = Ext.getCmp('HRAbsenceAfterPayroll-TotalOvertimeHours');
        var bhrs = 0;
        var ohrs = 0;
        for (i = 0; i < store.getCount() ; i++) {
            bhrs += (store.getAt(i).get('Basic_Hours') * 1);
            ohrs += (store.getAt(i).get('Overtime_Hours') * 1);

        }
        TotalBasicHours.setValue(bhrs);
        TotalOvertimeHours.setValue(ohrs);
    }



    //Sum of Acutal Price in the Ticket Grid

    var grdticket = Ext.getCmp('HRTicketDetailList');
    var ticket = Ext.getCmp('HRTicket');


    var HRTicketDetailList = Ext.getCmp('HRTicketDetailList');
    HRTicketDetailList.filter = null;
    HRTicketDetailList.store.on('load', TotalAmt, this);

    function TotalAmt(store, result) {
        var grdtck = Ext.getCmp('HRTicketDetailList');
        var TotalAmount = Ext.getCmp('HRAbsenceAfterPayroll-TotalAmount');
        var amt = 0;
        for (i = 0; i < store.getCount() ; i++) {
            amt += (store.getAt(i).get('Actual_Amount') * 1);
        }
        TotalAmount.setValue(amt);
    }

    var ActiveAbsencesList = Ext.getCmp('ActiveAbsencesList');
    Ext.getCmp('ActiveAbsencesList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Ext.getCmp('ActiveAbsencesList').selectedAbsenceID = Record.get('ID');
        Ext.getCmp('ActiveAbsencesList').selectedAbsenceStatus = Record.get('StatusCode');
        Ext.getCmp('ActiveAbsencesList').selectedAbsenceEmp = Record.get('EmployeeCode');
        Ext.getCmp('ActiveAbsencesList').selectedAbsenceStartDate = Record.get('Start_Date');

    }, this);

    Ext.getCmp('ActiveAbsencesList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Ext.getCmp('ActiveAbsencesList').selectedLoanID = Record.get('Loan_Id');
    }, this);


    Ext.getCmp('HRAbsenceTicketList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Ext.getCmp('HRAbsenceTicketList').SelectedTicketID = Record.get('ID');
        Ext.getCmp('HRAbsenceTicketList').SelectedEmpID = Record.get('EmployeeCode');
        Ext.getCmp('HRAbsenceTicketList').SelectedStatus = Record.get('StatusCode');
    }, this);
}

function HR_PersonD(form, login) {

    AutoPost = form.form.findField('HR_PersonD-AutoPosting');
    AutoPost.on('check', HrAutoPostCheck, this);
    if (!form.isView) {
        var HR_ElementList = Ext.getCmp('HR_ElementList');
        var NumberTotal = Ext.getCmp('HR_PersonD-NumberTotal');
        var AmountTotal = Ext.getCmp('HR_PersonD-AmountTotal');
        var Attendance = Ext.getCmp('HR_PersonD-Attendance').setValue(true);
        var Country_Code = Ext.getCmp('HR_PersonD-Country_Code');
        var CityCode = Ext.getCmp('HR_PersonD-City_Code');
        var Area_Code = Ext.getCmp('HR_PersonD-Area_Code');

        if (CityCode) CityCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + Country_Code.editValue + "";
        }, this);

        if (Area_Code) Area_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + CityCode.editValue + "";
        }, this);

        HR_ElementList.on('afteredit', function (e) {
            var TotalDays = 0;
            var Totalamount = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var Total = 0;

                if (e.grid.store.getAt(i).get('BalanceTypeCode') == 0)

                    TotalDays += (1 * e.grid.store.getAt(i).get('InputValue'));

                else if (e.grid.store.getAt(i).get('BalanceTypeCode') == 1) {

                    Totalamount += (1 * e.grid.store.getAt(i).get('InputValue'));
                }

            }


            NumberTotal.setValue(TotalDays);
            AmountTotal.setValue(Totalamount);

        }, this);

        var HR_ElementList = Ext.getCmp('HR_ElementList').getStore();
        HR_ElementList.on('load', function (store, record, options) {
            var TotalDays1 = 0;
            var Totalamount1 = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('BalanceTypeCode') == 0)
                    if (record.get('IsDeleted') == false) TotalDays1 += (1 * record.get('InputValue'));

                if (record.get('BalanceTypeCode') == 1) {
                    if (record.get('IsDeleted') == false) Totalamount1 += (1 * record.get('InputValue'));
                }
            }

            NumberTotal.setValue(TotalDays1);
            AmountTotal.setValue(Totalamount1);
        }, this);

    }

    if (form.selectedIndex != -1 && !form.isView) {
        if (AutoPost.getValue() == 1) Ext.getCmp('HR_PersonD-SponsorCode').disable();
        var Payment_TypeCode = Ext.getCmp('HR_PersonD-Payment_Type');


        if (Payment_TypeCode.editValue == 1) {
            var BankCode = Ext.getCmp('HR_PersonD-BankCode');
            var BranchCode = Ext.getCmp('HR_PersonD-BranchCode');
            var AccountNumber = Ext.getCmp('HR_PersonD-AccountNumber');
            BankCode.enable();
            BranchCode.enable();
            AccountNumber.enable();
        }

    }

    if (form.SelectedIndex != -1 && !form.isView) {

        if (isAdditinalInfoValue != 0) {
            var hrtitle = Ext.getCmp('HR_PersonD-TitleCode');
            hrtitle.setComboValue(isAdditinalInfoValue);
            var ArabicName = Ext.getCmp('HR_PersonD-ArabicName');
            var EmployeeFullName = Ext.getCmp('HR_PersonD-EmployeeFullName');
            hrtitle.disable();
            ArabicName.disable();
            EmployeeFullName.disable();
        }
    }

    var AttendanceShift = Ext.getCmp('HR_PersonD-AttendanceShiftsType');


    var Regulartemplate = Ext.getCmp('HR_PersonD-RegularTemplateCode');
    var IrRegularTemplate = Ext.getCmp('HR_PersonD-IrRegularTemplateCode')

    if (form.selectedIndex == -1) {
        Regulartemplate.disable();
        IrRegularTemplate.disable();
    }
    else {
        if (AttendanceShift.editValue == 0) {
            IrRegularTemplate.enable();
            Regulartemplate.disable();
        }
        else {
            Regulartemplate.enable();
            IrRegularTemplate.disable();
        }
    }


    AttendanceShift.on('select', function (combo, record, index) {
        if (AttendanceShift.editValue == 0) {
            Regulartemplate.clearValue();
            Regulartemplate.disable();
            Regulartemplate.allowBlank = true;

            IrRegularTemplate.clearValue();
            IrRegularTemplate.enable();
            IrRegularTemplate.allowBlank = false;
            IrRegularTemplate.isValid();

        }
        if (AttendanceShift.editValue == 1) {
            Regulartemplate.clearValue();
            Regulartemplate.enable();
            Regulartemplate.allowBlank = false;
            Regulartemplate.isValid();

            IrRegularTemplate.clearValue();
            IrRegularTemplate.disable();
            IrRegularTemplate.allowBlank = true;
        }
    }, this);

    if (AttendanceShift) AttendanceShift.on('clear', function (combo, record, index) {
        IrRegularTemplate.clearValue();
        IrRegularTemplate.allowBlank = true;
        IrRegularTemplate.disable();

        Regulartemplate.clearValue();
        Regulartemplate.allowBlank = true;
        Regulartemplate.disable();
    }, this)


    /* if (form.selectedIndex == -1) {
   
         Ext.getCmp('HR_PersonD-AttendanceShiftsType').setComboValue(0);
         //Ext.getCmp('HR_PersonD-AttendanceShiftsType').disable();
     }
     
     var Regulartemplate = Ext.getCmp('HR_PersonD-RegularTemplateCode');
     var IrRegularTemplate = Ext.getCmp('HR_PersonD-IrRegularTemplateCode')
   
   
     AttendanceShift.on('select', function (combo, record, index) {
         Attendance = combo.getValue();
         if (Attendance == 1) {
             Regulartemplate.clearValue();
             IrRegularTemplate.clearValue();
             Regulartemplate.disable();          
         }
         else {
             Regulartemplate.enable();        
         }
     }, this);
   
     var OrganizationCode = Ext.getCmp('HR_PersonD-OrgCode');
     var DepartmentCode = Ext.getCmp('HR_PersonD-DepartmentCode');
   
     OrganizationCode.on('select', function (combo, record, index) {
         DepartmentCode.clearValue();
     }, this);
   
     if (DepartmentCode) DepartmentCode.on('beforequery', function (evt) {
         var OrganizationCode = Ext.getCmp('HR_PersonD-OrgCode').editValue;
         evt.combo.lastQuery = '1=2';
         evt.combo.store.baseParams.filter = "Organizations_Code =" + OrganizationCode + "";
     }, this);
   
     */
    var PersonType = Ext.getCmp('HR_PersonD-TypeCode');
    var Payment_TypeCode = Ext.getCmp('HR_PersonD-Payment_Type');
    var BankCode = Ext.getCmp('HR_PersonD-BankCode');
    var BranchCode = Ext.getCmp('HR_PersonD-BranchCode');
    var AccountNumber = Ext.getCmp('HR_PersonD-AccountNumber');
    var Emp_No = Ext.getCmp('HR_PersonD-Employee_Number');
    var ApplicantNumber = Ext.getCmp('HR_PersonD-ApplicantNumber');
    var HireDate = Ext.getCmp('HR_PersonD-HireDate');
    var OrgHireDate = Ext.getCmp('HR_PersonD-OrgHireDate');
    OrgHireDate.disable();
    var EndDate = Ext.getCmp('HR_PersonD-EndDate');
    var paymethod = 0;



    var ProUnitCode = Ext.getCmp('HR_PersonD-ProUnitCode');
    var Lenght = Ext.getCmp('HR_PersonD-Lenght');
    /* Lenght.on('valid', function (field) {

         if (ProUnitCode.editValue == 0 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var Dateoffset = Lenght.getValue() * (24 * 60 * 60 * 1000); // Days
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }
         else if (ProUnitCode.editValue == 1 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var TempMonth = Lenght.getValue() * 30;
             var Dateoffset = TempMonth * (24 * 60 * 60 * 1000); // Months
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }
         else if (ProUnitCode.editValue == 2 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var TempYears = Lenght.getValue() * 30 * 12;
             var Dateoffset = TempYears * (24 * 60 * 60 * 1000); // Years
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }
     }, this);
     ProUnitCode.on('select', function (combo, record, index) {

         if (combo.getValue() == 0 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var Dateoffset = Lenght.getValue() * (24 * 60 * 60 * 1000); // Days
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }
         else if (combo.getValue() == 1 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var TempMonth = Lenght.getValue() * 30;
             var Dateoffset = TempMonth * (24 * 60 * 60 * 1000); // Months
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }
         else if (combo.getValue() == 2 && (EndDate.getValue() == '' || EndDate.getValue() == null)) {
             var TempYears = Lenght.getValue() * 30 * 12;
             var Dateoffset = TempYears * (24 * 60 * 60 * 1000); // Years
             EndDate.setValue(new Date(HireDate.getValue().getTime() + (Dateoffset)));
         }

     }, this);
     HireDate.on('valid', function (Field) {
         if(HireDate.getValue() != '' && HireDate.getValue() != null){
             if (OrgHireDate.getValue() == '' || OrgHireDate.getValue() == null) {
                 var dateOffset = DateMsg * (24 * 60 * 60 * 1000); // 1 Day            
                 var t1 = new Date(HireDate.getValue().getTime());
                 Ext.getCmp('HR_PersonD-OrgHireDate').setValue(t1);

             }
         }
        
     }, this);

     */

    if (form.selectedIndex == -1 && !form.isView) {
        BankCode.disable();
        BranchCode.disable();
        AccountNumber.disable();
    }
    PersonType.on('select', function (combo, record, index) {
        if (combo.getValue() == 0) {
            Emp_No.enable();
            ApplicantNumber.disable();
        }
        else if (combo.getValue() == 1) {
            Emp_No.disable();
            ApplicantNumber.enable();
        }
    }, this);
    Payment_TypeCode.on('select', function (combo, record, index) {
        paymethod = combo.getValue();
        if (paymethod == 0) {
            BankCode.clearValue();
            BankCode.disable();
            BranchCode.setValue(null);
            BranchCode.disable();
            AccountNumber.setValue(null);
            AccountNumber.disable();
        }

        else {
            BankCode.enable();
            BranchCode.enable();
            AccountNumber.enable();
        }
    }, this);



}

function HrAutoPostCheck(field, Check) {
    Sponsor = this.form.findField('HR_PersonD-SponsorCode');
    if (Check) {
        Sponsor.allowBlank = false;
        Sponsor.clearValue();
        Sponsor.disable();
    } else {
        Sponsor.enable();
        Sponsor.isValid();
    }
}

function EmployeeExcuse(form, login) {

    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('EmployeeExcuse-Status_Code').setComboValue(0);
        Ext.getCmp('EmployeeExcuse-Status_Code').disable();
    }

    if (!form.isView) {
        Ext.getCmp('EmployeeExcuse-Status_Code').disable();

        var Ex_FromTime = Ext.getCmp('EmployeeExcuse-Ex_FromTime');
        var Ex_ToTime = Ext.getCmp('EmployeeExcuse-Ex_ToTime');

        var TotalWorkingHours = Ext.getCmp('EmployeeExcuse-TotalWorkingHours');

        if (Ex_FromTime) Ex_FromTime.on('blur', EmployeeExcuseBlur, this);
        if (Ex_ToTime) Ex_ToTime.on('blur', EmployeeExcuseBlur, this);
    }

}


function EmployeeExcuseBlur(field) {

    var Ex_FromTime = Ext.getCmp('EmployeeExcuse-Ex_FromTime').getValue();
    var Ex_ToTime = Ext.getCmp('EmployeeExcuse-Ex_ToTime').getValue();

    var TotalWorkingHours = Ext.getCmp('EmployeeExcuse-TotalWorkingHours');


    var Fromtime = (new Date("01/01/2007 " + Ex_FromTime).getHours() * 60) + new Date("01/01/2007 " + Ex_FromTime).getMinutes();
    var Totime = (new Date("01/01/2007 " + Ex_ToTime).getHours() * 60) + new Date("01/01/2007 " + Ex_ToTime).getMinutes();

    if (Fromtime >= Totime) {
        Ext.MessageBox.alert(login.modulename, '"From" Time Should Be lesser than "To" Time !');
        return;
    }

    var TotWorkHrs = (Totime - Fromtime);

    var twhr = Math.floor(TotWorkHrs / 60) + ((TotWorkHrs % 60) / 100);
    TotalWorkingHours.setValue(twhr);
}


function Status_Change(form, login) {

    var PrimKey = Ext.getCmp('EmployeeExcuse').selectedIndex;
    var Status = Ext.getCmp('EmployeeExcuse-Status_Code').getValue();

    if (Status == 1) {

        Ext.MessageBox.alert(login.modulename, 'Record is already posted !');
        return;
    }

    else {

        Ext.getCmp('EmployeeExcuse-Status_Code').setComboValue(1);
        Ext.getCmp('EmployeeExcuse-Status_Code').disable();

    }


    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.getCmp('EmployeeExcuse-Status_Code').disable();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Status_Change',
            PrimKey: PrimKey


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostStatus, this);
}

function PostStatus(conn, response) {
    Ext.Ajax.un('requestcomplete', PostStatus, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        Ext.getCmp('ID_HREMPEXCUSE_editform').close();
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_HREMPEXCUSE_editform').close();
    }

}



function HRSalaryChange(form, login) {

    // Setting Status as New 
    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('HRSalaryChange-StatusCode').setComboValue(0);
        Ext.getCmp('HRSalaryChange-StatusCode').disable();
    }

    if (!form.isView) {
        Ext.getCmp('HRSalaryChange-StatusCode').disable();
        var HRSalaryChangeSubDetailList = Ext.getCmp('HRSalaryChangeSubDetailList');
        HRSalaryChangeSubDetailList.on('addrecord', function (evt) {
            var Effective_Date = Ext.getCmp('HRSalaryChange-Effective_Date').getValue();
            var ld = Effective_Date.getLastDateOfMonth();
            var NextStartDate = ld.add(Date.DAY, 1);
            evt.record.set('Effective_Date', NextStartDate);


        }, this);


        // Counting the No of Employees and Thier Input Value and New Input Value in Load Event 
        var HRSalChange = Ext.getCmp('HRSalaryChangeSubDetailList');
        HRSalChange.filter = null;
        HRSalChange.store.on('load', HRTotal, this);// Calling the Function to Sum the Values
        var HREmpCount = Ext.getCmp('HRSalaryChangeDetailList');
        HREmpCount.filter = null;
        HREmpCount.store.on('load', EmpCount, this);// Calling the  Function for Employees Count

        var grdhour = Ext.getCmp('HRSalaryChangeSubDetailList');
        var Total_Sal = Ext.getCmp('HRSalaryChange-Total_Sal');
        var Total_New_Sal = Ext.getCmp('HRSalaryChange-Total_New_Sal');



        HREmpCount.on('rowupdated', function (e) {
            var Count = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                Count++;
            }
            Ext.getCmp('HRSalaryChange-No_Of_Employees').setValue(Count);
        }, this);



        HREmpCount.on('rowclick', function (Grid, rowIndex, e) {
            Record = Grid.getStore().getAt(rowIndex);
            Ext.getCmp('HRSalaryChangeDetailList').selectedDetEmpCode = Record.get('EmployeeCode');
        }, this);
        HREmpCount.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            Ext.getCmp('HRSalaryChangeDetailList').selectedDetEmpCode = Record.get('EmployeeCode');
        }, this);
        HREmpCount.store.on('update', function (Store, Record, operation) {
            Ext.getCmp('HRSalaryChangeDetailList').selectedDetEmpCode = Record.get('EmployeeCode');
        }, this);

        var ElementCode = Ext.getCmp('HRSalaryChangeSubDetail-Element_IdCode');
        //if (ElementCode) ElementCode.on('beforequery', function (evt) {
        //       var empcode = Ext.getCmp('HRSalaryChangeDetailList').selectedDetEmpCode;
        //       evt.combo.lastQuery = '1=2';
        //       evt.combo.store.baseParams.filter = " END_DATE is null and ELEMENT_ID in (select PYELEM.ELEMENT_ID from PY_ELEMENTS_ENTRIES PYELEM where PYELEM.PERSON_ID=" + empcode + ")";

        //   }, this);


        HREmpCount.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            var EmpCode = Record.get('EmployeeCode');
            ElementCode.lastQuery = '1=2';
            ElementCode.store.baseParams.filter = "Person_ID=" + EmpCode;
        }, this);

        HREmpCount.store.on('update', function (Store, Record, operation) {
            var EmpCode = Record.get('EmployeeCode');
            ElementCode.lastQuery = '1=2';
            ElementCode.store.baseParams.filter = "Person_ID=" + EmpCode;
        }, this);

        // Summing the each Input Values and New Input Values in the Grid - New and Edit Mode
        grdhour.on('afteredit', function (e) {
            var TotalSal = 0;
            var Total_NewSal = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                TotalSal += (1 * e.grid.store.getAt(i).get('Input_Value'));
                Total_NewSal += (1 * e.grid.store.getAt(i).get('New_Input_Value'));
            }
            Total_Sal.setValue(TotalSal);
            Total_New_Sal.setValue(Total_NewSal);

        }, this);

        HREmpCount.on('load', function (e) {
            var Count = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                Count++;
            }
            Ext.getCmp('HRSalaryChange-No_Of_Employees').setValue(Count);
        }, this);

        // Counting the Nos of Employee in the Grid - New and Edit Mode
        HREmpCount.on('afteredit', function (e) {
            var Count = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                Count++;
            }
            Ext.getCmp('HRSalaryChange-No_Of_Employees').setValue(Count);
        }, this);

        var Element_IdCode = Ext.getCmp('HRSalaryChangeSubDetail-Element_IdCode');

        if (Element_IdCode) Element_IdCode.on('beforequery', function (evt) {
            var HRSalaryDtlList = Ext.getCmp('HRSalaryChangeDetailList').getStore();
            for (var i = 0; i < HRSalaryDtlList.getCount() ; i++) {
                var EmployeeCode = HRSalaryDtlList.getAt(i).get('EmployeeCode');
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " PELM.PERSON_ID=" + EmployeeCode + " and PELM.END_DATE is null";
            }
        }, this);

        //var HRSalaryChangeDetailList = Ext.getCmp('HRSalaryChangeDetailList');
        //HRSalaryChangeDetailList.on('afteredit', function (e) {
        //    var HRSalaryChangeSubDetailList = Ext.getCmp('HRSalaryChangeSubDetailList');
        //    var Totalweight = 0;
        //    for (var i = 0; i < HRSalaryChangeSubDetailList.store.getCount() ; i++) {
        //        Totalweight = (((e.grid.store.getAt(0).get('SalaryChangePromotion')) * HRSalaryChangeSubDetailList.store.getAt(i).get('Input_Value')) / 100) + HRSalaryChangeSubDetailList.store.getAt(i).get('Input_Value');
        //        HRSalaryChangeSubDetailList.store.getAt(i).set('New_Input_Value', Totalweight);
        //    }
        //}, this);


    }
}

function HRTotal(store, result) {
    var grdhour = Ext.getCmp('HRSalaryChangeSubDetailList');
    var Total_Sal = Ext.getCmp('HRSalaryChange-Total_Sal');
    var Total_New_Sal = Ext.getCmp('HRSalaryChange-Total_New_Sal');
    var TotalSal = 0;
    var Total_NewSal = 0;

    for (i = 0; i < store.getCount() ; i++) {
        TotalSal += (store.getAt(i).get('Input_Value') * 1);
        Total_NewSal += (store.getAt(i).get('New_Input_Value') * 1);
    }
    Total_Sal.setValue(TotalSal);
    Total_New_Sal.setValue(Total_NewSal);
}

function EmpCount(store, result) {
    var Total_Emp = Ext.getCmp('HRSalaryChangeDetailList');
    var HREmpNum = Ext.getCmp('HRSalaryChange-No_Of_Employees');
    for (i = 0; i < store.getCount() ; i++) {
    }
    HREmpNum.setValue(i);
}

// HR Salary Change Promotion Screen Post 

function Salary_Status_Change(form, login) {

    var PrimKey = Ext.getCmp('HRSalaryChange').selectedIndex;
    var SalStatus = Ext.getCmp('HRSalaryChange-StatusCode').editValue;

    if (SalStatus == 1) {

        Ext.MessageBox.alert(login.modulename, 'Record is already posted !');
        return;
    }

    else {

        Ext.getCmp('HRSalaryChange-StatusCode').disable();

    }


    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.getCmp('HRSalaryChange-StatusCode').disable();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Salary_Status_Change',
            PrimKey: PrimKey


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', SalPostStatus, this);

}

function SalPostStatus(conn, response) {
    Ext.Ajax.un('requestcomplete', SalPostStatus, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_HRSALARYPROMOTION_editform').close();
        var store = Ext.getCmp('HRSalaryChangeSubDetailList').getStore();
        store.reload();
    }
}

function AbsenceAfterPayrollAddButtonHandler(form, login) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'getAbsenceDetailsForm'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', getAbsenceDetailsFormReqComplete, this);
}

function getAbsenceDetailsFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', getAbsenceDetailsFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.GenerateAbsenceDetailsForm = new Ext.form.FormPanel(responseText.AbsenceCofig);
    this.GenerateAbsenceDetailsForm.addButton({
        text: 'OK',
        handler: function () { // Getting the Values of the Pop window and Passing the Values

            showMask();
            var Person_Code = Ext.getCmp('AbsenceDetails-Person_Code').getValue();
            var Absence_Type_Code = Ext.getCmp('AbsenceDetails-Absence_Type_Code').getValue();
            var Start_Date = Ext.getCmp('AbsenceDetails-Start_Date').getValue();
            var End_Date = Ext.getCmp('AbsenceDetails-End_Date').getValue();
            var Approved_Date = Ext.getCmp('AbsenceDetails-Approved_Date').getValue();
            var EligibleDays = Ext.getCmp('AbsenceDetails-EligibleDays').getValue();
            var Number_Of_Days = Ext.getCmp('AbsenceDetails-Number_Of_Days').getValue();
            var Process_From = Ext.getCmp('AbsenceDetails-Process_From').getValue();
            var AdvanceCode = Ext.getCmp('AbsenceDetails-AdvanceCode').getValue();
            var Generate_Attendance = Ext.getCmp('AbsenceDetails-Generate_Attendance').getValue();
            var Comments = Ext.getCmp('AbsenceDetails-Comments').getValue();
            var AdvanceCode = Ext.getCmp('AbsenceDetails-AdvanceCode').getValue();

            if (AdvanceCode == 1 && Math.ceil(EligibleDays) < Math.ceil(Number_Of_Days)) {
                Ext.MessageBox.alert(login.modulename, 'EligibleDays should be greater than or equal to Number_Of_Days for Encashment !');
                return;
            }

            if (End_Date == Start_Date) {
                Ext.MessageBox.alert(login.modulename, 'End Date should not be equal to Start Date !');
                return;
            }

            if (End_Date < Start_Date) {
                Ext.MessageBox.alert(login.modulename, 'End Date should be greater than Start Date !');
                return;
            }

            if (Process_From < Start_Date) {
                Ext.MessageBox.alert(login.modulename, 'Process Date Should be bewteen Start Date and End date !');
                return;
            }

            if (Process_From > End_Date) {
                Ext.MessageBox.alert(login.modulename, 'Process Date Should be bewteen Start Date and End date !');
                return;
            }

            if (Approved_Date > Start_Date) {

                Ext.MessageBox.alert(login.modulename, 'Approved Date should be less Start Date or Equal to Start Date!');
                return;
            }

            if ((EligibleDays == 0 || EligibleDays == '') && AdvanceCode != 2) {
                Ext.MessageBox.alert(login.modulename, 'EligibleDays should be greater thatn 0 for Advance payment or Encashment !');
                return;
            }

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'GenerateAbsencePayroll',
                    Person_Code: Person_Code,
                    Absence_Type: Absence_Type_Code,
                    Start_Date: Start_Date.format(login.jsdateformat),
                    End_Date: End_Date.format(login.jsdateformat),
                    EligibleDays: (EligibleDays == '' ? 0 : Math.ceil(EligibleDays)),
                    Approved_Date: Approved_Date.format(login.jsdateformat),
                    Number_Of_Days: (Number_Of_Days == '' ? 0 : Math.ceil(Number_Of_Days)),
                    Process_From: Process_From.format(login.jsdateformat),
                    AdvanceCode: AdvanceCode,
                    Generate_Attendance: Generate_Attendance,
                    Comments: (Comments == '' ? 0 : Comments)

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', GenerateAbsenceDetailsComplete, this);

        },
        scope: this,
        formBind: true,
        tabIndex: this.GenerateAbsenceDetailsForm.FormFieldsCount + 2
    });
    this.GenerateAbsenceDetailsForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.GenerateAbsenceDetailsFormWindow.close();
        },
        scope: this,
        tabIndex: this.GenerateAbsenceDetailsForm.FormFieldsCount + 2
    });
    this.GenerateAbsenceDetailsFormWindow = new Ext.Window({
        id: 'GenerateAbsenceDetailsFormWindow',
        title: 'Absence Details',
        closable: true,
        minimizable: false,
        width: this.GenerateAbsenceDetailsForm.width + 10,
        height: this.GenerateAbsenceDetailsForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.GenerateAbsenceDetailsForm]
    });

    this.GenerateAbsenceDetailsForm.on('render', GenerateAbsenceDetailsFormRender, this);
    this.GenerateAbsenceDetailsFormWindow.show();
}
function GenerateAbsenceDetailsFormWindow(win) {
    Ext.getCmp('AbsenceDetails-Number_Of_Days') = 0;
}
function GenerateAbsenceDetailsFormRender(form, Renlogin) {

    var Start_Date = Ext.getCmp('AbsenceDetails-Start_Date');
    var End_Date = Ext.getCmp('AbsenceDetails-End_Date');
    var Person_Id = Ext.getCmp('AbsenceDetails-Person_Code').getValue();
    var AdvanceCode = Ext.getCmp('AbsenceDetails-AdvanceCode').getValue();
    Ext.getCmp('AbsenceDetails-Number_Of_Days').disable();
    var EligibleDays = Ext.getCmp('AbsenceDetails-EligibleDays');
    EligibleDays.disable();

    Ext.getCmp('AbsenceDetails-Person_Code').on('clear', function (evt) {
        Ext.getCmp('AbsenceDetails-Absence_Type_Code').clearValue();
    }, this);

    Ext.getCmp('AbsenceDetails-Person_Code').on('select', function (combo, record, index) {
        Person_Id = combo.getValue();
        Ext.getCmp('AbsenceDetails-Absence_Type_Code').clearValue();
    }, this);

    Ext.getCmp('AbsenceDetails-Absence_Type_Code').on('beforequery', function (evt) {
        var SPerson_Id = Ext.getCmp('AbsenceDetails-Person_Code');
        if (SPerson_Id.getValue() == null || SPerson_Id.getValue() == '' || SPerson_Id.getValue() == 0) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "1=2";
            Ext.MessageBox.alert(login.modulename, 'Please Select the employee first !');
            return;
        }

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "1=1";

    }, this);

    var EDate = Ext.getCmp('AbsenceDetails-End_Date').getValue();
    var SDate = Ext.getCmp('AbsenceDetails-Start_Date').getValue();
    Ext.getCmp('AbsenceDetails-Absence_Type_Code').on('select', function (combo, record, index) {
        Ext.getCmp('AbsenceDetails-AdvanceCode').clearValue();
        showMask();
        Absence = combo.getValue();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'CalculateLeave',
                Absence: Absence,
                Person_Id: (Person_Id == '' ? 0 : Person_Id),
                End_Date: EDate,
                Start_Date: SDate
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', CalculateLeaveComplete, this);
    }, this);

    var EligDays = Ext.getCmp('AbsenceDetails-EligibleDays').editValue;


    Start_Date.on('valid', function (Field) {
        var dateOffset = DateMsg * (24 * 60 * 60 * 1000); // 1 Day
        End_Date.setValue(new Date(Start_Date.getValue().getTime() + (dateOffset)));
        var t1 = new Date(Start_Date.getValue());
        var t2 = new Date(End_Date.getValue());
        var diff = Math.abs(t1 - t2) / (1000 * 60 * 60 * 24);
        Ext.getCmp('AbsenceDetails-Approved_Date').setValue(t1);
        Ext.getCmp('AbsenceDetails-Process_From').setValue(t1);
        Ext.getCmp('AbsenceDetails-Number_Of_Days').setValue(diff + 1);
        Ext.getCmp('AbsenceDetails-Generate_Attendance').setValue(true);
    }, this);




    End_Date.on('valid', function (Field, date) {

        var d1 = Ext.getCmp('AbsenceDetails-Start_Date').getValue();
        var date = Ext.getCmp('AbsenceDetails-End_Date').getValue();
        var t1 = new Date(d1);
        var t2 = new Date(date);
        var diff = Math.abs(t1 - t2) / (1000 * 60 * 60 * 24);
        //var ExtraDays = diff - 
        Ext.getCmp('AbsenceDetails-Number_Of_Days').setValue(diff + 1);
    }, this);
}

function CalculateLeaveComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CalculateLeaveComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var Start_Date = Ext.getCmp('AbsenceDetails-Start_Date');
    var End_Date = Ext.getCmp('AbsenceDetails-End_Date');
    if (!responseText.success) {
        Ext.getCmp('AbsenceDetails-EligibleDays').setValue(responseText.Msg);
    }
    else {
        Ext.getCmp('AbsenceDetails-EligibleDays').setValue(responseText.Msg);
        DateMsg = responseText.Msg;
        End_Date.setValue(new Date(Start_Date.getValue().getTime() + ((DateMsg > 1 ? (DateMsg - 1) : 0) * (24 * 60 * 60 * 1000))));
        if (responseText.PaymentFilter > 0) {
            AdvanceCode.lastQuery = '1=2';
            AdvanceCode.constantFilter = '0,1,2';
        }
        else {
            AdvanceCode.lastQuery = '1=2';
            AdvanceCode.constantFilter = '2';
        }
    }
}

function GenerateAbsenceDetailsComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', GenerateAbsenceDetailsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        this.GenerateAbsenceDetailsFormWindow.close();
        var store = Ext.getCmp('ActiveAbsencesList').getStore();
        store.reload();
    }
}

// Absence After Payroll - Confirm Buton

function ConfirmButtonHandler(form, login) {

    if (!Ext.getCmp('ActiveAbsencesList').selectedAbsenceID) {
        Ext.MessageBox.alert(login.modulename, 'Please select Time Attendance Detail to Rollback !');
        return;
    }

    var Primkey = Ext.getCmp('ActiveAbsencesList').selectedAbsenceID;
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'Insert_Absence',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', InsertAbsence, this);
}



function InsertAbsence(conn, response) {
    Ext.Ajax.un('requestcomplete', InsertAbsence, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

// Absence After Payroll - Payment 

function HRPaymentHandler(form, login) {

    var Primkey = Ext.getCmp('ActiveAbsencesList').selectedLoanID;
    if (!Ext.getCmp('ActiveAbsencesList').selectedLoanID) {

        Ext.MessageBox.alert(login.modulename, 'Please Select the Absence  Detail to make Payment !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRPayment',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRPaymentComplete, this);
}



function HRPaymentComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRPaymentComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.HRPaymentForm = new Ext.form.FormPanel(responseText.HRPaymentConfig);
    this.HRPaymentForm.addButton({
        text: 'POST',
        handler: function () {

            var Primkey = Ext.getCmp('ActiveAbsencesList').selectedLoanID;
            Ext.getCmp('HRPayment-StatusCode').disable();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'HRPaymentPost',
                    Primkey: Primkey

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', HRPaymentPostComplete, this);


        },
        scope: this,
        tabIndex: this.HRPaymentForm.FormFieldsCount + 2
    });
    this.HRPaymentForm.addButton({
        text: 'BACK',
        handler: function () {
            Ext.MessageBox.confirm(login.modulename, 'Are You sure to close the window?', function (button) {
                if (button == 'yes') {
                    this.HRPaymentFormWindow.close();
                }
            }, this);
        },

        scope: this,
        tabIndex: this.HRPaymentForm.FormFieldsCount + 2
    });


    this.HRPaymentFormWindow = new Ext.Window({
        id: 'HRPaymentFormWindow',
        title: 'Payment Details',
        closable: true,
        minimizable: false,
        width: this.HRPaymentForm.width + 10,
        height: this.HRPaymentForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.HRPaymentForm]
    });

    this.HRPaymentFormWindow.show();
}

function HRPayment(form, login) {
}

function HRPaymentPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', HRPaymentPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.getCmp('HRPayment-StatusCode').setComboValue(1);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}


function TicketPostHandler(form, login) {

    var Primkey = Ext.getCmp('HRAbsenceTicketList').SelectedTicketID;
    var Employee = Ext.getCmp('HRAbsenceTicketList').SelectedEmpID;
    var Status = Ext.getCmp('HRAbsenceTicketList').SelectedStatus;
    if (Status == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }

    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Insert_Ticket',
            PrimKey: Primkey,
            Employee: Employee

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', InsertTicket, this);
}




function InsertTicket(conn, response) {
    var Store = Ext.getCmp('HRTicketDetailList').getStore();
    Store.reload();
    Ext.Ajax.un('requestcomplete', InsertTicket, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


    }

}

function PrepaidFindHandler(form, login) {

    alert("FindButtonHHandlercalled");

}

function AssetWorkbench(form, login) {
    var PostedCode = Ext.getCmp('AssetWorkbench-PostedCode');

    if (form.SelectedIndex = -1 && !form.isView) {
        PostedCode.setComboValue(0);
    }
    if (!form.isView) {
        PostedCode.disable();
    }

}

function Multi_Payment_Cheque_ButtonHandler(form, login) {

    var PrimKey = Ext.getCmp('Internal_Pay_Request').selectedIndex;
    var status = Ext.getCmp('Internal_Pay_Request-StatusCode');

    if (status.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'Status should be Approved for post !'); // show message if the status is not Approved.
        return;
    }

    if (status.getValue() == 2) {
        Ext.MessageBox.alert(login.modulename, 'Posted records cannot be posted agian !'); // show message if the status is not Approved.
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/finance/FinancePosting.aspx',
        params: {
            action: 'Multi_Payment_Cheque_Post',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', Multi_Payment_ChequeReqComplete, this);
}

function Multi_Payment_ChequeReqComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', Multi_Payment_ChequeReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        })
    } else {
        //Ext.getCmp('Internal_Pay_Request-StatusCode').setComboValue(2);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_IN_PAY_REQ_editform').un('beforeclose', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.closeWindow, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').on('close', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.afterCloseWind, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').close();
        return;
    }
}

function GeneratePaymentVoucher(form, login) {

    var PrimKey = Ext.getCmp('Internal_Pay_Request').selectedIndex;
    var status = Ext.getCmp('Internal_Pay_Request-StatusCode');
    var ChequeNo = Ext.getCmp('Internal_Pay_Request-ChequeNo');

    if (status.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, '??? ???????? ?????  !'); // show message if the status is not Approved.
        return;
    }

    if (status.getValue() == 2) {
        Ext.MessageBox.alert(login.modulename, '????? ???? ??????!'); // show message if the status is not Approved.
        return;
    }

    if (ChequeNo == '' | ChequeNo == null) {
        Ext.MessageBox.alert(login.modulename, '??? ????? ??? ????? ?????  !'); // show message if the status is not Approved.
        return;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/finance/FinancePosting.aspx',
        params: {
            action: 'Post_Generate_Payment_Voucher',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GeneratePaymentVoucherComplete, this);
}

function GeneratePaymentVoucherComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', GeneratePaymentVoucherComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        })
    } else {
        //Ext.getCmp('Internal_Pay_Request-StatusCode').setComboValue(2);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_IN_PAY_REQ_editform').un('beforeclose', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.closeWindow, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').on('close', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.afterCloseWind, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').close();
        return;
    }
}


function UnPostIntPayment(form, login) {

    var PrimKey = Ext.getCmp('Internal_Pay_Request').selectedIndex;
    var status = Ext.getCmp('Internal_Pay_Request-StatusCode'); if (status.getValue() == 0 || status.getValue() == 1) {
        Ext.MessageBox.alert(login.modulename, ' !??? ?? ???? ???? ????? ????? ??? ????? ?? ?? ???????'); // show message if the status is not Approved.
        return;
    }
    var curstatus = Ext.getCmp('Internal_Pay_Request-StatusCode').editValue;
    if (curstatus == 0 || curstatus == 1) {
        Ext.MessageBox.alert(login.modulename, ' !??? ?? ???? ???? ????? ????? ??? ????? ?? ?? ???????'); // show message if the status is not Approved.
        return;
    }



    showMask();
    Ext.Ajax.request({
        url: 'tools/finance/FinancePosting.aspx',
        params: {
            action: 'UnPost_IntPayment',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', UnPostIntPaymentComplete, this);
}

function UnPostIntPaymentComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', UnPostIntPaymentComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        })
    } else {
        //Ext.getCmp('Internal_Pay_Request-StatusCode').setComboValue(2);
        Ext.getCmp('Internal_Pay_Request-Bank_Code').enable();
        Ext.getCmp('Internal_Pay_Request-PaymentDate').enable();
        Ext.getCmp('Internal_Pay_Request-Amount').enable();
        Ext.getCmp('Internal_Pay_Request-ChequeNo').enable();
        Ext.getCmp('Internal_Pay_Request-Regarding').enable();
        Ext.getCmp('Internal_Pay_Request-Name').enable();
        Ext.getCmp('Internal_Pay_Request-Account').enable();

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_IN_PAY_REQ_editform').un('beforeclose', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.closeWindow, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').on('close', Ext.getCmp('ID_IN_PAY_REQ_editform').scope.afterCloseWind, Ext.getCmp('ID_IN_PAY_REQ_editform').scope);
        Ext.getCmp('ID_IN_PAY_REQ_editform').close();
        return;
    }
}










function GenerateJournalVoucher(form, login) {

    var PrimKey = Ext.getCmp('Internal_Pay_Request').selectedIndex;
    var status = Ext.getCmp('Internal_Pay_Request-StatusCode');

    if (status.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'Status should be Approved for post !'); // show message if the status is not Approved.
        return;
    }

    if (status.getValue() == 2) {
        Ext.MessageBox.alert(login.modulename, 'Posted records cannot be posted agian !'); // show message if the status is not Approved.
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/finance/FinancePosting.aspx',
        params: {
            action: 'Post_Generate_Journal_Voucher',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GenerateJournalVoucherComplete, this);
}

function GenerateJournalVoucherComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', GenerateJournalVoucherComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        })
    } else {
        Ext.getCmp('Internal_Pay_Request-StatusCode').setComboValue(2);
        Ext.getCmp('Internal_Pay_Request-TransferCode').setComboValue(2);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}



function ApprovedButtonHandler(form, login) {

    var PrimKey = Ext.getCmp('Internal_Pay_Request').selectedIndex;
    var Status = Ext.getCmp('Internal_Pay_Request-StatusCode').getValue();
    if (Status == 1) {
        Ext.MessageBox.alert(login.modulename, 'Internal Payment Cheque Approved Already !');
        return;
    }
    else {

        Ext.getCmp('Internal_Pay_Request-StatusCode').disable();
    }
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Approved before save !');
        return;
    }
    showMask();
    Ext.getCmp('Internal_Pay_Request-StatusCode').disable();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'Internal_Pay_Request_Status',
            PrimKey: PrimKey


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', InterPayStatusRequest, this);

}

function InterPayStatusRequest(conn, response) {
    Ext.Ajax.un('requestcomplete', InterPayStatusRequest, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {

        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        Ext.getCmp('Internal_Pay_Request-StatusCode').setComboValue(1);

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}


function Internal_Pay_Request(form, login) {

    var Status = Ext.getCmp('Internal_Pay_Request-StatusCode');
    var Account = Ext.getCmp('Internal_Pay_Request-Bank_Code');
    var TransferCode = Ext.getCmp('Internal_Pay_Request-TransferCode');
    var PaymentDate = Ext.getCmp('Internal_Pay_Request-PaymentDate');
    var Amount = Ext.getCmp('Internal_Pay_Request-Amount');
    var ChequeNo = Ext.getCmp('Internal_Pay_Request-ChequeNo');
    var Regarding = Ext.getCmp('Internal_Pay_Request-Regarding');
    var Name = Ext.getCmp('Internal_Pay_Request-Name');
    var AccountVal = Ext.getCmp('Internal_Pay_Request-Account');

    Status.disable();
    TransferCode.disable();

    if (form.SelectedIndex == -1) {
        Status.setComboValue(0);
    }

    if (form.selectedIndex != -1 && !form.isView) {
        if (Ext.getCmp('Internal_Pay_Request-StatusCode').editValue != 1) {
            PaymentDate.disable();
            Amount.disable();
            ChequeNo.disable();
            Regarding.disable();
            Account.disable();
            Name.disable();
            AccountVal.disable();
        }

    }
    /* if (Account) Account.on('beforequery', function (evt) {
         evt.combo.lastQuery = '1=2';
         evt.combo.store.baseParams.filter = "bank_account_code in (select BANK_ACCOUNT_ID from ap_user_bank_access where USERCODE=" + login.UserCode + ")";
     }, this);*/


    if (login.userglobalrights && login.userglobalrights.indexOf('103') < 0 && Ext.getCmp('Internal_Pay_Request-ApprovedButton'))
        Ext.getCmp('Internal_Pay_Request-ApprovedButton').disable();

    if (login.userglobalrights && login.userglobalrights.indexOf('104') < 0 && Ext.getCmp('Internal_Pay_Request-Multi_Payment_Cheque_Post'))
        Ext.getCmp('Internal_Pay_Request-Multi_Payment_Cheque_Post').disable();

    if (login.userglobalrights && login.userglobalrights.indexOf('105') < 0 && Ext.getCmp('Internal_Pay_Request-Generate_Payment_Voucher'))
        Ext.getCmp('Internal_Pay_Request-Generate_Payment_Voucher').disable();

    if (login.userglobalrights && login.userglobalrights.indexOf('106') < 0 && Ext.getCmp('Internal_Pay_Request-Generate_Journal_Voucher'))
        Ext.getCmp('Internal_Pay_Request-Generate_Journal_Voucher').disable();

    if (login.userglobalrights && login.userglobalrights.indexOf('107') < 0 && Ext.getCmp('Internal_Pay_Request-UnPost'))
        Ext.getCmp('Internal_Pay_Request-UnPost').disable();


}

function PayrollRunResultFindHandler(form, login) {

    var FilterQry = '';
    var PeriodCode = Ext.getCmp('PYPayrollRunResult-Period_Code');
    var EmployeeCode = Ext.getCmp('PYPayrollRunResult-EmployeeCode');
    var PayrollCode = Ext.getCmp('PYPayrollRunResult-Payroll_Code');
    var AssignmentCode = Ext.getCmp('PYPayrollRunResult-Assignment_setCode');
    var ElementSet = Ext.getCmp('PYPayrollRunResult-Element_setCode');
    var Element = Ext.getCmp('PYPayrollRunResult-ElementCode');

    if (PayrollCode.getValue() != '' && PayrollCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.PAYROLL_ID=" + PayrollCode.getValue();
        else
            FilterQry += " and pyd.PAYROLL_ID=" + PayrollCode.getValue();
    }

    if (PeriodCode.getValue() != '' && PeriodCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.PERIOD_ID=" + PeriodCode.getValue();
        else
            FilterQry += " and pyd.PERIOD_ID=" + PeriodCode.getValue();
    }

    if (AssignmentCode.getValue() != '' && AssignmentCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.PERSON_ID in (select PERSON_CODE from PY_AssignmentS_set_DETAILS where ASSIGNMENT_SET_CODE=" + AssignmentCode.getValue() + ") "; //" + AssignmentCode.getValue();
        else
            FilterQry += " and pyd.PERSON_ID in (select PERSON_CODE from PY_AssignmentS_set_DETAILS where ASSIGNMENT_SET_CODE=" + AssignmentCode.getValue() + ") "; //" + AssignmentCode.getValue();
    }
    /*
    if (ElementSet.getValue() != '' && ElementSet.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.ELEMENT_ID in (select ELEMENT_ID from PY_ELEMENTS_SET_DETAILS where SET_CODE=" + ElementSet.getValue() + ")"; // ElementSet.getValue();
        else
            FilterQry += " and pyd.ELEMENT_ID in (select ELEMENT_ID from PY_ELEMENTS_SET_DETAILS where SET_CODE=" + ElementSet.getValue() + ")"; // ElementSet.getValue();
    }

    if (Element.getValue() != '' && Element.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.ELEMENT_ID=" + Element.getValue();
        else
            FilterQry += " and pyd.ELEMENT_ID=" + Element.getValue();
    }
    */
    if (EmployeeCode.getValue() != '' && EmployeeCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pyd.PERSON_ID=" + EmployeeCode.getValue();
        else
            FilterQry += " and pyd.PERSON_ID=" + EmployeeCode.getValue();
    }

    DetailStore = Ext.getCmp('PYPayrollResultViewList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYPayrollResultView&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 5
            }
        });
    }

}

function PYPayrollRunResult(form, login) {

    var Period_Code = Ext.getCmp('PYPayrollRunResult-Period_Code');
    var EmployeeCode = Ext.getCmp('PYPayrollRunResult-EmployeeCode');
    var Payroll_Code = Ext.getCmp('PYPayrollRunResult-Payroll_Code');
    var Assignment_setCode = Ext.getCmp('PYPayrollRunResult-Assignment_setCode');
    //    var ElementSet = Ext.getCmp('PYPayrollRunResult-Element_setCode');
    //    var Element = Ext.getCmp('PYPayrollRunResult-ElementCode');

    if (Payroll_Code) Payroll_Code.on('select', function (combo, record, index) {
        Period_Code.clearValue(); EmployeeCode.clearValue(); Assignment_setCode.clearValue();
    }, this);

    if (Payroll_Code) Payroll_Code.on('clear', function (e) {
        Period_Code.clearValue(); EmployeeCode.clearValue(); Assignment_setCode.clearValue();
    }, this);


    if (Period_Code) Period_Code.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PYPayrollRunResult-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PERIOD_CODE in (select pyperiod.PERIOD_CODE from py_payroll_periods pyperiod where pyperiod.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PYPayrollRunResult-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " PERSON_CODE in (select hper.PERSON_CODE from GEN_CONTACTS hper where hper.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

    if (Assignment_setCode) Assignment_setCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('PYPayrollRunResult-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ASSIGNMENT_SET_CODE in (select Pyass.ASSIGNMENT_SET_CODE from PY_ASSIGNMENTS_SET_HEADER Pyass where Pyass.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

    var Lines = Ext.getCmp('PYPayrollPayslipVList').getStore();
    var TotalEarningCtl = Ext.getCmp('PYPayrollRunResult-Earning');
    var TotalDeductionCtl = Ext.getCmp('PYPayrollRunResult-Deduction');
    var TotalAmountCtl = Ext.getCmp('PYPayrollRunResult-Total');


    Lines.on('load', function (store, records, options) {

        var TotalEarning = 0;
        var TotalDeduction = 0;
        var TotalAmount = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TotalEarning += (1 * record.get('Earning'));
            TotalDeduction += (1 * record.get('Deduction'));
        }
        TotalAmount = (TotalEarning - TotalDeduction);

        TotalEarningCtl.setValue(TotalEarning);
        TotalDeductionCtl.setValue(TotalDeduction);
        TotalAmountCtl.setValue(TotalAmount);

    }, this);

    var PYPayrollCosting = Ext.getCmp('PYPayrollCostingResultVList').getSelectionModel();

    var PYPayrollCost = Ext.getCmp('PYPayrollCostingResultVList');

    PYPayrollCosting.on('rowselect', function (SelectionModel, rowIndex, Record) {

        Ext.getCmp('PYPayrollRunResult-CostFactorDescription').setValue(Record.get('Cost_Factor_CodeDisplay'));
        Ext.getCmp('PYPayrollRunResult-AccountName').setValue(Record.get('Account_CodeDisplay'));
    }, this);

    PYPayrollCost.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        Ext.getCmp('PYPayrollRunResult-CostFactorDescription').setValue(Record.get('Cost_Factor_CodeDisplay'));
        Ext.getCmp('PYPayrollRunResult-AccountName').setValue(Record.get('Account_CodeDisplay'));
    }, this);

}
function PrintPayrollHandler(form, login) {
    var Period_Code = Ext.getCmp('PYPayrollRunResult-Period_Code').editValue;
    var EmployeeCode = Ext.getCmp('PYPayrollRunResult-EmployeeCode').editValue;
    var Payroll_Code = Ext.getCmp('PYPayrollRunResult-Payroll_Code').editValue;
    var Assignment_setCode = Ext.getCmp('PYPayrollRunResult-Assignment_setCode').editValue;

    if (Period_Code == '' || Period_Code == null || Period_Code == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please select Period!');
        return true;
    }
    else
        Period = Period_Code;
    EmployeeCode: EmployeeCode
    Payroll_Code = Payroll_Code;
    Assignment_setCode: Assignment_setCode

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PrintPayroll',
            Employee: (EmployeeCode == '' ? 0 : EmployeeCode),
            Period: Period,
            Assignment_setCode: (Assignment_setCode == '' ? 0 : Assignment_setCode),
            Payroll_Code: Payroll_Code

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrintPayrollComplete, this);

}

function PrintPayrollComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PrintPayrollComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var WidgetObj = Ext.getCmp('ID_PAYROLLRUNRESULTS').scope; //.immediatePrintClick(PKEy);
        Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
            if (button == 'yes') {
                WidgetObj.RptType = 1;
                WidgetObj.immediatePrintClick(1);
            }
        }, this);
    }
}


function Persons_D(form, login) {
    if (form.SelectedIndex != -1 && !form.isView) {
        if (isAdditinalInfoValue != 0) {
            var hrtitle = Ext.getCmp('Persons_D-TitleCode');
            hrtitle.setComboValue(isAdditinalInfoValue);
            var ArabicName = Ext.getCmp('Persons_D-ArabicName');
            var EmployeeFullName = Ext.getCmp('Persons_D-EmployeeFullName');
            hrtitle.disable();
            ArabicName.disable();
            EmployeeFullName.disable();
        }
    }

    var AttendanceShift = Ext.getCmp('Persons_D-AttendanceShiftsType');
    var Regulartemplate = Ext.getCmp('Persons_D-RegularTemplateCode');
    var IrRegularTemplate = Ext.getCmp('Persons_D-IrRegularTemplateCode')


    AttendanceShift.on('select', function (combo, record, index) {
        Attendance = combo.getValue();
        if (Attendance == 0) {
            Regulartemplate.clearValue();
            IrRegularTemplate.clearValue();
            Regulartemplate.disable();
            IrRegularTemplate.disable();
        }
        else {
            Regulartemplate.enable();
            IrRegularTemplate.enable();
        }
    }, this);

    var OrganizationCode = Ext.getCmp('Persons_D-OrgCode');
    var DepartmentCode = Ext.getCmp('Persons_D-DepartmentCode');

    OrganizationCode.on('select', function (combo, record, index) {
        DepartmentCode.clearValue();
    }, this);

    if (DepartmentCode) DepartmentCode.on('beforequery', function (evt) {
        var OrganizationCode = Ext.getCmp('Persons_D-OrgCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "DEP.DEPARTMENTCODE in (select DepartmentCode from ADMDepartments where Organizations_Code =" + OrganizationCode + ")";
    }, this);

    var Payment_TypeCode = Ext.getCmp('Persons_D-Payment_Type');
    var BankCode = Ext.getCmp('Persons_D-BankCode');
    var BranchCode = Ext.getCmp('Persons_D-BranchCode');
    var AccountNumber = Ext.getCmp('Persons_D-AccountNumber');
    var paymethod = 0;
    if (!form.isView) {
        BankCode.disable();
        BranchCode.disable();
        AccountNumber.disable();
    }

    Payment_TypeCode.on('select', function (combo, record, index) {
        paymethod = combo.getValue();
        if (paymethod == 0) {
            BankCode.clearValue();
            BankCode.disable();
            BranchCode.clearValue();
            BranchCode.disable();
            AccountNumber.setValue(null);
            AccountNumber.disable();
        }

        else {
            BankCode.enable();
            BranchCode.enable();
            AccountNumber.enable();
        }
    }, this);


    var CountryCode = Ext.getCmp('Persons_D-Country_Code');
    var CityCode = Ext.getCmp('Persons_D-City_Code');
    var AreaCode = Ext.getCmp('Persons_D-Area_Code');

    CountryCode.on('select', function (combo, record, index) {
        AreaCode.clearValue();
        CityCode.clearValue();
    }, this);

    CityCode.on('select', function (combo, record, index) {
        AreaCode.clearValue();
    }, this);


    if (CityCode) CityCode.on('beforequery', function (evt) {
        var CityCode = Ext.getCmp('Persons_D-Country_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PLACECODE in (select PLACECODE from GenPlace where COUNTRYCODE =" + CityCode + ")";
    }, this);

    if (AreaCode) AreaCode.on('beforequery', function (evt) {
        var AreaCode = Ext.getCmp('Persons_D-City_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "AreaCode in (select PLACECODE from GenArea where AreaCode =" + AreaCode + ")";
    }, this);
}


function HRMContactNameCombinationButtoHandle() {
    CommonNameCombination('Persons_D-EmployeeFullName', 'Persons_D-FirstName', 'Persons_D-MiddleName', 'Persons_D-LastName');
}
function HRMArabicContactNameCombinationButtoHandle() {
    CommonNameCombination('Persons_D-ArabicName', 'Persons_D-ARFirstName', 'Persons_D-ARMiddleName', 'Persons_D-ARLastName');
}
function CommonContactNoCombination(NameID, FirstName, MiddleName, LastName) {
    var ContactName = Ext.getCmp(NameID).getValue();
    var ActualNameArr = ContactName.split(' ');

    if (ActualNameArr.length > 0)
        Ext.getCmp(FirstName).setValue(ActualNameArr[0]);
    else
        Ext.getCmp(FirstName).setValue(ActualNameArr[0]);

    if (ActualNameArr.length > 1)
        Ext.getCmp(MiddleName).setValue(ActualNameArr[1]);
    else
        Ext.getCmp(MiddleName).setValue('');

    if (ActualNameArr.length > 2)
        Ext.getCmp(LastName).setValue(ActualNameArr[ActualNameArr.length - 1]);
    else
        Ext.getCmp(LastName).setValue('');

    var FieldFirstName = new Ext.form.TextField({
        fieldLabel: (isRTL ? 'Country Code' : 'Country Code'),
        id: 'Id_FirstName',
        name: 'FirstName',
        anchor: '95%',
        allowBlank: true,
        minLength: 1,
        maxLength: 150,
        value: Ext.getCmp(FirstName).getValue(),
        tabIndex: 301
    });
    var FieldMiddleName = new Ext.form.TextField({
        fieldLabel: (isRTL ? 'Area Code' : 'Area Code'),
        id: 'Id_MiddleName',
        name: 'Key',
        anchor: '95%',
        allowBlank: true,
        minLength: 1,
        maxLength: 150,
        value: Ext.getCmp(MiddleName).getValue(),
        tabIndex: 302

    });
    var FieldLastName = new Ext.form.TextField({
        fieldLabel: (isRTL ? 'Number' : 'Number'),
        id: 'Id_LastName',
        name: 'Key',
        anchor: '95%',
        allowBlank: true,
        minLength: 1,
        maxLength: 150,
        value: Ext.getCmp(LastName).getValue(),
        tabIndex: 303
    });

    this.CommonNameCombinationFrm = new Ext.form.FormPanel({
        id: 'CommonNameCombinationFrm',
        frame: true,
        labelAlign: 'left',
        labelWidth: 80,
        closable: true,
        width: 400,
        height: 115,
        hideBorders: true,
        bodyStyle: 'padding:0px',
        bodyBorder: true,
        border: '0px',
        method: 'POST',
        monitorValid: true,
        monitorResize: true,
        buttonAlign: 'center',
        items: [{
            layout: 'column',
            border: true,
            labelAlign: 'top',
            bodyStyle: '5px 5px 0px',
            items: [{
                columnWidth: .20,
                layout: 'form',
                border: false,
                bodyStyle: '5px 5px 0px',
                items: [FieldFirstName]
            }, {
                columnWidth: .20,
                layout: 'form',
                border: false,
                bodyStyle: '5px 5px 0px',
                items: [FieldMiddleName]
            }, {
                columnWidth: .60,
                layout: 'form',
                border: false,
                bodyStyle: '5px 5px 0px',
                items: [FieldLastName]
            }]
        }]
    });

    this.CommonNameCombinationFrm.addButton({
        text: (isRTL ? '?????' : 'Update'),
        handler: function () {
            Ext.getCmp(FirstName).setValue(FieldFirstName.getValue());
            Ext.getCmp(MiddleName).setValue(FieldMiddleName.getValue());
            Ext.getCmp(LastName).setValue(FieldLastName.getValue());
            Ext.getCmp(NameID).setValue(FieldFirstName.getValue() + ' ' + FieldMiddleName.getValue() + ' ' + FieldLastName.getValue());
            this.CommonNameCombinationWin.close();
        },
        scope: this,
        tabIndex: 304
    });

    this.CommonNameCombinationFrm.addButton({
        text: GlobalTerminologies.LBLCLOSE, //'Close',
        handler: function () { this.CommonNameCombinationWin.close(); },
        scope: this,
        tabIndex: 305
    });

    this.CommonNameCombinationWin = new Ext.Window({
        title: this.terminologies.LBLHELPTOPICS,
        width: 410,
        height: 135,
        id: 'CommonNameCombinationWin',
        closable: true,
        plain: true,
        resizable: false,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        closeTips: GlobalTerminologies.LBLCLOSE,
        hideBorders: true,
        bodyBorder: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.CommonNameCombinationFrm]
    });

    this.CommonNameCombinationWin.show();
}


function Asset_Work_Post(form, login) {

    var PrimKey = Ext.getCmp('AssetWorkbench').selectedIndex;
    var PostedCode = Ext.getCmp('AssetWorkbench-PostedCode').getValue();
    if (PostedCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'Asset_Work_Post',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', AssetWork, this);
}


// Patient Nuresery Posting
function LoginNursery(form, login) {

    if (!form.isView) {
        var ProviderType = '';
        var ActivityType = Ext.getCmp('LoginNursery-ActivityType').getValue();

        if (form.selectedIndex == -1 && !form.isView) {
            Ext.getCmp('LoginNursery-StatusCode').setComboValue(0);
            Ext.getCmp('LoginNursery-StatusCode').disable();
        }

        if (form.selectedIndex != -1 && !form.isView) {
            Ext.getCmp('LoginNursery-StatusCode').disable();
        }

        var Service_ProviderCode = Ext.getCmp('LoginNurseryServicedtl-Service_ProviderCode');

        Ext.getCmp('LoginNursery-Clinic_No_Code').on('select', function (combo, record, options) {
            ProviderType = record.data.Serviceprovidertype;
        }, this);

        var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList').getStore();

        LoginNurseryServicedtlList.on('load', function (store, record, options) {

            var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList')
            var AddNewBt = Ext.getCmp(LoginNurseryServicedtlList.id + '_addNew');
            if (AddNewBt) AddNewBt.setVisible(false);

            var ServiceTotal = Ext.getCmp('LoginNursery-ServiceTotal');
            var Total = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                Total += record.get('Total');
            }
            ServiceTotal.setValue(Total);
        }, this);


        var Clinic_No_Code = Ext.getCmp('LoginNursery-Clinic_No_Code');
        if (Clinic_No_Code) Clinic_No_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MCL.ISProvider=0 ";
        }, this);

        var Physician_Code = Ext.getCmp('LoginNursery-Mc_PhysicianCode');
        if (Physician_Code) Physician_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            //evt.combo.store.baseParams.filter = " Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE in (select nvl(PARENTPROVIDER,PROVIDERCODE) from ME_PROVIDERS where PROVIDERCODE=" + Clinic_No_Code + " )) ";
            evt.combo.store.baseParams.filter = " PCL.PROVIDERCODE in( select nvl(PARENTPROVIDER,PROVIDERCODE) from ME_PROVIDERS  where PROVIDERCODE=" + Clinic_No_Code + ")";

        }, this);

        var Mc_PhysicianCode = Ext.getCmp('LoginNursery-Mc_PhysicianCode');
        if (Mc_PhysicianCode) Mc_PhysicianCode.on('select', function (combo, record, options) {
            if (record.data.ApprovedRequired)
                Ext.getCmp('LoginNursery-ApprovedRequired').setValue(1);
            else
                Ext.getCmp('LoginNursery-ApprovedRequired').setValue(0);

            DefaultApprovedRequired = record.data.ApprovedRequired;

        }, this);
        var ApprovedRequired = Ext.getCmp('LoginNursery-ApprovedRequired').getValue();
        if (ApprovedRequired == 1)
            DefaultApprovedRequired = true;

        if (Clinic_No_Code) Clinic_No_Code.on('select', function (combo, record, options) {
            var Patient_Type = Ext.getCmp('LoginNursery-Patient_Type').getValue();
            var ClinicParentProvider = Ext.getCmp('LoginNursery-ClinicParentProvider').getValue();
            var ClinicProviderType = Ext.getCmp('LoginNursery-ClinicProviderType').getValue();
            var ActivityType = Ext.getCmp('LoginNursery-ActivityType').getValue();
            if (Patient_Type == 4) {
                if (ClinicProviderType == 0)
                    DefaultClinicCode = combo.getValue();
                else
                    DefaultClinicCode = ClinicParentProvider;
            }
            else {
                DefaultClinicCode = combo.getValue();
            }
            DefaultDHAType = ActivityType;
            DefaultPatientType = Patient_Type;
        }, this)

        if (form.selectedIndex != -1) {
            var Patient_Type = Ext.getCmp('LoginNursery-Patient_Type').getValue();
            var ClinicParentProvider = Ext.getCmp('LoginNursery-ClinicParentProvider').getValue();
            var ClinicProviderType = Ext.getCmp('LoginNursery-ClinicProviderType').getValue();
            var Clinic_No_Code = Ext.getCmp('LoginNursery-Clinic_No_Code').editValue;
            var ActivityType = Ext.getCmp('LoginNursery-ActivityType').getValue();

            if (Patient_Type == 4) {
                if (ClinicProviderType == 0)
                    DefaultClinicCode = Clinic_No_Code;
                else
                    DefaultClinicCode = ClinicParentProvider;
            }
            else {
                DefaultClinicCode = Clinic_No_Code;
            }

            DefaultDHAType = ActivityType;
            DefaultPatientType = Patient_Type;
        }

        var Pl_Reception_Code = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();
        DefaultReceptionCode = Pl_Reception_Code;

        var Dianostic_Clinic_Code = Ext.getCmp('LoginNursery-Dianostic_Clinic_Code');
        if (Dianostic_Clinic_Code) Dianostic_Clinic_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MCL.ISProvider=1";
        }, this);

        var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
        if (LoginNurseryDrugDtlList) LoginNurseryDrugDtlList.on('afteredit', function (e) {
            var Record = e.record;
            Record.set('Drug_Total', Number(Record.get('Quantity')) * Number(Record.get('Avg_Cost')))

        }, this);

        var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
        if (LoginNurseInjectionDtlList) LoginNurseInjectionDtlList.on('afteredit', function (e) {
            var Record = e.record;
            Record.set('Drug_Total', Number(Record.get('Quantity')) * Number(Record.get('Avg_Cost')))

        }, this);


        //-------------------  view Drug Details --------------------

        var DenialReasonName = Ext.getCmp('LoginNursery-DenialReasonName');
        var Service_Name = Ext.getCmp('LoginNursery-Service_Name');
        var Refills = Ext.getCmp('LoginNursery-Refills');
        var RouteOfAdminName = Ext.getCmp('LoginNursery-RouteOfAdminName');
        var Instructions = Ext.getCmp('LoginNursery-Instructions');
        var DrugRAAmount = Ext.getCmp('LoginNursery-DrugRAAmount');
        var DrugPaymentAmount = Ext.getCmp('LoginNursery-DrugPaymentAmount');
        var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');

        LoginNurseryDrugDtlList.on('rowclick', function (grid, rowIndex, e) {
            LoginNurseryDrugDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            DenialReasonName.setValue(Record.get('DenialReasonName'));
            Service_Name.setValue(Record.get('Service_Name'));
            Refills.setValue(Record.get('Refills'));
            RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
            Instructions.setValue(Record.get('Instructions'));
            DrugRAAmount.setValue(Record.get('RAAmount'));
            DrugPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        LoginNurseryDrugDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            LoginNurseryDrugDtlList.lastSelectedRecord = Record;
            DenialReasonName.setValue(Record.get('DenialReasonName'));
            Service_Name.setValue(Record.get('Service_Name'));
            Refills.setValue(Record.get('Refills'));
            RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
            Instructions.setValue(Record.get('Instructions'));
            DrugRAAmount.setValue(Record.get('RAAmount'));
            DrugPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);


        //-------------------to view Injection Details  

        var InjectionDenialReasonName = Ext.getCmp('LoginNursery-InjectionDenialReasonName');
        var DenialDesc = Ext.getCmp('LoginNursery-DenialDesc');
        var PriorAuthCode = Ext.getCmp('LoginNursery-PriorAuthCode');
        var InjectionRAAmount = Ext.getCmp('LoginNursery-InjectionRAAmount');
        var InjectionPaymentAmount = Ext.getCmp('LoginNursery-InjectionPaymentAmount');
        var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');

        LoginNurseInjectionDtlList.on('rowclick', function (grid, rowIndex, e) {
            LoginNurseInjectionDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
            DenialDesc.setValue(Record.get('DenialDesc'));
            PriorAuthCode.setValue(Record.get('PriorAuthCode'));
            InjectionRAAmount.setValue(Record.get('RAAmount'));
            InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        LoginNurseInjectionDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            LoginNurseInjectionDtlList.lastSelectedRecord = Record;
            InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
            DenialDesc.setValue(Record.get('DenialDesc'));
            PriorAuthCode.setValue(Record.get('PriorAuthCode'));
            InjectionRAAmount.setValue(Record.get('RAAmount'));
            InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);


        //-------------------to view Service Details  

        var ServiceDenialReasonName = Ext.getCmp('LoginNursery-ServiceDenialReasonName');
        var ServiceDenialDesc = Ext.getCmp('LoginNursery-ServiceDenialDesc');
        var ServicePriorAuthCode = Ext.getCmp('LoginNursery-ServicePriorAuthCode');
        var Service_ProviderName = Ext.getCmp('LoginNursery-Service_ProviderName');
        var SerPhysician_Name = Ext.getCmp('LoginNursery-SerPhysician_Name');
        var ServiceRequestAmount = Ext.getCmp('LoginNursery-ServiceRequestAmount');
        var ServiceDeductible_Amount = Ext.getCmp('LoginNursery-ServiceDeductible_Amount');
        var ServicePatientSharePercent = Ext.getCmp('LoginNursery-ServicePatientSharePercent');
        var ServicePatientShare = Ext.getCmp('LoginNursery-ServicePatientShare');
        var ServiceRAAmount = Ext.getCmp('LoginNursery-ServiceRAAmount');
        var PaymentAmount = Ext.getCmp('LoginNursery-PaymentAmount');

        var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList');

        LoginNurseryServicedtlList.on('rowclick', function (grid, rowIndex, e) {
            LoginNurseryServicedtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
            ServiceDenialDesc.setValue(Record.get('DenialDesc'));
            ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
            Service_ProviderName.setValue(Record.get('Service_ProviderName'));
            SerPhysician_Name.setValue(Record.get('Physician_Name'));
            ServiceRequestAmount.setValue(Record.get('RequestAmount'));
            ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
            ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
            ServicePatientShare.setValue(Record.get('PatientShare'));
            ServiceRAAmount.setValue(Record.get('RAAmount'));
            PaymentAmount.setValue(Record.get('PaymentAmount'));

        }, this);

        LoginNurseryServicedtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            LoginNurseryServicedtlList.lastSelectedRecord = Record;
            ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
            ServiceDenialDesc.setValue(Record.get('DenialDesc'));
            ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
            Service_ProviderName.setValue(Record.get('Service_ProviderName'));
            SerPhysician_Name.setValue(Record.get('Physician_Name'));
            ServiceRequestAmount.setValue(Record.get('RequestAmount'));
            ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
            ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
            ServicePatientShare.setValue(Record.get('PatientShare'));
            ServiceRAAmount.setValue(Record.get('RAAmount'));
            PaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList');
        LoginNurseryServicedtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        LoginNurseryServicedtlList.getColumnModel().getColumnById('PriorStatus').editable = false;
        var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
        LoginNurseryDrugDtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        LoginNurseryDrugDtlList.getColumnModel().getColumnById('PriorStatus').editable = false;
        LoginNurseryDrugDtlList.getColumnModel().getColumnById('ErxStatus').editable = false;
        var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
        LoginNurseInjectionDtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        LoginNurseInjectionDtlList.getColumnModel().getColumnById('PriorStatus').editable = false;
    }




    //-------------------Adding Colour to Grid Based on Status-----------------------

    var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');  //   DrugDtl
    if (LoginNurseryDrugDtlList)
        LoginNurseryDrugDtlListConfig = LoginNurseryDrugDtlList.getColumnModel().config;

    for (var i = 0; i < LoginNurseryDrugDtlListConfig.length; i++)
        if (!LoginNurseryDrugDtlListConfig[i].actions && !LoginNurseryDrugDtlListConfig[i].checkbox) LoginNurseryDrugDtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

    var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');  // InjectionDtl
    if (LoginNurseInjectionDtlList)
        LoginNurseInjectionDtlListConfig = LoginNurseInjectionDtlList.getColumnModel().config;

    for (var i = 0; i < LoginNurseInjectionDtlListConfig.length; i++)
        if (!LoginNurseInjectionDtlListConfig[i].actions && !LoginNurseInjectionDtlListConfig[i].checkbox) LoginNurseInjectionDtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

    var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList');   //   Servicedtl
    if (LoginNurseryServicedtlList)
        LoginNurseryServicedtlListConfig = LoginNurseryServicedtlList.getColumnModel().config;

    for (var i = 0; i < LoginNurseryServicedtlListConfig.length; i++)
        if (!LoginNurseryServicedtlListConfig[i].actions && !LoginNurseryServicedtlListConfig[i].checkbox) LoginNurseryServicedtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;
}


function AssetWork(conn, response) {
    Ext.Ajax.un('requestcomplete', AssetWork, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        var Status = Ext.getCmp('AssetWorkbench-PostedCode').getValue();
        {
            Ext.getCmp('AssetWorkbench-PostedCode').setComboValue(1);
        }
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function MCClinics(form, login) {
    if (!form.isView) {
        Ext.getCmp('MCClinics-Clinic_No').disable();
    }

    var Doctor = Ext.getCmp('MCClinicDoctors-DoctorCode');
    var NurseCode = Ext.getCmp('MCClinicNurse-NurseCode');

    if (Doctor) Doctor.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=0";
    }, this);

    if (NurseCode) NurseCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=1";
    }, this);

}


function MC_Clinics(form, login) {

    if (!form.isView) {

        var HeadOfficeCode = Ext.getCmp('MC_Clinics-HeadOfficeCode');
        if (HeadOfficeCode) HeadOfficeCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " pro.PROVIDERTYPE=0";
        }, this);

        var DoctorCode = Ext.getCmp('MCClinicDoctors-DoctorCode');
        if (DoctorCode) DoctorCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mcp.STAFFTYPE=0";
        }, this);

        var NurseCode = Ext.getCmp('MCClinicNurse-NurseCode');
        if (NurseCode) NurseCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mcp.STAFFTYPE=1";
        }, this);

        var ProviderType = Ext.getCmp('MC_Clinics-ProviderTypeCode');
        if (form.selectedIndex == -1)
            ProviderType.setComboValue(1);

        var CityCode = Ext.getCmp('MC_Clinics-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('MC_Clinics-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);


    }
}


function TMCouponReceiptPopup(form, login)
{ }

function TMPopupSearchHandler(button, option) {

    var FilterQry = '';
    var CouponType = Ext.getCmp('TMCouponReceiptPopup-Coupon_TypeCode');

    if (CouponType.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " RPTD.COUPON_TYPE=" + CouponType.getValue();
        else
            FilterQry += " and RPTD.COUPON_TYPE=" + CouponType.getValue();
    }

    var Category = Ext.getCmp('TMCouponReceiptPopup-Coupon_CategoryCode');

    if (Category.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " RPTD.COUPON_CATEGORY=" + Category.getValue();
        else
            FilterQry += " and RPTD.COUPON_CATEGORY=" + Category.getValue();
    }

    var CouponCode = Ext.getCmp('TMCouponReceiptPopup-Coupon_Code');

    if (CouponCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " RPTD.COUPON_CODE=" + CouponCode.getValue();
        else
            FilterQry += " and RPTD.COUPON_CODE=" + CouponCode.getValue();
    }

    DetailStore = Ext.getCmp('TMCouponReceiptPopupDtlList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Tamweel.CouponsTransactions.TMCouponReceiptPopupDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function TMPopupClearHandler(button, option) {
    var CouponType = Ext.getCmp('TMCouponReceiptPopup-Coupon_TypeCode').clearValue();
    var Category = Ext.getCmp('TMCouponReceiptPopup-Coupon_CategoryCode').clearValue();
    var CouponCode = Ext.getCmp('TMCouponReceiptPopup-Coupon_Code').clearValue();
    var FilterQry = '';
    DetailStore = Ext.getCmp('TMCouponReceiptPopupDtlList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Tamweel.CouponsTransactions.TMCouponReceiptPopupDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function TMReceiptPopupsHandler(form, login) {


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TMReceiptPopupForm'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMReceiptPopupFormReqComplete, this);

}
function TMReceiptPopupFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMReceiptPopupFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.TMReceiptPopupForm = new Ext.form.FormPanel(responseText.TMReceiptPopupGenCofig);
    this.TMReceiptPopupForm.addButton(
        {
            text: 'Ok',
            handler: function () {

                var TMCouponReceiptDtlListEntryGrid = Ext.getCmp('TMCouponReceiptDtlList');
                var selectcnt = 0;

                var TMCouponReceiptPopupDtlList = Ext.getCmp('TMCouponReceiptPopupDtlList');
                var TMCouponReceiptDtlList = Ext.getCmp('TMCouponReceiptDtlList');
                var count = TMCouponReceiptDtlList.store.getCount();
                var store = Ext.getCmp('TMCouponReceiptPopupDtlList').getStore();


                for (var pcnt = 0; pcnt < TMCouponReceiptPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = TMCouponReceiptPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('select_Name')) continue;

                    TMCouponReceiptDtlListEntryGrid.storeId += 1;
                    var CouponRctID = TMCouponReceiptDtlListEntryGrid.storeId;
                    var newRecord = new TMCouponReceiptDtlListEntryGrid.recordType({
                        ID: CouponRctID,
                        SerialNo: CouponRctID,
                        Coupons_Receipt_Hdr_Code: 1,
                        Coupon_TypeCode: PopupRecord.get('Coupon_TypeCode'),
                        Coupon_TypeName: PopupRecord.get('Coupon_TypeName'),
                        Coupon_CategoryCode: PopupRecord.get('Coupon_CategoryCode'),
                        Coupon_CategoryName: PopupRecord.get('Coupon_CategoryName'),
                        Coupon_Code: PopupRecord.get('Coupon_Code'),
                        Coupon_Name: PopupRecord.get('Coupon_Name'),
                        Current_Number: PopupRecord.get('Current_Number'),
                        To_Number: PopupRecord.get('To_Number'),
                        Amount: PopupRecord.get('Amount'),
                        Comments1: "",
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    TMCouponReceiptDtlListEntryGrid.stopEditing();
                    TMCouponReceiptDtlListEntryGrid.store.add(newRecord);
                    TMCouponReceiptDtlListEntryGrid.store.totalLength = TMCouponReceiptDtlListEntryGrid.store.getTotalCount() + 1;
                    TMCouponReceiptDtlListEntryGrid.pageBar.updateInfo();
                }
                this.TMReceiptPopupFormWindow.close();
                var TMCouponReceiptDtlList = Ext.getCmp('TMCouponReceiptDtlList');
                TMCouponReceiptDtlList.store.load(
                   {
                       params:
                           {
                               start: 0,
                               limit: TMCouponReceiptDtlList.pageSize
                           }
                   });
            },

            scope: this,
            formBind: true,
            tabIndex: this.TMReceiptPopupForm.FormFieldsCount + 2
        });
    this.TMReceiptPopupForm.addButton(
     {
         text: 'Cancel',
         handler: function () {
             this.TMReceiptPopupFormWindow.close();
         },
         scope: this,
         tabIndex: this.TMReceiptPopupForm.FormFieldsCount + 2

     });

    this.TMReceiptPopupFormWindow = new Ext.Window(

        {

            id: 'TMReceiptPopupFormWindow',
            title: 'TMReceiptPopup',
            closable: true,
            minimizable: false,
            width: this.TMReceiptPopupForm.width + 10,
            height: this.TMReceiptPopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.TMReceiptPopupForm]

        });
    this.TMReceiptPopupFormWindow.show();

}



var SelectedHitoryID = '';
var RecepPrimKey = '';
var PopPatient_NoCode = '';
var GReception = '';
function PatientsLoginReception(form, login) {


    if (!form.isview) {
        var ActivityType = Ext.getCmp('PatientsLoginReception-ActivityType');
        var ErxReqeustBt = Ext.getCmp('PatientsLoginReception-ErxReqeustBt');
        var PriorRequestBt = Ext.getCmp('PatientsLoginReception-PriorRequestBt');
        var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code');
        var PatientTypeCode = Ext.getCmp('PatientsLoginReception-PatientTypeCode');
        var MakeClaimBt = Ext.getCmp('PatientsLoginReception-MakeClaimBt');

        if (ActivityType.getValue() == 0) {
            //ErxReqeustBt.disable();
        }
        if (form.selectedIndex == -1) {
            //ErxReqeustBt.disable();
        }
        if (Clinic_No_Code) Clinic_No_Code.on('select', function (combo, record, index) {
            if (ActivityType.getValue() == 0) {
                //ErxReqeustBt.disable();
                //PriorRequestBt.disable();
            }
            else {
                //ErxReqeustBt.enable();
                //PriorRequestBt.enable();
            }
        }, this);
    }

    if (form.selectedIndex == -1) {
        Ext.getCmp('PatientsLoginReception-EncounterTypeCode').setComboValue(2);
        Ext.getCmp('PatientsLoginReception-OutType_Code').setComboValue(1);
    }

    var ProviderType = '';
    var ISContract = '';
    var ContractPrice = '';
    var PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode');
    var UserName = Ext.getCmp('PatientsLoginReception-UserName').setValue(login.UserName);
    var RecepPrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    if (PatientCode) PatientCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "1=1";//"REG.PATIENT_TYPE not in(5)";
    }, this);

    var Doctor_Code = Ext.getCmp('PatientsLoginReception-Doctor_Code');
    if (Doctor_Code) Doctor_Code.on('beforequery', function (evt) {
        var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code');
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE in (select nvl(PARENTPROVIDER,PROVIDERCODE) from ME_PROVIDERS where PROVIDERCODE=" + Clinic_No_Code.editValue + " )) ";
    }, this);

    // PatientCode.tpl = "<tpl for='.'><div style='color:{RED};>{"+PatientCode.displayField+"}</div></tpl>";

    var ReceptionDrugDetail = Ext.getCmp('ReceptionDrugDetailList');

    var AddDrugBt = Ext.getCmp(ReceptionDrugDetail.id + '_addNew');
    AddDrugBt = ReceptionDrugDetail.tbButtons;
    if (AddDrugBt)
        AddDrugBt.setVisible(false);

    var InsurerCode = Ext.getCmp('PatientsLoginReception-InsurerCode');
    if (InsurerCode) InsurerCode.on('beforequery', function (evt) {
        var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;
        //evt.combo.lastQuery = '1=2';
        //evt.combo.store.baseParams.filter = " Subreg.PATIENTS_REGISTRATION_CODE=" + Patient_NoCode + " and to_date(sysdate,'DD/MM/RRRR') between to_date(Subreg.POLICYSTARTDATE,'DD/MM/RRRR') and to_date(Subreg.POLICYENDDATE,'DD/MM/RRRR')";
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " Subreg.PATIENTS_REGISTRATION_CODE=" + Patient_NoCode + " ";
    }, this);

    var InsurerCode = Ext.getCmp('PatientsLoginReception-InsurerCode');
    if (InsurerCode) InsurerCode.on('beforequery', function (evt) {
        var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " Subreg.PATIENTS_REGISTRATION_CODE=" + Patient_NoCode + " ";
    }, this);

    var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code');
    if (Clinic_No_Code) Clinic_No_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MCL.ISProvider=0 ";
    }, this);

    if (Clinic_No_Code) Clinic_No_Code.on('select', function (combo, record, options) {
        var Patient_Type = Ext.getCmp('PatientsLoginReception-PatientTypeCode').editValue;
        var ClinicParentProvider = Ext.getCmp('PatientsLoginReception-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('PatientsLoginReception-ClinicProviderType').getValue();
        var ActivityType = Ext.getCmp('PatientsLoginReception-ActivityType').getValue();

        if (Patient_Type == 4) {
            if (ClinicProviderType == 0)
                DefaultClinicCode = combo.getValue();
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            DefaultClinicCode = combo.getValue();
        }

        DefaultDHAType = ActivityType;
        DefaultPatientType = Patient_Type;

    }, this)

    if (form.selectedIndex != -1) {
        var Patient_Type = Ext.getCmp('PatientsLoginReception-PatientTypeCode').editValue;
        var ClinicParentProvider = Ext.getCmp('PatientsLoginReception-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('PatientsLoginReception-ClinicProviderType').getValue();
        var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code').editValue;
        var ActivityType = Ext.getCmp('PatientsLoginReception-ActivityType').getValue();
        if (Patient_Type == 4) {
            if (ClinicProviderType == 0)
                DefaultClinicCode = Clinic_No_Code;
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            DefaultClinicCode = Clinic_No_Code;
        }
        DefaultDHAType = ActivityType;
        DefaultPatientType = Patient_Type;
    }

    var Dianostic_Clinic_Code = Ext.getCmp('PatientsLoginReception-Dianostic_Clinic_Code');
    if (Dianostic_Clinic_Code) Dianostic_Clinic_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MCL.ISProvider=1";
    }, this);

    var PatientTypeCode = Ext.getCmp('PatientsLoginReception-PatientTypeCode');
    var InsurerCode = Ext.getCmp('PatientsLoginReception-InsurerCode');
    var CardId = Ext.getCmp('PatientsLoginReception-CardId');
    var PayerCode = Ext.getCmp('PatientsLoginReception-PayerCode');
    var CardText = Ext.getCmp('PatientsLoginReception-CardText');
    var CoinsurancePercentage = Ext.getCmp('PatientsLoginReception-CoinsurancePercentage');
    var EncounterTypeCode = Ext.getCmp('PatientsLoginReception-EncounterTypeCode');
    var EncounterStartDate = Ext.getCmp('PatientsLoginReception-EncounterStartDate');
    var EncounterEndDate = Ext.getCmp('PatientsLoginReception-EncounterEndDate');
    var Emirates_ID_No = Ext.getCmp('PatientsLoginReception-Emirates_ID_No');

    if (form.selectedIndex != -1) {
        if (PatientTypeCode.editValue == 4) { // issur
            InsurerCode.enable();
            InsurerCode.allowBlank = false;
            InsurerCode.isValid();

            EncounterTypeCode.allowBlank = false;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = false;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = false;
            EncounterEndDate.isValid();

            Emirates_ID_No.allowBlank = false;
            Emirates_ID_No.isValid();

            PayerCode.enable();
            PayerCode.allowBlank = false;
            PayerCode.isValid();

        }
        if (PatientTypeCode.editValue == 0) {// normal 
            InsurerCode.disable();
            InsurerCode.allowBlank = true;
            InsurerCode.isValid();

            EncounterTypeCode.allowBlank = true;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = true;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = true;
            EncounterEndDate.isValid();

            Emirates_ID_No.allowBlank = true;
            Emirates_ID_No.isValid();

            PayerCode.disable();
            PayerCode.allowBlank = true;
            PayerCode.isValid();
        }
    }
    if (PatientTypeCode) PatientTypeCode.on('select', function (combo, record, options) {

        var ClinicParentProvider = Ext.getCmp('PatientsLoginReception-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('PatientsLoginReception-ClinicProviderType').getValue();
        var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code').editValue;

        DefaultPatientType = PatientTypeCode.editValue;

        if (PatientTypeCode.editValue == 4) { //inssur
            InsurerCode.enable();
            InsurerCode.clearValue();
            InsurerCode.allowBlank = false;
            InsurerCode.isValid();

            PayerCode.clearValue();
            PayerCode.clearInvalid();
            PayerCode.enable();

            EncounterTypeCode.allowBlank = false;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = false;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = false;
            EncounterEndDate.isValid();

            Emirates_ID_No.allowBlank = false;
            Emirates_ID_No.isValid();

            if (ClinicProviderType == 0)
                DefaultClinicCode = Clinic_No_Code;
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            InsurerCode.allowBlank = true;
            InsurerCode.clearValue();
            InsurerCode.clearInvalid();
            InsurerCode.disable();

            PayerCode.clearValue();
            PayerCode.clearInvalid();
            PayerCode.disable();

            CardId.allowBlank = true;
            CardId.setValue(null);
            CardId.isValid();

            CardText.allowBlank = true;
            CardText.setValue(null);
            CardText.isValid();

            CoinsurancePercentage.allowBlank = true;
            CoinsurancePercentage.setValue(null);
            CoinsurancePercentage.isValid();

            EncounterTypeCode.allowBlank = true;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = true;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = true;
            EncounterEndDate.isValid();

            DefaultClinicCode = Clinic_No_Code;

            Emirates_ID_No.allowBlank = true;
            Emirates_ID_No.isValid();
        }


    }, this);

    if (PatientCode) PatientCode.on('select', function (combo, record, options) {

        var ClinicParentProvider = Ext.getCmp('PatientsLoginReception-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('PatientsLoginReception-ClinicProviderType').getValue();
        var Clinic_No_Code = Ext.getCmp('PatientsLoginReception-Clinic_No_Code').editValue;

        DefaultPatientType = PatientTypeCode.editValue;

        if (PatientTypeCode.editValue == 4) { //inssur
            InsurerCode.enable();
            InsurerCode.clearValue();
            InsurerCode.allowBlank = false;
            InsurerCode.isValid();

            EncounterTypeCode.allowBlank = false;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = false;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = false;
            EncounterEndDate.isValid();

            CardId.allowBlank = true;
            CardId.setValue(null);
            CardId.isValid();

            PayerCode.clearValue();
            PayerCode.clearInvalid();
            PayerCode.enable();

            CardText.allowBlank = true;
            CardText.setValue(null);
            CardText.isValid();

            CoinsurancePercentage.allowBlank = true;
            CoinsurancePercentage.setValue(null);
            CoinsurancePercentage.isValid();

            if (ClinicProviderType == 0)
                DefaultClinicCode = Clinic_No_Code;
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            InsurerCode.allowBlank = true;
            InsurerCode.clearValue();
            InsurerCode.clearInvalid();
            InsurerCode.disable();

            CardId.allowBlank = true;
            CardId.setValue(null);
            CardId.isValid();

            PayerCode.clearValue();
            PayerCode.clearInvalid();
            PayerCode.disable();

            CardText.allowBlank = true;
            CardText.setValue(null);
            CardText.isValid();

            CoinsurancePercentage.allowBlank = true;
            CoinsurancePercentage.setValue(null);
            CoinsurancePercentage.isValid();

            EncounterTypeCode.allowBlank = true;
            EncounterTypeCode.isValid();

            EncounterStartDate.allowBlank = true;
            EncounterStartDate.isValid();

            EncounterEndDate.allowBlank = true;
            EncounterEndDate.isValid();

            DefaultClinicCode = Clinic_No_Code;
        }


    }, this);

    if (form.selectedIndex != -1 && form.isView) {
        //Ext.getCmp('PatientsLoginReceptionPost').disable();
        //Ext.getCmp('LoginReception_ClinicPost').disable();
        //Ext.getCmp('PostReceptionToLab').disable();
        //Ext.getCmp('PostDrugReceptionToPharmacy').disable();
        var Clinic_Status = Ext.getCmp('PatientsLoginReception-Clinic_Status').getValue();
        if (Clinic_Status == 4) {
            Ext.getCmp('ReceptionLogout').setText('UnLogout');
        }
        var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').disable();
    }
    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('PatientsLoginReception-StatusCode').setComboValue(0);
        Ext.getCmp('PatientsLoginReception-StatusCode').disable();
        Ext.getCmp('PatientsLoginReception-Clinic_Status').setValue(1);
        var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').enable();
        var PopPatient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').getValue();

    }

    if (form.selectedIndex != -1 && !form.isView) {
        Ext.getCmp('PatientsLoginReception-StatusCode').disable();
        var PopPatient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;
        var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').disable();
    }

    var PatientLoginReceptionDet = Ext.getCmp('PatientLoginReceptionDetailList');

    PatientLoginReceptionDet.on('beforeedit', function (e) {
        var record = e.record;
        var Physician_Code = Ext.getCmp('PatientLoginReceptionDetail-Physician_Code');
        var Service_ProviderCode = record.get('Service_ProviderCode');

        Physician_Code.lastQuery = '1=2';
        Physician_Code.store.baseParams.filter = "Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE=" + Service_ProviderCode + " )";

    }, this);

    PatientLoginReceptionDet.on('afteredit', function (e) {

        var record = e.record;
        var TrTotl = 0.0;
        var NetTotal = Ext.getCmp('PatientsLoginReception-NetTotal')
        record.set('Total', record.get('Service_Price'));
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var record = e.grid.store.getAt(i);
            TrTotl += Number(record.get('Total'));
        }
        NetTotal.setValue(TrTotl);

    }, this);

    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
    var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetail-Service_ProviderCode');


    var SubServiceCode = Ext.getCmp('PatientLoginReceptionDetail-SubServiceCode');

    if (SubServiceCode) SubServiceCode.on('beforequery', function (evt) {
        var Service_NoCode = PatientLoginReceptionDetailList.SelectedRecord.get('ServiceTypeCode');
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "sub.ServiceType_Code=" + Service_NoCode;
    }, this);


    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList').getStore();
    PatientLoginReceptionDetailList.on('load', function (store, record, options) {

        var PatientLoginReceptionDetail = Ext.getCmp('PatientLoginReceptionDetailList');
        var detGrid = Ext.getCmp('PatientLoginReceptionDetailList');
        var tbButtons = detGrid.tbButtons;
        var addButton = Ext.getCmp(PatientLoginReceptionDetail.id + '_addNew');
        if (addButton) addButton.setVisible(false);
        var Patient_Type = Ext.getCmp('PatientsLoginReception-PatientTypeCode').editValue;

        var TrTotl = 0.0;
        var NetTotal = Ext.getCmp('PatientsLoginReception-NetTotal');
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TrTotl += record.get('Total');
        }

        NetTotal.setValue(TrTotl);
    }, this);


    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');

    //PatientLoginReceptionDetailList.on('rowclick', function (Grid, rowIndex, e) {

    //}, this);

    PatientLoginReceptionDetailList.on('beforeedit', function (e) {
        var record = e.record;
        PatientLoginReceptionDetailList.SelectedRecord = record;
    }, this);

    var ServiceProviderCode = Ext.getCmp('PatientLoginReceptionDetail-Service_ProviderCode');

    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
    var Description = Ext.getCmp('PatientsLoginReception-Description');

    PatientLoginReceptionDetailList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
        PatientLoginReceptionDetailRowSelect(Record);
    }, this);

    PatientLoginReceptionDetailList.on('rowclick', function (grid, Index, e) {
        var Record = grid.store.getAt(Index);
        PatientLoginReceptionDetailRowSelect(Record);
    }, this);

    Description.on('valid', function (field) {
        if (PatientLoginReceptionDetailList.lastSelectedRecord)
            PatientLoginReceptionDetailList.lastSelectedRecord.set('Description', Description.getValue());
    }, this);


    //var StatusCode = Ext.getCmp('PatientLoginReceptionDetail-StatusCode').editValue;
    //       StatusCode.setComboValue(0);
    Ext.getCmp('PatientLoginReceptionDetailList').on('beforedelete', function (record) {
        if (record.get('StatusCode') != null && record.get('StatusCode') != '' && record.get('StatusCode') != 0) {
            Ext.getCmp('PatientLoginReceptionDetailList').DelMsg = "Cannot Delete. Only Open Status Service can be deleted!";
            return false;
        }
        else return true;
    }, this);

    var ReceptionHistoryDetailList = Ext.getCmp('ReceptionHistoryDetailList');
    ReceptionHistoryDetailList.on('rowclick', function (grid, Index, e) {
        var Record = grid.store.getAt(Index);

        SelectedHitoryID = Record.get('ID');

    }, this);


    ReceptionHistoryDetailList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        SelectedHitoryID = Record.get('ID');

    }, this);


    var ReceptionDrugDetailList = Ext.getCmp('ReceptionDrugDetailList').getStore();

    ReceptionDrugDetailList.on('load', function (store, record, options) {

        var ReceptionDrugDetail = Ext.getCmp('ReceptionDrugDetailList');
        var detGrid = Ext.getCmp('ReceptionDrugDetailList');
        var Tbbutton = detGrid.tbButtons;

        var addDrugButton = Ext.getCmp(ReceptionDrugDetail.id + '_addNew');
        if (addDrugButton) addDrugButton.setVisible(false);

    }, this);

    var ReceptionDrugDetailList = Ext.getCmp('ReceptionDrugDetailList');
    ReceptionDrugDetailList.on('afteredit', function (e) {
        var record = e.record;
        record.set('Drug_Total', Number(record.get('Avg_Cost')) * Number(record.get('Quantity')));
    }, this);

    var Reception_Drug_InjectionDtlList = Ext.getCmp('Reception_Drug_InjectionDtlList');
    Reception_Drug_InjectionDtlList.on('afteredit', function (e) {
        var record = e.record;
        record.set('Drug_Total', Number(record.get('Avg_Cost')) * Number(record.get('Quantity')));
    }, this);

    //-------------------Adding Colour to Grid Based on Status-----------------------

    if (ReceptionDrugDetailList)   /// DrugDetail
        ReceptionDrugDetailConfig = ReceptionDrugDetailList.getColumnModel().config;

    for (var i = 0; i < ReceptionDrugDetailConfig.length; i++)
        if (!ReceptionDrugDetailConfig[i].actions && !ReceptionDrugDetailConfig[i].checkbox) ReceptionDrugDetailConfig[i].renderer = ReceptionDrugDetailConfigRender;

    if (Reception_Drug_InjectionDtlList)  // InjectionDtl
        Reception_Drug_InjectionDtlListConfig = Reception_Drug_InjectionDtlList.getColumnModel().config;

    for (var i = 0; i < Reception_Drug_InjectionDtlListConfig.length; i++)
        if (!Reception_Drug_InjectionDtlListConfig[i].actions && !Reception_Drug_InjectionDtlListConfig[i].checkbox) Reception_Drug_InjectionDtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
    if (PatientLoginReceptionDetailList) // Service Dtl
        PatientLoginReceptionDetailListConfig = PatientLoginReceptionDetailList.getColumnModel().config;

    for (var i = 0; i < PatientLoginReceptionDetailListConfig.length; i++)
        if (!PatientLoginReceptionDetailListConfig[i].actions && !PatientLoginReceptionDetailListConfig[i].checkbox) PatientLoginReceptionDetailListConfig[i].renderer = ReceptionDrugDetailConfigRender;

    var Out_PatientName = Ext.getCmp('PatientsLoginReception-Out_PatientName').disable();
    var Birth_Date = Ext.getCmp('PatientsLoginReception-Birth_Date').disable();
    var Mobileno = Ext.getCmp('PatientsLoginReception-Mobileno').disable();
    var Out_Idnumber = Ext.getCmp('PatientsLoginReception-Out_Idnumber').disable();
    var BloodgroupCode = Ext.getCmp('PatientsLoginReception-BloodgroupCode').disable();

    if (form.selectedIndex != -1 && !form.isView) {
        var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').getValue();
        var Out_PatientName = Ext.getCmp('PatientsLoginReception-Out_PatientName');
        var Birth_Date = Ext.getCmp('PatientsLoginReception-Birth_Date');
        var Mobileno = Ext.getCmp('PatientsLoginReception-Mobileno');
        //  var NationalityCode = Ext.getCmp('PatientsLoginReception-NationalityCode');
        var Out_Idnumber = Ext.getCmp('PatientsLoginReception-Out_Idnumber')
        var BloodgroupCode = Ext.getCmp('PatientsLoginReception-BloodgroupCode');

        var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode');
        var Patient_Name = Ext.getCmp('PatientsLoginReception-Patient_Name');
        var Patient_Alternate_Name = Ext.getCmp('PatientsLoginReception-Patient_Alternate_Name');

        if (OutTypeCode == true) {
            Out_PatientName.allowBlank = false;
            Out_PatientName.enable();
            Out_PatientName.isValid();

            Birth_Date.enable();

            Mobileno.enable();

            Out_Idnumber.enable();

            BloodgroupCode.enable();

            Patient_NoCode.clearValue();
            Patient_NoCode.disable();

            Patient_Name.allowBlank = true;
            Patient_Name.setValue(null);
            Patient_Name.disable();

            Patient_Alternate_Name.allowBlank = true;
            Patient_Alternate_Name.setValue(null);
            Patient_Alternate_Name.disable();

        }
    }

    //-------------------  view Drug Details --------------------

    var DenialReasonName = Ext.getCmp('PatientsLoginReception-DenialReasonName');
    var Service_Name = Ext.getCmp('PatientsLoginReception-Service_Name');
    var Refills = Ext.getCmp('PatientsLoginReception-Refills');
    var RouteOfAdminName = Ext.getCmp('PatientsLoginReception-RouteOfAdminName');
    var Instructions = Ext.getCmp('PatientsLoginReception-Instructions');
    var DrugRAAmount = Ext.getCmp('PatientsLoginReception-DrugRAAmount');
    var DrugPaymentAmount = Ext.getCmp('PatientsLoginReception-DrugPaymentAmount');
    var ReceptionDrugDetailList = Ext.getCmp('ReceptionDrugDetailList');

    ReceptionDrugDetailList.on('rowclick', function (grid, rowIndex, e) {
        ReceptionDrugDetailList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);
        DenialReasonName.setValue(Record.get('DenialReasonName'));
        Service_Name.setValue(Record.get('Service_Name'));
        Refills.setValue(Record.get('Refills'));
        RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
        Instructions.setValue(Record.get('Instructions'));
        DrugRAAmount.setValue(Record.get('RAAmount'));
        DrugPaymentAmount.setValue(Record.get('PaymentAmount'));

    }, this);

    ReceptionDrugDetailList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        ReceptionDrugDetailList.lastSelectedRecord = Record;
        DenialReasonName.setValue(Record.get('DenialReasonName'));
        Service_Name.setValue(Record.get('Service_Name'));
        Refills.setValue(Record.get('Refills'));
        RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
        Instructions.setValue(Record.get('Instructions'));
        DrugPaymentAmount.setValue(Record.get('PaymentAmount'));

    }, this);


    //-------------------to view Injection Details  

    var InjectionDenialReasonName = Ext.getCmp('PatientsLoginReception-InjectionDenialReasonName');
    var DenialDesc = Ext.getCmp('PatientsLoginReception-DenialDesc');
    var PriorAuthCode = Ext.getCmp('PatientsLoginReception-PriorAuthCode');
    var InjectionRAAmount = Ext.getCmp('PatientsLoginReception-InjectionRAAmount');
    var InjectionPaymentAmount = Ext.getCmp('PatientsLoginReception-InjectionPaymentAmount');
    var Reception_Drug_InjectionDtlList = Ext.getCmp('Reception_Drug_InjectionDtlList');

    Reception_Drug_InjectionDtlList.on('rowclick', function (grid, rowIndex, e) {
        Reception_Drug_InjectionDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);
        InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
        DenialDesc.setValue(Record.get('DenialDesc'));
        PriorAuthCode.setValue(Record.get('PriorAuthCode'));
        InjectionRAAmount.setValue(Record.get('RAAmount'));
        InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
    }, this);

    Reception_Drug_InjectionDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        Reception_Drug_InjectionDtlList.lastSelectedRecord = Record;
        InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
        DenialDesc.setValue(Record.get('DenialDesc'));
        PriorAuthCode.setValue(Record.get('PriorAuthCode'));
        InjectionRAAmount.setValue(Record.get('RAAmount'));
        InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
    }, this);


    //-------------------to view Service Details  

    var ServiceDenialReasonName = Ext.getCmp('PatientsLoginReception-ServiceDenialReasonName');
    var ServiceDenialDesc = Ext.getCmp('PatientsLoginReception-ServiceDenialDesc');
    var ServicePriorAuthCode = Ext.getCmp('PatientsLoginReception-ServicePriorAuthCode');
    var Service_ProviderName = Ext.getCmp('PatientsLoginReception-Service_ProviderName');
    var SerPhysician_Name = Ext.getCmp('PatientsLoginReception-SerPhysician_Name');
    var ServiceRequestAmount = Ext.getCmp('PatientsLoginReception-ServiceRequestAmount');
    var ServiceDeductible_Amount = Ext.getCmp('PatientsLoginReception-ServiceDeductible_Amount');
    var ServicePatientSharePercent = Ext.getCmp('PatientsLoginReception-ServicePatientSharePercent');
    var ServicePatientShare = Ext.getCmp('PatientsLoginReception-ServicePatientShare');
    var ServiceRAAmount = Ext.getCmp('PatientsLoginReception-ServiceRAAmount');
    var PaymentAmount = Ext.getCmp('PatientsLoginReception-PaymentAmount');

    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');

    PatientLoginReceptionDetailList.on('rowclick', function (grid, rowIndex, e) {
        PatientLoginReceptionDetailList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);
        ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
        ServiceDenialDesc.setValue(Record.get('DenialDesc'));
        ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
        Service_ProviderName.setValue(Record.get('Service_ProviderName'));
        SerPhysician_Name.setValue(Record.get('Physician_Name'));
        ServiceRequestAmount.setValue(Record.get('RequestAmount'));
        ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
        ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
        ServicePatientShare.setValue(Record.get('PatientShare'));
        ServiceRAAmount.setValue(Record.get('RAAmount'));
        PaymentAmount.setValue(Record.get('PaymentAmount'));
    }, this);

    PatientLoginReceptionDetailList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        PatientLoginReceptionDetailList.lastSelectedRecord = Record;
        ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
        ServiceDenialDesc.setValue(Record.get('DenialDesc'));
        ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
        Service_ProviderName.setValue(Record.get('Service_ProviderName'));
        SerPhysician_Name.setValue(Record.get('Physician_Name'));
        ServiceRequestAmount.setValue(Record.get('RequestAmount'));
        ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
        ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
        ServicePatientShare.setValue(Record.get('PatientShare'));
        ServiceRAAmount.setValue(Record.get('RAAmount'));
        PaymentAmount.setValue(Record.get('PaymentAmount'));
    }, this);

}

function ReceptionDrugDetailConfigRender(value, metaData, record, rowIndex, colIndex, store) {

    if (record.get('StatusCode') == 1) { // Paid
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('StatusCode') == 2) { // Closed
        return '<span style="font-weight:bold; color:red;">' + value + '</span>';
    }
    else {  //  To be Paid & Open
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    }
}


function PatientEmiratesNumberComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', PatientEmiratesNumberComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var Emirates_ID_No = Ext.getCmp('PatientsLoginReception-Emirates_ID_No');
    Emirates_ID_No.setValue(responseText.EmiratesID);
}


function ReceiptionViewHitory(form, login) {

    // var PrimKey = SelectedHitoryID;

    var PrimKey = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Select Patient Histroy To View.");
        return;
    }

    //var ReceiptionEditTemplate = new Ext.biz.WidgetInfo();
    //var ClassName = 'SBS.Business.Objects.Medical.General.PatientViewHistory', Url = '/forms/Medical/PatientViewHistory.xml', PKey = PrimKey, WidgetTitle = 'History';
    //ReceiptionEditTemplate.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewReception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceiptionViewComplete, this);
}

function ReceiptionViewComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceiptionViewComplete, this);
    var responseTextStr = response.responseText.replace('PatientLoginReceptionDetailList', 'PatientLoginReceptionDetailList_view').replace('PatientLoginClinicDtlList', 'PatientLoginClinicDtlList_view').replace('PatientViewHistoryDocumentList', 'PatientViewHistoryDocumentList_view');
    //  var responseTextStr = response.responseText.replace('PatientViewServiceHistoryList', 'PatientViewServiceHistoryList').replace('PatientViewDrugHistoryList','PatientViewDrugHistoryList_view').replace('PatientViewHistoryDocumentList','PatientViewHistoryDocumentList_view').replace('PatientViewAbsentHistoryList','PatientViewAbsentHistoryList_view');
    //var responseText = Ext.util.JSON.decode(response.responseText);
    var responseText = Ext.util.JSON.decode(responseTextStr);
    this.ReceiptionViewTemplateForm = new Ext.form.FormPanel(responseText.ViewReceptionConfig);
    this.ReceiptionViewTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceiptionViewTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceiptionViewTemplateForm.FormFieldsCount + 2
    });

    this.ReceiptionViewTemplateFormWindow = new Ext.Window({
        id: 'ReceiptionViewTemplateForm',
        title: 'Patient History',
        closable: true,
        minimizable: false,
        width: this.ReceiptionViewTemplateForm.width + 10,
        height: this.ReceiptionViewTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceiptionViewTemplateForm]
    });
    this.ReceiptionViewTemplateFormWindow.show();
    PatientViewHistory(Ext.getCmp('ReceiptionViewTemplateForm'), login);
    SelectedHitoryID = '';
}

function PatientLoginReceptionDetailRowSelect(Record) {
    /*
    var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
    PatientLoginReceptionDetailList.lastSelectedRecord = Record;
    var Discountpercentage = Ext.getCmp('PatientsLoginReception-Discountpercentage');
    var Patient_Type = Ext.getCmp('PatientsLoginReception-PatientTypeCode').editValue;
    if (Patient_Type == 0 || Patient_Type == 1)
        Discountpercentage.setValue(Record.get('Discountpercentage'));
        */
}

var SelectedClinicHitoryID1 = '';

var ClinicAbsentCode = '';
var ReportDetailCode = '';

function PatientLoginClinic(form, login) {

    if (!form.isView) {

        var ISContract = '';
        var UserName = Ext.getCmp('PatientLoginClinic-UserName').setValue(login.UserName);
        var UrsLoginCode = login.UserCode;
        Ext.getCmp('PatientLoginClinic-UserCode').setValue(UrsLoginCode);

        var PatientCode = Ext.getCmp('PatientLoginClinic-Patients_Code');
        PatientCode.on('select', function (combo, record, options) {
            ISContract = record.data.ISContract;
        }, this);


        if (form.selectedIndex == -1 && !form.isView) {
            Ext.getCmp('PatientLoginClinic-StatusCode').setComboValue(0);
            Ext.getCmp('PatientLoginClinic-StatusCode').disable();
        }
        if (form.selectedIndex != -1 && form.isView) {
            Ext.getCmp('PostClinicToLab').disable();
            Ext.getCmp('LogOutClinicHandler').disable();
        }
        if (form.selectedIndex != -1 && !form.isView) {
            Ext.getCmp('PatientLoginClinic-StatusCode').disable();
        }

        var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');


        var Dianostic_Clinic_Code = Ext.getCmp('PatientLoginClinic-Dianostic_Clinic_Code');
        if (Dianostic_Clinic_Code) Dianostic_Clinic_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MCL.ISProvider=1";
        }, this);

        var ClinicCode = Ext.getCmp('PatientLoginClinic-ClinicCode');
        if (ClinicCode) ClinicCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MCL.ISProvider=0";
        }, this);

        var Physician_Code = Ext.getCmp('PatientLoginClinic-Mc_PhysicianCode');
        if (Physician_Code) Physician_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE in (select nvl(PARENTPROVIDER,PROVIDERCODE) from ME_PROVIDERS where PROVIDERCODE=" + ClinicCode.editValue + " )) ";

        }, this);

        if (Physician_Code) Physician_Code.on('select', function (combo, record, options) {

            if (record.data.ApprovedRequired)
                Ext.getCmp('PatientLoginClinic-ApprovedRequired').setValue(1);
            else
                Ext.getCmp('PatientLoginClinic-ApprovedRequired').setValue(0);

            DefaultApprovedRequired = record.data.ApprovedRequired;
        }, this);

        var ApprovedRequired = Ext.getCmp('PatientLoginClinic-ApprovedRequired').getValue();
        if (ApprovedRequired == 1)
            DefaultApprovedRequired = true;

        if (ClinicCode) ClinicCode.on('select', function (combo, record, options) {
            var Patient_Type = Ext.getCmp('PatientLoginClinic-Patient_Type').getValue();
            var ClinicParentProvider = Ext.getCmp('PatientLoginClinic-ClinicParentProvider').getValue();
            var ClinicProviderType = Ext.getCmp('PatientLoginClinic-ClinicProviderType').getValue();
            var ActivityType = Ext.getCmp('PatientLoginClinic-ActivityType').getValue();
            if (Patient_Type == 4) {
                if (ClinicProviderType == 0)
                    DefaultClinicCode = combo.getValue();
                else
                    DefaultClinicCode = ClinicParentProvider;
            }
            else {
                DefaultClinicCode = combo.getValue();
            }
            DefaultDHAType = ActivityType;
            DefaultPatientType = Patient_Type;
        }, this)

        if (form.selectedIndex != -1) {
            var Patient_Type = Ext.getCmp('PatientLoginClinic-Patient_Type').getValue();
            var ClinicParentProvider = Ext.getCmp('PatientLoginClinic-ClinicParentProvider').getValue();
            var ClinicProviderType = Ext.getCmp('PatientLoginClinic-ClinicProviderType').getValue();
            var Clinic_No_Code = Ext.getCmp('PatientLoginClinic-ClinicCode').editValue;
            var ActivityType = Ext.getCmp('PatientLoginClinic-ActivityType').getValue();

            if (Patient_Type == 4) {
                if (ClinicProviderType == 0)
                    DefaultClinicCode = Clinic_No_Code;
                else
                    DefaultClinicCode = ClinicParentProvider;
            }
            else {
                DefaultClinicCode = Clinic_No_Code;
            }

            DefaultDHAType = ActivityType;
            DefaultPatientType = Patient_Type;
        }

        var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
        DefaultReceptionCode = Pl_Reception_Code;

        LoginClinicServicedtlList.on('addrecord', function (evt) {
            evt.record.set('Service_Price', 0);
        }, this);


        Ext.getCmp('LoginClinicServicedtlList').getStore().on('load', function (store, record, options) {

            var LoginClinicServicedtl = Ext.getCmp('LoginClinicServicedtlList')
            var AddNewBt = Ext.getCmp(LoginClinicServicedtl.id + '_addNew');
            if (AddNewBt) AddNewBt.setVisible(false);

            var ServiceTotal = Ext.getCmp('PatientLoginClinic-ServiceTotal');
            var Total = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                Total += Number(record.get('Total'));
            }
            ServiceTotal.setValue(Total);
        }, this);

        Ext.getCmp('PatientLoginClinicDtlList').getStore().on('load', function (store, record, options) {

            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList')
            var AddNewBt = Ext.getCmp(PatientLoginClinicDtlList.id + '_addNew');
            if (AddNewBt) AddNewBt.setVisible(false);

        }, this);

        Ext.getCmp('LoginClinicInjectionDtlList').getStore().on('load', function (store, record, options) {

            var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList')
            var AddNewBt = Ext.getCmp(LoginClinicInjectionDtlList.id + '_addNew');
            if (AddNewBt) AddNewBt.setVisible(false);

        }, this);

        Ext.getCmp('LoginClinicServicedtlList').on('beforedelete', function (record) {
            if (record.get('StatusCode') != null && record.get('StatusCode') != '' && record.get('StatusCode') != 0) {
                Ext.getCmp('LoginClinicServicedtlList').DelMsg = "Cannot Delete . Only Open Status Service can be deleted !";
                return false;
            }
            else return true;
        }, this);

        if (Ext.getCmp('LoginClinicInjectionDtlList')) Ext.getCmp('LoginClinicInjectionDtlList').on('afteredit', function (e) {
            var record = e.record;
            record.set('Drug_Total', Number(record.get('Quantity') * Number(record.get('Avg_Cost'))));
        }, this);


        var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');

        LoginClinicServicedtlList.on('beforeedit', function (e) {
            var record = e.record;
            var Physician_Code = Ext.getCmp('LoginClinicServicedtl-Physician_Code');
            var Service_ProviderCode = record.get('Service_ProviderCode');

            Physician_Code.lastQuery = '1=2';
            Physician_Code.store.baseParams.filter = "Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE=" + Service_ProviderCode + " )";

        }, this);

        LoginClinicServicedtlList.on('afteredit', function (e) {

            var record = e.record;
            record.set('Total', record.get('Service_Price'));
            var Tol = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var record = e.grid.store.getAt(i);
                Tol += record.get('Total');
            }
            Ext.getCmp('PatientLoginClinic-ServiceTotal').setValue(Tol);
        }, this);

        //Ext.getCmp('PatientLoginClinic-Remark1').on('blur', function (field, newval, odlval) {
        //    updatePatientLoginClinicRecord('Remark1', field.getValue());
        //}, this);



        var PatientAbsentDetailList = Ext.getCmp('PatientAbsentDetailList');
        if (PatientAbsentDetailList) {
            PatientAbsentDetailList.on('rowclick', onPatAbsentDetailrowclick, this);
            PatientAbsentDetailList.getStore().on('update', onPatAbsentDetailupdate, this);
        }
        //var Remark1 = Ext.getCmp('PatientLoginClinic-Remark1')
        //Remark1.on('valid', function (field) {
        //    if (PatientAbsentDetailList.lastSelectedRecord)
        //        PatientAbsentDetailList.lastSelectedRecord.set('Remark', Remark1.getValue());
        //}, this);


        var ReceptionHistoryDetailList = Ext.getCmp('ReceptionHistoryDetailList');
        ReceptionHistoryDetailList.on('rowclick', function (grid, Index, e) {
            var Record = grid.store.getAt(Index);

            SelectedClinicHitoryID1 = Record.get('ID');

        }, this);

        ReceptionHistoryDetailList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            SelectedClinicHitoryID1 = Record.get('ID');

        }, this);

        //var ClinicMedicalReportDtlList = Ext.getCmp('ClinicMedicalReportDtlList');
        var MedicalTemlate = Ext.getCmp('PatientLoginClinic-MedicalTemlate');

        var Drug_Total = Ext.getCmp('PatientLoginClinic-Drug_Total');
        var Drug_NetTotal = Ext.getCmp('PatientLoginClinic-Drug_NetTotal');

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        PatientLoginClinicDtlList.on('afteredit', function (e) {
            var Record = e.record;
            Record.set('Drug_Total', Number(Record.get('Quantity')) * Number(Record.get('Avg_Cost')))
            var NetTotal = 0, PriceTotal = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                NetTotal += Number(Record.get('Drug_Total'));
                PriceTotal += Number(Record.get('Avg_Cost'));

            }
            Drug_NetTotal.setValue(NetTotal);
            Drug_Total.setValue(PriceTotal);

        }, this);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList').getStore();
        PatientLoginClinicDtlList.on('load', function (store, record, options) {

            var detGrid = Ext.getCmp('PatientLoginClinicDtlList');
            var AddNewBtn = Ext.getCmp(detGrid.id + '_addNew');
            if (AddNewBtn) AddNewBtn.setVisible(false);
            var NetTotal = 0, PriceTotal = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var Record = store.getAt(i)
                NetTotal += Number(Record.get('Drug_Total'));
                PriceTotal += Number(Record.get('Avg_Cost'));

            }
            Drug_NetTotal.setValue(NetTotal);
            Drug_Total.setValue(PriceTotal);

        }, this);

        //var ServiceProviderCode = Ext.getCmp('LoginClinicServicedtl-Service_ProviderCode');
        //ServiceProviderCode.on('select', ClinicService_ProviderCodeSelect, this);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');


        //-------------------  view Drug Details --------------------

        var DenialReasonName = Ext.getCmp('PatientLoginClinic-DenialReasonName');
        var Service_Name = Ext.getCmp('PatientLoginClinic-Service_Name');
        var Refills = Ext.getCmp('PatientLoginClinic-Refills');
        var RouteOfAdminName = Ext.getCmp('PatientLoginClinic-RouteOfAdminName');
        var Instructions = Ext.getCmp('PatientLoginClinic-Instructions');
        var DrugRAAmount = Ext.getCmp('PatientLoginClinic-DrugRAAmount');
        var DrugPaymentAmount = Ext.getCmp('PatientLoginClinic-DrugPaymentAmount');
        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');

        PatientLoginClinicDtlList.on('rowclick', function (grid, rowIndex, e) {
            PatientLoginClinicDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            DenialReasonName.setValue(Record.get('DenialReasonName'));
            Service_Name.setValue(Record.get('Service_Name'));
            Refills.setValue(Record.get('Refills'));
            RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
            Instructions.setValue(Record.get('Instructions'));
            DrugRAAmount.setValue(Record.get('RAAmount'));
            DrugPaymentAmount.setValue(Record.get('PaymentAmount'));

        }, this);

        PatientLoginClinicDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            PatientLoginClinicDtlList.lastSelectedRecord = Record;
            DenialReasonName.setValue(Record.get('DenialReasonName'));
            Service_Name.setValue(Record.get('Service_Name'));
            Refills.setValue(Record.get('Refills'));
            RouteOfAdminName.setValue(Record.get('RouteOfAdminName'));
            Instructions.setValue(Record.get('Instructions'));
            DrugRAAmount.setValue(Record.get('RAAmount'));
            DrugPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);


        //-------------------to view Injection Details  

        var InjectionDenialReasonName = Ext.getCmp('PatientLoginClinic-InjectionDenialReasonName');
        var DenialDesc = Ext.getCmp('PatientLoginClinic-DenialDesc');
        var PriorAuthCode = Ext.getCmp('PatientLoginClinic-PriorAuthCode');
        var InjectionRAAmount = Ext.getCmp('PatientLoginClinic-InjectionRAAmount');
        var InjectionPaymentAmount = Ext.getCmp('PatientLoginClinic-InjectionPaymentAmount');
        var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');

        LoginClinicInjectionDtlList.on('rowclick', function (grid, rowIndex, e) {
            LoginClinicInjectionDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
            DenialDesc.setValue(Record.get('DenialDesc'));
            PriorAuthCode.setValue(Record.get('PriorAuthCode'));
            InjectionRAAmount.setValue(Record.get('RAAmount'));
            InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        LoginClinicInjectionDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            LoginClinicInjectionDtlList.lastSelectedRecord = Record;
            InjectionDenialReasonName.setValue(Record.get('DenialReasonName'));
            DenialDesc.setValue(Record.get('DenialDesc'));
            PriorAuthCode.setValue(Record.get('PriorAuthCode'));
            InjectionRAAmount.setValue(Record.get('RAAmount'));
            InjectionPaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);


        //-------------------to view Service Details  

        var ServiceDenialReasonName = Ext.getCmp('PatientLoginClinic-ServiceDenialReasonName');
        var ServiceDenialDesc = Ext.getCmp('PatientLoginClinic-ServiceDenialDesc');
        var ServicePriorAuthCode = Ext.getCmp('PatientLoginClinic-ServicePriorAuthCode');
        var Service_ProviderName = Ext.getCmp('PatientLoginClinic-Service_ProviderName');
        var SerPhysician_Name = Ext.getCmp('PatientLoginClinic-SerPhysician_Name');
        var ServiceRequestAmount = Ext.getCmp('PatientLoginClinic-ServiceRequestAmount');
        var ServiceDeductible_Amount = Ext.getCmp('PatientLoginClinic-ServiceDeductible_Amount');
        var ServicePatientSharePercent = Ext.getCmp('PatientLoginClinic-ServicePatientSharePercent');
        var ServicePatientShare = Ext.getCmp('PatientLoginClinic-ServicePatientShare');
        var ServiceRAAmount = Ext.getCmp('PatientLoginClinic-ServiceRAAmount');
        var PaymentAmount = Ext.getCmp('PatientLoginClinic-PaymentAmount');

        var LoginClinicServicedtlt = Ext.getCmp('LoginClinicServicedtlList');

        LoginClinicServicedtlList.on('rowclick', function (grid, rowIndex, e) {
            LoginClinicServicedtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
            ServiceDenialDesc.setValue(Record.get('DenialDesc'));
            ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
            Service_ProviderName.setValue(Record.get('Service_ProviderName'));
            SerPhysician_Name.setValue(Record.get('Physician_Name'));
            ServiceRequestAmount.setValue(Record.get('RequestAmount'));
            ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
            ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
            ServicePatientShare.setValue(Record.get('PatientShare'));
            ServiceRAAmount.setValue(Record.get('RAAmount'));
            PaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        LoginClinicServicedtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            LoginClinicServicedtlList.lastSelectedRecord = Record;
            ServiceDenialReasonName.setValue(Record.get('DenialReasonName'));
            ServiceDenialDesc.setValue(Record.get('DenialDesc'));
            ServicePriorAuthCode.setValue(Record.get('PriorAuthCode'));
            Service_ProviderName.setValue(Record.get('Service_ProviderName'));
            SerPhysician_Name.setValue(Record.get('Physician_Name'));
            ServiceRequestAmount.setValue(Record.get('RequestAmount'));
            ServiceDeductible_Amount.setValue(Record.get('Deductible_Amount'));
            ServicePatientSharePercent.setValue(Record.get('PatientSharePercent'));
            ServicePatientShare.setValue(Record.get('PatientShare'));
            ServiceRAAmount.setValue(Record.get('RAAmount'));
            PaymentAmount.setValue(Record.get('PaymentAmount'));
        }, this);

        //-------------------Adding Colour to Grid Based on Status-----------------------

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');  //   DrugDtl
        if (PatientLoginClinicDtlList)
            PatientLoginClinicDtlListConfig = PatientLoginClinicDtlList.getColumnModel().config;

        for (var i = 0; i < PatientLoginClinicDtlListConfig.length; i++)
            if (!PatientLoginClinicDtlListConfig[i].actions && !PatientLoginClinicDtlListConfig[i].checkbox) PatientLoginClinicDtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

        var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');  // InjectionDtl
        if (LoginClinicInjectionDtlList)
            LoginClinicInjectionDtlListConfig = LoginClinicInjectionDtlList.getColumnModel().config;

        for (var i = 0; i < LoginClinicInjectionDtlListConfig.length; i++)
            if (!LoginClinicInjectionDtlListConfig[i].actions && !LoginClinicInjectionDtlListConfig[i].checkbox) LoginClinicInjectionDtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

        var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');   //   Servicedtl
        if (LoginClinicServicedtlList)
            LoginClinicServicedtlListConfig = LoginClinicServicedtlList.getColumnModel().config;

        for (var i = 0; i < LoginClinicServicedtlListConfig.length; i++)
            if (!LoginClinicServicedtlListConfig[i].actions && !LoginClinicServicedtlListConfig[i].checkbox) LoginClinicServicedtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

        if (DefaultPatientType == 4) {
            //Ext.getCmp('LoginClinicServicedtlList').getColumnModel().getColumnById('Service_Price').editable = false;

            //Ext.getCmp('LoginClinicServicedtlList').getColumnModel().setVisible('Service_Price', false);

            //Ext.getCmp('LoginClinicInjectionDtlList').getColumnModel().getColumnById('Service_Price').editable = false;
            //Ext.getCmp('PatientLoginClinicDtlList').getColumnModel().getColumnById('Service_Price').editable = false;
        }

        var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');
        LoginClinicServicedtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        LoginClinicServicedtlList.getColumnModel().getColumnById('PriorStatus').editable = false;
        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        PatientLoginClinicDtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        PatientLoginClinicDtlList.getColumnModel().getColumnById('PriorStatus').editable = false;
        PatientLoginClinicDtlList.getColumnModel().getColumnById('ErxStatus').editable = false;
        var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');
        LoginClinicInjectionDtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
        LoginClinicInjectionDtlList.getColumnModel().getColumnById('PriorStatus').editable = false;

    }
}



function ClinicService_ProviderCodeSelect(combo, record, options) {
    var Physician_Code = Ext.getCmp('LoginClinicServicedtl-Physician_Code');
    var ISProvider = record.data.ISProvider;
    if (ISProvider == 1) {
        Physician_Code.allowBlank = true;
        Physician_Code.clearInvalid();
    }
    else {
        Physician_Code.allowBlank = false;
        Physician_Code.isValid();
    }
    //Physician_Code.clearValue();
}


function onIsliquidClick(column, e, record, dataindex) {

    var TrTotl = 0;
    var TrNetTotal = 0;
    var masDrug_Total = Ext.getCmp('PatientLoginClinic-Drug_Total');
    var masDrug_NetTotal = Ext.getCmp('PatientLoginClinic-Drug_NetTotal');
    var masDrugdiscountAmt = Ext.getCmp('PatientLoginClinic-DrugdiscountAmt');
    var masDrugdiscountPercent = Ext.getCmp('PatientLoginClinic-DrugdiscountPercent');

    if (record.get('Isliquid') == true) {

        var Times_Per_DayCode = record.get('Times_Per_DayCode');

        if (Times_Per_DayCode == 0 || Times_Per_DayCode == 4) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 1;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 1) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 2;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 2) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 3;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 3) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 4;
            record.set('Quantity', MultQuantity);
        }

        var TotalAmt = (record.get('Quantity') * record.get('Avg_Cost'));
        TotalAmt = TotalAmt.toFixed(2);
        TotalAmt = parseFloat(TotalAmt);
        record.set('Drug_Total', TotalAmt);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        for (var i = 0; i < PatientLoginClinicDtlList.store.getCount() ; i++) {
            var record = PatientLoginClinicDtlList.store.getAt(i);
            var MultQuantity = 0;
            var tot = record.get('Drug_Total');
            TrTotl += tot;
            TrTotl = parseFloat(TrTotl)
        }
        masDrug_Total.setValue(TrTotl);

        if (masDrugdiscountAmt.getValue() > 0)
            masDrug_NetTotal.setValue(masDrug_Total.getValue() - masDrugdiscountAmt.getValue());

        else if (masDrugdiscountPercent.getValue() > 0) {
            var NetTotlalAmount = (masDrug_Total.getValue() - (masDrug_Total.getValue() * ((masDrugdiscountPercent.getValue()) / 100)));
            masDrug_NetTotal.setValue(NetTotlalAmount.toFixed(2));
        }
        else {
            masDrug_NetTotal.setValue(masDrug_Total.getValue());
        }

    }
    else {

        var TotalAmt = (1 * record.get('Avg_Cost'));
        TotalAmt = TotalAmt.toFixed(2);
        TotalAmt = parseFloat(TotalAmt);
        record.set('Drug_Total', TotalAmt);
        record.set('Quantity', 1);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        for (var i = 0; i < PatientLoginClinicDtlList.store.getCount() ; i++) {
            var record = PatientLoginClinicDtlList.store.getAt(i);
            var MultQuantity = 0;
            var tot = record.get('Drug_Total');
            TrTotl += tot;
            TrTotl = parseFloat(TrTotl)
        }
        masDrug_Total.setValue(TrTotl);

        if (masDrugdiscountAmt.getValue() > 0)
            masDrug_NetTotal.setValue(masDrug_Total.getValue() - masDrugdiscountAmt.getValue());

        else if (masDrugdiscountPercent.getValue() > 0) {
            var NetTotlalAmount = (masDrug_Total.getValue() - (masDrug_Total.getValue() * ((masDrugdiscountPercent.getValue()) / 100)));
            masDrug_NetTotal.setValue(NetTotlalAmount.toFixed(2));
        }
        else {
            masDrug_NetTotal.setValue(masDrug_Total.getValue());
        }
    }
}


function onIsAiddtlliquidClick(column, e, record, dataindex) {

    var TrTotl = 0;
    var TrNetTotal = 0;

    if (record.get('Isliquid') == true) {

        var Times_Per_DayCode = record.get('Times_Per_DayCode');

        if (Times_Per_DayCode == 0 || Times_Per_DayCode == 4) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 1;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 1) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 2;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 2) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 3;
            record.set('Quantity', MultQuantity);
        }
        else if (Times_Per_DayCode == 3) {
            var No_of_days = record.get('No_of_days');
            MultQuantity = No_of_days * 4;
            record.set('Quantity', MultQuantity);
        }

        var TotalAmt = (record.get('Quantity') * record.get('Avg_Cost'));
        TotalAmt = TotalAmt.toFixed(2);
        TotalAmt = parseFloat(TotalAmt);
        record.set('Drug_Total', TotalAmt);

        var PrepaidAidDrugDetailList = Ext.getCmp('PrepaidAidDrugDetailList');
        for (var i = 0; i < PrepaidAidDrugDetailList.store.getCount() ; i++) {
            var record = PrepaidAidDrugDetailList.store.getAt(i);
            var MultQuantity = 0;
            var tot = record.get('Drug_Total');
            TrTotl += tot;
            TrTotl = parseFloat(TrTotl)
        }
        // masDrug_Total.setValue(TrTotl);

    }
    else {

        var TotalAmt = (1 * record.get('Avg_Cost'));
        TotalAmt = TotalAmt.toFixed(2);
        TotalAmt = parseFloat(TotalAmt);
        record.set('Drug_Total', TotalAmt);
        record.set('Quantity', 1);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        for (var i = 0; i < PatientLoginClinicDtlList.store.getCount() ; i++) {
            var record = PatientLoginClinicDtlList.store.getAt(i);
            var MultQuantity = 0;
            var tot = record.get('Drug_Total');
            TrTotl += tot;
            TrTotl = parseFloat(TrTotl)
        }
        //masDrug_Total.setValue(TrTotl);

        // masDrug_NetTotal.setValue(masDrug_Total.getValue().toFixed(2));

    }
}


//function ClinicReportRowSelect(Record) {
//    var ClinicMedicalReportDtlList = Ext.getCmp('ClinicMedicalReportDtlList');
//    ClinicMedicalReportDtlList.lastSelectedRecord = Record;
//    var MedicalTemlate = Ext.getCmp('PatientLoginClinic-MedicalTemlate');
//    MedicalTemlate.setValue(Ext.util.Format.htmlDecode(Record.get('MedicalTemlate')));

//}
//function ClinicServiceRowSelect(Record) {
//    var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');
//    LoginClinicServicedtlList.lastSelectedRecord = Record;
//    var TemplateText = Ext.getCmp('PatientLoginClinic-TemplateText');
//    TemplateText.setValue(Ext.util.Format.htmlDecode(Record.get('TemplateText')));
//    var Patient_Type = Ext.getCmp('PatientLoginClinic-Patient_Type');
//}

var MedicalTemlatebuttonupdate = '';

function UpdateMedicalTemplateHandler(form, login) {
    var ClinicMedicalReportDtlList = Ext.getCmp('ClinicMedicalReportDtlList');
    var updRecord = ClinicMedicalReportDtlList.getSelectionModel().getSelected();
    MedicalTemlatebuttonupdate = Ext.getCmp('PatientLoginClinic-MedicalTemlate').getValue();
    //  MedicalTemlate.setValue(Ext.util.Format.htmlDecode(Record.get('MedicalTemlate')));
    updRecord.set('MedicalTemlate', Ext.util.Format.htmlEncode(MedicalTemlatebuttonupdate));
    Ext.MessageBox.alert(login.modulename, "Result Updated!.");

}


function PrintSickLeave(form, login) {

    var AbsentDetailCode = ClinicAbsentCode;

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'SickLeaveReport',
            AbsentDetailCode: AbsentDetailCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AbsentPrintActionComplete, this);

}

function AbsentPrintActionComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', AbsentPrintActionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var Pkey = Ext.getCmp('PatientLoginClinic').selectedIndex;

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        var WidgetObj = Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope; //.immediatePrintClick(PKEy);
        // Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
        //     if (button == 'yes') {
        WidgetObj.immediatePrintClick(Pkey);
        //  }
        // }, this);
    }

    ClinicAbsentCode = '';
}



function LoginClinicViewHitory(form, login) {

    // var PrimKey = SelectedClinicHitoryID1;
    var PrimKey = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Select Patient Histroy To View.");
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewReception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoginClinicViewHitoryComplete, this);
}

function LoginClinicViewHitoryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoginClinicViewHitoryComplete, this);

    var responseTextStr = response.responseText.replace('PatientLoginReceptionDetailList', 'PatientLoginReceptionDetailList_view').replace('PatientLoginClinicDtlList', 'PatientLoginClinicDtlList_view').replace('PatientViewHistoryDocumentList', 'PatientViewHistoryDocumentList_view').replace('PatientAbsentDetailList', 'PatientAbsentDetailList_view');
    var responseText = Ext.util.JSON.decode(responseTextStr);
    this.ReceiptionViewTemplateForm = new Ext.form.FormPanel(responseText.ViewReceptionConfig);
    this.ReceiptionViewTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceiptionViewTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceiptionViewTemplateForm.FormFieldsCount + 2
    });

    this.ReceiptionViewTemplateFormWindow = new Ext.Window({
        id: 'ReceiptionViewTemplateForm',
        title: 'Patient History',
        closable: true,
        minimizable: false,
        width: this.ReceiptionViewTemplateForm.width + 10,
        height: this.ReceiptionViewTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceiptionViewTemplateForm]
    });
    this.ReceiptionViewTemplateFormWindow.show();
    PatientViewHistory(Ext.getCmp('ReceiptionViewTemplateForm'), login);
    SelectedClinicHitoryID1 = '';

}


function updatePatientLoginClinicRecord(Cmp, Value) {
    if (Ext.getCmp('PatientLoginClinic').SelectedRecord) {
        Ext.getCmp('PatientLoginClinic').SelectedRecord.set(Cmp, Value);
        var PatientAbsentDetailList = Ext.getCmp('PatientAbsentDetailList');
        PatientAbsentDetailList.makeMasterDirty();
        Ext.getCmp('PatientLoginClinic').SelectedRecord.set('IsDirty', true); //.dirty = true;
        Ext.getCmp('PatientLoginClinic').SelectedRecord.set('IsSavable', true); //.dirty = true;
    }
}

function onPatAbsentDetailrowclick(Grid, rowIndex, e) {
    updatePatientLoginClinicField(Grid.getStore().getAt(rowIndex));
    this.SelectedRecord = Grid.getStore().getAt(rowIndex);
}


function onPatAbsentDetailupdate(Store, record, operation) {
    this.SelectedRecord = record;
    updatePatientLoginClinicField(record);
}
function updatePatientLoginClinicField(record) {

    //var rem = Ext.getCmp('PatientLoginClinic-Remark1').setValue(record.get('Remark1'));
    var PatientAbsentDetailList = Ext.getCmp('PatientAbsentDetailList');
    PatientAbsentDetailList.lastSelectedRecord = record;
    var Remark1 = Ext.getCmp('PatientLoginClinic-Remark1');
    Remark1.setValue(record.get('Remark'));

}


function MedicalReportUpdateHandler(form, login1) {
    var DotLine = '-----------------------------------------------------------------';
    var AddComment = Ext.getCmp('PatientLoginClinic-ReportRemark').getValue();
    var newComment = Ext.getCmp('PatientLoginClinic-Remarks');
    var Comment = '';
    Comment = newComment.getValue() + "\n" + login.UserName.toUpperCase() + " " + "[" + new Date().format(login.jsdateformat + " " + (login.TimeFormat == 'hh:mm:ss tt' ? 'h:i:s a' : (login.TimeFormat == 'hh:mm tt' ? 'h:i a' : 'H:i'))) + "]: \n" + AddComment + "\n" + DotLine;
    newComment.setValue(Comment);
    Ext.getCmp('PatientLoginClinic-ReportRemark').setValue(null);
}

//function PatientLoginClinicPost(button,options) {

//    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

//    showMask();
//    Ext.Ajax.request({
//        url: 'tools/Inventory/IVPosting.aspx',
//        params: {
//            action: 'Patient_Login_ClinicPost',
//            PrimKey: PrimKey
//        },
//        method: 'POST',
//        failure: function (result, request) {
//            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//        },
//        timeout: 1200000,
//        scope: this
//    });
//    Ext.Ajax.on('requestcomplete', PatientClinicReqComplete, this);

//}

//function PatientClinicReqComplete(conn, response) {
//    hideMask();
//    Ext.Ajax.un('requestcomplete', PatientClinicReqComplete, this);
//    var responseText = Ext.util.JSON.decode(response.responseText);
//    if (!responseText.success) {
//        Ext.MessageBox.alert(login.modulename, responseText.Msg);
//    } else {
//        Ext.MessageBox.show({
//            title: login.modulename,
//            msg: responseText.Msg,
//            buttons: Ext.MessageBox.OK,
//            icon: Ext.MessageBox.INFO
//        });
//        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').close();
//    }
//}


function PatientRegistration(form, login) {

    var ContractTypeCode = Ext.getCmp('PatientRegistration-ContractTypeCode');
    ContractTypeCode.disable();

    var Prepaid_SpnosorCode = Ext.getCmp('PatientRegistration-Prepaid_SpnosorCode');
    Prepaid_SpnosorCode.disable();

    var MainDiseaseCode = Ext.getCmp('PatientRegistration-MainDiseaseCode');
    var Emirates = Ext.getCmp('PatientRegistration-Emirates_ID_No');

    Ext.getCmp('PatientRegistration-Patient_No').disable();

    var CheckContract = Ext.getCmp('PatientRegistration-ISContract');
    var Patient_Type = Ext.getCmp('PatientRegistration-Patient_Type');

    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('PatientRegistration-StatusCode').setComboValue(0);
        Ext.getCmp('PatientRegistration-StatusCode').disable();
        Emirates.setValue('1111 - 1111 - 1111 - 1111');
    }
    if (Patient_Type) Patient_Type.on('select', function (combo, record, options) {

        if (combo.getValue() == 4) {//Insurer
            Emirates.allowBlank = false;
            Emirates.isValid();
        }
        else {
            Emirates.allowBlank = true;
            Emirates.isValid();
        }
    }, this);

    if (form.selectedIndex != -1 && !form.isView) {

        if (Patient_Type.editValue == 4) {//Insurer
            Emirates.allowBlank = false;
            Emirates.isValid();
        }
        else {
            Emirates.allowBlank = true;
            Emirates.isValid();
        }
    }

    var PatientRegInsurerDetailList = Ext.getCmp('PatientRegInsurerDetailList');
    PatientRegInsurerDetailList.on('afteredit', function (e) {
        var record = e.record;

        if (Number(record.get('PayerCode')) < 1) {
            record.set('PayerCode', record.get('InsurerCode'));
            record.set('PayerName', record.get('InsurerName'));
        }

    }, this);

}


function PatientRegistrationPost(button, options) {

    var PrimKey = Ext.getCmp('PatientRegistration').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/Inventory/IVPosting.aspx',
        params: {
            action: 'Patient_RegistrationPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', Patient_RegistrationPostComplete, this);

}

function Patient_RegistrationPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', Patient_RegistrationPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_PATIENTSREGISTRATION_editform').close();
    }
}


function LoginClinicPost(form, login) {
    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

    if (form.selectedIndex != -1 && !form.isView) {

        var Status = Ext.getCmp('PatientLoginClinic-StatusCode');
        if (Status.editValue == 1) {
            Ext.MessageBox.alert(login.modulename, 'Data Already Posted !');
            return;
        }
    }

    Ext.Ajax.request({
        url: 'tools/Inventory/IVPosting.aspx',
        params: {
            action: 'LoginClinicPostMethod',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoginClinicPostComplete, this);
}

function LoginClinicPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', LoginClinicPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}


function AdvancedPatientsSearch(form, login) {
    var Birth_Date = Ext.getCmp('AdvancedPatientsSearch-Birth_Date').setValue(null);
    var File_Date = Ext.getCmp('AdvancedPatientsSearch-File_Date').setValue(null);

}
function AdvancedPatientsSearchPrintHandler(form, login) {

    var WidgetObj = Ext.getCmp('ID_ADVANCEDPATIENTSEARCH').scope;
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Print Patient Record', function (button) {
        if (button == 'yes') {
            WidgetObj.immediatePrintClick(1);
        }
    }, this);

}

function AdvancedPatientsSearchHandler(form, login) {

    var FilterQry = '';

    var Patient_No = Ext.getCmp('AdvancedPatientsSearch-Patient_No');

    if (Patient_No.getValue() != 0 && Patient_No.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("pregs.Patient_No like ('%" + Patient_No.getValue() + "%')");
        else
            FilterQry += (" and pregs.Patient_No like ('%" + Patient_No.getValue() + "%')");
    }


    var Patient_Name = Ext.getCmp('AdvancedPatientsSearch-Patient_Name');

    if (Patient_Name.getValue() != 0 && Patient_Name.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("pregs.Patient_Name like ('%" + Patient_Name.getValue() + "%')");
        else
            FilterQry += (" and pregs.Patient_Name like ('%" + Patient_Name.getValue() + "%')");
    }


    var Patient_Alternate_Name = Ext.getCmp('AdvancedPatientsSearch-Patient_Alternate_Name');

    if (Patient_Alternate_Name.getValue() != 0 && Patient_Alternate_Name.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("pregs.Patient_Alternate_Name like ('%" + Patient_Alternate_Name.getValue() + "%')");
        else
            FilterQry += (" and pregs.Patient_Alternate_Name like ('%" + Patient_Alternate_Name.getValue() + "%')");
    }

    var PatientTypeCode = Ext.getCmp('AdvancedPatientsSearch-PatientTypeCode');

    if (PatientTypeCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " pregs.PATIENT_TYPE=" + PatientTypeCode.getValue();
        else
            FilterQry += " and pregs.PATIENT_TYPE=" + PatientTypeCode.getValue();
    }

    var CustomerCode = Ext.getCmp('AdvancedPatientsSearch-CustomerCode');

    if (CustomerCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.ContractType=" + CustomerCode.getValue();
        else
            FilterQry += " and pregs.ContractType=" + CustomerCode.getValue();
    }

    var CustomerCode = Ext.getCmp('AdvancedPatientsSearch-CustomerCode');

    if (CustomerCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.ContractType=" + CustomerCode.getValue();
        else
            FilterQry += " and pregs.ContractType=" + CustomerCode.getValue();
    }

    var GenderCode = Ext.getCmp('AdvancedPatientsSearch-GenderCode');

    if (GenderCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.GENDER=" + GenderCode.getValue();
        else
            FilterQry += " and pregs.GENDER=" + GenderCode.getValue();
    }

    var MaritalStatusCode = Ext.getCmp('AdvancedPatientsSearch-MaritalStatusCode');

    if (MaritalStatusCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.MARITAL_STATUS=" + MaritalStatusCode.getValue();
        else
            FilterQry += " and pregs.MARITAL_STATUS=" + MaritalStatusCode.getValue();
    }


    var ReligionCode = Ext.getCmp('AdvancedPatientsSearch-ReligionCode');

    if (ReligionCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.RELIGIONCODE=" + ReligionCode.getValue();
        else
            FilterQry += " and pregs.RELIGIONCODE=" + ReligionCode.getValue();
    }


    var BloodGroupCode = Ext.getCmp('AdvancedPatientsSearch-BloodGroupCode');

    if (BloodGroupCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.Blood_Group=" + BloodGroupCode.getValue();
        else
            FilterQry += " and pregs.Blood_Group=" + BloodGroupCode.getValue();
    }


    var MainDiseaseCode = Ext.getCmp('AdvancedPatientsSearch-MainDiseaseCode');

    if (MainDiseaseCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.MAINDISEASE=" + MainDiseaseCode.getValue();
        else
            FilterQry += " and pregs.MAINDISEASE=" + MainDiseaseCode.getValue();
    }


    var NationalityCode = Ext.getCmp('AdvancedPatientsSearch-NationalityCode');

    if (NationalityCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.NATIONALITY_CODE=" + NationalityCode.getValue();
        else
            FilterQry += " and pregs.NATIONALITY_CODE=" + NationalityCode.getValue();
    }


    var City_Code = Ext.getCmp('AdvancedPatientsSearch-City_Code');

    if (City_Code.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.CITY=" + City_Code.getValue();
        else
            FilterQry += " and pregs.CITY=" + City_Code.getValue();
    }

    var File_Date = Ext.getCmp('AdvancedPatientsSearch-File_Date');

    if (File_Date.getValue() != '' && File_Date.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pregs.File_Date=to_date('" + File_Date.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and pregs.File_Date=to_date('" + File_Date.getValue().format('d-m-y') + "','dd/mm/RR')";
    }

    var Birth_Date = Ext.getCmp('AdvancedPatientsSearch-Birth_Date');

    if (Birth_Date.getValue() != '' && Birth_Date.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " pregs.Birth_Date =TO_DATE('" + Birth_Date.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " pregs.Birth_Date=TO_DATE('" + Birth_Date.getValue().format('d-m-y') + "','dd/mm/RR')";
    }

    var StatusCode = Ext.getCmp('AdvancedPatientsSearch-StatusCode');

    if (StatusCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pregs.STATUS=" + StatusCode.getValue();
        else
            FilterQry += " and  pregs.STATUS=" + StatusCode.getValue();
    }


    DetailStore = Ext.getCmp('AdvancedPatientsSearchDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.AdvancedPatientsSearchDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 5000
            }
        });
    }

    //var PatientReportCriteria = FilterQry
    //Ext.Ajax.request({
    //    url: 'tools/HumanResources/HRPosting.aspx',
    //    params: {
    //        action: 'PatientReport_Criteria',
    //        PatientReportCriteria : PatientReportCriteria
    //    },
    //    method: 'POST',
    //    failure: function (result, request) {
    //        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
    //    },
    //    timeout: 1200000,
    //    scope: this
    //});
    //Ext.Ajax.on('requestcomplete', PatientReportCriteriaComplete, this);

}


function AdvancedPatientsSearchClearHendler(form, login) {


    var FilterQry1 = '';

    var PatientTypeCode = Ext.getCmp('AdvancedPatientsSearch-PatientTypeCode').clearValue();
    var Patient_No = Ext.getCmp('AdvancedPatientsSearch-Patient_No').setValue(null);
    var Patient_Name = Ext.getCmp('AdvancedPatientsSearch-Patient_Name').setValue(null);
    var Patient_Alternate_Name = Ext.getCmp('AdvancedPatientsSearch-Patient_Alternate_Name').setValue(null);
    var CustomerCode = Ext.getCmp('AdvancedPatientsSearch-CustomerCode').clearValue();
    var GenderCode = Ext.getCmp('AdvancedPatientsSearch-GenderCode').clearValue();
    var MaritalStatusCode = Ext.getCmp('AdvancedPatientsSearch-MaritalStatusCode').clearValue();
    var ReligionCode = Ext.getCmp('AdvancedPatientsSearch-ReligionCode').clearValue();
    var BloodGroupCode = Ext.getCmp('AdvancedPatientsSearch-BloodGroupCode').clearValue();
    var MainDiseaseCode = Ext.getCmp('AdvancedPatientsSearch-MainDiseaseCode').clearValue();
    var NationalityCode = Ext.getCmp('AdvancedPatientsSearch-NationalityCode').clearValue();
    var City_Code = Ext.getCmp('AdvancedPatientsSearch-City_Code').clearValue();
    var StatusCode = Ext.getCmp('AdvancedPatientsSearch-StatusCode').clearValue();
    var File_Date = Ext.getCmp('AdvancedPatientsSearch-File_Date').setValue(null);
    var Birth_Date = Ext.getCmp('AdvancedPatientsSearch-Birth_Date').setValue(null);

    Detail = Ext.getCmp('AdvancedPatientsSearchDtlList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.AdvancedPatientsSearchDtl&filter=" + FilterQry1;
    if (Detail) {
        Detail.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        Detail.load({
            params: {
                start: 0,
                limit: 5000
            }
        });
    }

}

function ViewPatientHandler(form, login) {

    var Count = 0;

    var AdvancedPatientsSearchDtlList = Ext.getCmp('AdvancedPatientsSearchDtlList');

    var Record1 = '';
    for (var cnt = 0; cnt < AdvancedPatientsSearchDtlList.store.getCount() ; cnt++) {

        var Record = AdvancedPatientsSearchDtlList.store.getAt(cnt);
        if (Record.get('Selectcheck')) {
            Record1 = AdvancedPatientsSearchDtlList.store.getAt(cnt);
            Count++;
        }
    }
    if (Count > 1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot Select More Then One Record !');
        return;
    }

    PrimKey = Record1.get('ID');


    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewPatientPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewPatientPostComplete, this);

}

function ViewPatientPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ViewPatientPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ViewPatientTemplateForm = new Ext.form.FormPanel(responseText.ViewPatientTemplateConfig);
    this.ViewPatientTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ViewPatientTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ViewPatientTemplateForm.FormFieldsCount + 2
    });

    this.ViewPatientTemplateFormWindow = new Ext.Window({
        id: 'ViewPatientTemplateForm',
        title: 'Patient Information',
        closable: true,
        minimizable: false,
        width: 900, //this.ViewPatientTemplateForm.width + 20,
        height: 600,//this.ViewPatientTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ViewPatientTemplateForm]
    });
    this.ViewPatientTemplateFormWindow.show();
}



var PrintTableStr = '';
var PrintTableHeight = 0;
var CheckTotal = 0; var Total_Drug = 0;
function ReceptionPrintBill(form, option) {
    PrintTableStr = ''; PrintTableHeight = 0; var RecpRecord = '';
    if (Ext.getCmp('PatientsLoginReception-ISContract').getValue() == 1) {
        var height = 35;

        var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
        var detailStore = PatientLoginReceptionDetailList.getStore();


        var NewDate = new Date();

        var PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').lastSelectionText;
        //if (PatientCode == 'undefined') PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoName').getValue();
        var PatientName = Ext.getCmp('PatientsLoginReception-Patient_Name').getValue();
        var Transaction_No = Ext.getCmp('PatientsLoginReception-Transaction_No').getValue();

        height += (35 * detailStore.getCount()) + 150 + 75 + 50 + 100;

        var tablestr = ""; var Total = 0;
        tablestr += ("<table border='4'>");
        //tablestr += "<hr size=1>";
        tablestr += "<tr><td width=185px><b>Serive Name</b></td><td><b>Price</b></td></tr>";
        for (i = 0; i < detailStore.getCount() ; i++) {
            if (detailStore.getAt(i).get('Service_Price') * 1 <= 0) continue;
            Total += (detailStore.getAt(i).get('Service_Price') * 1);
            tablestr += ("<tr><td width=195px >" + detailStore.getAt(i).get('Service_Name') + "</td><td>" + detailStore.getAt(i).get('Service_Price') + "</td></tr>");
            //tablestr += ("<tr><td>BarCode</td><td> : </td><td>||||||||</td></tr>");
        }
        tablestr += ("<tr><td width=195px><b>Total</b></td><td><b>" + Total + "</b></td></tr>");
        tablestr += "</table><hr size=1>";
        //tablestr += "<hr size=1>";
        //tablestr += ("<table><tr><td width=150px>Total</td><td> : </td><td>" + Total + "</td></tr></table>");
        //tablestr += "<hr size=1>";
        tablestr += "<hr noshade size=4 width='100%' align=left><div style='text-align:center'><b> Tel : 97137229306 , Fax : 067422733 <br>Abu Dhabi-UAE <br>Dubai Islamic bank <br>Account 09-520-9652736-01</b></div>";
        tablestr += "<hr size=1>";
        tablestr += "<table>";
        tablestr += ("<tr><td Width='180px'><b>User Name</b></td><td>:</td><td>" + login.UserName + "</td></tr>");
        tablestr += ("<tr><td><b>Date</b></td> <td> : </td><td> " + NewDate.format('d-m-y') + "</td></tr>");
        tablestr += "</table>";

        if (PatientLoginReceptionDetailList.store.getCount() > 0 && Total > 0) {
            var myWindow = window.open("", "MsgWindow", "width=270,height=" + height);
            /*
            myWindow.document.write("<p>This is 'MsgWindow'. I am 200px wide and 100px tall!</p>");
            */


            myWindow.document.write("<html><head><img border='1' src='images/headlettre312.png' alt='Pulpit rock' width='250' height='75'><br><br><center><u><b>INVOICE</b></u></center><hr size=1><div style='text-align:center'><b>" + PatientCode + " - " + PatientName + "</b><br></br><b>Visit No:" + Transaction_No + "</b></div><hr size=1></head><body>" +
            tablestr + "</body></html>");

            myWindow.print();
            return;
        }
        else {
            Ext.MessageBox.alert(login.modulename, "Posting Sucessfully Completed. !");
        }

    }
    else {

        var height = 35;

        var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
        var detailStore = PatientLoginReceptionDetailList.getStore();

        for (var pcnt = 0; pcnt < PatientLoginReceptionDetailList.store.getCount() ; pcnt++) {

            var RecpRecord = PatientLoginReceptionDetailList.store.getAt(pcnt);
            if (RecpRecord.get('StatusCode') == 0)
                RecpRecord.set('SelectCheck', true);
        }

        var NewDate = new Date();

        var PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').lastSelectionText;
        //if (PatientCode == 'undefined') PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoName').getValue();
        var PatientName = Ext.getCmp('PatientsLoginReception-Patient_Name').getValue();
        var Patient_Type = Ext.getCmp('PatientsLoginReception-PatientTypeCode').editValue;
        height += (35 * detailStore.getCount()) + 150 + 75 + 50 + 100;

        var tablestr = ""; var Total = 0; var NetTotal = 0;
        tablestr += ("<table border='4'>");
        //tablestr += "<hr size=1>";
        tablestr += "<tr><td width=185px><b>Serive Name</b></td><td><b>Price</b></td><td><b>Net Amt</b></td></tr>";
        for (i = 0; i < detailStore.getCount() ; i++) {
            if (!detailStore.getAt(i).get('SelectCheck')) continue;
            if (detailStore.getAt(i).get('Service_Price') * 1 <= 0) continue;
            Total += (detailStore.getAt(i).get('Service_Price') * 1);
            NetTotal += (detailStore.getAt(i).get('Total') * 1);
            tablestr += ("<tr><td width=195px >" + detailStore.getAt(i).get('Service_Name') + "</td><td>" + detailStore.getAt(i).get('Service_Price') + "</td><td>" + detailStore.getAt(i).get('Total') + "</td></tr>");
        }

        CheckTotal = Total;
        tablestr += ("<tr><td width=195px><b>Total</b></td><td><b>" + Total + "</b></td><b>Total</b></td><td><b>" + NetTotal + "</b></td></tr>");

        var ReceptionDrugDetailList = Ext.getCmp('ReceptionDrugDetailList');
        var PadCount = 0; Drtablestr = ''; var TotalDrug = 0;
        var DrugdetailStore = ReceptionDrugDetailList.getStore();
        for (i = 0; i < DrugdetailStore.getCount() ; i++) {
            if (DrugdetailStore.getAt(i).get('IsPosted')) continue;
            PadCount++;
        }
        tablestr += "</table>";
        if (Patient_Type == 0 || Patient_Type == 3 && PadCount > 0) {
            Drtablestr += "<table border=1>";
            Drtablestr += "<tr><td width=185px><b>Drug Name</b></td><td><b>Drug Price</b></td></tr>";
            for (i = 0; i < DrugdetailStore.getCount() ; i++) {
                if (DrugdetailStore.getAt(i).get('IsPosted')) continue;
                if (DrugdetailStore.getAt(i).get('Avg_Cost') * 1 <= 0) continue;
                TotalDrug += (DrugdetailStore.getAt(i).get('Avg_Cost') * 1);
                Drtablestr += ("<tr><td width=195px >" + DrugdetailStore.getAt(i).get('Drug_Name') + "</td><td>" + DrugdetailStore.getAt(i).get('Avg_Cost') + "</td></tr>");
            }
            Drtablestr += ("<tr><td width=195px><b>Total</b></td><td><b>" + TotalDrug + "</b></td></tr>");

            Drtablestr += "</table>";
            Total_Drug = TotalDrug;
            if (Total_Drug > 0)
                tablestr += Drtablestr;
        }
        tablestr += "<hr size=1>";
        tablestr += "<hr noshade size=4 width='100%' align=left><div style='text-align:center'><b> Tel : 97137229306 , Fax : 067422733 <br>Abu Dhabi-UAE <br>Dubai Islamic bank <br>Account 09-520-9652736-01</b></div>";
        tablestr += "<hr size=1>";
        tablestr += "<table>";
        tablestr += ("<tr><td Width='180px'><b>User Name</b></td><td>:</td><td>" + login.UserName + "</td></tr>");
        tablestr += ("<tr><td><b>Date</b></td><td>   : <td>" + NewDate.format('d-m-y') + "</td></tr>");
        tablestr += "</table>";
        PrintTableStr = tablestr; PrintTableHeight = height;
        var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'ReceptionPrint_Bill',
                PrimKey: PrimKey
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ReceptionPrintBillComplete, this);
    }
}

function ReceptionPrintBillComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionPrintBillComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;

    } else {

        var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
        var detailStore = PatientLoginReceptionDetailList.getStore();

        for (var pcnt = 0; pcnt < PatientLoginReceptionDetailList.store.getCount() ; pcnt++) {

            var RecpRecord = PatientLoginReceptionDetailList.store.getAt(pcnt);
            if (RecpRecord.get('StatusCode') == 0)
                RecpRecord.set('StatusCode', 1);

        }
        //url = 'widgethelper.aspx?action=getdata&id=' + detailList.boname;
        //detailStore.proxy = new Ext.data.HttpProxy({
        //    url: url
        //});
        detailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
        //if (responseText.SericeName == '')
        //    Ext.MessageBox.alert(login.modulename, responseText.Msg);
        //else {
        var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').getValue();
        if (!OutTypeCode) {
            var PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').lastSelectionText;
            var PatientName = Ext.getCmp('PatientsLoginReception-Patient_Name').getValue();
        }
        else {
            var PatientName = Ext.getCmp('PatientsLoginReception-Out_PatientName').getValue();

        }
        /*//Old
        var height = 15;
        
        var SericeName = responseText.SericeName.split(',');
        var SericePrice = responseText.SericePrice.split(',');
        var NewDate=new Date();

        var PatientCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').lastSelectionText;
        var PatientName = Ext.getCmp('PatientsLoginReception-Patient_Name').getValue();

        height += (35 * SericePrice.length) + 150 + 75 +50+100;

        var tablestr = ""; var Total = 0;
        tablestr += ("<table border='4'>");
        //tablestr += "<hr size=1>";
        tablestr += "<tr><td width=185px><b>Serive Name</b></td><td><b>Price</b></td></tr>";
        for (i = 0; i < SericePrice.length ; i++) {
            if (SericePrice[i] * 1 <= 0) continue;
            Total += (SericePrice[i] * 1);
            tablestr += ("<tr><td width=195px >" + SericeName[i] + "</td><td>" + SericePrice[i] + "</td></tr>");
            //tablestr += ("<tr><td>BarCode</td><td> : </td><td>||||||||</td></tr>");
        }
        tablestr += ("<tr><td width=195px><b>Total</b></td><td><b>" + Total + "</b></td></tr>");
        tablestr += "</table><hr size=1>";
        //tablestr += "<hr size=1>";
        //tablestr += ("<table><tr><td width=150px>Total</td><td> : </td><td>" + Total + "</td></tr></table>");
        //tablestr += "<hr size=1>";
        tablestr += "<hr noshade size=4 width='100%' align=left><div style='text-align:center'><b> Tel : 067421979 , Fax : 067422733 <br>Ajman-UAE <br>Dubai Islamic bank <br>Account 09-520-9652736-01</b></div>";
        tablestr += "<hr size=1>";
        tablestr += "<table>";
        tablestr += ("<tr><td Width='180px'><b>User Name</b></td><td>:</td><td>" + login.UserName + "</td><td><b>Date</b></td><td>   : <td>" + NewDate.format('d-m-y') + "</td></tr>");
        tablestr += "</table>";
        *///Old
        var Transaction_No = Ext.getCmp('PatientsLoginReception-Transaction_No').getValue();

        if (PatientLoginReceptionDetailList.store.getCount() > 0 && CheckTotal > 0 || Total_Drug > 0) {
            var myWindow = window.open("", "MsgWindow", "width=270,height=" + PrintTableHeight);

            if (!OutTypeCode) {
                myWindow.document.write("<html><head><img border='1' src='images/headlettre312.png' alt='Pulpit rock' width='250' height='75'><br><br><center><u><b>INVOICE</b></u></center><hr size=1><div style='text-align:center'><b>" + PatientCode + " - " + PatientName + "</b><br></br><b>Visit No:" + Transaction_No + "</b></div><hr size=1></head><body>" +
                PrintTableStr + "</body></html>");
            }
            else {
                myWindow.document.write("<html><head><img border='1' src='images/headlettre312.png' alt='Pulpit rock' width='250' height='75'><br><br><center><u><b>INVOICE</b></u></center><hr size=1><div style='text-align:center'><b>" + PatientName + "</b><br></br><b>Visit No:" + Transaction_No + "</b></div><hr size=1></head><body>" +
               PrintTableStr + "</body></html>");
            }
            //PrintTableStr = tablestr; PrintTableHeight = height;


            myWindow.print();
        }
        else {

            Ext.MessageBox.alert(login.modulename, responseText.Msg);
        }
        //}
    }
}



function ReceptionLogout(form, login) {


    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    var Clinic_Status = Ext.getCmp('PatientsLoginReception-Clinic_Status').getValue();

    if (Clinic_Status != 6) {
        Ext.MessageBox.confirm(login.modulename, 'Claim not Done. Are You sure to Log Out?', function (button) {
            if (button == 'yes') {
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRPosting.aspx',
                    params: {
                        action: 'ReceptionLogout',
                        PrimKey: PrimKey
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', ReceptionLogoutComplete, this);
            }
        }, this);
    }
}

function ReceptionLogoutComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionLogoutComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_PLRECEPTION_editform').un('beforeclose', Ext.getCmp('ID_PLRECEPTION_editform').scope.closeWindow, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').on('close', Ext.getCmp('ID_PLRECEPTION_editform').scope.afterCloseWind, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').close();
    }
}



function PrintPatientIdCardHandler(form, login) {

    var PatientCode = Ext.getCmp('PatientRegistration-Patient_No').getValue();
    var PatientName = Ext.getCmp('PatientRegistration-Patient_Name').getValue();// "Name";
    var MobileNo = Ext.getCmp('PatientRegistration-Mobile').getValue();
    var BloodgroupCode = Ext.getCmp('PatientRegistration-BloodgroupCode').lastSelectionText;
    var Gender = Ext.getCmp('PatientRegistration-GenderCode').lastSelectionText;
    var Birth_Date = (Ext.getCmp('PatientRegistration-Birth_Date').getValue() ? Ext.getCmp('PatientRegistration-Birth_Date').getValue().format('d-M-y') : '');


    var height = 80;//200

    var tablestr = "";
    tablestr += "<table>";
    // tablestr += ("<tr><td><b>Patient No</b></td><td>   : </td><td>" + PatientCode + "</td></tr>");
    // tablestr += ("<tr><td><b>Patient Name</b></td><td> : </td><td>" + PatientName + "</td></tr>");
    tablestr += ("<tr><br></br><font size='1.5'><center><b>" + PatientName + "</b></center></font></tr>");
    tablestr += "</table>";
    // tablestr += "<table>";
    //  tablestr += ("<tr><td><b>Gender</b></td><td> : </td><td>" + Gender + "</td><td width='180px'><b>Blood Group</b></td><td>   : <td>" + BloodgroupCode + "</td></tr>");
    //  tablestr += ("<tr><td ><b>Mobile</b></td><td>: </td><td width='120px'>" + MobileNo + "</td><td  width='120px'><b>Birth Date</b></td><td> : </td><td>" + Birth_Date + "</td></tr>");
    //tablestr += ("<tr></tr>");

    // tablestr += "</table><br> ";
    //   tablestr += DrawCode39Barcode(PatientCode);
    tablestr += DrawHTMLBarcode_Code39(PatientCode, 0, "yes", "in", 0, 1.5, 0.1, 2, "bottom", "center", "", "black", "white");
    var myWindow = window.open("", "MsgWindow", "width=300,height=" + height);//width=330,

    myWindow.document.write("<html><head></head><body>" +
    tablestr + "</body></html>");

    myWindow.print();

}


function PrintPatientSearchIdCardHandler(form, login) {

    var height = 85;//200;
    var tablestr = "";
    var AdvancedPatientsSearchDtlList = Ext.getCmp('AdvancedPatientsSearchDtlList');
    var PrCnt = 0;
    for (var cnt = 0; cnt < AdvancedPatientsSearchDtlList.store.getCount() ; cnt++) {

        var Record = AdvancedPatientsSearchDtlList.store.getAt(cnt);
        if (Record.get('Selectcheck')) {

            var j = cnt;
            PrCnt++;

            tablestr += "<table>";
            tablestr += ("<tr><b><font size='1.5'><center>" + Record.get('Patient_Name') + "</center></font></b></tr>");
            tablestr += "</table>";
            //   tablestr += DrawCode39Barcode(Record.get('Patient_No'), 1);
            //   tablestr += DrawCode39Barcode(Record.get('Patient_No'));
            tablestr += DrawHTMLBarcode_Code39(Record.get('Patient_No'), 0, "yes", "in", 0, 1.5, 0.1, 2, "bottom", "center", "", "black", "white");
            //   tablestr += "<hr size=1>";

            cnt = j;

        }

    }
    if (PrCnt <= 0) {
        Ext.MessageBox.alert(login.modulename, "Please Select Patient to Print ID !");
        return;
    }
    height = height * PrCnt;
    var myWindow = window.open("", "MsgWindow", "width=300,height=" + height);

    myWindow.document.write("<html><body>" +
    tablestr + "</body></html>");

    myWindow.print();

}


function PostDiagnosticClinicToClinic(form, login) {


    var PrimKey = Ext.getCmp('LoginDiagnosticClinic').selectedIndex;
    var Pl_Reception_Code = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You Cant Post Before Save !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostDiagnosticClinicToClinic',
            PrimKey: PrimKey,
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DiagnosticClinicToClinicComplete, this);
}

function DiagnosticClinicToClinicComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DiagnosticClinicToClinicComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

        Ext.getCmp('ID_PATIENTTLABORA_editform').un('beforeclose', Ext.getCmp('ID_PATIENTTLABORA_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTTLABORA_editform').scope);
        Ext.getCmp('ID_PATIENTTLABORA_editform').on('close', Ext.getCmp('ID_PATIENTTLABORA_editform').scope.afterCloseWind, Ext.getCmp('ID_PATIENTTLABORA_editform').scope);
        Ext.getCmp('ID_PATIENTTLABORA_editform').close();
    }
}



function LogOutDiagnosticClinicHandler(form, login) {


    var PrimKey = Ext.getCmp('LoginDiagnosticClinic').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LogOutDiagnosticClinic',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LogOutDiagnosticClinicComplete, this);
}

function LogOutDiagnosticClinicComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LogOutDiagnosticClinicComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').un('beforeclose', Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').scope);
        Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').on('close', Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').scope.afterCloseWind, Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').scope);
        Ext.getCmp('ID_PATIENTDIAGNOSTICCLINIC_editform').close();
    }
}



function PostReceptionToLab(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You Cant Post Before Save !');
        return;
    }

    var Dianostic_Clinic_Code = Ext.getCmp('PatientsLoginReception-Dianostic_Clinic_Code').getValue();

    if (Dianostic_Clinic_Code == 0 || Dianostic_Clinic_Code == '' || Dianostic_Clinic_Code == null) {

        Ext.MessageBox.alert(login.modulename, 'Diagnostic Clinic should not be empty.Please select Diagnostic Clinic');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostReceptionToLab',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostReceptionToLabComplete, this);
}

function PostReceptionToLabComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostReceptionToLabComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        //  Ext.MessageBox.alert(login.modulename, responseText.Msg);
        //ReceptionPrintBill();

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_PLRECEPTION_editform').un('beforeclose', Ext.getCmp('ID_PLRECEPTION_editform').scope.closeWindow, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').on('close', Ext.getCmp('ID_PLRECEPTION_editform').scope.afterCloseWind, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').close();

    }
}

function PostNurseryToLab(form, login) {


    var PrimKey = Ext.getCmp('LoginNursery').selectedIndex;
    var Pl_Reception_Code = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();
    var Dianostic_Clinic_Code = Ext.getCmp('LoginNursery-Dianostic_Clinic_Code').getValue();

    if (Dianostic_Clinic_Code == 0 || Dianostic_Clinic_Code == '' || Dianostic_Clinic_Code == null) {

        Ext.MessageBox.alert(login.modulename, 'Diahnostic Clinic should not be empty.Please select Diahnostic Clinic');
        return;
    }

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You Cant Post Before Save !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostNurseryToLab',
            PrimKey: PrimKey,
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostNurseryToLabComplete, this);
}

function PostNurseryToLabComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostNurseryToLabComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').un('beforeclose', Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').on('close', Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').scope.afterCloseWind, Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINNURSERY_editform').close();
    }
}

function PostClinicToLab(form, login) {


    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;
    var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You Cant Post Before Save !');
        return;
    }

    var Dianostic_Clinic_Code = Ext.getCmp('PatientLoginClinic-Dianostic_Clinic_Code').getValue();

    if (Dianostic_Clinic_Code == 0 || Dianostic_Clinic_Code == '' || Dianostic_Clinic_Code == null) {

        Ext.MessageBox.alert(login.modulename, 'Diahnostic Clinic should not be empty.Please select Diahnostic Clinic');
        return;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostClinicToLab',
            PrimKey: PrimKey,
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostClinicToLabComplete, this);
}

function PostClinicToLabComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostClinicToLabComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').un('beforeclose', Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').on('close', Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope.afterCloseWind, Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').close();
    }
}


function LoginDiagnosticClinic(form, login) {


    if (!form.isView) {
        Ext.getCmp('LoginDiagnosticClinic-StatusCode').setComboValue(0);
        Ext.getCmp('LoginDiagnosticClinic-StatusCode').disable();
    }

    if (form.selectedIndex != -1 && form.isView) {
        //Ext.getCmp('PostDiagnosticClinicToClinic').disable();
        //Ext.getCmp('LogOutDiagnosticClinicHandler').disable();
    }

    //Service detail Filter
    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');

    Ext.getCmp('LoginDiagnosticClinicServicedtlList').getStore().on('update', function (store, record, options) {
        //    record.set('Service_Price', ContractPrice);
    }, this);
    Ext.getCmp('LoginDiagnosticClinicServicedtlList').on('addrecord', function (evt) {
        evt.record.set('Service_Price', 0);
    }, this);

    Ext.getCmp('LoginDiagnosticClinicServicedtlList').on('beforedelete', function (record) {
        if (record.get('StatusCode') != null && record.get('StatusCode') != '' && record.get('StatusCode') != 0) {
            Ext.getCmp('LoginDiagnosticClinicServicedtlList').DelMsg = "Cannot Delete . Only Open Status Service can be deleted !";
            return false;
        }
        else return true;
    }, this);

    var Clinic_No_Code = Ext.getCmp('LoginDiagnosticClinic-ClinicCode');
    if (Clinic_No_Code) Clinic_No_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MCL.ISProvider=0 ";
    }, this);

    if (Clinic_No_Code) Clinic_No_Code.on('select', function (combo, record, options) {
        var Patient_Type = Ext.getCmp('LoginDiagnosticClinic-Patient_Type').getValue();
        var ClinicParentProvider = Ext.getCmp('LoginDiagnosticClinic-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('LoginDiagnosticClinic-ClinicProviderType').getValue();
        var ActivityType = Ext.getCmp('LoginDiagnosticClinic-ActivityType').getValue();

        if (Patient_Type == 4) {
            if (ClinicProviderType == 0)
                DefaultClinicCode = combo.getValue();
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            DefaultClinicCode = combo.getValue();
        }
        DefaultDHAType = ActivityType;
        DefaultPatientType = Patient_Type;
    }, this)

    if (form.selectedIndex != -1) {
        var Patient_Type = Ext.getCmp('LoginDiagnosticClinic-Patient_Type').getValue();
        var ClinicParentProvider = Ext.getCmp('LoginDiagnosticClinic-ClinicParentProvider').getValue();
        var ClinicProviderType = Ext.getCmp('LoginDiagnosticClinic-ClinicProviderType').getValue();
        var Clinic_No_Code = Ext.getCmp('LoginDiagnosticClinic-ClinicCode').editValue;
        var ActivityType = Ext.getCmp('LoginDiagnosticClinic-ActivityType').getValue();

        if (Patient_Type == 4) {
            if (ClinicProviderType == 0)
                DefaultClinicCode = Clinic_No_Code;
            else
                DefaultClinicCode = ClinicParentProvider;
        }
        else {
            DefaultClinicCode = Clinic_No_Code;
        }

        DefaultDHAType = ActivityType;
        DefaultPatientType = Patient_Type;
    }

    var Pl_Reception_Code = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();
    DefaultReceptionCode = Pl_Reception_Code;

    var Dianostic_Clinic_Code = Ext.getCmp('LoginDiagnosticClinic-Dianostic_Clinic_Code');
    if (Dianostic_Clinic_Code) Dianostic_Clinic_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MCL.ISProvider=1";
    }, this);

    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList').getStore();

    LoginDiagnosticClinicServicedtlList.on('load', function (store, record, options) {

        var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList')
        var AddNewBt = Ext.getCmp(LoginDiagnosticClinicServicedtlList.id + '_addNew');
        if (AddNewBt) AddNewBt.setVisible(false);

        var ServiceTotal = Ext.getCmp('LoginDiagnosticClinic-ServiceTotal');
        var Total = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            Total += record.get('Total');
        }
        ServiceTotal.setValue(Total);
    }, this);

    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');

    LoginDiagnosticClinicServicedtlList.on('beforeedit', function (e) {
        var record = e.record;
        var Physician_Code = Ext.getCmp('LoginDiagnosticClinicServicedtl-Physician_Code');
        var Service_ProviderCode = record.get('Service_ProviderCode');

        Physician_Code.lastQuery = '1=2';
        Physician_Code.store.baseParams.filter = "Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE=" + Service_ProviderCode + " )";

    }, this);

    LoginDiagnosticClinicServicedtlList.on('afteredit', function (e) {

        var record = e.record;
        record.set('Total', record.get('Service_Price'));
        var Tol = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var record = e.grid.store.getAt(i);
            Tol += Number(record.get('Total'));
        }
        Ext.getCmp('LoginDiagnosticClinic-ServiceTotal').setValue(Tol);
    }, this);

    LoginDiagnosticClinicServicedtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
        LoginDiagnosticClinicServiceRowSelect(Record);
        TempServiceDetailCode = Record.get('ID');
    }, this);

    var TemplateText = Ext.getCmp('LoginDiagnosticClinic-TemplateText')
    TemplateText.on('valid', function (field) {
        if (LoginDiagnosticClinicServicedtlList.lastSelectedRecord)
            LoginDiagnosticClinicServicedtlList.lastSelectedRecord.set('TemplateText', TemplateText.getValue());
    }, this);



    var Discountpercentage = Ext.getCmp('LoginDiagnosticClinic-Discountpercentage');
    var Patient_Type = Ext.getCmp('LoginDiagnosticClinic-Patient_Type');
    Discountpercentage.on('valid', function (field) {
        if (LoginDiagnosticClinicServicedtlList.lastSelectedRecord) {
            if (Patient_Type == 0 || Patient_Type == 1)
                LoginDiagnosticClinicServicedtlList.lastSelectedRecord.set('Discountpercentage', Discountpercentage.getValue());
        }
    }, this);

    var ReceptionHistoryDetailList = Ext.getCmp('ReceptionHistoryDetailList');
    ReceptionHistoryDetailList.on('rowclick', function (grid, Index, e) {
        var Record = grid.store.getAt(Index);

        SelectedDigClinicHitoryID = Record.get('ID');

    }, this);

    ReceptionHistoryDetailList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        SelectedDigClinicHitoryID = Record.get('ID');

    }, this);


    //Ext.getCmp('LoginDiagnosticClinic-TemplateText').on('render', function (formctl) {
    //    var HtmlEditor = Ext.getCmp('LoginDiagnosticClinic-TemplateText');
    //    HtmlEditor.getToolbar().add('----');
    //    //HtmlEditor.getToolbar().addButton('-');
    //    HtmlEditor.getToolbar().add(new Ext.Button({
    //        text: 'Update',
    //        handler: UpdateServiceTemplateHandler,
    //        //function () {
    //        //    Ext.MessageBox.alert('Buttone Clicked !');
    //        //},
    //        scope: this,
    //        //cls:'',
    //        tabIndex: 5
    //    }));
    //    //HtmlEditor.getToolbar().add(new Ext.Button({
    //    //    text: 'Print',
    //    //    handler: function () {
    //    //        Ext.MessageBox.alert('Buttone Clicked !');
    //    //    },
    //    //    scope: this,
    //    //    tabIndex: 5
    //    //}));
    //}, this);


    //Ext.getCmp('PatientAllDocumentDtlList').on('beforeview', function (record) {
    //    //"data/LawFirm/Casesdoc/UploadedDocument"
    //    var uploadUrl = '';
    //    if (record.get('DocumentSourceCode') == 0)//
    //        uploadUrl = "data/Medical/LoginNursery/UploadedDocument";
    //    else if (record.get('DocumentSourceCode') == 1)//
    //        uploadUrl = "data/Medical/General/UploadedDocument";
    //    else if (record.get('DocumentSourceCode') == 2)//
    //        uploadUrl = "data/Medical/LoginDiagnosticClinic/UploadedDocument";
    //    Ext.getCmp('PatientAllDocumentDtlList').uploadRefUrl = (uploadUrl + '/' + record.get('refdoccol') + '/' + record.get(Ext.getCmp('PatientAllDocumentDtlList').DocumentName));
    //}, this);


    //-------------------Adding Colour to Grid Based on Status-----------------------

    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');   //   Servicedtl
    if (LoginDiagnosticClinicServicedtlList)
        LoginDiagnosticClinicServicedtlListConfig = LoginDiagnosticClinicServicedtlList.getColumnModel().config;

    for (var i = 0; i < LoginDiagnosticClinicServicedtlListConfig.length; i++)
        if (!LoginDiagnosticClinicServicedtlListConfig[i].actions && !LoginDiagnosticClinicServicedtlListConfig[i].checkbox) LoginDiagnosticClinicServicedtlListConfig[i].renderer = ReceptionDrugDetailConfigRender;

    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
    LoginDiagnosticClinicServicedtlList.getColumnModel().getColumnById('ClaimStatus').editable = false;
    LoginDiagnosticClinicServicedtlList.getColumnModel().getColumnById('PriorStatus').editable = false;

}


function DigClinicService_ProviderCodeSelect(combo, record, options) {
    var Physician_Code = Ext.getCmp('LoginDiagnosticClinicServicedtl-Physician_Code');
    var ISProvider = record.data.ISProvider;
    if (ISProvider == 1) {
        Physician_Code.allowBlank = true;
        Physician_Code.clearInvalid();
    }
    else {
        Physician_Code.allowBlank = false;
        Physician_Code.isValid();
    }
    //Physician_Code.clearValue();
}



function LoginDiagnosticClinicServiceRowSelect(Record) {
    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
    LoginDiagnosticClinicServicedtlList.lastSelectedRecord = Record;
    var TemplateText = Ext.getCmp('LoginDiagnosticClinic-TemplateText');
    TemplateText.setValue(Ext.util.Format.htmlDecode(Record.get('TemplateText')));

    var Patient_Type = Ext.getCmp('LoginDiagnosticClinic-Patient_Type');
    var Discountpercentage = Ext.getCmp('LoginDiagnosticClinic-Discountpercentage');
    if (Patient_Type.getValue() == 0 || Patient_Type.getValue() == 1)
        Discountpercentage.setValue(Record.get('Discountpercentage'));
}
function UpdateServiceTemplateHandler(form, login) {

    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
    var updRecord = LoginDiagnosticClinicServicedtlList.getSelectionModel().getSelected();
    var Status = updRecord.get('StatusCode');

    if (Status == 0) {
        Ext.MessageBox.alert(login.modulename, "Cannot Update the Result.Service in Open Status !.");
    }
    else if (Status != 0) {
        var MedicalTemlatebuttonupdate = Ext.getCmp('LoginDiagnosticClinic-TemplateText').getValue();
        updRecord.set('TemplateText', Ext.util.Format.htmlEncode(MedicalTemlatebuttonupdate));
        Ext.MessageBox.alert(login.modulename, "Result Updated!.");
    }

}



function DiagnosticClinicViewHistory(form, login) {

    // var PrimKey = SelectedDigClinicHitoryID;

    var PrimKey = Ext.getCmp('LoginDiagnosticClinic-Patients_Code').editValue;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Select Patient Histroy To View.");
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewReception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DiagnosticClinicViewHistoryComplete, this);
}

function DiagnosticClinicViewHistoryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DiagnosticClinicViewHistoryComplete, this);
    var responseTextStr = response.responseText.replace('PatientLoginReceptionDetailList', 'PatientLoginReceptionDetailList_view').replace('PatientLoginClinicDtlList', 'PatientLoginClinicDtlList_view').replace('PatientViewHistoryDocumentList', 'PatientViewHistoryDocumentList_view').replace('PatientAbsentDetailList', 'PatientAbsentDetailList_view');
    var responseText = Ext.util.JSON.decode(responseTextStr);
    // var responseText = Ext.util.JSON.decode(response.responseText);
    this.ReceiptionViewTemplateForm = new Ext.form.FormPanel(responseText.ViewReceptionConfig);
    this.ReceiptionViewTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceiptionViewTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceiptionViewTemplateForm.FormFieldsCount + 2
    });

    this.ReceiptionViewTemplateFormWindow = new Ext.Window({
        id: 'ReceiptionViewTemplateForm',
        title: 'Patient History',
        closable: true,
        minimizable: false,
        width: this.ReceiptionViewTemplateForm.width + 10,
        height: this.ReceiptionViewTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceiptionViewTemplateForm]
    });
    this.ReceiptionViewTemplateFormWindow.show();
    PatientViewHistory(Ext.getCmp('ReceiptionViewTemplateForm'), login);
    SelectedDigClinicHitoryID = '';
}




function DiagnosticClinicSearch(form, login) {
    var FromDate = Ext.getCmp('DiagnosticClinicSearch-FromDate').setValue(null);
    var ToDate = Ext.getCmp('DiagnosticClinicSearch-ToDate').setValue(null);
}

function DiagnosticClinicSearchButton(button, options) {

    var FilterQry = "";

    var servicefilter = "";

    var PatientName = Ext.getCmp('DiagnosticClinicSearch-Patient_Name');

    if (PatientName.getValue() != '' && PatientName.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(DC.PATIENT_NAME) like upper('%" + PatientName.getValue() + "%')");
        else
            FilterQry += (" and upper(DC.PATIENT_NAME) like upper('%" + PatientName.getValue() + "%')");
    }

    var Service_NoCode = Ext.getCmp('DiagnosticClinicSearch-Service_NoCode');

    if (Service_NoCode.getValue() !== '') {
        if (servicefilter == '')
            servicefilter += " mpds.SERVICETYPE_CODE=" + Service_NoCode.getValue();
        else
            servicefilter += " and mpds.SERVICETYPE_CODE=" + Service_NoCode.getValue();
    }

    var ServiceName = Ext.getCmp('DiagnosticClinicSearch-Service_Name');

    if (ServiceName.getValue() != '' && ServiceName.getValue() != null) {
        if (servicefilter == '')
            servicefilter += ("upper(mpds.SERVICENAME) like upper('%" + ServiceName.getValue() + "%')");
        else
            servicefilter += (" and upper(mpds.SERVICENAME) like upper('%" + ServiceName.getValue() + "%')");
    }
    var Externals = Ext.getCmp('DiagnosticClinicSearch-Externals');

    var Internal = Ext.getCmp('DiagnosticClinicSearch-Internal');

    if (Internal.getValue() !== '' && Internal.getValue() == true && Externals.getValue() == false) {

        if (servicefilter == '')
            servicefilter += "mpds.Type=1";
        else
            servicefilter += " and mpds.Type=1";
    }

    else if (Externals.getValue() !== '' && Externals.getValue() == true && Internal.getValue() == false) {

        if (servicefilter == '')
            servicefilter += "mpds.Type=2";
        else
            servicefilter += " and mpds.Type=2";
    }
    else if (Internal.getValue() == true && Externals.getValue() == true) {
        if (servicefilter == '')
            servicefilter += "mpds.Type in(1,2)"
        else
            servicefilter += " and mpds.Type in (1,2)";
    }

    var OpenStatus = Ext.getCmp('DiagnosticClinicSearch-OpenStatus');

    var CloseStatus = Ext.getCmp('DiagnosticClinicSearch-CloseStatus');

    if (OpenStatus.getValue() !== '' && OpenStatus.getValue() == true && CloseStatus.getValue() == false) {

        if (servicefilter == '')
            servicefilter += "mpds.StatusCode in(0,1)";
        else
            servicefilter += " and mpds.StatusCode in(0,1)";
    }

    else if (CloseStatus.getValue() !== '' && CloseStatus.getValue() == true && OpenStatus.getValue() == false) {

        if (servicefilter == '')
            servicefilter += "mpds.StatusCode=2";
        else
            servicefilter += " and mpds.StatusCode=2";
    }
    else if (OpenStatus.getValue() == true && CloseStatus.getValue() == true) {
        if (servicefilter == '')
            servicefilter += "mpds.StatusCode in(0,1,2)"
        else
            servicefilter += " and mpds.StatusCode in (0,1,2)";
    }

    if (servicefilter != '') {
        servicefilter = "DC.PL_RECEPTION_CODE in (select mpds.PL_RECEPTION_CODE from VEMEDDIAGVLICSERVICEDETAIL mpds where  " + servicefilter + ")";
        if (FilterQry == '')
            FilterQry += servicefilter;
        else
            FilterQry += " and " + servicefilter;
    }

    var FromDate = Ext.getCmp('DiagnosticClinicSearch-FromDate');
    var ToDate = Ext.getCmp('DiagnosticClinicSearch-ToDate');

    if (FromDate.getValue() != '' && FromDate.getValue() != null && ToDate.getValue() != '' && ToDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " DC.TransactionDate between TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and DC.TransactionDate between TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }
    else {
        if (FromDate.getValue() != '' && FromDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += " DC.TransactionDate>=TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and DC.TransactionDate>=TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
        if (ToDate.getValue() != '' && ToDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += " DC.TransactionDate<=TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and DC.TransactionDate<=TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
    }

    var DetailStore = Ext.getCmp('DiagnosticClinicSearchDetailsList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.DiagnosticClinicSearchDetails&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 5000
            }
        });
    }

}

function DiagnosticClinicClearButton(button, options) {

    var FilterQry = "";
    var PatientName = Ext.getCmp('DiagnosticClinicSearch-Patient_Name').setValue(null);
    var ServiceName = Ext.getCmp('DiagnosticClinicSearch-Service_Name').setValue(null);
    var Service_NoCode = Ext.getCmp('DiagnosticClinicSearch-Service_NoCode').setValue(null);
    var Externals = Ext.getCmp('DiagnosticClinicSearch-Externals').setValue(null);
    var Internal = Ext.getCmp('DiagnosticClinicSearch-Internal').setValue(null);
    var OpenStatus = Ext.getCmp('DiagnosticClinicSearch-OpenStatus').setValue(null);
    var CloseStatus = Ext.getCmp('DiagnosticClinicSearch-CloseStatus').setValue(null);
    var FromDate = Ext.getCmp('DiagnosticClinicSearch-FromDate').setValue(null);
    var ToDate = Ext.getCmp('DiagnosticClinicSearch-ToDate').setValue(null);


    var DetailStore = Ext.getCmp('DiagnosticClinicSearchDetailsList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.DiagnosticClinicSearchDetails&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 5000
            }
        });
    }
}



var RecPrimkey = '';
function PrePaidServicePopupLoad(form, login) {


    var PrimKey = Ext.getCmp('PatientsLoginReception-Cashier_Code').getValue();


    var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').getValue();
    if (form.selectedIndex != -1 && !form.isView) {
        var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;
    }


    var Emirates_ID_No = Ext.getCmp('PatientsLoginReception-Emirates_ID_No').getValue();

    if (PrimKey == null || PrimKey == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please select PrePaid Patient to Load Service !');
        return;
    }

    if (Emirates_ID_No == null || Emirates_ID_No == 0) {
        Ext.MessageBox.alert(login.modulename, 'Emirate ID No Should Not be Empty to Load Service !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidServicePopup',
            PrimKey: PrimKey,
            Patient_NoCode: Patient_NoCode,
            Emirates_ID_No: Emirates_ID_No
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrePaidServicePopupComplete, this);

}

function PrePaidServicePopupComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PrePaidServicePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {

        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidServiceCofig);
        this.PrePaidServicePopupForm.selectedIndex = responseText.PKey;


        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginReceptionEntryDetGrid = Ext.getCmp('PatientLoginReceptionDetailList');
                var selectcnt = 0;
                var PrePaidServicePopupDtlList = Ext.getCmp('PrePaidServicePopupDtlList');
                var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
                var count = PatientLoginReceptionDetailList.store.getCount();
                var store = Ext.getCmp('PatientLoginReceptionDetailList').getStore();
                var Emirates_ID_No = Ext.getCmp('PatientsLoginReception-Emirates_ID_No').getValue();

                var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

                for (var pcnt = 0; pcnt < PrePaidServicePopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidServicePopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginReceptionEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginReceptionEntryDetGrid.storeId;
                    var newRecord = new PatientLoginReceptionEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Serviceprovidertype: 0,
                        ServiceprovidertypeName: "",
                        Service_ProviderCode: PopupRecord.get('Service_ProviderCode'),
                        Service_ProviderName: PopupRecord.get('Service_ProviderName'),
                        ServiceTypeCode: PopupRecord.get('ServiceTypeCode'),
                        ServiceTypeName: PopupRecord.get('ServiceTypeName'),
                        Service_Name: PopupRecord.get('Service_Name'),
                        Service_Alternate_Name: PopupRecord.get('Service_Alternate_Name'),
                        Service_Price: PopupRecord.get('Price'),
                        StatusCode: 0,
                        StatusName: "Open",
                        SampleTime: "00:00",
                        ReceptionServiceTemplateDtlList: null,
                        DeliveryDate: new Date().format(login.jsdateformat),
                        Revenue_Account: "",
                        Emirates_ID_No: Emirates_ID_No,
                        Amount: 0,
                        IsCashier: 0,
                        OldService: 0,
                        Description: "",
                        SelectCheck: 0,
                        Discountpercentage: 0,
                        Total: PopupRecord.get('Price'),
                        IsPrepaid: 1,
                        TemplateText: null,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginReceptionEntryDetGrid.stopEditing();
                    PatientLoginReceptionEntryDetGrid.store.add(newRecord);
                    PatientLoginReceptionEntryDetGrid.store.totalLength = PatientLoginReceptionEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginReceptionEntryDetGrid.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Service',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();

    }
}


function DiagonisticClinicAddNew(form, login) {
    var DiagonisticClinicTemplate = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.LoginDiagnosticClinic', Url = '/forms/Medical/LoginDiagnosticClinic.xml', PKey = -1, WidgetTitle = 'Diagnostic Clinic';
    DiagonisticClinicTemplate.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

var PrimKeys = '';

function DiagonisticClinicEdit(form, login) {
    var DiagnosticClinicSearchDtlList = Ext.getCmp('DiagnosticClinicSearchDetailsList');

    var Count = 0;
    var Record1 = '';

    for (var cnt = 0; cnt < DiagnosticClinicSearchDtlList.store.getCount() ; cnt++) {

        var Record = DiagnosticClinicSearchDtlList.store.getAt(cnt);
        if (Record.get('SelectCheck')) {
            Record1 = DiagnosticClinicSearchDtlList.store.getAt(cnt);
            Count++;
        }
    }
    if (Count > 1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot Select More Then One Patient Record !');
        return;
    }
    else if (Count == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select Patient to  Edit !');
        return;
    }

    PrimKeys = Record1.get('ID');

    var DiagonisticClinicTemplate = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.LoginDiagnosticClinic', Url = '/forms/Medical/LoginDiagnosticClinic.xml', PKey = PrimKeys, WidgetTitle = 'Diagnostic Clinic';
    DiagonisticClinicTemplate.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Send to Clinic,Post to Cashier,Logout,Print Result', 'PostDiagnosticClinicToClinic,PostDiagnosisticToCashier,LogOutDiagnosticClinicHandler,PrintServiceTemplate');
    //"LBLPOSTTOCLINIC,LBLLOGOUT" botbuttonhandlers="PostDiagnosticClinicToClinic,LogOutDiagnosticClinicHandler"

    PrimKeys = '';


    //showMask();
    //Ext.Ajax.request({
    //    url: 'tools/HumanResources/HRPosting.aspx',
    //    params: {
    //        action: 'EditDiagonisticPost',
    //        PrimKey: PrimKeys
    //    },
    //    method: 'POST',
    //    failure: function (result, request) {
    //        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
    //    },
    //    timeout: 1200000,
    //    scope: this
    //});
    //Ext.Ajax.on('requestcomplete', EditDiagonisticPostComplete, this);
}

var DiagPrimKey = '';
function DiagonisticClinicView(form, login) {



    var DiagnosticClinicSearchDtlList = Ext.getCmp('DiagnosticClinicSearchDetailsList');

    var Count = 0;
    var Record1 = '';

    for (var cnt = 0; cnt < DiagnosticClinicSearchDtlList.store.getCount() ; cnt++) {

        var Record = DiagnosticClinicSearchDtlList.store.getAt(cnt);
        if (Record.get('SelectCheck')) {
            Record1 = DiagnosticClinicSearchDtlList.store.getAt(cnt);
            Count++;
        }

    }
    if (Count > 1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot Select More Then One Patient Record !');
        return;
    }
    else if (Count == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select Patient to  View !');
        return;
    }
    //  var  Diagnostic_ClinicCode = Record1.get('Diagnostic_ClinicCode')


    DiagPrimKey = Record1.get('ID');

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewDiagonisticPost',
            PrimKey: DiagPrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewDiagonisticPostComplete, this);
}

function ViewDiagonisticPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ViewDiagonisticPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ViewDiagonisticTemplateForm = new Ext.form.FormPanel(responseText.ViewDiagTemplateConfig);
    this.ViewDiagonisticTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ViewDiagonisticTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ViewDiagonisticTemplateForm.FormFieldsCount + 2
    });

    this.ViewDiagonisticTemplateFormWindow = new Ext.Window({
        id: 'ViewDiagonisticTemplateForm',
        title: 'Diagnostic Clinic',
        closable: true,
        minimizable: false,
        width: this.ViewDiagonisticTemplateForm.width + 25,
        height: this.ViewDiagonisticTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ViewDiagonisticTemplateForm]
    });
    this.ViewDiagonisticTemplateFormWindow.show();


    DiagPrimKey = '';
}

function DiagonisticClinicClose(form, login) {
    Ext.getCmp('ID_DIAGNSTICSEARCH').close();
}


function PrintServiceTemplate(form, login) {

    var ServiceName = ''; var ServiceProviderName = ''; Record1 = '';
    var TransactionNo = Ext.getCmp('LoginDiagnosticClinic-TransactionNo').getValue();
    var Patients_Code = Ext.getCmp('LoginDiagnosticClinic-Patients_Code').lastSelectionText;// "Name";
    var TransactionDate = (Ext.getCmp('LoginDiagnosticClinic-TransactionDate').getValue() ? Ext.getCmp('LoginDiagnosticClinic-TransactionDate').getValue().format('d-M-y') : '');

    if (Patients_Code > 0 || Patients_Code != null)
        var PatientName = Ext.getCmp('LoginDiagnosticClinic-Patient_Name').getValue();
    else
        var PatientName = Ext.getCmp('LoginDiagnosticClinic-Out_PatientName').getValue();
    //  var TransactionDate1 = Ext.getCmp('LoginDiagnosticClinic-TransactionDate').getValue();


    //var today = new Date();
    //var birthDate = new Date(TransactionDate1);
    //var TraAge = today.getFullYear() - birthDate.getFullYear();


    var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
    var detailStore = LoginDiagnosticClinicServicedtlList.getStore();
    var Count = 0;
    if (!Patients_Code)
        Patients_Code = " -- ";

    var tablestr = "";
    tablestr += "<table style='width:800px'>";
    tablestr += ("<tr><td><b>Reference No</b></td><td>   : </td><td>" + TransactionNo + "</td> <td><b>Reference Date</b></td><td> : </td><td>" + TransactionDate + "</td></tr>");
    tablestr += ("<tr><td><b>Patient No</b></td><td>    : </td><td>" + Patients_Code + "</td> <td><b>Patient Name</b></td><td>  : </td><td>" + PatientName + "</td></tr>");
    // tablestr += ("<tr><td><b>Clinic Name</b></td><td>   : </td><td>" + ServiceProviderName + "</td><td><b>Service Name</b></td><td>:</td><td>" + ServiceName + "</td></tr>");
    // tablestr += ("<tr><td><b>Service Template </b></td><td> : </td><td>" + TemplateText + "</td></tr>");
    tablestr += ("<tr><td><b>Service Template</td><td> :</td><tr>");

    for (var pcnt = 0; pcnt < LoginDiagnosticClinicServicedtlList.store.getCount() ; pcnt++) {


        var RecpRecord = LoginDiagnosticClinicServicedtlList.store.getAt(pcnt);
        if (RecpRecord.get('SelectCheck')) {
            //  Record1 = LoginDiagnosticClinicServicedtlList.store.getAt(pcnt);
            // Count++;
            Service_Name = RecpRecord.get('Service_Name');
            TemplateText = Ext.util.Format.htmlDecode(RecpRecord.get('TemplateText'));
            tablestr += ("<table>");
            tablestr += ("<tr><td><b>" + Service_Name + "</b></td></tr>");
            tablestr += ("<tr><td>" + TemplateText + "</td></tr>");
            tablestr += ("</table>");
        }

    }
    /*  if (Count > 1) {
          Ext.MessageBox.alert(login.modulename, "Cannot Select More Than One Service to Print.");
          return;
      }
      else if (Count <= 0) {
          Ext.MessageBox.alert(login.modulename, "Please Select Service to Print.");
          return;
      }
      ServiceName = Record1.get('Service_Name');
      ServiceProviderName = Record1.get('Service_ProviderName');
      TemplateText = Ext.util.Format.htmlDecode(Record1.get('TemplateText'));
     */


    var height = 600;


    //tablestr += ("<tr><td> " + TemplateText + "</td><tr>");
    tablestr += "</table>";
    // tablestr += ("<table><tr><td> " + TemplateText + "</td><tr></table>");
    //tablestr += ("<b>   Service Template :</b>");
    // tablestr += (" "+ TemplateText + "");
    var myWindow = window.open("", "MsgWindow", "width=4961px,height=7016px");//width=330,

    // myWindow.document.write("<html><head><img border='1' src='/images/pulpit.jpg' alt='Pulpit rock' width='800px' height='75'><br></br><style>body.one {border-style:solid;border-width:1px;width:800px}</style></head><body class='one'>" +
    // myWindow.document.write("<html><head><img src='images/headletter-medical.png' alt='Pulpit rock' width='800px' height='100'><br></br><b><u><font size='5.5'><center>????? ??? ?????</center></font></u></b><center><b>Lab Test Result</b></center><br></br><style>body.one {border-style:solid;border-width:0px;width:800px} #footer { width:100%;height:80px;position:fixed;bottom:0;left:10px;} #content {float: left;width: 750px;height: 600px;}#wrapper {min-height: 100%;height: 100%;min-width: 900px;overflow: hidden;}</style></head><body class='one'><section>" +
    myWindow.document.write("<html><head><img src='images/headletter-medical.png' alt='Pulpit rock' width='800px' height='100'><br></br><b><u><font size='5.5'><center>????? ??? ?????</center></font></u></b><center><b>Lab Test Result</b></center><br></br><style>body.one {border-style:solid;border-width:0px;width:800px} #wrapper {min-height: 100%;height: 100%;min-width: 900px;overflow: hidden;}html, body, #container {height: 80%;margin:0;padding:0;}  #container {height: auto;min-height: 80%;} #footer {clear: both;position: relative;z-index: 10;height: 1em;margin-top: -1em;bottom:0;}#content {padding-bottom: 3em;}</style></head><body class='one'><div id='container'><div id='content'>" +
    tablestr + "</div></div><div id='footer'><img src='images/headletter-medical2.png' alt='Pulpit rock' width='800px' height='50'</div></body></html>");

    // myWindow.document.write("<html><head><img src='images/headletter-medical.png' alt='Pulpit rock' width='800px' height='100'><br></br><b><u><font size='5.5'><div style='text-align:center'>????? ??? ?????</font></u></b><b>Lab Test Result</b></div><br></br> <style>html, body, #container {height: 80%;margin:0;padding:0;}  #container {height: auto;min-height: 80%;} #footer {clear: both;position: relative;z-index: 10;height: 3em;margin-top: -3em;}#content {padding-bottom: 3em;}</style></head><body.one><div id='container'><div id='content'>" +
    // tablestr + " </div></div><div id='footer'><img src='images/headletter-medical2.png' alt='Pulpit rock' width='800px' height='50'</div></section></body></html>");


    myWindow.print();

}



function PrintClinicMedicalReport(form, login) {


    var ServiceName = ''; var ServiceProviderName = ''; Record1 = '';
    var TransactionNo = Ext.getCmp('PatientLoginClinic-Login_Clinic_No').getValue();
    var Patients_Code = Ext.getCmp('PatientLoginClinic-Patients_Code').lastSelectionText;// "Name";
    var PatientAge = Ext.getCmp('PatientLoginClinic-PatientAge').getValue();
    var Patient_Alternate_Name = Ext.getCmp('PatientLoginClinic-Patient_Alternate_Name').getValue();
    var TransactionDate = (Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue() ? Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue().format('d-M-y') : '');
    var PatientName = Ext.getCmp('PatientLoginClinic-Patient_Name').getValue();

    var ClinicMedicalReportDtlList = Ext.getCmp('ClinicMedicalReportDtlList');
    var detailStore = ClinicMedicalReportDtlList.getStore();
    var Count = 0;
    for (var pcnt = 0; pcnt < ClinicMedicalReportDtlList.store.getCount() ; pcnt++) {


        var RecpRecord = ClinicMedicalReportDtlList.store.getAt(pcnt);
        //if (RecpRecord.get('SelectCheck')) {
        //    Record1 = ClinicMedicalReportDtlList.store.getAt(pcnt);
        //    Count++;
        //}
        if (RecpRecord.get('ID') == ReportDetailCode) {
            Record1 = ClinicMedicalReportDtlList.store.getAt(pcnt);
            Count++;
        }

    }
    if (Count > 1) {
        Ext.MessageBox.alert(login.modulename, "Cannot Select More Than One Report to Print.");
        return;
    }
    else if (Count <= 0) {
        Ext.MessageBox.alert(login.modulename, "Please Select Report to Print.");
        return;
    }

    ReportDate = Record1.get('Reportdate');
    ReportTime = Record1.get('Reporttime');
    TemplateText = Ext.util.Format.htmlDecode(Record1.get('MedicalTemlate'));

    var height = 600;

    var tablestr = "";
    tablestr += "<table style='width:800px'>";
    tablestr += ("<tr><td><b>Reference No</b></td><td>   : </td><td>" + TransactionNo + "</td> <td><b>Reference Date</b></td><td> : </td><td>" + TransactionDate + "</td></tr>");
    tablestr += ("<tr><td><b>Patient No</b></td><td>    : </td><td>" + Patients_Code + "</td> <td><b>Report Time</b></td><td>  : </td><td>" + ReportTime + "</td></tr>");
    tablestr += ("<tr><td><b>Patient Name</b></td><td>   : </td><td>" + PatientName + "</td><td><b>Age</b></td><td>:</td><td>" + PatientAge + "</td></tr>");
    tablestr += ("<tr><td><b>Patient Arabic Name</td><td> :</td><td>" + Patient_Alternate_Name + "</td><tr>");
    tablestr += "</table>";
    tablestr += ("<table><tr><td> " + TemplateText + "</td><tr></table>");

    var myWindow = window.open("", "MsgWindow", "width=4961px,height=7016px");// + height);//width=330,

    myWindow.document.write("<html><head><img src='images/headletter-medical.png' alt='Pulpit rock' width='800px' height='100px'><br></br><b><u><font size='5.5'><center>????? ???</center></font></u></b><center><b>Medical Report</b></center><br></br><style>body.one {border-style:solid;border-width:0px;width:800px} #footer { width:100%;height:80px;position:fixed;bottom:0;left:10px;}</style></head><body class='one'>" +
    tablestr + "<div id='footer'><img src='images/headletter-medical2.png' alt='Pulpit rock' width='800px' height='50'</div></body></html>");

    myWindow.print();

}



function PatientViewHistory(form, login) {

    var TemplateText = Ext.getCmp('PatientViewHistory-TemplateText').disable();

    var MedicalTemlate = Ext.getCmp('PatientViewHistory-MedicalTemlate').disable();

    // var PatientViewServiceHistoryList = Ext.getCmp('PatientViewServiceHistoryList');

    var PatientViewServiceHistoryList = Ext.getCmp('PatientViewServiceHistoryList');

    PatientViewServiceHistoryList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        PatientViewServiceHistoryList.SelectedRecord = record;
        HistoryServiceRowSelect(record);
    }, this);

    var LabServiceHistoryList = Ext.getCmp('LabServiceHistoryList');

    LabServiceHistoryList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        LabServiceHistoryList.SelectedRecord = record;
        LabServiceHistoryRowSelect(record);
    }, this);

    var X_RayServiceHistoryList = Ext.getCmp('X_RayServiceHistoryList');

    X_RayServiceHistoryList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        X_RayServiceHistoryList.SelectedRecord = record;
        X_RayServiceHistoryRowSelect(record);
    }, this);

    var PatientViewAbsentHistoryList = Ext.getCmp('PatientViewAbsentHistoryList');
    PatientViewAbsentHistoryList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        PatientViewAbsentHistoryList.SelectedRecord = record;
        HistorySickLeaveRowSelect(record);
    }, this);

    var PatientViewMedicalReportHistoryList = Ext.getCmp('PatientViewMedicalReportHistoryList');
    PatientViewMedicalReportHistoryList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        PatientViewMedicalReportHistoryList.SelectedRecord = record;
        HistoryMedicalreportRowSelect(record);
    }, this);

    var PatientViewHistoryDocumentList = Ext.getCmp('PatientViewHistoryDocumentList_view')
    PatientViewHistoryDocumentList.on('beforeview', function (record) {
        var uploadUrl = '';
        if (record.get('DocumentSourceCode') == 0)//
            uploadUrl = "data/Medical/LoginNursery/UploadedDocument";
        else if (record.get('DocumentSourceCode') == 1)//
            uploadUrl = "data/Medical/General/UploadedDocument";
        else if (record.get('DocumentSourceCode') == 2)//
            uploadUrl = "data/Medical/LoginDiagnosticClinic/UploadedDocument";
        Ext.getCmp('PatientViewHistoryDocumentList_view').uploadRefUrl = (uploadUrl + '/' + record.get('refdoccol') + '/' + record.get(Ext.getCmp('PatientViewHistoryDocumentList_view').DocumentName));
    }, this);

}

function HistoryMedicalreportRowSelect(Record) {
    var PatientViewMedicalReportHistoryList = Ext.getCmp('PatientViewMedicalReportHistoryList');
    PatientViewMedicalReportHistoryList.lastSelectedRecord = Record;
    var MedicalTemlate = Ext.getCmp('PatientViewHistory-MedicalTemlate');
    MedicalTemlate.setValue(Ext.util.Format.htmlDecode(Record.get('MedicalTemlate')));

}

function HistoryServiceRowSelect(Record) {
    var PatientViewServiceHistoryList = Ext.getCmp('PatientViewServiceHistoryList');
    PatientViewServiceHistoryList.lastSelectedRecord = Record;
    var TemplateText = Ext.getCmp('PatientViewHistory-TemplateText');
    TemplateText.setValue(Ext.util.Format.htmlDecode(Record.get('TemplateText')));

}

function X_RayServiceHistoryRowSelect(Record) {
    var X_RayServiceHistoryList = Ext.getCmp('X_RayServiceHistoryList');
    X_RayServiceHistoryList.lastSelectedRecord = Record;
    var TemplateText = Ext.getCmp('PatientViewHistory-XrayTemplateText');
    TemplateText.setValue(Ext.util.Format.htmlDecode(Record.get('TemplateText')));

}

function LabServiceHistoryRowSelect(Record) {
    var LabServiceHistoryList = Ext.getCmp('LabServiceHistoryList');
    LabServiceHistoryList.lastSelectedRecord = Record;
    var TemplateText = Ext.getCmp('PatientViewHistory-LabTemplateText');
    TemplateText.setValue(Ext.util.Format.htmlDecode(Record.get('TemplateText')));
}

function HistorySickLeaveRowSelect(Record) {
    var PatientViewAbsentHistoryList = Ext.getCmp('PatientViewAbsentHistoryList');
    PatientViewServiceHistoryList.lastSelectedRecord = Record;
    var Remark1 = Ext.getCmp('PatientViewHistory-Remark1');
    Remark1.setValue(Record.get('Remark'));

}


function PrintClinicPrescriptionReport(form, login) {


    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'DrugDetail_Post',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrintClinicPrescriptionComplete, this);

}


function PrintClinicPrescriptionComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PrintClinicPrescriptionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }

    else {
        // Ext.MessageBox.alert(login.modulename, responseText.Msg);

        Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
            if (button == 'yes') {
                PrintClinicPrescription();
            }
        }, this);

        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        PatientLoginClinicDtlList.store.load({
            params: {
                start: 0,
                limit: PatientLoginClinicDtlList.pageSize
            }
        });
        /*

        var TransactionNo = Ext.getCmp('PatientLoginClinic-Login_Clinic_No').getValue();
        var TransactionDate = (Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue() ? Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue().format('d-M-y') : '');
        var PatientName = Ext.getCmp('PatientLoginClinic-Patient_Name').getValue();
        var PatientAge = Ext.getCmp('PatientLoginClinic-PatientAge').getValue();
        var Patients_Code = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;
        var Out_PatientName = Ext.getCmp('PatientLoginClinic-Out_PatientName').getValue();


        var height = 160;
        var tablestr = "";
        tablestr += "<table style='width:800px'>";
        if (Patients_Code > 0) {
            tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + PatientName + "</td><td><b>Age</b></td><td>    : </td><td>" + PatientAge + "</td></tr>");
        }
        else {
            tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + Out_PatientName + "</td></tr>");
        }
        tablestr += ("<tr><td><b>File No</b></td><td>   : </td><td>" + TransactionNo + "</td> <td><b>Date</b></td><td> : </td><td>" + TransactionDate + "</td></tr>");
        tablestr += ("<tr><td><b>Drugs</td><td> :</td><tr>");


        var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
        var detailStore = PatientLoginClinicDtlList.getStore();
        var Count = 0;
        height = (height * detailStore.getCount());
        tablestr += "<table  style='border:1px solid black;border-collapse:collapse;width:750px;cellpadding='10';'>";
        tablestr += ("<tr><th style='border:1px solid black;'>Drug Name</th><th style='border:1px solid black;'>Doze</th><th style='border:1px solid black;'>No of Days</th><th style='border:1px solid black;'>Quantity</th><th style='border:1px solid black;'>Times Per Day</th></tr>");
        for (i = 0; i < detailStore.getCount() ; i++) {
            var j = i;
            tablestr += ("<tr><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Drug_Name') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Doze') + "</td><td style='border:1px solid black; text-align:center;'>" + detailStore.getAt(i).get('No_of_days') + "</td><td style='border:1px solid black; text-align:center;'>" + detailStore.getAt(i).get('Quantity') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Times_Per_DayName') + "</td></tr>");
            i = j;
        }
        tablestr += "</table> ";
        tablestr += "</table>";


        var myWindow = window.open("", "MsgWindow", "width=840,height=" + height);//width=330,

        myWindow.document.write("<html><head><img border='1' src='images/headlettre312.png' alt='Pulpit rock' width='800px' height='75'><br><b><u><font size='5.5'><center>????  ????</center></font></u></b><center><b>Medical Prescription</b></center><style>table1{border:1px solid black;} body.one {border-style:solid;border-width:1px;width:800px;}</style></head><body class='one'>" +
        tablestr + " <p><center>Tel : 067421979   Fax : 067422733   P.O.Box:5002   Ajman-UAE </center></p></body></html>");

        myWindow.print();

        */

    }
}

function PrintClinicPrescription() {


    var TransactionNo = Ext.getCmp('PatientLoginClinic-Login_Clinic_No').getValue();
    var TransactionDate = (Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue() ? Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue().format('d-M-y') : '');
    var PatientName = Ext.getCmp('PatientLoginClinic-Patient_Name').getValue();
    var PatientAge = Ext.getCmp('PatientLoginClinic-PatientAge').getValue();
    var Patients_Code = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;
    var Out_PatientName = Ext.getCmp('PatientLoginClinic-Out_PatientName').getValue();


    var height = 160;
    var tablestr = "";
    tablestr += "<table style='width:800px'>";
    if (Patients_Code > 0) {
        tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + PatientName + "</td><td><b>Age</b></td><td>    : </td><td>" + PatientAge + "</td></tr>");
    }
    else {
        tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + Out_PatientName + "</td></tr>");
    }
    tablestr += ("<tr><td><b>File No</b></td><td>   : </td><td>" + TransactionNo + "</td> <td><b>Date</b></td><td> : </td><td>" + TransactionDate + "</td></tr>");
    tablestr += ("<tr><td><b>Drugs</td><td> :</td><tr>");


    var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
    var detailStore = PatientLoginClinicDtlList.getStore();
    var Count = 0;
    height = (height * detailStore.getCount());
    tablestr += "<table  style='border:1px solid black;border-collapse:collapse;width:750px;cellpadding='10';'>";
    tablestr += ("<tr><th style='border:1px solid black;'>Drug Name</th><th style='border:1px solid black;'>Doze</th><th style='border:1px solid black;'>No of Days</th><th style='border:1px solid black;'>Quantity</th><th style='border:1px solid black;'>Times Per Day</th></tr>");
    for (i = 0; i < detailStore.getCount() ; i++) {
        var j = i;
        tablestr += ("<tr><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Drug_Name') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Doze') + "</td><td style='border:1px solid black; text-align:center;'>" + detailStore.getAt(i).get('No_of_days') + "</td><td style='border:1px solid black; text-align:center;'>" + detailStore.getAt(i).get('Quantity') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Times_Per_DayName') + "</td></tr>");
        i = j;
    }
    tablestr += "</table> ";
    tablestr += "</table>";


    var myWindow = window.open("", "MsgWindow", "width=840,height=" + height);//width=330,

    myWindow.document.write("<html><head><img border='1' src='images/headlettre312.png' alt='Pulpit rock' width='800px' height='75'><br><b><u><font size='5.5'><center>????  ????</center></font></u></b><center><b>Medical Prescription</b></center><style>table1{border:1px solid black;} body.one {border-style:solid;border-width:1px;width:800px;}</style></head><body class='one'>" +
    tablestr + " <p><center>Tel : 067421979   Fax : 067422733   P.O.Box:5002   Ajman-UAE </center></p></body></html>");

    myWindow.print();


}

function ClinicSickleave(form, login) {

    var TransactionNo = Ext.getCmp('PatientLoginClinic-Login_Clinic_No').getValue();
    var TransactionDate = (Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue() ? Ext.getCmp('PatientLoginClinic-Login_Clinic_Date').getValue().format('d-M-y') : '');
    var PatientName = Ext.getCmp('PatientLoginClinic-Patient_Name').getValue();
    var PatientAge = Ext.getCmp('PatientLoginClinic-PatientAge').getValue();
    var Patients_Code = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;
    var Out_PatientName = Ext.getCmp('PatientLoginClinic-Out_PatientName').editValue;


    var height = 160;
    var tablestr = "";
    tablestr += "<table style='width:800px'>";
    if (Patients_Code != 0 || Patients_Code != null || Patients_Code != "") {
        tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + PatientName + "</td><td><b>Age</b></td><td>    : </td><td>" + PatientAge + "</td></tr>");
    }
    else {
        tablestr += ("<tr><td><b>Name</b></td><td>    : </td><td>" + Out_PatientName + "</td></tr>");
    }
    tablestr += ("<tr><td><b>File No</b></td><td>   : </td><td>" + TransactionNo + "</td> <td><b>Date</b></td><td> : </td><td>" + TransactionDate + "</td></tr>");
    tablestr += ("<tr><td><b>Drugs</td><td> :</td><tr>");


    var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
    var detailStore = PatientLoginClinicDtlList.getStore();
    var Count = 0;
    height = (height * detailStore.getCount());
    tablestr += "<table  style='border:1px solid black;border-collapse:collapse;width:750px;cellpadding='10';'>";
    tablestr += ("<tr><th style='border:1px solid black;'>Drug Name</th><th style='border:1px solid black;'>Doze</th><th style='border:1px solid black;'>No of Days</th><th style='border:1px solid black;'>Times Per Day</th></tr>");
    for (i = 0; i < detailStore.getCount() ; i++) {
        var j = i;
        tablestr += ("<tr><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Drug_Name') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Doze') + "</td><td style='border:1px solid black; text-align:center;'>" + detailStore.getAt(i).get('No_of_days') + "</td><td style='border:1px solid black;text-align:center;'>" + detailStore.getAt(i).get('Times_Per_DayName') + "</td></tr>");
        i = j;
    }
    tablestr += "</table> ";
    tablestr += "</table>";


    var myWindow = window.open("", "MsgWindow", "width=840,height=" + height);//width=330,

    myWindow.document.write("<html><head><img border='1' src='images/headlettre3.png' alt='Pulpit rock' width='800px' height='75'><br><b><u><font size='5.5'><center>????  ????</center></font></u></b><center><b>Medical Prescription</b></center><style>table1{border:1px solid black;} body.one {border-style:solid;border-width:1px;width:800px;}</style></head><body class='one'>" +
    tablestr + " <p><center>Tel : 067421979   Fax : 067422733   P.O.Box:5002   Ajman-UAE </center></p></body></html>");

    myWindow.print();

}


function PatientRegistrationViewHitory(form, login) {

    // var PrimKey = SelectedClinicHitoryID1;
    var PrimKey = Ext.getCmp('PatientRegistration').selectedIndex;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Select Patient Histroy To View.");
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewReception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientRegistrationViewHitoryComplete, this);
}

function PatientRegistrationViewHitoryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PatientRegistrationViewHitoryComplete, this);

    var responseTextStr = response.responseText.replace('PatientLoginReceptionDetailList', 'PatientLoginReceptionDetailList_view').replace('PatientLoginClinicDtlList', 'PatientLoginClinicDtlList_view').replace('PatientViewHistoryDocumentList', 'PatientViewHistoryDocumentList_view').replace('PatientAbsentDetailList', 'PatientAbsentDetailList_view');
    var responseText = Ext.util.JSON.decode(responseTextStr);
    this.ReceiptionViewTemplateForm = new Ext.form.FormPanel(responseText.ViewReceptionConfig);
    this.ReceiptionViewTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceiptionViewTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceiptionViewTemplateForm.FormFieldsCount + 2
    });

    this.ReceiptionViewTemplateFormWindow = new Ext.Window({
        id: 'ReceiptionViewTemplateForm',
        title: 'Patient History',
        closable: true,
        minimizable: false,
        width: this.ReceiptionViewTemplateForm.width + 10,
        height: this.ReceiptionViewTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceiptionViewTemplateForm]
    });
    this.ReceiptionViewTemplateFormWindow.show();
    PatientViewHistory(Ext.getCmp('ReceiptionViewTemplateForm'), login);
    SelectedClinicHitoryID1 = '';

}


function ViewAdvancePatientHistory(form, login) {

    var Count = 0;

    var AdvancedPatientsSearchDtlList = Ext.getCmp('AdvancedPatientsSearchDtlList');

    var Record1 = '';
    for (var cnt = 0; cnt < AdvancedPatientsSearchDtlList.store.getCount() ; cnt++) {

        var Record = AdvancedPatientsSearchDtlList.store.getAt(cnt);
        if (Record.get('Selectcheck')) {
            Record1 = AdvancedPatientsSearchDtlList.store.getAt(cnt);
            Count++;
        }
    }
    if (Count > 1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot Select More Then One Record !');
        return;
    }
    else if (Count < 1) {
        Ext.MessageBox.alert(login.modulename, 'Please Select Patient To View History!');
        return;
    }

    PrimKey = Record1.get('ID');

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ViewReception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AdvancePatientViewHitoryComplete, this);
}

function AdvancePatientViewHitoryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AdvancePatientViewHitoryComplete, this);

    var responseTextStr = response.responseText.replace('PatientLoginReceptionDetailList', 'PatientLoginReceptionDetailList_view').replace('PatientLoginClinicDtlList', 'PatientLoginClinicDtlList_view').replace('PatientViewHistoryDocumentList', 'PatientViewHistoryDocumentList_view').replace('PatientAbsentDetailList', 'PatientAbsentDetailList_view');
    var responseText = Ext.util.JSON.decode(responseTextStr);
    this.ReceiptionViewTemplateForm = new Ext.form.FormPanel(responseText.ViewReceptionConfig);
    this.ReceiptionViewTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceiptionViewTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceiptionViewTemplateForm.FormFieldsCount + 2
    });

    this.ReceiptionViewTemplateFormWindow = new Ext.Window({
        id: 'ReceiptionViewTemplateForm',
        title: 'Patient History',
        closable: true,
        minimizable: false,
        width: this.ReceiptionViewTemplateForm.width + 10,
        height: this.ReceiptionViewTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceiptionViewTemplateForm]
    });
    this.ReceiptionViewTemplateFormWindow.show();
    PatientViewHistory(Ext.getCmp('ReceiptionViewTemplateForm'), login);
    SelectedClinicHitoryID1 = '';

}

function PatientOldDrugPopupLoad(form, login) {


    var PrimKey = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;

    //var Patient_NoCode = Ext.getCmp('PatientLoginClinic-Patient_NoCode').getValue();
    //if (form.selectedIndex != -1 && !form.isView) {
    //    var Patient_NoCode = Ext.getCmp('PatientLoginClinic-Patient_NoCode').editValue;
    //}

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PatientOldDrugLoad',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientOldDrugPopupComplete, this);

}

function PatientOldDrugPopupComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PatientOldDrugPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {

        this.PatientOldDrugPopupForm = new Ext.form.FormPanel(responseText.OldDrugCofig);



        this.PatientOldDrugPopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('PatientLoginClinicDtlList');
                var selectcnt = 0;
                var PatientOldDrugPopupDtlList = Ext.getCmp('PatientOldDrugPopupDtlList');
                var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginClinicDtlList');
                var count = PatientLoginReceptionDetailList.store.getCount();
                var store = Ext.getCmp('PatientLoginClinicDtlList').getStore();

                var PKey = Ext.getCmp('PatientLoginClinic').selectedIndex;
                var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

                for (var pcnt = 0; pcnt < PatientOldDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PatientOldDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: Pl_Reception_Code,
                        Patient_Login_Clinic_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Doze: PopupRecord.get('Doze'),
                        No_of_days: PopupRecord.get('No_of_days'),
                        Times_Per_DayCode: PopupRecord.get('Times_Per_DayCode'),
                        Times_Per_DayName: PopupRecord.get('Times_Per_DayName'),
                        Quantity: PopupRecord.get('Quantity'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: (PopupRecord.get('Avg_Cost') * PopupRecord.get('Quantity')),
                        Drug_NetTotal: 0,
                        Isliquid: 1,
                        IsDrugPrepaid: 0,
                        IsPosted: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PatientOldDrugPopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PatientOldDrugPopupForm.FormFieldsCount + 2
        });

        this.PatientOldDrugPopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PatientOldDrugPopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PatientOldDrugPopupForm.FormFieldsCount + 2
        });


        this.PatientOldDrugPopupFormWindow = new Ext.Window({
            id: 'PatientOldDrugPopupFormWindow',
            title: 'Drugs',
            closable: true,
            minimizable: false,
            width: this.PatientOldDrugPopupForm.width + 10,
            height: this.PatientOldDrugPopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PatientOldDrugPopupForm]
        });
        this.PatientOldDrugPopupFormWindow.show();
    }
}



function ReceptionDrugPopupLoad(form, login) {


    var PrimKey = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PatientOldDrugLoad',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionDrugPopupComplete, this);

}

function ReceptionDrugPopupComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ReceptionDrugPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {

        this.PatientOldDrugPopupForm = new Ext.form.FormPanel(responseText.OldDrugCofig);



        this.PatientOldDrugPopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('ReceptionDrugDetailList');
                var selectcnt = 0;
                var PatientOldDrugPopupDtlList = Ext.getCmp('PatientOldDrugPopupDtlList');
                var PatientLoginReceptionDetailList = Ext.getCmp('ReceptionDrugDetailList');
                var count = PatientLoginReceptionDetailList.store.getCount();
                var store = Ext.getCmp('ReceptionDrugDetailList').getStore();

                var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

                for (var pcnt = 0; pcnt < PatientOldDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PatientOldDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Doze: PopupRecord.get('Doze'),
                        No_of_days: PopupRecord.get('No_of_days'),
                        Times_Per_DayCode: PopupRecord.get('Times_Per_DayCode'),
                        Times_Per_DayName: PopupRecord.get('Times_Per_DayName'),
                        Quantity: PopupRecord.get('Quantity'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: (PopupRecord.get('Avg_Cost') * PopupRecord.get('Quantity')),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 0,
                        IsPosted: 0,
                        PaymentAmount: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 1,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PatientOldDrugPopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PatientOldDrugPopupForm.FormFieldsCount + 2
        });

        this.PatientOldDrugPopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PatientOldDrugPopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PatientOldDrugPopupForm.FormFieldsCount + 2
        });


        this.PatientOldDrugPopupFormWindow = new Ext.Window({
            id: 'PatientOldDrugPopupFormWindow',
            title: 'Drugs',
            closable: true,
            minimizable: false,
            width: this.PatientOldDrugPopupForm.width + 10,
            height: this.PatientOldDrugPopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PatientOldDrugPopupForm]
        });
        this.PatientOldDrugPopupFormWindow.show();
    }
}

function PostDrugReceptionToPharmacy(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ReceptionDrugDetail_Post',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostDrugReceptionToPharmacyComplete, this);

}


function PostDrugReceptionToPharmacyComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostDrugReceptionToPharmacyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
}


function PrePaidDrugPopupLoad(form, login) {


    var PrimKey = Ext.getCmp('PatientsLoginReception-Patient_NoCode').getValue();


    var Patient_NoCode = Ext.getCmp('PatientsLoginReception-Patient_NoCode').getValue();
    if (form.selectedIndex != -1 && !form.isView) {
        var PrimKey = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;
    }


    //  var Emirates_ID_No = Ext.getCmp('PatientsLoginReception-Emirates_ID_No').getValue();

    if (PrimKey == null || PrimKey == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please select PrePaid Patient to Load Service !');
        return;
    }

    // if (Emirates_ID_No == null || Emirates_ID_No == 0) {
    //     Ext.MessageBox.alert(login.modulename, 'Emirate ID No Should Not be Empty to Load Service !');
    //     return;
    // }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
            // Patient_NoCode: Patient_NoCode,
            // Emirates_ID_No: Emirates_ID_No
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrePaidDrugPopupPopupComplete, this);

}

function PrePaidDrugPopupPopupComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PrePaidDrugPopupPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);

        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('ReceptionDrugDetailList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var PatientLoginReceptionDetailList = Ext.getCmp('ReceptionDrugDetailList');
                var count = PatientLoginReceptionDetailList.store.getCount();
                var store = Ext.getCmp('ReceptionDrugDetailList').getStore();

                var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        PaymentAmount: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();
    }
}




function ReceptionDrugPrintBill(form, option) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ReceptionDrug_Bill',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionDrugBillComplete, this);
}
var NarmalDrugtablestr = '';
function ReceptionDrugBillComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionDrugBillComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        //var Total = 0; var Drtablestr = '';
        //// Ext.MessageBox.alert(login.modulename, responseText.Msg);
        //var Patient_Type = Ext.getCmp('PatientsLoginReception-Patient_Type').getValue()
        //var OutTypeCode = Ext.getCmp('PatientsLoginReception-OutTypeCode').getValue()

        //if (Patient_Type == 0 || OutTypeCode) {
        //    var ReceptionDrugDetailList = Ext.getCmp('ReceptionDrugDetailList');
        //    var detailStore = ReceptionDrugDetailList.getStore();
        //    Drtablestr += "<table border=1>";
        //    Drtablestr += "<tr><td width=185px><b>Drug Name</b></td><td><b>Price</b></td></tr>";
        //    for (i = 0; i < detailStore.getCount() ; i++) {
        //        if (detailStore.getAt(i).get('IsPosted')) continue;
        //        if (detailStore.getAt(i).get('Avg_Cost') * 1 <= 0) continue;
        //        Total += (detailStore.getAt(i).get('Avg_Cost') * 1);
        //        Drtablestr += ("<tr><td width=195px >" + detailStore.getAt(i).get('Drug_Name') + "</td><td>" + detailStore.getAt(i).get('Avg_Cost') + "</td></tr>");
        //    }
        //    Drtablestr += ("<tr><td width=195px><b>Total</b></td><td><b>" + Total + "</b></td></tr>");
        //    Drtablestr += "</table>";
        //    NarmalDrugtablestr = Drtablestr;
        // }

    }

}



function PrePaidNurseryDrugPopupLoad(form, login) {


    var PrimKey = Ext.getCmp('LoginNursery-Patients_Code').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrePaidNurseryDrugPopuppComplete, this);

}

function PrePaidNurseryDrugPopuppComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PrePaidNurseryDrugPopuppComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);

        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseryDrugDtlList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
                var count = LoginNurseryDrugDtlList.store.getCount();
                var store = Ext.getCmp('LoginNurseryDrugDtlList').getStore();

                var PKey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();

                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();
    }
}

function PatientRegistrationSearchHandler(button, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/Inventory/IVPosting.aspx',
        params: {
            action: 'PatientRegistrationSearch'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientRegistrationSearchComplete, this);

}
function PatientRegistrationSearchComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PatientRegistrationSearchComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.PatientRegistrationSearchForm = new Ext.form.FormPanel(responseText.PatientRegistrationGenConfig);

    this.PatientRegistrationSearchForm.addButton({
        text: 'Ok',
        handler: function () {
            var PatientCount = 0;
            var PopupRecord1 = '';
            var PatientRegistrationSearchDtlList = Ext.getCmp('PatientRegistrationSearchDtlList');


            for (var cnt = 0; cnt < PatientRegistrationSearchDtlList.store.getCount() ; cnt++) {

                var PopupRecord = PatientRegistrationSearchDtlList.store.getAt(cnt);
                if (PopupRecord.get('Selectcheck')) {
                    PopupRecord1 = PatientRegistrationSearchDtlList.store.getAt(cnt);
                    PatientCount++;
                }
            }
            if (PatientCount > 1) {
                Ext.MessageBox.alert(login.modulename, 'Cannot Select More Then One Patient !');
                return;
            }
            else if (PatientCount == 1) {
                Ext.getCmp('PatientsLoginReception-Patient_NoCode').setComboValue(PopupRecord1.get('ID'));
                Ext.getCmp('PatientsLoginReception-Patient_Name').setValue(PopupRecord1.get('Patient_Name'));
                Ext.getCmp('PatientsLoginReception-Patient_Alternate_Name').setValue(PopupRecord1.get('Patient_Alternate_Name'));
                Ext.getCmp('PatientsLoginReception-Mobile_No').setValue(PopupRecord1.get('Mobile'));
                this.PatientRegistrationSearchWindow.close();
            }

        },

        scope: this,
        tabIndex: this.PatientRegistrationSearchForm.FormFieldsCount + 2
    });

    this.PatientRegistrationSearchForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PatientRegistrationSearchWindow.close();
        },
        scope: this,
        tabIndex: this.PatientRegistrationSearchForm.FormFieldsCount + 2
    });


    this.PatientRegistrationSearchWindow = new Ext.Window({
        id: 'PatientRegistrationSearchWindow',
        title: 'PatientRegistrationSearch',
        closable: true,
        minimizable: false,
        width: this.PatientRegistrationSearchForm.width + 10,
        height: this.PatientRegistrationSearchForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PatientRegistrationSearchForm]
    });
    this.PatientRegistrationSearchWindow.show();
}



function ClinicPrepaidAidDrug(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicPrepaidAidDrugComplete, this);

}

function ClinicPrepaidAidDrugComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ClinicPrepaidAidDrugComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);

        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('PatientLoginClinicDtlList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var LoginNurseryDrugDtlList = Ext.getCmp('PatientLoginClinicDtlList');
                var count = LoginNurseryDrugDtlList.store.getCount();
                var store = Ext.getCmp('PatientLoginClinicDtlList').getStore();

                var PKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();
    }
}

function ClinicInjctionAidDrug(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Patients_Code').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicInjctionAidDrugComplete, this);

}

function ClinicInjctionAidDrugComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ClinicInjctionAidDrugComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);

        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var LoginClinicInjectionEntyDet = Ext.getCmp('LoginClinicInjectionDtlList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');
                var count = LoginClinicInjectionDtlList.store.getCount();
                var store = Ext.getCmp('LoginClinicInjectionDtlList').getStore();

                var PKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    LoginClinicInjectionEntyDet.storeId += 1;
                    var ServiceID = LoginClinicInjectionEntyDet.storeId;
                    var newRecord = new LoginClinicInjectionEntyDet.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        PaymentAmount: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    LoginClinicInjectionEntyDet.stopEditing();
                    LoginClinicInjectionEntyDet.store.add(newRecord);
                    LoginClinicInjectionEntyDet.store.totalLength = LoginClinicInjectionEntyDet.store.getTotalCount() + 1;
                    LoginClinicInjectionEntyDet.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();
    }
}

function ReceptionInjctionAidDrug(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception-Patient_NoCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionInjctionAidDrugComplete, this);

}

function ReceptionInjctionAidDrugComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ReceptionInjctionAidDrugComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);

        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var LoginClinicInjectionEntyDet = Ext.getCmp('Reception_Drug_InjectionDtlList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var LoginClinicInjectionDtlList = Ext.getCmp('Reception_Drug_InjectionDtlList');
                var count = LoginClinicInjectionDtlList.store.getCount();
                var store = Ext.getCmp('Reception_Drug_InjectionDtlList').getStore();

                var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;

                    LoginClinicInjectionEntyDet.storeId += 1;
                    var ServiceID = LoginClinicInjectionEntyDet.storeId;
                    var newRecord = new LoginClinicInjectionEntyDet.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    LoginClinicInjectionEntyDet.stopEditing();
                    LoginClinicInjectionEntyDet.store.add(newRecord);
                    LoginClinicInjectionEntyDet.store.totalLength = LoginClinicInjectionEntyDet.store.getTotalCount() + 1;
                    LoginClinicInjectionEntyDet.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });


        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupFormWindow',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();
    }
}

function NursePrepaidAidDrugHandler(form, login) {

    var PrimKey = Ext.getCmp('LoginNursery-Patients_Code').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidDrugPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', NursePrepaidAidDrugComplete, this);
}

function NursePrepaidAidDrugComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', NursePrepaidAidDrugComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidDrugCofig);


        this.PrePaidServicePopupForm.addButton({
            text: 'Load',
            handler: function () {

                var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseInjectionDtlList');
                var selectcnt = 0;
                var PrePaidDrugPopupDtlList = Ext.getCmp('PrePaidDrugPopupDtlList');
                var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
                var count = LoginNurseryDrugDtlList.store.getCount();
                var store = Ext.getCmp('LoginNurseInjectionDtlList').getStore();

                var PKey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();



                for (var pcnt = 0; pcnt < PrePaidDrugPopupDtlList.store.getCount() ; pcnt++) {

                    var PopupRecord = PrePaidDrugPopupDtlList.store.getAt(pcnt);

                    if (!PopupRecord.get('SelectCheck')) continue;


                    PatientLoginClinicEntryDetGrid.storeId += 1;
                    var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                    var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                        ID: ServiceID,
                        SerialNo: ServiceID,
                        Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                        Drug_Code: PopupRecord.get('Drug_Code'),
                        Drug_Name: PopupRecord.get('Drug_Name'),
                        Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
                        Doze: 0,
                        No_of_days: null,
                        Times_Per_DayCode: 0,
                        Times_Per_DayName: null,
                        Quantity: 1, //PopupRecord.get('Itm_Qtys'),
                        Itm_Qtys: null,
                        Avg_Cost: PopupRecord.get('Avg_Cost'),
                        DiscountAmount: 0,
                        Drug_Total: PopupRecord.get('Avg_Cost'),
                        Drug_NetTotal: 0,
                        IsDrugPrepaid: 1,
                        IsPosted: 0,
                        PaymentAmount: 0,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        Isliquid: 0,
                        CreatedBy: null,
                        LastmodifiedBy: null,
                        CreatedOn: null,
                        LastmodifiedOn: null,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PatientLoginClinicEntryDetGrid.stopEditing();
                    PatientLoginClinicEntryDetGrid.store.add(newRecord);
                    PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                    PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
                }
                this.PrePaidServicePopupFormWindow.close();

            },

            scope: this,
            formBind: true,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });



        this.PrePaidServicePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.PrePaidServicePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
        });

        this.PrePaidServicePopupFormWindow = new Ext.Window({
            id: 'PrePaidServicePopupForm',
            title: 'Aid Drug',
            closable: true,
            minimizable: false,
            width: this.PrePaidServicePopupForm.width + 10,
            height: this.PrePaidServicePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.PrePaidServicePopupForm]
        });
        this.PrePaidServicePopupFormWindow.show();

    }
}




function ClinicBillHandler(button, options) {

    var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');
    if (LoginClinicServicedtlList.getStore().getCount() == 0) {
        Ext.MessageBox.alert(login.modulename, 'Service Detial must have records to generate bill !');

        return;
    }


    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/Inventory/IVPosting.aspx',
        params: {
            action: 'ClinicBillPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicBillPostComplete, this);
}

function ClinicBillPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ClinicBillPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


        var WidgetObj = Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope; //.immediatePrintClick(PKEy);
        var Primkey = Ext.getCmp('PatientLoginClinic').selectedIndex;
        Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
            if (button == 'yes') {
                WidgetObj.immediatePrintClick(Primkey);
            }
        }, this);


        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').close();
    }
}

function ConfirmreturnButtonHandler(form, login) {


    var Primkey = Ext.getCmp('ActiveAbsencesList').selectedAbsenceID;
    var SelectedRecord = Ext.getCmp('ActiveAbsencesList').getSelectionModel().getSelected();

    if (SelectedRecord.get('Return_Date') != '') {
        Ext.MessageBox.alert(login.modulename, 'Return Date is closed !');
        return;
    }

    if (SelectedRecord.get('AdvanceCode') == 1) {//if payment type is encashment , not allowed to update return date.
        Ext.MessageBox.alert(login.modulename, 'Return Date is closed !');
        return;
    }

    if (!Primkey) {
        Ext.MessageBox.alert(login.modulename, 'Please select Absence Details to Update the Return Date !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ConfirmReturnDateAbsence',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ConfirmReturnDateAbsenceComplete, this);

}

function ConfirmReturnDateAbsenceComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ConfirmReturnDateAbsenceComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EmployeeReturnDateForm = new Ext.form.FormPanel(responseText.ReturnDateConfig);

    this.EmployeeReturnDateForm.selectedIndex = 1;


    this.EmployeeReturnDateForm.addButton({
        text: 'Ok',
        handler: function () {


            var ReturnDate = Ext.getCmp('EmployeeReturnDate-ReturnDate').getValue().format(login.jsdateformat);
            var Primkey = Ext.getCmp('ActiveAbsencesList').selectedAbsenceID;
            var Generate_Attendance = Ext.getCmp('EmployeeReturnDate-DeductSalary').getValue();

            if (!Primkey) {
                Ext.MessageBox.alert(login.modulename, 'Please select Time Attendance Detail to Enter Time Sheet !');
                return;
            }
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'UpdateReturnDate',
                    Primkey: Primkey,
                    ReturnDate: ReturnDate,
                    Generate_Attendance: Generate_Attendance
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', UpdateReturnDateComplete, this);
        },
        scope: this,
        tabIndex: this.EmployeeReturnDateForm.FormFieldsCount + 2

    });

    this.EmployeeReturnDateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EmployeeReturnDateFormWindow.close();
        },
        scope: this,
        tabIndex: this.EmployeeReturnDateForm.FormFieldsCount + 2

    });

    this.EmployeeReturnDateFormWindow = new Ext.Window({
        id: 'Employee Return Date',
        title: 'Employee Return Date',
        closable: true,
        minimizable: false,
        width: this.EmployeeReturnDateForm.width + 10,
        height: this.EmployeeReturnDateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EmployeeReturnDateForm]
    });
    this.EmployeeReturnDateFormWindow.show();
    Ext.getCmp('EmployeeReturnDate-DeductSalary').setValue(true);
    var SelectedRecord = Ext.getCmp('ActiveAbsencesList').getSelectionModel().getSelected();

    if (SelectedRecord && SelectedRecord.get('End_Date') != '') {
        Ext.getCmp('EmployeeReturnDate-End_Date').setValue(SelectedRecord.get('End_Date'));
    }
    //if (responseText.ReturnDateConfig.oninit) this.EmployeeReturnDateForm.on('render', responseText.ReturnDateConfig.oninit.createDelegate(this.form, [login], true), this);
    this.EmployeeReturnDateForm.on('render', EmployeeReturnDate, this);

}

function EmployeeReturnDate(form, login) {

    Ext.getCmp('EmployeeReturnDate-DeductSalary').setValue(true);

    var SelectedRecord = Ext.getCmp('ActiveAbsencesList').getSelectionModel().getSelected();

    if (SelectedRecord && SelectedRecord.get('End_Date') != '') {
        Ext.getCmp('EmployeeReturnDate-End_Date').setValue(SelectedRecord.get('End_Date'));
    }

}

function UpdateReturnDateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', UpdateReturnDateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
    this.EmployeeReturnDateFormWindow.close();
    var store = Ext.getCmp('ActiveAbsencesList').getStore();
    store.reload();

}

function HRPaymentReportHandler(button, options) {


    var PrimKey = Ext.getCmp('ActiveAbsencesList').selectedAbsenceID;
    var Person_ID = Ext.getCmp('ActiveAbsencesList').selectedAbsenceEmp;
    var SDate = Ext.getCmp('ActiveAbsencesList').selectedAbsenceStartDate;
    // var Generate_Attendance = Ext.getCmp('EmployeeReturnDate-DeductSalary').getValue();

    if (!PrimKey) {
        Ext.MessageBox.alert(login.modulename, 'Please select Employee Absence to Make Advance Payment Report !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HRPaymentReportPKey',
            Primkey: PrimKey,
            Person_ID: Person_ID,
            SDate: SDate
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRPaymentReportPKeyComplete, this);

}

function HRPaymentReportPKeyComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', HRPaymentReportPKeyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var WidgetObj = Ext.getCmp('ID_HRABSENCEPAYROLL').scope;
        Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
            if (button == 'yes') {
                WidgetObj.immediatePrintClick(Ext.getCmp('ActiveAbsencesList').selectedAbsenceID);
            }
        }, this);
    }
}


function DeleteAttendanceHandler(button, options) {

    var Primkey = Ext.getCmp('ActiveAbsencesList').selectedAbsenceID;

    if (!Primkey) {
        Ext.MessageBox.alert(login.modulename, 'Please select the Employee Absence to Delete !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'DeleteAbsencesData',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DeleteAttendanceHandlerComplete, this);
}
function DeleteAttendanceHandlerComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', DeleteAttendanceHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('ActiveAbsencesList').getStore();
        store.reload();
    }
}

function CmsStudent(form, login) {

    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('CmsStudent-StatusCode').setComboValue(0);
        Ext.getCmp('CmsStudent-StatusCode').disable();
    }
}

function Department(form, login) {

    var AttendanceShift = Ext.getCmp('Department-AttendanceShiftsTypeCode');


    var Regulartemplate = Ext.getCmp('Department-RegularTemplateCode');
    var IrRegularTemplate = Ext.getCmp('Department-IrRegularTemplateCode')


    AttendanceShift.on('select', function (combo, record, index) {
        Attendance = combo.getValue();
        if (Attendance == 1) {
            Regulartemplate.clearValue();
            IrRegularTemplate.clearValue();
        }
        else {
            Regulartemplate.clearValue();
            IrRegularTemplate.clearValue();
            Regulartemplate.enable();
            IrRegularTemplate.disable();
        }
    }, this);


}

function HROrganisation(form, login) {

    var AttendanceShift = Ext.getCmp('HROrganisation-AttendanceShiftsTypeCode');


    var Regulartemplate = Ext.getCmp('HROrganisation-RegularTemplateCode');
    var IrRegularTemplate = Ext.getCmp('HROrganisation-IrRegularTemplateCode')


    AttendanceShift.on('select', function (combo, record, index) {
        Attendance = combo.getValue();
        if (Attendance == 1) {
            Regulartemplate.clearValue();
            IrRegularTemplate.clearValue();
        }
        else {
            Regulartemplate.clearValue();
            IrRegularTemplate.clearValue();
            Regulartemplate.enable();
            IrRegularTemplate.disable();
        }
    }, this);

    var OrgWorkHrs = Ext.getCmp('HROrganisationWorkAssignDtlList').getStore();

    OrgWorkHrs.on('update', function (store, record, options) {


        var total = 0;
        var ExtraHoursSum = 0;
        var AmountSum = 0;

        var totalhours = 0;
        var totalhours1 = 0;
        var totalhours2 = 0;
        var totalhours3 = 0;
        var totalhours4 = 0;
        var From = record.get('From');
        var To = record.get('To');


        var BreakFrom = record.get('BreakFrom');
        var BreakTo = record.get('BreakTo');




        var TotalWorkingHours = record.get('TotalWorkingHours');



        var IIn1 = (new Date("01/01/2007 " + From).getHours() * 60) + new Date("01/01/2007 " + From).getMinutes();
        var OOut1 = (new Date("01/01/2007 " + BreakFrom).getHours() * 60) + new Date("01/01/2007 " + BreakFrom).getMinutes();


        var IIn2 = (new Date("01/01/2007 " + BreakTo).getHours() * 60) + new Date("01/01/2007 " + BreakTo).getMinutes();
        var OOut2 = (new Date("01/01/2007 " + To).getHours() * 60) + new Date("01/01/2007 " + To).getMinutes();



        if (IIn1 >= OOut2) {
            Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "To" Time !');
            return;
        }
        if (OOut1 <= IIn1) {
            Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "BreakFrom" Time !');
            return;
        }

        if (IIn2 <= OOut1) {
            Ext.MessageBox.alert(login.modulename, '"BreakFrom" Time should be lesser than the "BreakTo" Time !');
            return;
        }


        if (IIn2 >= OOut2) {
            Ext.MessageBox.alert(login.modulename, '"Break To" Time should be lesser than the "To" Time !');
            return;
        }



        var MorWorkHrs = 0;
        var EveWorkHrs = 0;

        if (OOut1 > IIn1) {
            MorWorkHrs = (OOut1 - IIn1);
        }

        if (OOut2 > IIn2 && IIn2 > OOut1) {
            EveWorkHrs = (OOut2 - IIn2);
        }

        var TotWorkHrs = (MorWorkHrs + EveWorkHrs);//Math.floor((MorWorkHrs + EveWorkHrs) / 60) + (((MorWorkHrs + EveWorkHrs) % 60) / 100);


        record.set('TotalWorkingHours', Math.floor(TotWorkHrs / 60) + ((TotWorkHrs % 60) / 100));



    }, this);
}


function LoadOrganizationHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AssignmentSetWorkingHours'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadOrganizationHandlerComplete, this);

}

function LoadOrganizationHandlerComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadOrganizationHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var grdFunctionality = Ext.getCmp('HROrganisationWorkAssignDtlList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();

    var PrimKey = Ext.getCmp('HROrganisation').selectedIndex;

    var HROrganisationWorkAssignDtlList = Ext.getCmp('HROrganisationWorkAssignDtlList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Element Detalis
        var Record = responseText.datum[cnt];
        HROrganisationWorkAssignDtlList.storeId += 1;
        var newRecord = new HROrganisationWorkAssignDtlList.recordType({
            ID: HROrganisationWorkAssignDtlList.storeId,
            WorkingHoursSerialNo: HROrganisationWorkAssignDtlList.storeId,
            Organizations_Code: (PrimKey == -1 ? 1 : PrimKey),
            WeekDay_Code: Record.WeekDay_Code,
            WeekDay_Name: Record.WeekDay_Name,
            DayTypeCode: Record.DayTypeCode,
            DayTypeName: Record.DayTypeName,
            From: Record.From,
            To: Record.To,
            BreakFrom: Record.BreakFrom,
            BreakTo: Record.BreakTo,
            TotalWorkingHours: Record.TotalWorkingHours,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        HROrganisationWorkAssignDtlList.stopEditing();
        HROrganisationWorkAssignDtlList.store.add(newRecord);
        HROrganisationWorkAssignDtlList.store.totalLength = HROrganisationWorkAssignDtlList.store.getTotalCount() + 1;
        HROrganisationWorkAssignDtlList.pageBar.updateInfo();

    }


}

function AppFollowUp(form, login) {

    var StatusCode = Ext.getCmp('AppFollowUp-StatusCode');
    if (login.usercode != 100000000000000002 && login.usercode != 100000000000000013 && login.usercode != 100000000000000047) {
        Ext.getCmp('AppFollowUpDtl-IT_Notes').disable();
        Ext.getCmp('AppFollowUpDtl-Compass_Notes').disable();
    }


    if (form.selectedIndex == -1) { //form in new mode
        var EmployeeCode = Ext.getCmp('AppFollowUp-Employee_Code');
        EmployeeCode.setComboValue(login.usercode);
        var Module_Code = Ext.getCmp('AppFollowUp-Module_Code');
        Module_Code.setComboValue(login.modulecode);
        StatusCode.setComboValue(0);
    }

    Ext.getCmp('AppFollowUp-StatusCode').disable();
}

//function ApproveAppFollowUp(form, login) {
//    if (login.usercode == "100000000000000002") { 
//        var Status = Ext.getCmp('AppFollowUp-StatusCode');
//        Status.setComboValue(1);
//    }

//}


function ApproveAppFollowUp(form, login) {
    var PrimKey = Ext.getCmp('AppFollowUp').selectedIndex;
    var status = Ext.getCmp('AppFollowUp-StatusCode');

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, '??? ????? ?????  !'); // show message if the status is not Approved.
        return;
    }

    if (status.editValue == 1) {
        Ext.MessageBox.alert(login.modulename, '?? ?????? ????????? ?? ??? !'); // show message if the status is not Approved.
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/SC/SCGeneralRequest.aspx',
        params: {
            action: 'ApproveAppFollowUp',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ApproveAppFollowUpReqComplete, this);
}

function ApproveAppFollowUpReqComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ApproveAppFollowUpReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        })
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        //Ext.getCmp('ID_APP_REMARKS_editform').un('beforeclose', Ext.getCmp('ID_APP_REMARKS_editform').scope.closeWindow, Ext.getCmp('ID_APP_REMARKS_editform').scope);
        //Ext.getCmp('ID_APP_REMARKS_editform').on('close', Ext.getCmp('ID_APP_REMARKS_editform').scope.afterCloseWind, Ext.getCmp('ID_APP_REMARKS_editform').scope);
        //Ext.getCmp('ID_APP_REMARKS_editform').close();
        return;
    }
}






function CrmReceptionEntry(form, login) {

    var StatusCode = Ext.getCmp('CrmReceptionEntry-StatusCode');

    if (!form.isView) {
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }

    // Total Amount
    var Amount = Ext.getCmp('CrmReceptionEntry-Amount');
    var FinalAmount = Ext.getCmp('CrmReceptionEntry-FinalAmount');
    var CrmReceptionEntryDet = Ext.getCmp('CrmReceptionEntryDetList');
    var ServiceItem_Code = Ext.getCmp('CrmReceptionEntryDet-ServiceItem_Code');

    //if (ServiceItem_Code) ServiceItem_Code.on('beforequery', function (evt) {
    //    var Service_Package_Code = Ext.getCmp('CrmReceptionEntry-Service_Package_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Det.Service_Package_Code= " + Service_Package_Code;
    //}, this);
    CrmReceptionEntryDet.on('addrecord', function (evt) {
        evt.record.set('ServiceItem_Name', CrmReceptionEntryDet.store.totalLength);
    }, this);
    CrmReceptionEntryDet.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        CrmReceptionEntryDet.SelectedRecord = record;
    }, this);

    CrmReceptionEntryDet.on('beforeedit', function (e) {
        var record = e.record;
        CrmReceptionEntryDet.SelectedRecord = record;
    }, this);

    var MsgTemplateCode = Ext.getCmp('CrmReceptionEntry-MsgTemplateCode');
    if (MsgTemplateCode) MsgTemplateCode.on('select', function (combo, record, index) {

        Ext.getCmp('CrmReceptionEntry-SmsMessage').setValue(record.data.SmsMessage);
        Ext.getCmp('CrmReceptionEntry-MessageSubject').setValue(record.data.MessageSubject);
        Ext.getCmp('CrmReceptionEntry-Message').setValue(Ext.util.Format.htmlDecode(record.data.Message));


    }, this);

    var Email = Ext.getCmp('CrmReceptionEntry-Email');
    Email.on('check', onCrmReceptionEntryEmailCheck, this);
    var MessageSubject = Ext.getCmp('CrmReceptionEntry-MessageSubject');
    var Message = Ext.getCmp('CrmReceptionEntry-Message');
    if (Email.getValue() == true) {
        MessageSubject.enable();
        MessageSubject.allowBlank = false;
        MessageSubject.isValid();
        Message.enable();
        Message.allowBlank = false;
        Message.isValid();
    }



    else {
        MessageSubject.disable();
        MessageSubject.allowBlank = true;
        MessageSubject.clearInvalid();
        Message.disable();
        Message.allowBlank = true;
        Message.clearInvalid();
    }
    var Sms = Ext.getCmp('CrmReceptionEntry-Sms');
    Sms.on('check', onCrmReceptionEntrySmsCheck, this);
    var SMSMessage = Ext.getCmp('CrmReceptionEntry-SmsMessage');
    if (Sms.getValue() == true) {
        SMSMessage.enable();
        SMSMessage.allowBlank = false;
        SMSMessage.isValid();
    }
    else {
        SMSMessage.disable();
        SMSMessage.allowBlank = true;
        SMSMessage.clearInvalid();
    }


    function onCrmReceptionEntryEmailCheck(checkBox, checked) {
        var MessageSubject = Ext.getCmp('CrmReceptionEntry-MessageSubject');
        var Message = Ext.getCmp('CrmReceptionEntry-Message');
        if (checked == true) {
            MessageSubject.enable();
            MessageSubject.allowBlank = false;
            MessageSubject.isValid();
            Message.enable();
            Message.allowBlank = false;
            Message.isValid();
        }
        else {
            MessageSubject.disable();
            MessageSubject.setValue(null);
            MessageSubject.allowBlank = true;
            MessageSubject.clearInvalid();
            Message.disable();
            Message.setValue(null);
            Message.allowBlank = true;
            Message.clearInvalid();
        }
    }

    function onCrmReceptionEntrySmsCheck(checkBox, checked) {
        var SMSMessage = Ext.getCmp('CrmReceptionEntry-SmsMessage');
        if (checked == true) {
            SMSMessage.enable();
            SMSMessage.allowBlank = false;
            SMSMessage.isValid();
        }
        else {
            SMSMessage.disable();
            SMSMessage.setValue(null);
            SMSMessage.allowBlank = true;
            SMSMessage.clearInvalid();
        }
    }



    CrmReceptionEntryDet.on('afteredit', function (e) {

        var TotalAmount = 0;
        var TotalFinalAmount = 0;

        for (var i = 0; i < e.grid.store.getCount() ; i++) {

            TotalAmount += (1 * e.grid.store.getAt(i).get('Amount'));
            TotalFinalAmount += (1 * e.grid.store.getAt(i).get('FinalAmount'));
        }
        Amount.setValue(TotalAmount);
        FinalAmount.setValue(TotalFinalAmount);

    }, this);

    var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList').getStore();
    CrmReceptionEntryDetList.on('load', function (store, record, options) {
        var TotalAmount = 0;
        var TotalFinalAmount = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmount += (1 * record.get('Amount'));
            if (record.get('IsDeleted') == false) TotalFinalAmount += (1 * record.get('FinalAmount'));
        }
        Amount.setValue(TotalAmount);
        FinalAmount.setValue(TotalFinalAmount);
    }, this);



}


function CrmReceptionEntryPostHandler(form, login) {

    var PrimKey = Ext.getCmp('CrmReceptionEntry').selectedIndex;
    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CrmReceptionEntryPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CrmReceptionEntryPostComplete, this);
}

function CrmReceptionEntryPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CrmReceptionEntryPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CRMRECEPTIONENTRY_editform').close();

    }
}

function ReceptionEntryServicePackage(form, login) {

    var PKey = '';
    var Service_Package_Code = Ext.getCmp("CrmReceptionEntry-Service_Package_Code");

    if (form.selectedIndex = -1)
        PKey = Service_Package_Code.getValue();
    else
        PKey = Service_Package_Code.editValue;

    if (!PKey) {
        Ext.MessageBox.alert(login.modulename, 'Please select Package Name !');
        return;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ReceptionEntryServicePackagePopup',
            PKey: PKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionEntryServicePackageComplete, this);

}
function ReceptionEntryServicePackageComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionEntryServicePackageComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.ReceptionEntryServicePopupform = new Ext.form.FormPanel(responseText.ReceptionEntryCofig);
    this.ReceptionEntryServicePopupform.selectedIndex = responseText.PKey;

    this.ReceptionEntryServicePopupform.addButton({
        text: 'Select All',
        handler: function () {
            var CrmReceprionEntryPopupDetList = Ext.getCmp('CrmReceprionEntryPopupDetList');

            for (var cnt = 0; cnt < CrmReceprionEntryPopupDetList.store.getCount() ; cnt++) {

                var PopupRecord = CrmReceprionEntryPopupDetList.store.getAt(cnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.ReceptionEntryServicePopupform.FormFieldsCount + 2
    });

    this.ReceptionEntryServicePopupform.addButton({
        text: 'Load',
        handler: function () {

            var CrmReceptionEntryDetGrid = Ext.getCmp('CrmReceptionEntryDetList');
            var selectcnt = 0;
            var CrmReceprionEntryPopupDetList = Ext.getCmp('CrmReceprionEntryPopupDetList');
            var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList');
            var count = CrmReceptionEntryDetList.store.getCount();
            var store = Ext.getCmp('CrmReceprionEntryPopupDetList').getStore();

            var PKey = Ext.getCmp('CrmReceptionEntry').selectedIndex;

            for (var pcnt = 0; pcnt < CrmReceprionEntryPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = CrmReceprionEntryPopupDetList.store.getAt(pcnt);


                if (!PopupRecord.get('SelectCheck')) continue;

                CrmReceptionEntryDetGrid.storeId += 1;
                var ServiceID = CrmReceptionEntryDetGrid.storeId;
                var newRecord = new CrmReceptionEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    ServiceItem_Code: PopupRecord.get('ID'),
                    ServiceItem_Name: PopupRecord.get('ServiceItem_Name'),
                    ServiceName: PopupRecord.get('ServiceName'),
                    Description: '',
                    Amount: PopupRecord.get('Amount'),
                    FinalAmount: PopupRecord.get('FinalAmount'),
                    ReceptionEntryCode: (PKey == -1 ? 1 : PKey),
                    StatusCode: 0,
                    StatusName: "Open",

                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                CrmReceptionEntryDetGrid.stopEditing();
                CrmReceptionEntryDetGrid.store.add(newRecord);
                CrmReceptionEntryDetGrid.store.totalLength = CrmReceptionEntryDetGrid.store.getTotalCount() + 1;
                CrmReceptionEntryDetGrid.pageBar.updateInfo();
            }
            this.ReceptionEntryServicePopupformWindow.close();
            var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList');
            CrmReceptionEntryDetList.store.load({
                params: {
                    start: 0,
                    limit: CrmReceptionEntryDetList.pageSize
                }
            });

        },
        scope: this,
        tabIndex: this.ReceptionEntryServicePopupform.FormFieldsCount + 2

    });

    this.ReceptionEntryServicePopupform.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceptionEntryServicePopupformWindow.close();
        },
        scope: this,
        tabIndex: this.ReceptionEntryServicePopupform.FormFieldsCount + 2

    });

    this.ReceptionEntryServicePopupformWindow = new Ext.Window({
        id: 'ReceptionEntryServicePopupformWindow',
        title: 'Receprion Entry Service Popup',
        closable: true,
        minimizable: false,
        width: this.ReceptionEntryServicePopupform.width + 10,
        height: this.ReceptionEntryServicePopupform.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceptionEntryServicePopupform]
    });
    this.ReceptionEntryServicePopupformWindow.show();
}

function CrmReceipt(form, login) {

    //ReadOnly Fields
    Ext.getCmp('CrmReceipt-OutStanding').disable();
    Ext.getCmp('CrmReceipt-ReceiptAmount').disable();
    //

    var ReceiptType = Ext.getCmp('CrmReceipt-Receipt_typeCode');
    var ChequeNo = Ext.getCmp('CrmReceipt-Cheque_number');
    var Bank = Ext.getCmp('CrmReceipt-Customer_bankCode');
    var Chequedate = Ext.getCmp('CrmReceipt-Maturity_date');
    var bankcode = Ext.getCmp('CrmReceipt-Bank_account_Code');
    var StatusCode = Ext.getCmp('CrmReceipt-StatusCode');

    if (form.selectedIndex == -1 && !form.isView) {
        ReceiptType.setComboValue(1);
        StatusCode.setComboValue(0);
        StatusCode.disable();
        ChequeNo.disable();
        Bank.disable();
        Chequedate.disable();
    }

    else if (form.selectedIndex != -1 && !form.isView) {
        StatusCode.setComboValue(0);
        StatusCode.disable();
        if (ReceiptType.editValue == 1) {
            ChequeNo.disable();
            Bank.disable();
            Chequedate.disable();
        }
    }

    ReceiptType.on('select', function (combo, record, options) {
        if (combo.getValue() == 1) {
            ChequeNo.allowBlank = true;
            Bank.allowBlank = true;
            Chequedate.allowBlank = true;
            ChequeNo.setValue(null);
            Bank.clearValue();
            Chequedate.setValue(null);
            ChequeNo.disable();
            Bank.disable();
            Chequedate.disable();
        }
        else {
            ChequeNo.allowBlank = false;
            Bank.allowBlank = false;
            Chequedate.allowBlank = false;
            ChequeNo.enable();
            Bank.enable();
            Chequedate.enable();
        }
        ChequeNo.isValid();
        Bank.isValid();
        Chequedate.isValid();
    }, this);

    var CrmReceiptDtlList = Ext.getCmp('CrmReceiptDtlList');
    var Reference_Code = Ext.getCmp('CrmReceiptDtl-Reference_Code');

    if (Reference_Code) Reference_Code.on('beforequery', function (evt) {
        var CustomerCode = Ext.getCmp('CrmReceipt-CustomerCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "csb.CUSTOMERENTRYCODE in (select RECEPTIONENTRYCODE from CRMRECEPTIONENTRY where CUSTOMER_CODE=" + CustomerCode + ")";
    }, this);


    //CrmReceiptDtlList.on('rowclick', function (Grid, rowIndex, e) {
    //    var record = Grid.store.getAt(rowIndex);
    //    CrmReceiptDtlList.SelectedRecord = record;
    //}, this);

    //CrmReceiptDtlList.on('beforeedit', function (e) {
    //    var record = e.record;
    //    CrmReceiptDtlList.SelectedRecord = record;
    //}, this);


}
function ServicePackage(form, login) {

    var Amount = Ext.getCmp('ServicePackage-Amount');
    var servicepackagelist = Ext.getCmp('ServicePackageDetailsList');
    var servicepackagedetailslist = Ext.getCmp('ServicePackageDetailsList');
    var FinalAmount = Ext.getCmp('ServicePackage-FinalAmount');
    var ServiceItemType_Code = Ext.getCmp('ServicePackage-ServiceItemType_Code');
    var ServicePackage = Ext.getCmp('ServicePackageDetailsList');


    ServicePackage.on('afteredit', ServicePackageAfterEdit, this);

    function ServicePackageAfterEdit(e) {

        if (e.record.get('ServiceItemType_Code') == 1) {
            var Amount = 0;
            var Discount = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                var Amount = e.record.get('Amount');
                var Discount = e.record.get('Discount');
                e.record.set('FinalAmount', (e.record.get('Amount') - e.record.get('Discount')));
            }
        }

        else {

            var Amount = 0;
            var Discount = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                var Amount = e.record.get('Amount');
                var Discount = e.record.get('Discount');
                e.record.set('FinalAmount', ((e.record.get('Amount')) - ((e.record.get('Amount')) * ((e.record.get('Discount')) / 100))));
            }
        }

    }

    servicepackagelist.on('afteredit', function (e) {

        var TotalAmount = 0;
        var TotalFinalAmount = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {

            TotalAmount += (1 * e.grid.store.getAt(i).get('Amount'));
            TotalFinalAmount += (1 * e.grid.store.getAt(i).get('FinalAmount'));

        }
        Amount.setValue(TotalAmount);
        FinalAmount.setValue(TotalFinalAmount);
    }, this);

    var servicepackagedetails = Ext.getCmp('ServicePackageDetailsList').getStore();
    servicepackagedetails.on('load', function (store, record, options) {

        var TotalAmount = 0;
        var TotalFinalAmount = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmount += (1 * record.get('Amount'));
            if (record.get('IsDeleted') == false) TotalFinalAmount += (1 * record.get('FinalAmount'));
        }
        Amount.setValue(TotalAmount);
        FinalAmount.setValue(TotalFinalAmount);
    }, this);

    var servicepackagedetail = Ext.getCmp('ServicePackageDetailsList').getStore();
    servicepackagedetail.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        servicepackagedetail.SelectedRecord = record;
    }, this);


    var servicepackagedet = Ext.getCmp('ServicePackageDetailsList').getStore();
    servicepackagedet.on('beforeedit', function (e) {
        var record = e.record;
        servicepackagedet.SelectedRecord = record;
    }, this);
}

function LoadStudentsHandler(button, options) {

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadStudentsSubjects'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadStudentsSubjectsComplete, this);
}

function LoadStudentsSubjectsComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadStudentsSubjectsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {

        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'Students not found  !');
            return;
        }
        //to clear  the grid
        var grdFunctionality = Ext.getCmp('BulkStudentDetailCourseList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end


        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            EmpRecord = responseText.datum[cnt];

            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                StudentCode: EmpRecord.ID,
                StudentName: EmpRecord.Student_Number,
                Student_Name: EmpRecord.Student_Name,
                CompanyCode: login.CompanyCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        }

    }
}


function ELearningStudentPost(button, options) {

    var SubjectCode = Ext.getCmp('BulkStudentCourse-SubjCode').getValue();
    var TeacherCode = Ext.getCmp('BulkStudentCourse-TeacherCode').getValue();
    var RoomCode = Ext.getCmp('BulkStudentCourse-ClassroomCode').getValue();
    var StudentCode = '';

    var BulkStudentDetailCourseList = Ext.getCmp('BulkStudentDetailCourseList');
    var count = BulkStudentDetailCourseList.store.getCount();
    for (var cnt = 0; cnt < count; cnt++) {
        var record = BulkStudentDetailCourseList.store.getAt(cnt);
        if (!record.selec) continue;
        if (record.selec == true)
            StudentCode += (record.get('StudentCode') + ',');

    }

    if (StudentCode != '') StudentCode = StudentCode.substring(0, StudentCode.length - 1);


    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ELearningStudentPost',
            StudCode: StudentCode,
            SubjCode: SubjectCode,
            TeacherCode: TeacherCode,
            RoomCode: RoomCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ELearningStudentPostComplete, this);
}

function CrmBugTaskAllocation(form, login) {


}

function CrmBugTaskAllocHandler(form, login) {

    var selectedCustomer = Ext.getCmp('CrmBugTaskAllocation-Customer_Code').getValue();
    var selectedModule = Ext.getCmp('CrmBugTaskAllocation-ModuleCode').getValue();
    var seelctedScreen = Ext.getCmp('CrmBugTaskAllocation-ScreenCode').getValue();

    if (!selectedCustomer || !selectedModule || !seelctedScreen) {
        Ext.MessageBox.alert(login.modulename, "Should Select Customer Name,Module Name and Screen Name");
        return;
    }


    var selectedCustomer = Ext.getCmp('CrmBugTaskAllocation-Customer_Code').editValue;
    var selectedModule = Ext.getCmp('CrmBugTaskAllocation-ModuleCode').editValue;
    var seelctedScreen = Ext.getCmp('CrmBugTaskAllocation-ScreenCode').editValue;


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'BugTaskAllocationPopUp',
            selectedCustomer: selectedCustomer,
            selectedModule: selectedModule,
            seelctedScreen: seelctedScreen
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BugTaskAllocationFormReqComplete, this);

}

function BugTaskAllocationFormReqComplete(conn, response) {

    hideMask();

    Ext.Ajax.un('requestcomplete', BugTaskAllocationFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.BugTaskAllocationPopUpForm = new Ext.form.FormPanel(responseText.BugTaskAllocationCofig);
    this.BugTaskAllocationPopUpForm.selectedIndex = responseText.PKey;

    this.BugTaskAllocationPopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var BugReportTaskAllocPopUpDtlList = Ext.getCmp('BugReportTaskAllocPopUpDtlList');

            for (var pcnt = 0; pcnt < BugReportTaskAllocPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = BugReportTaskAllocPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectt', true);
            }
        },
        scope: this,
        tabIndex: this.BugTaskAllocationPopUpForm.FormFieldsCount + 2
    });



    this.BugTaskAllocationPopUpForm.addButton({
        text: 'Load',
        handler: function () {

            var PrimKey = Ext.getCmp('CrmBugTaskAllocation').selectedIndex;

            var BugReportTaskAllocPopUpDtlList = Ext.getCmp('BugReportTaskAllocPopUpDtlList');

            var CrmBugTaskAllocationgrid = Ext.getCmp('CrmBugTaskAllocationDtlList');

            for (var pcnt = 0; pcnt < BugReportTaskAllocPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = BugReportTaskAllocPopUpDtlList.store.getAt(pcnt);

                if (!PopupRecord.get('Selectt')) continue;

                CrmBugTaskAllocationgrid.storeId += 1;
                var BugTaskAllocId = CrmBugTaskAllocationgrid.storeId;
                var newRecord = new CrmBugTaskAllocationgrid.recordType({
                    ID: BugTaskAllocId,
                    SerialNo: BugTaskAllocId,
                    Bug_Code: PopupRecord.get('ID'),
                    Bug_Name: PopupRecord.get('Bug_Code'),
                    BugName: PopupRecord.get('BugName'),
                    BugType_Code: PopupRecord.get('TaskType_Code'),
                    BugType_Name: PopupRecord.get('TaskType_Name'),
                    StatusCode: 0,
                    StatusName: "Open",
                    CrmBugRepTaskAlloc_Code: (PrimKey == -1 ? 1 : PrimKey),//master primary key
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                CrmBugTaskAllocationgrid.stopEditing();
                CrmBugTaskAllocationgrid.store.add(newRecord);
                CrmBugTaskAllocationgrid.store.totalLength = CrmBugTaskAllocationgrid.store.getTotalCount() + 1;
                CrmBugTaskAllocationgrid.pageBar.updateInfo();

            }

            this.BugTaskAllocationPopUpWindow.close();

            var CrmBugTaskAllocationDtlList = Ext.getCmp('CrmBugTaskAllocationDtlList');
            CrmBugTaskAllocationDtlList.store.load({
                params: {
                    start: 0,
                    limit: CrmBugTaskAllocationDtlList.pageSize
                }
            });
        },


        scope: this,
        formBind: true,
        tabIndex: this.BugTaskAllocationPopUpForm.FormFieldsCount + 2
    });



    this.BugTaskAllocationPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.BugTaskAllocationPopUpWindow.close();
        },
        scope: this,
        tabIndex: this.BugTaskAllocationPopUpForm.FormFieldsCount + 2
    });


    this.BugTaskAllocationPopUpWindow = new Ext.Window({
        id: 'BugTaskAllocationPopUpWindow',
        title: 'Bug Report Details',
        closable: true,
        minimizable: false,
        width: this.BugTaskAllocationPopUpForm.width + 10,
        height: this.BugTaskAllocationPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.BugTaskAllocationPopUpForm]
    });
    this.BugTaskAllocationPopUpWindow.show();


}

function CrmCustomerStatusChange(form, login) {

}

function CrmCustomerStatusChangePost(form, login) {

    var PrimKey = Ext.getCmp('CrmCustomerStatusChange').selectedIndex;
    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CrmCustomerStatusChangePost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CrmCustomerStatusChangePostComplete, this);
}

function CrmCustomerStatusChangePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CrmCustomerStatusChangePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CUSTOMERSTATUS_editform').close();

    }
}


function PrePaidServicePopupHandler(form, login) {

    //var PKey = Ext.getCmp('PatientsLoginReception-CompanyCode').getValue();
    var PKey = Ext.getCmp('PatientsLoginReception-CompanyCode').getValue();

    //if (!PKey) {
    //    Ext.MessageBox.alert(login.modulename, 'Please select PrePaid Patient to Load Service !');
    //    return;
    //}
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PrePaidServicePopup'
            //  PKey: PKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PrePaidServicePopupComplete, this);

}

function PrePaidServicePopupComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PrePaidServicePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.PrePaidServicePopupForm = new Ext.form.FormPanel(responseText.PrePaidServiceCofig);
    //    this.PrePaidServicePopupForm.selectedIndex = responseText.PKey;

    var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    this.PrePaidServicePopupForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginReceptionDetailEntryGrid = Ext.getCmp('PatientLoginReceptionDetailList');
            var selectcnt = 0;
            var PrePaidServicePopupDtlList = Ext.getCmp('PrePaidServicePopupDtlList');
            var PatientLoginReceptionDetailList = Ext.getCmp('PatientLoginReceptionDetailList');
            var count = PatientLoginReceptionDetailList.store.getCount();
            var store = Ext.getCmp('PrePaidServicePopupDtlList').getStore();

            var PKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

            for (var pcnt = 0; pcnt < PrePaidServicePopupDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = PrePaidServicePopupDtlList.store.getAt(pcnt);

                if (!PopupRecord.get('SelectCheck')) continue;

                PatientLoginReceptionDetailEntryGrid.storeId += 1;
                var CriditID = PatientLoginReceptionDetailEntryGrid.storeId;
                var newRecord = new PatientLoginReceptionDetailEntryGrid.recordType({
                    ID: ServiceID,
                    SerialNo: ServiceID,
                    Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                    Serviceprovidertype: 0,
                    ServiceprovidertypeName: "",
                    Service_ProviderCode: PopupRecord.get('Service_ProviderCode'),
                    Service_ProviderName: PopupRecord.get('Service_ProviderName'),
                    ServiceTypeCode: PopupRecord.get('ServiceTypeCode'),
                    ServiceTypeName: PopupRecord.get('ServiceTypeName'),
                    Service_Name: PopupRecord.get('Service_Name'),
                    Service_Alternate_Name: PopupRecord.get('Service_Alternate_Name'),
                    Service_Price: PopupRecord.get('Price'),
                    StatusCode: 0,
                    StatusName: "Open",
                    SampleTime: "00:00",
                    ReceptionServiceTemplateDtlList: null,
                    DeliveryDate: new Date().format(login.jsdateformat),
                    Revenue_Account: "",
                    Amount: 0,
                    IsCashier: 0,
                    OldService: 0,
                    Description: "",
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginReceptionDetailEntryGrid.stopEditing();
                PatientLoginReceptionDetailEntryGrid.store.add(newRecord);
                PatientLoginReceptionDetailEntryGrid.store.totalLength = PatientLoginReceptionDetailEntryGrid.store.getTotalCount() + 1;
                PatientLoginReceptionDetailEntryGrid.pageBar.updateInfo();

            }
            this.PrePaidServicePopupFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
    });

    this.PrePaidServicePopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PrePaidServicePopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PrePaidServicePopupForm.FormFieldsCount + 2
    });


    this.PrePaidServicePopupFormWindow = new Ext.Window({
        id: 'PrePaidServicePopupFormWindow',
        title: 'Service',
        closable: true,
        minimizable: false,
        width: this.PrePaidServicePopupForm.width + 10,
        height: this.PrePaidServicePopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PrePaidServicePopupForm]
    });
    this.PrePaidServicePopupFormWindow.show();
}

function IFFReceipt(form, login) {

    if (!form.isView) {

        var StatusCode = Ext.getCmp('IFFReceipt-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();

        var ReceiptType = Ext.getCmp('IFFReceipt-ReceiptTypeCode');
        var Receipts = Ext.getCmp('IFFReceipt-ReceiptTypeCode').getValue();
        var ChequeNo = Ext.getCmp('IFFReceipt-Cheque_number');
        var Bank = Ext.getCmp('IFFReceipt-WithdrawalBankCode');
        var Chequedate = Ext.getCmp('IFFReceipt-MaturityDate');
        var BankAccountCode = Ext.getCmp('IFFReceipt-BankAccountCode');

        if (BankAccountCode) BankAccountCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = ('a.BTYPE=' + Ext.getCmp('IFFReceipt-ReceiptTypeCode').editValue) + " and b.bank_account_code in (select BANK_ACCOUNT_ID from ap_user_bank_access where USERCODE=" + login.UserCode + ")";
        }, this);

        ReceiptType.on('select', function (combo, record, options) {
            if (combo.getValue() == 1) {
                ChequeNo.allowBlank = true;
                Bank.allowBlank = true;
                Chequedate.allowBlank = true;
                ChequeNo.setValue(null);
                Bank.clearValue();
                Chequedate.setValue(null);
                ChequeNo.disable();
                Bank.disable();
                Chequedate.disable();
            }
            else {
                ChequeNo.allowBlank = false;
                Bank.allowBlank = false;
                Chequedate.allowBlank = false;
                ChequeNo.enable();
                Bank.enable();
                Chequedate.enable();
            }
            ChequeNo.isValid();
            Bank.isValid();
            Chequedate.isValid();
        }, this);

        if (form.selectedIndex == -1 && !form.isView) {
            ReceiptType.setComboValue(1);
            ChequeNo.disable();
            Bank.disable();
            Chequedate.disable();

        }
        else if (form.selectedIndex != -1 && !form.isView) {
            if (ReceiptType.editValue == 1) {
                ChequeNo.disable();
                Bank.disable();
                Chequedate.disable();
            }
        }
    }
}

function IFFCards(form, login) {

    if (form.selectedIndex == -1) {

        var StatusCode = Ext.getCmp('IFFCards-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
}


function IFFCardsWithDraw(form, login) {

    var DelegateNoCode = Ext.getCmp('IFFCardsWithDraw-DelegateNoCode');
    var CardCode = Ext.getCmp('IFFCardsWithDrawDtl-CardCode');

    if (CardCode) CardCode.on('beforequery', function (evt) {
        var DelegateNoCode = Ext.getCmp('IFFCardsWithDraw-DelegateNoCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "CARDCODE in (select CARDCODE from IFFCARDS where STATUS=0 and DELEGATECODE=" + DelegateNoCode + ")";
    }, this);

    if (form.selectedIndex == -1) {

        var StatusCode = Ext.getCmp('IFFCardsWithDraw-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
}

function IffCardsWithDrawPost(form, login) {

    var PrimKey = Ext.getCmp('IFFCardsWithDraw').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'IffCardsWithDrawPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IffCardsWithDrawPostComplete, this);
}

function IffCardsWithDrawPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IffCardsWithDrawPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_IFFCARDSWITHDRAW_editform').close();

    }
}

function IFFCardAssignment(form, login) {

    if (form.selectedIndex == -1) {

        var StatusCode = Ext.getCmp('IFFCardAssignment-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
}

function IffCardAssignmentPost(form, login) {

    var PrimKey = Ext.getCmp('IFFCardAssignment').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'IffCardAssignmentPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IffCardAssignmentPostComplete, this);
}

function IffCardAssignmentPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IffCardAssignmentPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_IFFCARDASSIGNMENT_editform').close();

    }
}


function LfmsReceiveVoucher(form, login) {

    if (!form.isView) {
        Ext.getCmp('LfmsReceiveVoucher-SumAmount').disable();
        Ext.getCmp('LfmsReceiveVoucher-SumApplyAmount').disable();
        var Status = Ext.getCmp('LfmsReceiveVoucher-StatusCode');
        Status.setComboValue(0);
        Status.disable();

        var Amount = Ext.getCmp('LfmsReceiveVoucher-Amount');
        var Bank_account_Code = Ext.getCmp('LfmsReceiveVoucher-Bank_account_Code')
        var SumAmount = Ext.getCmp('LfmsReceiveVoucher-SumAmount');
        var Receipt_typeCode = Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode');

        var LfmsReceiveVoucherDetList = Ext.getCmp('LfmsReceiveVoucherDetList');

        if (form.selectedIndex == -1 && !form.isView) {
            Receipt_typeCode.editValue = 1;
            Receipt_typeCode.setComboValue(1);
            LfmsReceiveVoucherDetList.disable();

        }

        if (Bank_account_Code) Bank_account_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = ('a.BTYPE=' + Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode').editValue) + " and b.bank_account_code in (select BANK_ACCOUNT_ID from ap_user_bank_access where USERCODE=" + login.UserCode + ")";
        }, this);


        Receipt_typeCode.on('select', function (combo, record, index) {
            var ReceiptType = combo.getValue();
            if (ReceiptType == 0) {
                Ext.getCmp('LfmsReceiveVoucherDetList').enable();

            } else {
                LfmsReceiveVoucherDetList.store.pruneModifiedRecords = true;
                LfmsReceiveVoucherDetList.store.added = [];
                LfmsReceiveVoucherDetList.store.modified = [];
                LfmsReceiveVoucherDetList.store.removeAll();
                LfmsReceiveVoucherDetList.store.pruneModifiedRecords = false;
                LfmsReceiveVoucherDetList.store.totalLength = 0;
                LfmsReceiveVoucherDetList.pageBar.updateInfo();
                Amount.setValue(null);
                SumAmount.setValue(null);
                Ext.getCmp('LfmsReceiveVoucherDetList').disable();

            }
        }, this);


        var LfmsReceiveVoucherDetList = Ext.getCmp('LfmsReceiveVoucherDetList');


        var SumAmount = Ext.getCmp('LfmsReceiveVoucher-SumAmount')
        LfmsReceiveVoucherDetList.on('afteredit', function (e) {

            var AmountSum = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                AmountSum += (1 * e.grid.store.getAt(i).get('Amount'));
            }

            SumAmount.setValue(AmountSum.toFixed(2));

            var ReceiptType = Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode');
            if (ReceiptType.editValue == 0) {

                Amount.setValue(Amount.fixPrecision(Ext.getCmp('LfmsReceiveVoucher-SumAmount').getValue()));
            }

        }, this);

        var LfmsReceiveVoucherDetStore = Ext.getCmp('LfmsReceiveVoucherDetList').getStore();
        LfmsReceiveVoucherDetStore.on('load', function (store, record, options) {

            var Totals = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Totals += (1 * record.get('Amount'));

            }

            SumAmount.setValue(Totals.toFixed(2));
            var ReceiptType = Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode');
            if (ReceiptType.editValue == 0) {

                Amount.setValue(Amount.fixPrecision(Ext.getCmp('LfmsReceiveVoucher-SumAmount').getValue()));
            }


        }, this);

        var LfmsReceiveVoucherLineList = Ext.getCmp('LfmsReceiveVoucherLineList');

        var SumApplyAmount = Ext.getCmp('LfmsReceiveVoucher-SumApplyAmount');

        LfmsReceiveVoucherLineList.on('afteredit', function (e) {


            var AmountSum = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                AmountSum += (1 * e.grid.store.getAt(i).get('Amount'));
            }

            SumApplyAmount.setValue(AmountSum.toFixed(2));
            var ReceiptType = Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode');
            if (ReceiptType.editValue == 1) {

                Amount.setValue(Amount.fixPrecision(Ext.getCmp('LfmsReceiveVoucher-SumApplyAmount').getValue()));
            }

        }, this);


        var LfmsReceiveVoucherLineStore = Ext.getCmp('LfmsReceiveVoucherLineList').getStore();
        LfmsReceiveVoucherLineStore.on('load', function (store, record, options) {

            var Totals = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Totals += (1 * record.get('Amount'));

            }
            //HdApplyTotl.setValue(Totals);
            SumApplyAmount.setValue(Totals.toFixed(2));
            var ReceiptType = Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode');
            if (ReceiptType.editValue == 1) {

                Amount.setValue(Amount.fixPrecision(Ext.getCmp('LfmsReceiveVoucher-SumApplyAmount').getValue()));
            }

        }, this);

        if (form.selectedIndex != -1 && !form.isView) {

            Ext.getCmp('LfmsReceiveVoucher-Receipt_typeCode').disable();

        }

    }
}
function LfmsReceiveVoucherPost(form, login) {

    var PrimKey = Ext.getCmp('LfmsReceiveVoucher').selectedIndex;
    var Status = Ext.getCmp('LfmsReceiveVoucher-StatusCode').editValue;

    if (Status == true) {
        Ext.MessageBox.alert(login.modulename, 'This record already Posted !');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LfmsReceiveVoucherPost',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', LfmsReceiveVoucherPostComplete, this);
}


function LfmsReceiveVoucherPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', LfmsReceiveVoucherPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_LFMSRECEIVEVOUCHER_editform').close();
    }
}

function ProviderLicencesMapping(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('ProviderLicencesMapping-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
            Ext.getCmp('ProviderLicencesMapping-ProviderAlternativeName').setValue(isAdditinalInfoRecord.get('ProviderAlternativeName'));
            Ext.getCmp('ProviderLicencesMapping-ProviderTypeName').setValue(isAdditinalInfoRecord.get('ProviderTypeName'));
            Ext.getCmp('ProviderLicencesMapping-HeadOfficeName').setValue(isAdditinalInfoRecord.get('HeadOfficeName'));
            Ext.getCmp('ProviderLicencesMapping-IsFastTraceProvider').setValue(isAdditinalInfoRecord.get('IsFastTraceProvider'));
            Ext.getCmp('ProviderLicencesMapping-NOB').setValue(isAdditinalInfoRecord.get('NOB'));
            Ext.getCmp('ProviderLicencesMapping-ClaimQuoteTypeName').setValue(isAdditinalInfoRecord.get('ClaimQuoteTypeName'));
            Ext.getCmp('ProviderLicencesMapping-ProviderStatusName').setValue(isAdditinalInfoRecord.get('ProviderStatusName'));
        }

        if (form.selectedIndex == -1) {

            var ValidFrom = Ext.getCmp('ProviderLicencesMapping-ValidFrom');
            var ToDate = Ext.getCmp('ProviderLicencesMapping-ValidTo');
            ToDate.setValue((new Date()).add(Date.YEAR, 1).format(login.jsdateformat));

            ValidFrom.on('blur', function (field, newval, odlval) {
                ToDate.setValue((field.getValue()).add(Date.YEAR, 1).format(login.jsdateformat));
            }, this);
        }
        /*
        var HasGovernmentLicense = Ext.getCmp('ProviderLicencesMapping-HasGovernmentLicense');
        var LicenceIDCode = Ext.getCmp('ProviderLicencesMapping-LicenceIDCode');
        var LicenceTypeCode = Ext.getCmp('ProviderLicencesMapping-LicenceTypeCode');
        if (HasGovernmentLicense.getValue()) {
            LicenceIDCode.enable(); LicenceTypeCode.enable();
        }
        else {
            LicenceIDCode.disable(); LicenceTypeCode.disable();
        }

        var HasGovernmentLicense = Ext.getCmp('ProviderLicencesMapping-HasGovernmentLicense');
        HasGovernmentLicense.on('check', onproviderHasGovernmentLicenseCheck, this);

        if (LicenceTypeCode) LicenceTypeCode.on('select', function (combo, record, index) {
            LicenceIDCode.clearValue();
        }, this);

        var LicenceIDCode = Ext.getCmp('ProviderLicencesMapping-LicenceIDCode');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " LICENSE_TYPE in (select constantname from genconstant where CATEGORY='NGILICENCETYPE' and LANGUAGECODE='en-US' and CONSTANTVALUE=" + LicenceTypeCode.editValue + ")";
        }, this);
        */
    }
}

function onproviderHasGovernmentLicenseCheck(checkBox, checked) {
    var LicenceIDCode = Ext.getCmp('ProviderLicencesMapping-LicenceIDCode');
    var LicenceTypeCode = Ext.getCmp('ProviderLicencesMapping-LicenceTypeCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}


function GeographicAreas(form, login) {

    if (!form.isView) {

        var StatusCode = Ext.getCmp('GeographicAreas-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
        var GAName = Ext.getCmp('GeographicAreas-GAName');
        var AlternativeGAName = Ext.getCmp('GeographicAreas-AlternativeGAName');

        if (GAName) GAName.on('change', function (field, newval, odlval) {
            AlternativeGAName.setValue(field.getValue());
        }, this);

        var GeographicAreasCountryList = Ext.getCmp('GeographicAreasCountryList');
        var GeographicAreasCityList = Ext.getCmp('GeographicAreasCityList');
        var GeographicAreasEstateList = Ext.getCmp('GeographicAreasEstateList');

        var CountryRecord = '';
        GeographicAreasCountryList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            CountryRecord = Record;
        }, this);

        GeographicAreasCountryList.on('rowclick', function (grid, Index, e) {
            CountryRecord = grid.store.getAt(Index);
        }, this);

        GeographicAreasCountryList.store.on('update', function (Store, Record, operation) {
            CountryRecord = Record;
        }, this);

        var ProvinceRecord = '';
        GeographicAreasEstateList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            ProvinceRecord = Record;
        }, this);

        GeographicAreasEstateList.on('rowclick', function (grid, Index, e) {
            ProvinceRecord = grid.store.getAt(Index);
        }, this);

        GeographicAreasEstateList.on('afteredit', function (e) {
            ProvinceRecord = e.grid.store.getAt(i)
        }, this);

        GeographicAreasEstateList.store.on('update', function (Store, Record, operation) {
            ProvinceRecord = Record;
        }, this);

        GeographicAreasCountryList.getColumnModel().getColumnById('Active').on('click', onGeographicCountryActiveClick, this);

        var ProvinceCode = Ext.getCmp('GeographicAreasEstate-ProvinceCode');
        if (ProvinceCode) ProvinceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (CountryRecord != '')
                evt.combo.store.baseParams.filter = " GP.COUNTRYCODE in (" + CountryRecord.get('CountryCode') + ")";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        var PlaceCode = Ext.getCmp('GeographicAreasCity-PlaceCode');
        if (PlaceCode) PlaceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (ProvinceRecord != '')
                evt.combo.store.baseParams.filter = "gp.placecode in (select PLACECODE from genPlace  where PROVINCECODE in (" + ProvinceRecord.get('ProvinceCode') + "))";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);
        if (form.selectedIndex == -1) {

            //// For Loading Country
            //var GeographicAreasCountryList = Ext.getCmp('GeographicAreasCountryList').getStore();
            //GeographicAreasCountryList.on('load', GeographicAreasCountryLoad, this);

            //// For Loading City
            //var GeographicAreasCityList = Ext.getCmp('GeographicAreasCityList').getStore();
            //GeographicAreasCityList.on('load', GeographicAreasCityLoad, this);

            //// For Loading Emirate
            //var GeographicAreasEstateList = Ext.getCmp('GeographicAreasEstateList').getStore();
            //GeographicAreasEstateList.on('load', GeographicAreasEmirateLoad, this);
        }
    }
}

function onGeographicCountryActiveClick(column, e, record, dataindex) {

    var GeographicAreasCityList = Ext.getCmp('GeographicAreasCityList');
    var GeographicAreasEstateList = Ext.getCmp('GeographicAreasEstateList');

    if (record.get('Active') == false) {

        for (var i = 0; i < GeographicAreasCityList.store.getCount() ; i++) {
            if (GeographicAreasCityList.store.getAt(i).get('CountryCode') == record.get('CountryCode'))
                GeographicAreasCityList.store.getAt(i).set('Active', false);
        }

        for (var i = 0; i < GeographicAreasEstateList.store.getCount() ; i++) {
            if (GeographicAreasEstateList.store.getAt(i).get('CountryCode') == record.get('CountryCode'))
                GeographicAreasEstateList.store.getAt(i).set('Active', false);
        }
    }

}
function GeographicAreasCountryLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GeographicAreasCountryLoadComplete, this);
}

function GeographicAreasCountryLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', GeographicAreasCountryLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var PrimKey = Ext.getCmp('GeographicAreas').selectedIndex;
    var grdFunctionality = Ext.getCmp('GeographicAreasCountryList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        var CountryRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('CountryCode') == CountryRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            CountryCode: CountryRecord.ID,
            CountryName: CountryRecord.CountryName,
            Active: true,
            GACode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}

function GeographicAreasCityLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CityLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', GeographicAreasCityLoadComplete, this);

}

function GeographicAreasCityLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', GeographicAreasCityLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var PrimKey = Ext.getCmp('GeographicAreas').selectedIndex;
    var grdFunctionality = Ext.getCmp('GeographicAreasCityList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        CityRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('CityCode') == CityRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            CityCode: CityRecord.ID,
            CityName: CityRecord.PlaceName,
            CountryCode: CityRecord.CountryCode,
            Active: true,
            GACode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}

function GeographicAreasEmirateLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EmirateLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', GeographicAreasEmirateComplete, this);

}

function GeographicAreasEmirateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', GeographicAreasEmirateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var PrimKey = Ext.getCmp('GeographicAreas').selectedIndex;
    var grdFunctionality = Ext.getCmp('GeographicAreasEstateList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        EmirateRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('EmirateCode') == EmirateRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            EmirateCode: EmirateRecord.ID,
            EmirateName: EmirateRecord.ProvinceName,
            CountryCode: EmirateRecord.CountryCode,
            Active: true,
            GACode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}

function ProviderPharmacyTariff(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('ProviderPharmacyTariff-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }

        var ProviderCode = Ext.getCmp('ProviderPharmacyTariff-ProviderCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Pro.PROVIDERTYPE=(select constantvalue from genconstant where upper(constantName)='PHARMACY' and category='PROVIDERTYPE' and LANGUAGECODE='en-US' )";
        }, this);
    }
}

function NGIProvider(form, login) {



    if (!form.isView) {

        //State filter based on Country 
        var ProLocationCode = Ext.getCmp('NGIProvider-ProLocationCode');
        var CountryCode = Ext.getCmp('NGIProvider-CountryCode');
        var CityCode = Ext.getCmp('NGIProvider-CityCode');
        var ClaimQuoteTypeCode = Ext.getCmp('NGIProvider-ClaimQuoteTypeCode');
        var ProviderPharmacyTariffDetails = Ext.getCmp('ProviderPharmacyTariffDetailsList');

        ProviderPharmacyTariffDetails.disable();
        if (ClaimQuoteTypeCode) ClaimQuoteTypeCode.on('select', function (combo, record, index) {
            if (ClaimQuoteTypeCode.editValue == 1212) {
                ProviderPharmacyTariffDetailsList
                ProviderPharmacyTariffDetails.enable();

            }
            else {
                ProviderPharmacyTariffDetails.disable();
                onBusinessTypeclear('ProviderPharmacyTariffDetailsList');
            }
        }, this);

        var ProviderTypeCode = Ext.getCmp('NGIProvider-ProviderTypeCode');
        ProviderTypeCode.constantFilter = '0,1,2,5,8,9';

        if (CityCode) CityCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('NGIProvider-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        /*//City filtered based on State
        if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
            var CityCode = Ext.getCmp('NGIProvider-CityCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + CityCode + "";
        }, this);*/
        /*
           //location filtered based on city
           var ProLocationCode = Ext.getCmp('NGIProvider-ProLocationCode');
           if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
               var CityCode = Ext.getCmp('NGIProvider-CityCode').getValue();
               evt.combo.lastQuery = '1=2';
               evt.combo.store.baseParams.filter = "PLACECODE=" + CityCode + "";
           }, this);
           */
        CityCode.on('select', function (combo, record, index) {
            ProLocationCode.clearValue();
        }, this);

        CountryCode.on('select', function (combo, record, index) {
            CityCode.clearValue();
            //ProLocationCode.clearValue();
        }, this);

        /*  CityCode.on('select', function (combo, record, index) {
             ProLocationCode.clearValue();
          }, this);*/

        /*
        //State filter based on Country  for Billing Detail
        var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode');
        if (DtlStateCode) DtlStateCode.on('beforequery', function (evt) {
            var DtlCountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + DtlCountryCode + "";
        }, this);

        //City filtered based on State for Billing Detail

        var DtlCityCode = Ext.getCmp('NGIProviderBillingDetail-CityCode');
        if (DtlCityCode) DtlCityCode.on('beforequery', function (evt) {
            var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + DtlStateCode + "";
        }, this);
        */
        Ext.getCmp('NGIProvider-ProviderStatusCode').setComboValue(0);
        Ext.getCmp('NGIProvider-ProviderStatusCode').disable();
        //Ext.getCmp('NGIProvider-MaxMultiFactorHaad').setValue(login.providersetting.MaxMultiFactorHaad);
        //if (login.providersetting != 'undefined')
        //    Ext.getCmp('NGIProvider-MaxCPTtoAlert').setValue(login.providersetting.MaxCPTtoAlert);
        var ProviderTypeCode = Ext.getCmp('NGIProvider-ProviderTypeCode');
        var GroupCode = Ext.getCmp('NGIProvider-HeadOfficeCode');
        var Providername = Ext.getCmp('NGIProvider-ProviderName');
        var ProviderAlternativeName = Ext.getCmp('NGIProvider-ProviderAlternativeName');
        var ClaimQuoteTypeCode = Ext.getCmp('NGIProvider-ClaimQuoteTypeCode');
        var CountryCode = Ext.getCmp('NGIProvider-CountryCode');
        var StateCode = Ext.getCmp('NGIProvider-StateCode');
        var CityCode = Ext.getCmp('NGIProvider-CityCode');
        var MobileNo = Ext.getCmp('NGIProvider-MobileNo');
        var EMail = Ext.getCmp('NGIProvider-EMail');
        var ProviderGoogleAddress = Ext.getCmp('NGIProvider-ProviderGoogleAddress');
        var WebSite = Ext.getCmp('NGIProvider-WebSite');
        var ProviderMainPhone = Ext.getCmp('NGIProvider-ProviderMainPhone');
        var FaxNumber = Ext.getCmp('NGIProvider-FaxNumber');

        if (ProviderTypeCode) ProviderTypeCode.on('select', function (combo, record, index) {
            if (combo.getValue() == 6) {
                GroupCode.disable();
                GroupCode.clearValue();
            }
            else {
                GroupCode.enable();
            }
        }, this);

        if (form.selectedIndex != -1 && !form.isView) {

            if (ProviderTypeCode.editValue == 6) {
                GroupCode.disable();
            }
            else {
                GroupCode.enable();
            }
        }

        if (GroupCode) GroupCode.on('select', function (combo, record, index) {


            // Ext.getCmp('NGIProvider-ProviderName').setValue(null);
            //   Ext.getCmp('NGIProvider-ProviderName-ProviderAlternativeName').setv;
            Providername.setValue(null);
            ProviderAlternativeName.setValue(null);

            ClaimQuoteTypeCode.clearValue();
            CountryCode.clearValue();
            StateCode.clearValue();
            CityCode.clearValue();
            MobileNo.setValue(null);
            EMail.setValue(null);
            ProviderGoogleAddress.setValue(null);
            WebSite.setValue(null);
            ProviderMainPhone.setValue(null);
            FaxNumber.setValue(null);

        }, this);


        //var NGIProviderBillingDetailList = Ext.getCmp('NGIProviderBillingDetailList');

        //NGIProviderBillingDetailList.on('render', function (grid) {

        //    var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode');
        //    if (CountryCode) CountryCode.on('beforequery', function (evt) {
        //        var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
        //        evt.combo.lastQuery = '1=2';
        //        evt.combo.store.baseParams.filter = "1=1";
        //    }, this);

        //    //var cm = grid.getColumnModel();
        //    //cm.config[1].hidden=true;
        //}, this);

    }


}

function MarkHighPriorityProvider(form, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to add this provider as High Priority Provider?', function (button) {

        var PrimKey = Ext.getCmp('NGIProvider').selectedIndex;
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MarkHighPriorityProvider',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MarkHighPriorityProviderComplete, this);

        }
        else
            return true;
    }, this);

}

function MarkHighPriorityProviderComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', MarkHighPriorityProviderComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        //Ext.getCmp('ID_NGIPROVIDER_editform').close();
    }

}

function MarkBlackListProvider(form, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to add this provider into Black List?', function (button) {

        var PrimKey = Ext.getCmp('NGIProvider').selectedIndex;
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MarkBlackListProvider',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MarkBlackListProviderComplete, this);

        }
        else
            return true;
    }, this);
}

function MarkBlackListProviderComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', MarkBlackListProviderComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        //Ext.getCmp('ID_NGIPROVIDER_editform').close();
    }
}

function AgentMaster(form, login) {

    var StatusCode = Ext.getCmp('AgentMaster-StatusCode');
    StatusCode.setComboValue(0);
    StatusCode.disable();
}

function BenefitMaster(form, login) {

    if (!form.isView) {

        var StatusCode = Ext.getCmp('BenefitMaster-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();

        var ApplicableCode = Ext.getCmp('BenefitMaster-ApplicableCode');
        ApplicableCode.setComboValue(2);
    }

}


function ProviderBilling(form, login) {

    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('ProviderBilling-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
        //State filter based on Country 
        var StateCode = Ext.getCmp('ProviderBilling-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('ProviderBilling-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        //City filtered based on State

        var CityCode = Ext.getCmp('ProviderBilling-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('ProviderBilling-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        }, this);
    }

}

function NewProviderBilling(form, login) {

    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('NewProviderBilling-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
        var CountryCode = Ext.getCmp('NewProviderBilling-CountryCode');
        CountryCode.setComboValue('100000000000000111');
        //State filter based on Country 
        var StateCode = Ext.getCmp('NewProviderBilling-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('NewProviderBilling-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE= " + CountryCode + "";
        }, this);

        //City filtered based on State

        //var CityCode = Ext.getCmp('NewProviderBilling-CityCode');
        //if (CityCode) CityCode.on('beforequery', function (evt) {
        //    var StateCode = Ext.getCmp('NewProviderBilling-StateCode').getValue();
        //    evt.combo.lastQuery = '1=2';
        //    evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        //}, this);
    }

}

function NGIMember(form, login) {

    if (!form.isView) {

        var Parent = Ext.getCmp('NGIMember-ParentMemberCode');
        Parent.disable();
        var Relation = Ext.getCmp('NGIMember-RelationCode');
        var gendercode = Ext.getCmp('NGIMember-GenderCode');
        var MemberTypeCode = Ext.getCmp('NGIMember-Member_TypeCode');
        var StatusCode = Ext.getCmp('NGIMember-StatusCode');
        var MemberType = Ext.getCmp('NGIMember-Member_TypeCode').editValue;

        if (form.selectedIndex == -1) {
            Relation.setComboValue(15);
            Relation.disable();
            MemberTypeCode.setComboValue(1);
            StatusCode.setComboValue(0);
            StatusCode.disable();

        }
        var GroupCode = Ext.getCmp('NGIMember-Group_Code');
        var CategoryCode = Ext.getCmp('NGIMember-CategoryCode');

        if (GroupCode) GroupCode.on('select', function (combo, record, index) {
            CategoryCode.clearValue();
            var CategoryCount = Ext.getCmp('NGIMember-CategoryCount').getValue();
            if (CategoryCount == 0 || CategoryCount == '') {
                Ext.MessageBox.alert(login.modulename, 'Category Does not Maped');
                return;
            }
        }, this);
        if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where Status=0 and  GROUP_CODE=" + GroupCode.editValue + ")";
        }, this);

        /*
        var DOB = Ext.getCmp('NGIMember-Date_of_birth');
        if (DOB) DOB.on('valid', function (text1, oldval, newval) {

            var DOB1 = Ext.getCmp('NGIMember-Date_of_birth').getValue();
            var CurDate = new Date();
            var Month = (CurDate.getMonth() - DOB1.getMonth()) + ((CurDate.getFullYear() - DOB1.getFullYear()) * 12);
            var age = Math.ceil(Month / 12);

            if (Math.ceil(Month / 12) > 65) {
                Ext.MessageBox.alert(login.modulename, 'Age Should not greater then 65!');
                DOB1.setValue('');
                //  gridRecord.set('Date_of_birth', '');
                return;
            }
        }, this);
        */
        var SubGroup = Ext.getCmp('NGIMember-ParentGroupCode');
        if (SubGroup) SubGroup.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " IG.PARENT_GROUP=" + GroupCode.editValue + "";
        }, this);

        if (gendercode) gendercode.on('select', function (combo, record, index) {
            var MemberType = Ext.getCmp('NGIMember-Member_TypeCode').editValue;
            if (MemberType == 0) {
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
            }
            if (MemberType == 0) {
                if (gendercode.editValue == 0) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE=' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 1) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE= ' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 2) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from im_members where MEMBER_CODE= ' + Parent.editValue + ')';
                    }
                }
                var check = Ext.getCmp('NGIMember-Member_TypeCode').getValue();
                if (check != '') {
                    Relation.enable();
                    Relation.clearValue();
                    Relation.allowBlank = false;
                    Relation.isValid();
                }

            }

        }, this);
        if (Relation) Relation.on('beforequery', function (evt) {

            if (gendercode.editValue == 0) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '10,11,15,1,2,3,4';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE=' + Parent.editValue;
                }
            }
            if (gendercode.editValue == 1) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '10,11,15,5,6,7,8';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE= ' + Parent.editValue;
                }
            }
            if (gendercode.editValue == 2) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from im_members where MEMBER_CODE= ' + Parent.editValue + ')';
                }
            }
            var check = Ext.getCmp('NGIMember-Member_TypeCode').getValue();
            if (check != '') {
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
            }
        }, this);

        if (gendercode) gendercode.on('clear', function (e) {
            Relation.clearValue();
            Relation.allowBlank = false;
            Relation.isValid();

        }, this);


        if (Parent) Parent.on('select', function (combo, record, index) {
            var MemberType = Ext.getCmp('NGIMember-Member_TypeCode').editValue;
            if (MemberType == 0) {
                if (gendercode.editValue == 0) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE=' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 1) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from im_members where MEMBER_CODE= ' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 2) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from im_members where MEMBER_CODE= ' + Parent.editValue + ')';
                    }
                }
                var check = Ext.getCmp('NGIMember-Member_TypeCode').getValue();
                if (check != '') {
                    Relation.enable();
                    Relation.clearValue();
                    Relation.allowBlank = false;
                    Relation.isValid();
                }
            }
        }, this);
        if (MemberTypeCode) MemberTypeCode.on('select', function (combo, record, index) {

            var MemberType = Ext.getCmp('NGIMember-Member_TypeCode').editValue;

            if (MemberType == 0) {//Depent
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
                var Parent = Ext.getCmp('NGIMember-ParentMemberCode');
                Parent.enable();
                Parent.allowBlank = false;
                Parent.isValid();
            }
            else {//self
                Relation.clearValue();
                //Relation.allowBlank = true;
                //Relation.isValid();
                Relation.setComboValue(15);
                Relation.disable();
                var Parent = Ext.getCmp('NGIMember-ParentMemberCode');
                Parent.disable();
                Parent.allowBlank = true;
                Parent.isValid();
            }

        }, this);
        if (MemberTypeCode) MemberTypeCode.on('clear', function (e) {
            Relation.clearValue();
            Relation.allowBlank = true;
            Relation.isValid();
            Relation.disable();
        }, this);



        var ParentMemberCode = Ext.getCmp('NGIMember-ParentMemberCode');
        if (ParentMemberCode) ParentMemberCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mem.MEMBER_TYPE=1 ";

        }, this);

        var EntryTypeCode = Ext.getCmp('NGIMember-EntryTypeCode');
        var DateOfEntry = Ext.getCmp('NGIMember-DateOfEntry');
        var Existing_Insurer = Ext.getCmp('NGIMember-Existing_Insurer');

        if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {

            DateOfEntry.allowBlank = false; DateOfEntry.isValid();

            if (EntryTypeCode.editValue == 2) {//Residants
                Existing_Insurer.allowBlank = false; Existing_Insurer.isValid();
            }
            else {
                Existing_Insurer.allowBlank = true; Existing_Insurer.isValid();
            }

        }, this);
    }

}




function QuotationRequestMember(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var RequestCode = Ext.getCmp('QuotationRequestMember-RequestCode');
            RequestCode.setComboValue(isAdditinalInfoValue);
            RequestCode.disable();
        }

        var DateOfBirth = Ext.getCmp('QuotationRequestMember-DateOfBirth');
        var Age = Ext.getCmp('QuotationRequestMember-Age');
        if (DateOfBirth) DateOfBirth.on('blur', onQRMemberDOBBlur, this);
    }

}

function onQRMemberDOBBlur(field) {
    var Age = Ext.getCmp('QuotationRequestMember-Age');
    var CurDate = new Date();
    var Month = (CurDate.getMonth() - field.getValue().getMonth()) + ((CurDate.getFullYear() - field.getValue().getFullYear()) * 12);
    Age.setValue(Math.round(Month / 12));
}


function QuotationRevisionMember(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var RevisionCode = Ext.getCmp('QuotationRevisionMember-RevisionCode');
            RevisionCode.setComboValue(isAdditinalInfoValue);
            RevisionCode.disable();
        }

        var DateOfBirth = Ext.getCmp('QuotationRevisionMember-DateOfBirth');
        var Age = Ext.getCmp('QuotationRevisionMember-Age');
        if (DateOfBirth) DateOfBirth.on('blur', onQRevMemberDOBBlur, this);

    }

}

function onQRevMemberDOBBlur(field) {
    var Age = Ext.getCmp('QuotationRevisionMember-Age');
    var CurDate = new Date();
    var Month = (CurDate.getMonth() - field.getValue().getMonth()) + ((CurDate.getFullYear() - field.getValue().getFullYear()) * 12);
    Age.setValue(Math.round(Month / 12));
}


function NGIQuotationMember(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var QuotationCode = Ext.getCmp('NGIQuotationMember-QuotationCode');
            QuotationCode.setComboValue(isAdditinalInfoValue);
            QuotationCode.disable();
        }

        var Date_of_birth = Ext.getCmp('NGIQuotationMember-Date_of_birth');
        var Age = Ext.getCmp('NGIQuotationMember-Age');
        if (Date_of_birth) Date_of_birth.on('blur', onQuotaionMemberDOBBlur, this);

    }
}

function onQuotaionMemberDOBBlur(field) {
    var Age = Ext.getCmp('NGIQuotationMember-Age');
    var CurDate = new Date();
    var Month = (CurDate.getMonth() - field.getValue().getMonth()) + ((CurDate.getFullYear() - field.getValue().getFullYear()) * 12);
    Age.setValue(Math.round(Month / 12));
}


function NGINetworkProviderMapping(form, login) {
    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('NGINetworkProviderMapping-NetworkCode').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('NGINetworkProviderMapping-NetworkCode').disable();
        }
    }
}


function FrontingContract(form, login) {

    if (!form.isView) {

        var ValidTo = Ext.getCmp('FrontingContract-ValidTo');
        var ValidFrom = Ext.getCmp('FrontingContract-ValidFrom');
        if (ValidFrom) ValidFrom.on('blur', onFrontingContractStartDateBlur, this);
        var fromdate = ValidFrom.getValue();
        var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
        ValidTo.setValue(Todate);

    }
}

function onFrontingContractStartDateBlur(field) {
    var ValidTo = Ext.getCmp('FrontingContract-ValidTo');
    var fromdate = field.getValue();
    var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
    ValidTo.setValue(Todate);

}


function ExcessAndLoss(form, login) {

    if (!form.isView) {

        var ValidTo = Ext.getCmp('ExcessAndLoss-ValidTo');
        var ValidFrom = Ext.getCmp('ExcessAndLoss-ValidFrom')
        if (ValidFrom) ValidFrom.on('blur', onExcessAndLossStartDateBlur, this);
        var fromdate = ValidFrom.getValue();
        var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
        ValidTo.setValue(Todate);

    }
}

function onExcessAndLossStartDateBlur(field) {
    var ValidTo = Ext.getCmp('ExcessAndLoss-ValidTo');
    var fromdate = field.getValue();
    var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
    ValidTo.setValue(Todate);

}

function FacultativeReInsurance(form, login) {

    if (!form.isView) {

        var EndDate = Ext.getCmp('FacultativeReInsurance-EndDate');
        var StartDate = Ext.getCmp('FacultativeReInsurance-StartDate')
        if (StartDate) StartDate.on('blur', onFacultativeReInsuranceStartDateBlur, this);
        var fromdate = StartDate.getValue();
        var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
        EndDate.setValue(Todate);

    }
}

function onFacultativeReInsuranceStartDateBlur(field) {
    var EndDate = Ext.getCmp('FacultativeReInsurance-EndDate');
    var fromdate = field.getValue();
    var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
    EndDate.setValue(Todate);

}

function ExcelUploadTemplate(form, login) {

}

function LoadExcelColumns(form, login) {

    var FileName = Ext.getCmp('ExcelUploadTemplate-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('ExcelUploadTemplate').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'LoadExcelColumns',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', LoadExcelColumnsComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}

function LoadExcelColumnsComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', LoadExcelColumnsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {

        DetailStore = Ext.getCmp('ExcelUploadTemplateDetList').getStore();

        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}

function InsuranceCompany(form, login) {
    var InsuranceTypeCode = Ext.getCmp('InsuranceCompany-InsuranceTypeCode');
    InsuranceTypeCode.setComboValue(2);
}


function Network(form, login) {

    ActualAverageCost = form.form.findField('Network-ClaimAverageCostTo');

    ActualAverageCost.on('valid', onSetActualAverageCost, this);

    if (!form.isview) {
        var NetworkCountriesDtlList = Ext.getCmp('NetworkCountriesDtlList');
        var NetworkCityDtlList = Ext.getCmp('NetworkCityDtlList');
        var NetworkStatesDtlList = Ext.getCmp('NetworkStatesDtlList');

        var CountryRecord = '';
        NetworkCountriesDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            CountryRecord = Record;
        }, this);

        NetworkCountriesDtlList.on('rowclick', function (grid, Index, e) {
            CountryRecord = grid.store.getAt(Index);
        }, this);


        NetworkCountriesDtlList.store.on('update', function (Store, Record, operation) {
            CountryRecord = Record;
        }, this);

        var ProvinceRecord = '';
        NetworkStatesDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            ProvinceRecord = Record;
        }, this);

        NetworkStatesDtlList.on('rowclick', function (grid, Index, e) {
            ProvinceRecord = grid.store.getAt(Index);
        }, this);


        NetworkStatesDtlList.store.on('update', function (Store, Record, operation) {
            ProvinceRecord = Record;
        }, this);


        var ProvinceCode = Ext.getCmp('NetworkStatesDtl-StateCode');
        if (ProvinceCode) ProvinceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (CountryRecord != '')
                evt.combo.store.baseParams.filter = " GP.COUNTRYCODE in (" + CountryRecord.get('CountryCode') + ")";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        var PlaceCode = Ext.getCmp('NetworkCityDtl-CityCode');
        if (PlaceCode) PlaceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (ProvinceRecord != '')
                evt.combo.store.baseParams.filter = "gp.PROVINCECODE in (" + ProvinceRecord.get('ProvinceCode') + " )";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        NetworkCountriesDtlList.getColumnModel().getColumnById('Active').on('click', onNetworkCountriesClick, this);

        if (form.selectedIndex == -1) {

            //// For Loading Country
            //var NetworkCountriesDtlList = Ext.getCmp('NetworkCountriesDtlList').getStore();
            //NetworkCountriesDtlList.on('load', NetworkCountryLoad, this);

            //// For Loading City
            //var NetworkCityDtlList = Ext.getCmp('NetworkCityDtlList').getStore();
            //NetworkCityDtlList.on('load', NetworkCityLoad, this);

            //// For Loading Emirate
            //var NetworkStatesDtlList = Ext.getCmp('NetworkStatesDtlList').getStore();
            //NetworkStatesDtlList.on('load', NetworkEmirateLoad, this);
        }
    }
}

function onSetActualAverageCost(field) {

    var ClaimAverageCostFrom = Ext.getCmp('Network-ClaimAverageCostFrom').getValue();
    var ClaimAverageCostTo = Ext.getCmp('Network-ClaimAverageCostTo').getValue();
    var AverageCost = 0;
    AverageCost = (ClaimAverageCostFrom + ClaimAverageCostTo) / 2;
    Ext.getCmp('Network-ActualAverageCost').setValue(AverageCost);
}

function onNetworkCountriesClick(column, e, record, dataindex) {

    var NetworkCityDtlList = Ext.getCmp('NetworkCityDtlList');
    var NetworkStatesDtlList = Ext.getCmp('NetworkStatesDtlList');

    if (record.get('Active') == false) {

        for (var i = 0; i < NetworkCityDtlList.store.getCount() ; i++) {
            if (NetworkCityDtlList.store.getAt(i).get('CountryCode') == record.get('CountryCode'))
                NetworkCityDtlList.store.getAt(i).set('Active', false);
        }

        for (var i = 0; i < NetworkStatesDtlList.store.getCount() ; i++) {
            if (NetworkStatesDtlList.store.getAt(i).get('CountryCode') == record.get('CountryCode'))
                NetworkStatesDtlList.store.getAt(i).set('Active', false);
        }
    }

}

function NetworkCountryLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', NetworkCountryLoadComplete, this);
}

function NetworkCountryLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', NetworkCountryLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var PrimKey = Ext.getCmp('Network').selectedIndex;
    var grdFunctionality = Ext.getCmp('NetworkCountriesDtlList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        var CountryRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('CountryCode') == CountryRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            CountryCode: CountryRecord.ID,
            CountryName: CountryRecord.CountryName,
            Active: true,
            NetworkCode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}

function NetworkCityLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CityLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', NetworkCityLoadComplete, this);

}

function NetworkCityLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', NetworkCityLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var PrimKey = Ext.getCmp('Network').selectedIndex;
    var grdFunctionality = Ext.getCmp('NetworkCityDtlList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        CityRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('CityCode') == CityRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            CityCode: CityRecord.ID,
            CityName: CityRecord.PlaceName,
            CountryCode: CityRecord.CountryCode,
            Active: true,
            NetworkCode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}

function NetworkEmirateLoad(store, record, options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EmirateLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', NetworkEmirateLoadComplete, this);

}

function NetworkEmirateLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', NetworkEmirateLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var PrimKey = Ext.getCmp('Network').selectedIndex;
    var grdFunctionality = Ext.getCmp('NetworkStatesDtlList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        EmirateRecord = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('StateCode') == EmirateRecord.ID) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            SerialNo: grdFunctionality.storeId,
            StateCode: EmirateRecord.ID,
            StateName: EmirateRecord.ProvinceName,
            CountryCode: EmirateRecord.CountryCode,
            Active: true,
            NetworkCode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}


var PolBrokerAgentName = '';
function NGIPolicy(form, login) {
    if (form.selectedIndex == -1) {
        Ext.getCmp('NGIPolicy-PerimumCode').setComboValue(1);
        //Ext.getCmp('NGIPolicy-Insurancecode').setComboValue(login.defaultpartycode);
        Ext.getCmp('NGIPolicy-TemplateCode').setValue('65');
    }



    //Ext.getCmp('NGIPolicy-NoofInstallment').on('change', OnNoOfInstallmentChange, this);
   /* var PolicyInstallmentList = Ext.getCmp('PolicyInstallmentList');
    PolicyInstallmentList.on('addrecord', function (evt) {
        evt.record.set('InstallmentNo', PolicyInstallmentList.store.totalLength);
    }, this);*/
    var SharingSummary = Ext.getCmp('NGIPolicy-SharingSummary');
    var NGIPolicySharingDetailList = Ext.getCmp('NGIPolicySharingDetailList');//Sharing Detail Load: to Calculate Sharing Amount
    if(NGIPolicySharingDetailList) NGIPolicySharingDetailList.getStore().on('load', function (store, record, options) {
        var Total11 = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) Total11 += (1 * record.get('FinalPremiumValue'));
        }
        SharingSummary.setValue(Total11);
    }, this);


    var PolicyInsurerDtlList = Ext.getCmp('PolicyInsurerDtlList');

     
     
    var SubReinsurerTypeCode = Ext.getCmp('PolicyInsurerDtl-SubReinsurerTypeCode');
    ReqSourceCode
    Ext.getCmp('NGIPolicy-ReqSourceCode').on('select', function (combo, record, options) {           
        if (combo.getValue() == 6) {
            Ext.getCmp('NGIPolicy-ReInsuranceCode').enable();
            Ext.getCmp('NGIPolicy-ReInsuranceCode').isValid();
            Ext.getCmp('NGIPolicy-FacPercentage').enable();
            Ext.getCmp('NGIPolicy-FacPercentage').isValid();
            Ext.getCmp('NGIPolicy-RIRefCode').enable();
            Ext.getCmp('NGIPolicy-RIRefCode').isValid();
        }
        else {
            Ext.getCmp('NGIPolicy-ReInsuranceCode').disable();
            Ext.getCmp('NGIPolicy-ReInsuranceCode').clearInvalid(); 
            Ext.getCmp('NGIPolicy-ReInsuranceCode').clearValue(null);
            Ext.getCmp('NGIPolicy-FacPercentage').disable();
            Ext.getCmp('NGIPolicy-FacPercentage').clearInvalid();
            Ext.getCmp('NGIPolicy-FacPercentage').setValue(null);
            Ext.getCmp('NGIPolicy-RIRefCode').disable();
            Ext.getCmp('NGIPolicy-RIRefCode').clearInvalid();
            Ext.getCmp('NGIPolicy-RIRefCode').setValue(null);
        }   
    }, this);
    if (!form.isView) {
        Ext.getCmp('NGIPolicy-ReInsuranceCode').disable();
        Ext.getCmp('NGIPolicy-ReInsuranceCode').clearInvalid();
        Ext.getCmp('NGIPolicy-ReInsuranceCode').clearValue(null);
        Ext.getCmp('NGIPolicy-FacPercentage').disable();
        Ext.getCmp('NGIPolicy-FacPercentage').clearInvalid();
        Ext.getCmp('NGIPolicy-FacPercentage').setValue(null);
        Ext.getCmp('NGIPolicy-RIRefCode').disable();
        Ext.getCmp('NGIPolicy-RIRefCode').clearInvalid();
        Ext.getCmp('NGIPolicy-RIRefCode').setValue(null);
    }
    Ext.getCmp('PolicyInsurerSubDtlList').on('beforeedit', function (evt) { 
        var LRecord = '';
        Ext.getCmp('PolicyInsurerSubDtl-PremiumTypeCode').on('beforequery', function (evt) {
            var CommFileter = '';
            for (var cnt = 0; cnt < Ext.getCmp('PolicyInsurerSubDtlList').getStore().getCount() ; cnt++) {
                LRecord = Ext.getCmp('PolicyInsurerSubDtlList').getStore().getAt(cnt);
                if (LRecord.get('PremiumTypeCode') == null || LRecord.get('PremiumTypeCode') == 'null') continue;
                CommFileter += LRecord.get('PremiumTypeCode') + ',';
            }
            if (CommFileter != '') CommFileter = CommFileter.substring(0, CommFileter.length - 1);
            if (CommFileter == 'null' || CommFileter == '') {
                CommFileter = 0;
            }
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "Category  = 'PREMIUMTYPES' And ConstantValue not in (" + CommFileter + ")";
        }, this);
    }, this);
    PolicyInsurerDtlList.on('beforeedit', function (evt) {
        if (SubReinsurerTypeCode) SubReinsurerTypeCode.on('select',function(combo,record,options){
            if (combo.getValue() == 1) {
                var PolicyFacultativeOutList = Ext.getCmp('PolicyFacultativeOutList');
                PolicyFacultativeOutList.store.pruneModifiedRecords = true;
                PolicyFacultativeOutList.store.added = [];
                PolicyFacultativeOutList.store.modified = [];
                PolicyFacultativeOutList.store.removeAll();
                PolicyFacultativeOutList.store.pruneModifiedRecords = false;
                PolicyFacultativeOutList.store.totalLength = 0;
                PolicyFacultativeOutList.pageBar.updateInfo();
                Ext.getCmp('PolicyFacultativeOutList').disable();
                var PolicyInsurerSubDtlList = Ext.getCmp('PolicyInsurerSubDtlList'); 
                Ext.getCmp('PolicyInsurerSubDtlList').enable();
            }
            else {
                var PolicyInsurerSubDtlList = Ext.getCmp('PolicyInsurerSubDtlList');
                PolicyInsurerSubDtlList.store.pruneModifiedRecords = true;
                PolicyInsurerSubDtlList.store.added = [];
                PolicyInsurerSubDtlList.store.modified = [];
                PolicyInsurerSubDtlList.store.removeAll();
                PolicyInsurerSubDtlList.store.pruneModifiedRecords = false;
                PolicyInsurerSubDtlList.store.totalLength = 0;
                PolicyInsurerSubDtlList.pageBar.updateInfo();
                Ext.getCmp('PolicyInsurerSubDtlList').disable();
                Ext.getCmp('PolicyFacultativeOutList').enable();

            }
        
        }, this);       
    }, this);


    if (Ext.getCmp('PolicyInsurerDtlList')) Ext.getCmp('PolicyInsurerDtlList').on('rowclick', function (grid, rowIndex, e) {
        var record = grid.store.getAt(rowIndex); 
        if (record.get('SubReinsurerTypeCode') == 1) {
            var PolicyFacultativeOutList = Ext.getCmp('PolicyFacultativeOutList'); 
            Ext.getCmp('PolicyFacultativeOutList').disable(); 
            Ext.getCmp('PolicyInsurerSubDtlList').enable();
        }
        else {
            var PolicyInsurerSubDtlList = Ext.getCmp('PolicyInsurerSubDtlList'); 
            Ext.getCmp('PolicyInsurerSubDtlList').disable();
            Ext.getCmp('PolicyFacultativeOutList').enable();

        }
    }, this);

     if(NGIPolicySharingDetailList) NGIPolicySharingDetailList.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
        var AmountSum = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            if (e.grid.store.getAt(i).get('ReInsurValueTypeCode') == 1) {// Percentage
                e.grid.store.getAt(i).set('FinalPremiumValue', 0);
            }
            AmountSum += (1 * e.grid.store.getAt(i).get('FinalPremiumValue'));
        }
        SharingSummary.setValue(AmountSum);
    }, this);

    if(NGIPolicySharingDetailList) NGIPolicySharingDetailList.getStore().on('update', function (store, Record, options) {// Sharing Detail After edit: to Set Summary AMount if it amount
        if (Record.get('ReInsurValueTypeCode') == 0) {// Amount
            Record.set('FinalPremiumValue', Record.get('Reinsurance_npq'));
        }
    }, this);

    var PartyTwo = Ext.getCmp('NGIPolicySharingDetail-ReInsuranceCode');
    if (PartyTwo) PartyTwo.on('beforequery', function (evt) {// Filter based on Not a  default party
        var StartDate = Ext.getCmp('NGIPolicy-StartDate').getValue().format(login.jsdateformat);
        var EndDate = Ext.getCmp('NGIPolicy-EndDate').getValue().format(login.jsdateformat);
        var ContractTypeCode = Ext.getCmp('NGIPolicy-ContractTypeCode').editValue;
        var Insurancecode = Ext.getCmp('NGIPolicy-Insurancecode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "detl.REINSURANCE in (select REINSURANCE from IM_QUOTASHARE_TREATY where  CONTRACTTYPE=" + ContractTypeCode + " and INSURANCECO=" + Insurancecode + " and to_date('" + StartDate + "','" + login.dateformat + "') between VALIDFROM and VALIDTO ) ";
    }, this);

    var Insurancecode = Ext.getCmp('NGIPolicy-Insurancecode');
    var ContractTypeCode = Ext.getCmp('NGIPolicy-ContractTypeCode');
    if (ContractTypeCode) ContractTypeCode.on('select', function (combo, record, index) {
        onBusinessTypeclear('NGIPolicySharingDetailList');
    }, this);
    if (Insurancecode) Insurancecode.on('select', function (combo, record, index) {
        onBusinessTypeclear('NGIPolicySharingDetailList');
    }, this);

    var NGIPolicyDtlList = Ext.getCmp('NGIPolicyDtlList');
    NGIPolicyDtlList.store.on('load', function (store, record, options) {
        Ext.getCmp('NGIPolicyDtlList_addNew').setVisible(false);
        if (record.length > 0) {
            //Ext.getCmp('NGIPolicy-OwnerTypeCode').disable();
        }

    }, this);

    var ElementTemplateCode = Ext.getCmp('NGIPolicy-ElementTemplateCode');
    var PolicyCommissionDetailList = Ext.getCmp('PolicyCommissionDetailList');

    if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (ElementTemplateCode != '')
            evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=0 and TEM.QUOTATION_TYPE=" + Ext.getCmp('NGIPolicy-OwnerTypeCode').getValue() + "";
        else
            evt.combo.store.baseParams.filter = "1=2";
    }, this);

    ElementTemplateCode.on('select', OnTemplatePolicyCodeChange, this);


    if (!form.isView) {


        var StartDate = Ext.getCmp('NGIPolicy-StartDate');
        var EndDate = Ext.getCmp('NGIPolicy-EndDate');


        if (form.selectedIndex == -1) {
            var fromdate = StartDate.getValue();
            var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
            EndDate.setValue(Todate);

            var ReqSourceCode = Ext.getCmp('NGIPolicy-ReqSourceCode');
            ReqSourceCode.setComboValue(3);
        }

        Ext.getCmp('NGIPolicy-AnnuallimittypeCode').setComboValue(2);
        Ext.getCmp('NGIPolicy-InpatientCode').setComboValue(2);
        Ext.getCmp('NGIPolicy-OutpatientCode').setComboValue(2);
        var PolicyCommissionDetailList = Ext.getCmp('PolicyCommissionDetailList');
        var ReqSourceCode = Ext.getCmp('NGIPolicy-ReqSourceCode');
        //ReqSourceCode.setComboValue(3);
        var AgentCode = Ext.getCmp('NGIPolicy-AgentCode');
        var AgentBranchName = Ext.getCmp('NGIPolicy-AgentBranchName');
        var AgentLocationName = Ext.getCmp('NGIPolicy-AgentLocationName');
        var BrokerCode = Ext.getCmp('NGIPolicy-BrokerCode');
        var Reinsurer = Ext.getCmp('NGIPolicy-ReInsuranceCode');
        var BranchName = Ext.getCmp('NGIPolicy-BranchName');
        var LocationIDName = Ext.getCmp('NGIPolicy-LocationIDName');
        var BranchCodee = Ext.getCmp('NGIPolicy-BranchCodee');
        var BillingTypeCode = Ext.getCmp('NGIPolicy-BillingTypeCode');
        //AgentCode.disable();
        //BrokerCode.disable();
        //BranchCodee.disable();
        var Comission_TypesCode = Ext.getCmp('PolicyCommissionDetail-Comission_TypesCode');

        Ext.getCmp('PolicyMemberDtlList').on('addrecord', function (evt) {
            evt.record.set('Member_Relation_Code', 15);
            evt.record.set('Member_Relation_Name', 'Self');
        }, this);
        AgentCode.on('select', function (combo, record, index) {
            BillingTypeCode.setComboValue(0);
        }, this);
        if (AgentCode) AgentCode.on('clear', function (e) {
            BillingTypeCode.enable();
            BillingTypeCode.allowBlank = false;
            BillingTypeCode.isValid();
        }, this);
        BrokerCode.on('select', function (combo, record, index) {
            BillingTypeCode.setComboValue(1);
        }, this);
        if (BrokerCode) BrokerCode.on('clear', function (e) {
            BillingTypeCode.enable();
            BillingTypeCode.allowBlank = false;
            BillingTypeCode.isValid();
        }, this);

        var CommissionType = Ext.getCmp('PolicyCommissionDetail-Comission_TypesCode');
        var GeneralCommBillingCode = Ext.getCmp('PolicyCommissionDetail-GeneralCommBillingCode');
        var PolicyCommissionDetailList = Ext.getCmp('PolicyCommissionDetailList');

        //PolicyCommissionDetailList.on('afteredit', function (e) {
        //    if ((CommissionType.editValue == 2) || (CommissionType.editValue == 3)) { // ngi commission
        //        GeneralCommBillingCode.allowBlank = true;
        //        GeneralCommBillingCode.isValid();
        //    }

        //}, this);

        ReqSourceCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('PolicyCommissionDetailList');
            if (ReqSourceCode.editValue == 3) {
                BillingTypeCode.setComboValue(2);
                BranchCodee.enable();
                BranchCodee.allowBlank = false;
                BranchCodee.isValid();
            }
            if (ReqSourceCode.editValue != 3) {
                BranchCodee.setValue('');
                BranchCodee.setValue('');
                BranchCodee.clearValue();
                BranchCodee.allowBlank = true;
                BranchCodee.isValid();
                BranchCodee.disable();
            }

            if (ReqSourceCode.editValue == 5) { // broker
                BillingTypeCode.setComboValue(1);
            }
            if (ReqSourceCode.editValue == 4) { // agent
                BillingTypeCode.setComboValue(0);
            }

            /*
            if (ReqSourceCode.editValue == 6) {  // Reinsurer
                AgentBranchName.setValue('');
                AgentLocationName.setValue('');
                AgentCode.clearValue();
                AgentCode.allowBlank = true;
                AgentCode.isValid();
                AgentCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;
                BrokerCode.isValid();
                BrokerCode.disable();
                Reinsurer.enable();
                Reinsurer.allowBlank = false;
                Reinsurer.isValid();

            }
            */
            /*
            if (ReqSourceCode.editValue == 5) { //Borker
                AgentBranchName.setValue('');
                AgentLocationName.setValue('');
                AgentCode.clearValue();
                AgentCode.allowBlank = true;
                AgentCode.isValid();
                AgentCode.disable();
                BrokerCode.enable();
                BrokerCode.allowBlank = false;
                BrokerCode.isValid();
                //Reinsurer.clearValue();
                //Reinsurer.allowBlank = true;
                //Reinsurer.isValid();
                //Reinsurer.disable();


            }
            else if (ReqSourceCode.editValue == 4) {
                BranchName.setValue('');
                LocationIDName.setValue('');
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;
                BrokerCode.isValid();
                BrokerCode.disable();
                AgentCode.enable();
                AgentCode.allowBlank = false;
                AgentCode.isValid();
                //Reinsurer.clearValue();
                //Reinsurer.allowBlank = true;
                //Reinsurer.isValid();
                //Reinsurer.disable();
            }
            else {
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;
                BrokerCode.isValid();
                BrokerCode.disable();
                //Reinsurer.clearValue();
                //Reinsurer.allowBlank = true;
                //Reinsurer.isValid();
                //Reinsurer.disable();
                AgentCode.clearValue();
                AgentCode.allowBlank = true;
                AgentCode.isValid();
                AgentCode.disable();
                BranchName.setValue('');
                LocationIDName.setValue('');
                AgentBranchName.setValue('');
                AgentLocationName.setValue('');

            }
            */
        }, this);

        var AgentCode = Ext.getCmp('NGIPolicy-AgentCode');
        var BrokerCode = Ext.getCmp('NGIPolicy-BrokerCode');
        var OwnerTypeCode = Ext.getCmp('NGIPolicy-OwnerTypeCode');

        if (form.selectedIndex != -1) {//Edit Mode
            OwnerTypeCode.enable();
            BrokerCode.enable();
            OwnerTypeCode.enable();
        }

        /*
        AgentCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('PolicyCommissionDetailList');
            PolBrokerAgentName = record.data.AgentName;//Get Agent Name

        }, this);

        BrokerCode.on('select', function (combo, record, index) {
            PolBrokerAgentName = record.data.Broker_Name_en;//Get Broker Name
            onBusinessTypeclear('PolicyCommissionDetailList');
        }, this);

        Reinsurer.on('select', function (combo, record, index) {
            PolBrokerAgentName = record.data.InsuranceName;//Get Reinsurer Name
        }, this);
        */
        PolicyCommissionDetailList.on('addrecord', function (evt) {
            if (ReqSourceCode.editValue == 4) {
                if (AgentCode.getValue() == '' || AgentCode.getValue() == null) {//Agent
                    Ext.MessageBox.alert(login.modulename, 'Select Agent Name Before add new Record !');
                    onBusinessTypeclear('PolicyCommissionDetailList');
                    return;
                }
            }
            if (ReqSourceCode.editValue == 5) {
                if (BrokerCode.getValue() == '' || BrokerCode.getValue() == null) {//Broker
                    Ext.MessageBox.alert(login.modulename, 'Select Broker Name Before add new Record !');
                    onBusinessTypeclear('PolicyCommissionDetailList');
                    return;
                }
            }
            //if (ReqSourceCode.editValue == 6) {
            //    if (Reinsurer.getValue() == '' || Reinsurer.getValue() == null) {//Reinsurer
            //        Ext.MessageBox.alert(login.modulename, 'Select Reinsurer Name Before add new Record !');
            //        onBusinessTypeclear('PolicyCommissionDetailList');
            //        return;
            //    }
            //}

        }, this);

        PolicyCommissionDetailList.on('afteredit', function (e) {

            if (e.record.get('Comission_TypesCode') == 1)
                e.record.set('CommissionToNewName', AgentCode.lastSelectionText);
            else if (e.record.get('Comission_TypesCode') == 0)
                e.record.set('CommissionToNewName', BrokerCode.lastSelectionText);
            else if (e.record.get('Comission_TypesCode') == 3)
                e.record.set('CommissionToNewName', Reinsurer.lastSelectionText);
            else if (e.record.get('Comission_TypesCode') == 2) // NGI Commission
                e.record.set('CommissionToNewName', GeneralCommBillingCode.lastSelectionText);

        }, this);

        PolicyCommissionDetailList.on('beforeedit', function (evt) {
            var CommFileter = '2,4,5,6,7,8';
            if (ReqSourceCode.editValue == 4) {//Agent
                CommFileter += ',1';

            }
            else if (ReqSourceCode.editValue == 5) {//Broker
                CommFileter += ',0';

            }
            if (Reinsurer.editValue != '' && Reinsurer.editValue != 0) { //ReInsurer
                CommFileter += ',3';

            }
            Comission_TypesCode.lastQuery = '1=2';
            Comission_TypesCode.constantFilter = CommFileter;
        }, this);


        var Group = Ext.getCmp('NGIPolicy-GroupCode');
        var ParentGroupCode = Ext.getCmp('PolicyMemberDtl-ParentGroupCode');
        if (ParentGroupCode) ParentGroupCode.on('beforequery', function (evt) {
            if (Group.editValue != 0 || Group.editValue != '') {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " IG.GROUP_CODE in (select GROUP_CODE from im_groups where PARENT_GROUP=" + Group.editValue + ")";
            }
        }, this);

        var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');
        PolicyMemberDtlList.on('beforeedit', function (evt) {

            var Relation = Ext.getCmp('PolicyMemberDtl-Member_Relation_Code');
            var Gender = evt.record.get('Member_genderCode');
            if (Gender == 0) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,1,2,3,4';
            }
            else if (Gender == 1) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,5,6,7,8';
            }
            else {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
            }

        }, this);

        var CategoryCode = Ext.getCmp('PolicyMemberDtl-CategoryCode');
        if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORY_CODE from im_group_categories where GROUP_CODE=" + Ext.getCmp('NGIPolicy-GroupCode').editValue + ")";
        }, this);

        var GroupCode = Ext.getCmp('NGIPolicy-GroupCode');
        /*
        GroupCode.on('select', function (combo, record, index) {
            var PolicyGroupCount = Ext.getCmp('NGIPolicy-PolicyGroupCount').getValue();
            var RequestGroupCount = Ext.getCmp('NGIPolicy-RequestGroupCount').getValue();
            var QuotaionMasterGroupCount = Ext.getCmp('NGIPolicy-QuotaionMasterGroupCount').getValue();

            if (PolicyGroupCount > 0) {
                Ext.MessageBox.alert(login.modulename, 'Group already has an entry in Policy with pending or approved status! You Cannot Select');
                GroupCode.clearValue();
                return;
            }
            else if (RequestGroupCount > 0) {
                Ext.MessageBox.alert(login.modulename, 'Group already has an entry in Quotation Request with pending or approved status! You Cannot Select');
                GroupCode.clearValue();
                return;
            }
            else if (QuotaionMasterGroupCount > 0) {
                Ext.MessageBox.alert(login.modulename, 'Group already has an entry in Quotation Master with pending or approved status! You Cannot Select');
                GroupCode.clearValue();
                return;
            }


        }, this);
        */

        if (GroupCode) GroupCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GRO.PARENT_GROUP is null";
        }, this);

        PolicyCommissionDetailList.on('afteredit', function (e) {

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var FinalAmount = Ext.getCmp('NGIPolicy-Final_premium').getValue();
                var DefValueAmnt = 0, DefValuePre = 0;
                if (e.grid.store.getAt(i).get('Calc_MethodCode') == 0) {  //  Amount
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    /*
                    if (DefaultValue > FinalAmount) {
                        e.grid.store.getAt(i).set('Commission_value', 0);
                        Ext.MessageBox.alert(login.modulename, 'Default Value Less then or Equal to Gross Premium');
                        return;
                    }
                    */
                    DefValueAmnt = e.grid.store.getAt(i).get('DefaultValue');
                    DefValuePre == 0;
                }
                else if (e.grid.store.getAt(i).get('Calc_MethodCode') == 1) {  // Precentage
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    var FinalAmount = Ext.getCmp('NGIPolicy-Final_premium').getValue();
                    if (DefaultValue > 100) {
                        e.grid.store.getAt(i).set('Commission_value', 0);
                        e.grid.store.getAt(i).set('DefaultValue', 0);
                        Ext.MessageBox.alert(login.modulename, 'Default value should be less or equal to 100');
                        return;
                    }
                    DefValuePre = FinalAmount != 0 ? ((FinalAmount * e.grid.store.getAt(i).get('DefaultValue')) / 100) : 0;
                    DefValueAmnt == 0;
                }
                var Total = DefValueAmnt == 0 ? DefValuePre : DefValueAmnt;
                e.grid.store.getAt(i).set('Commission_value', Total);
            }

        }, this);

        /*
        PolicyCommissionDetailList.on('beforeedit', function (evt) {

            var CommissionToCode = Ext.getCmp('PolicyCommissionDetail-CommissionToCode');
            var Comission_TypesCode = evt.record.get('Comission_TypesCode');
            if (Comission_TypesCode == 0) {
                CommissionToCode.lastQuery = '1=2';
                CommissionToCode.store.baseParams.filter = 'Com.TypeCode=1';
            }
            else if (Comission_TypesCode == 1) {
                CommissionToCode.lastQuery = '1=2';
                CommissionToCode.store.baseParams.filter = 'Com.TypeCode=0';
            }

        }, this);
        */

        var PolicyMemberPremiumList = Ext.getCmp('PolicyMemberPremiumList');

        var PolicyAdditionalSubDtlList = Ext.getCmp('PolicyAdditionalSubDtlList');
        PolicyAdditionalSubDtlList.on('afteredit', function (e) {
            if (e.record.get('CalcMethodCode') == 0)//Amount
            {
                var BasePremium = e.record.get('Defaultvalue');
                e.record.set('Premium_value', BasePremium);
            }
            else {
                if (e.record.get('Defaultvalue') > 100) {
                    Ext.MessageBox.alert(login.modulename, "Defalut Value should be less than or equal to 100 Percentage");
                    e.record.set('Defaultvalue', 0)
                }
                var BasePremium = 0;
                for (var i = 0; i < PolicyMemberPremiumList.store.getCount() ; i++) {
                    var Record = PolicyMemberPremiumList.store.getAt(i);
                    if (PolicyMemberPremiumList.store.getAt(i).get('PremiumTypeCode') == 0) {//Base Premium
                        BasePremium = ((Record.get('Premium_value') * e.record.get('Defaultvalue')) / 100);
                    }
                }
                e.record.set('Premium_value', BasePremium.toFixed(2));
            }
        }, this);

        var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');

        if (PolicyMemberDtlList) PolicyMemberDtlList.on('afteredit', function (e) {
            var AgeTemplateCode = Ext.getCmp('NGIPolicy-TemplateCode');
            var gridRecord = e.record;
            var DOB = gridRecord.get('Date_of_birth');
            if (typeof (DOB) == 'string') DOB = Date.parseDate(DOB, login.jsdateformat);
            else DOB = DOB;
            var CurDate = new Date();
            var Month = (CurDate.getMonth() - DOB.getMonth()) + ((CurDate.getFullYear() - DOB.getFullYear()) * 12);
            gridRecord.set('Age', Math.ceil(Month / 12))

            if (Math.ceil(Month / 12) > AgeTemplateCode.getValue()) {
                Ext.MessageBox.alert(login.modulename, "Age Should not greater then " + AgeTemplateCode.getValue() + "!");
                gridRecord.set('Age', 0);
                gridRecord.set('Date_of_birth', '');
                return;
            }

        }, this);

        //var Altlimit = Ext.getCmp('NGIPolicy-Altlimit');
        //if (Altlimit) Altlimit.on('change', function (field) {
        //    var Oplimit = Ext.getCmp('NGIPolicy-Oplimit');
        //    var Iplimit = Ext.getCmp('NGIPolicy-Iplimit');
        //    if (Iplimit.getValue() == null || Iplimit.getValue() == '' || Iplimit.getValue() == 0) {
        //        Iplimit.setValue(field.getValue());
        //    }
        //    if (Oplimit.getValue() == null || Oplimit.getValue() == '' || Oplimit.getValue() == 0) {
        //        Oplimit.setValue(field.getValue());
        //    }
        //}, this);

        var StartDate = Ext.getCmp('NGIPolicy-StartDate');
        var EndDate = Ext.getCmp('NGIPolicy-EndDate');
        if (StartDate) StartDate.on('change', function (field) {
            var fromdate = StartDate.getValue();
            var Todate = fromdate.add(Date.YEAR, 1).format(login.jsdateformat);
            EndDate.setValue(Todate);
        }, this);
        var MemberSince = Ext.getCmp('NGIPolicy-MemberSince');
        var InceptionDate = Ext.getCmp('NGIPolicy-InceptionDate');
        var ISExistingMember = Ext.getCmp('NGIPolicy-ISExistingMember');
        var Existing_Insurer = Ext.getCmp('NGIPolicy-Existing_Insurer');
        var DateOfEntry = Ext.getCmp('NGIPolicy-DateOfEntry');
        var COCExpiry = Ext.getCmp('NGIPolicy-COCExpiry');
        var Occupation = Ext.getCmp('NGIPolicy-Occupation');
        var Address1 = Ext.getCmp('NGIPolicy-Address1');
        var Address2 = Ext.getCmp('NGIPolicy-Address2');
        var PhoneNo = Ext.getCmp('NGIPolicy-PhoneNo');
        var MobileNo = Ext.getCmp('NGIPolicy-MobileNo');
        var Email_ID = Ext.getCmp('NGIPolicy-Email_ID');
        var PassportNo = Ext.getCmp('NGIPolicy-PassportNo');
        var Height = Ext.getCmp('NGIPolicy-Height');
        var Weight = Ext.getCmp('NGIPolicy-Weight');
        var EmiratesId = Ext.getCmp('NGIPolicy-EmiratesId');
        var StaffId = Ext.getCmp('NGIPolicy-StaffId');
        var DiscountPCT = Ext.getCmp('NGIPolicy-DiscountPCT');
        var LoadingPCT = Ext.getCmp('NGIPolicy-LoadingPCT');
        var MemberLocationCode = Ext.getCmp('NGIPolicy-MemberLocationCode');
        var EntryTypeCode = Ext.getCmp('NGIPolicy-EntryTypeCode');
        var HAADFine = Ext.getCmp('NGIPolicy-HAADFine');
        var WaiveAmount = Ext.getCmp('NGIPolicy-WaiveAmount');
        var NoOfDays = Ext.getCmp('NGIPolicy-NoOfDays');
        var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');

        var ResidentialLocationCode = Ext.getCmp('NGIPolicy-ResidentialLocationCode');
        var WorkLocationCode = Ext.getCmp('NGIPolicy-WorkLocationCode');
        var SalaryBandCode = Ext.getCmp('NGIPolicy-SalaryBandCode');
        var MemCommissionTypeCode = Ext.getCmp('NGIPolicy-MemCommissionTypeCode');
        var EntityTypeCode = Ext.getCmp('NGIPolicy-EntityTypeCode');
        var EntityIDCode = Ext.getCmp('NGIPolicy-EntityIDCode');
        var UIDNumber = Ext.getCmp('NGIPolicy-UIDNumber');
		var MemberEntityIDName = Ext.getCmp('NGIPolicy-MemberEntityIDName');
        var IsPreExisting = Ext.getCmp('NGIPolicy-IsPreExisting');

        PolicyMemberDtlList.on('rowclick', function (grid, rowIndex, e) {
            PolicyMemberDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            Existing_Insurer.setValue(Record.get('Existing_Insurer'));
            MemberSince.setValue(Record.get('MemberSince'));
            InceptionDate.setValue(Record.get('InceptionDate'));
            ISExistingMember.setValue(Record.get('ISExistingMember'));
            DateOfEntry.setValue(Record.get('DateOfEntry'));
            COCExpiry.setValue(Record.get('COCExpiry'));
            Occupation.setValue(Record.get('Occupation'));
            Address1.setValue(Record.get('Address1'));
            Address2.setValue(Record.get('Address2'));
            PhoneNo.setValue(Record.get('PhoneNo'));
            MobileNo.setValue(Record.get('MobileNo'));
            Email_ID.setValue(Record.get('Email_ID'));
            PassportNo.setValue(Record.get('PassportNo'));
            Height.setValue(Record.get('Height'));
            Weight.setValue(Record.get('Weight'));
            EmiratesId.setValue(Record.get('EmiratesId'));
            StaffId.setValue(Record.get('StaffId'));
            DiscountPCT.setValue(Record.get('DiscountPCT'));
            LoadingPCT.setValue(Record.get('LoadingPCT'));
            MemberLocationCode.setComboValue(Record.get('Location'));
            EntryTypeCode.setComboValue(Record.get('EntryType'));
            HAADFine.setValue(Record.get('HAADFine'));
            WaiveAmount.setValue(Record.get('WaiveAmount'));
            NoOfDays.setValue(Record.get('NoOfDays'));
            ResidentialLocationCode.setComboValue(Record.get('ResidentialLocationCode'));
            WorkLocationCode.setComboValue(Record.get('WorkLocationCode'));
            Record.get('SalaryBandCode') == 0 ? SalaryBandCode.setComboValue(null) : SalaryBandCode.setComboValue(Record.get('SalaryBandCode'));
            Record.get('MemCommissionTypeCode') == 0 ? MemCommissionTypeCode.setComboValue(null) : MemCommissionTypeCode.setComboValue(Record.get('MemCommissionTypeCode'));
            Record.get('EntityTypeCode') == 0 ? EntityTypeCode.setComboValue(null) : EntityTypeCode.setComboValue(Record.get('EntityTypeCode'));
            //Record.get('EntityIDCode') == 0 ? EntityIDCode.setComboValue(null) : EntityIDCode.setComboValue(Record.get('EntityIDCode'));
            UIDNumber.setValue(Record.get('UIDNumber'));
            IsPreExisting.setValue(Record.get('IsPreExisting'));
			MemberEntityIDName.setValue(Record.get('UIDNumber'));


            NgiPolicySelectRowClikAndSelect();
        }, this);

        PolicyMemberDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            PolicyMemberDtlList.lastSelectedRecord = Record;
            Existing_Insurer.setValue(Record.get('Existing_Insurer'));
            InceptionDate.setValue(Record.get('InceptionDate'));
            Existing_Insurer.setValue(Record.get('Existing_Insurer'));
            ISExistingMember.setValue(Record.get('ISExistingMember'));
            DateOfEntry.setValue(Record.get('DateOfEntry'));
            COCExpiry.setValue(Record.get('COCExpiry'));
            Occupation.setValue(Record.get('Occupation'));
            Address1.setValue(Record.get('Address1'));
            Address2.setValue(Record.get('Address2'));
            PhoneNo.setValue(Record.get('PhoneNo'));
            MobileNo.setValue(Record.get('MobileNo'));
            Email_ID.setValue(Record.get('Email_ID'));
            PassportNo.setValue(Record.get('PassportNo'));
            Height.setValue(Record.get('Height'));
            Weight.setValue(Record.get('Weight'));
            EmiratesId.setValue(Record.get('EmiratesId'));
            StaffId.setValue(Record.get('StaffId'));
            DiscountPCT.setValue(Record.get('DiscountPCT'));
            LoadingPCT.setValue(Record.get('LoadingPCT'));
            MemberLocationCode.setComboValue(Record.get('Location'));
            MemberSince.setValue(Record.get('MemberSince'));
            EntryTypeCode.setComboValue(Record.get('EntryType'));
            HAADFine.setValue(Record.get('HAADFine'));
            WaiveAmount.setValue(Record.get('WaiveAmount'));
            NoOfDays.setValue(Record.get('NoOfDays'));
            ResidentialLocationCode.setComboValue(Record.get('ResidentialLocationCode'));
            WorkLocationCode.setComboValue(Record.get('WorkLocationCode'));
            Record.get('SalaryBandCode') == 0 ? SalaryBandCode.clearValue() : SalaryBandCode.setComboValue(Record.get('SalaryBandCode'));
            Record.get('MemCommissionTypeCode') == 0 ? MemCommissionTypeCode.clearValue() : MemCommissionTypeCode.setComboValue(Record.get('MemCommissionTypeCode'));
            Record.get('EntityTypeCode') == 0 ? EntityTypeCode.clearValue() : EntityTypeCode.setComboValue(Record.get('EntityTypeCode'));
            //Record.get('EntityIDCode') == 0 ? EntityIDCode.clearValue() : EntityIDCode.setComboValue(Record.get('EntityIDCode'));
            UIDNumber.setValue(Record.get('UIDNumber'));
            IsPreExisting.setValue(Record.get('IsPreExisting'));
			MemberEntityIDName.setValue(Record.get('UIDNumber'));
            NgiPolicySelectRowClikAndSelect();
        }, this);

        if (UIDNumber) UIDNumber.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('UIDNumber', UIDNumber.getValue());
        }, this);

        if (IsPreExisting) IsPreExisting.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('IsPreExisting', IsPreExisting.getValue());
        }, this);

        /*if (EntityIDCode) EntityIDCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('EntityIDCode', EntityIDCode.editValue);
        }, this);*/

        if (EntityTypeCode) EntityTypeCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('EntityTypeCode', EntityTypeCode.editValue);
        }, this);


        if (MemCommissionTypeCode) MemCommissionTypeCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('MemCommissionTypeCode', MemCommissionTypeCode.editValue);
        }, this);

        if (ResidentialLocationCode) ResidentialLocationCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('ResidentialLocationCode', ResidentialLocationCode.editValue);
        }, this);

        if (WorkLocationCode) WorkLocationCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('WorkLocationCode', WorkLocationCode.editValue);
        }, this);

        if (SalaryBandCode) SalaryBandCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('SalaryBandCode', SalaryBandCode.editValue);
        }, this);

        if (InceptionDate) InceptionDate.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('InceptionDate', InceptionDate.getValue());
        }, this);

        if (MemberLocationCode) MemberLocationCode.on('select', function (combo, record, index) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Location', MemberLocationCode.editValue);
        }, this);

        if (ISExistingMember) ISExistingMember.on('check', function (field, checked) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('ISExistingMember', ISExistingMember.getValue());
        }, this);

        if (Existing_Insurer) Existing_Insurer.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Existing_Insurer', Existing_Insurer.getValue());
        }, this);
        if (DateOfEntry) DateOfEntry.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('DateOfEntry', DateOfEntry.getValue());

        }, this);
        if (COCExpiry) COCExpiry.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('COCExpiry', COCExpiry.getValue());
        }, this);
        if (Occupation) Occupation.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Occupation', Occupation.getValue());
        }, this);
        if (Address1) Address1.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Address1', Address1.getValue());
        }, this);
        if (Address2) Address2.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Address2', Address2.getValue());
        }, this);
        if (PhoneNo) PhoneNo.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('PhoneNo', PhoneNo.getValue());
        }, this);
        if (MobileNo) MobileNo.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('MobileNo', MobileNo.getValue());
        }, this);
        if (Email_ID) Email_ID.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Email_ID', Email_ID.getValue());
        }, this);
        if (Height) Height.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Height', Height.getValue());
        }, this);
        if (Weight) Weight.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('Weight', Weight.getValue());
        }, this);
        if (PassportNo) PassportNo.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('PassportNo', PassportNo.getValue());
        }, this);
        if (StaffId) StaffId.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('StaffId', StaffId.getValue());
        }, this);
        if (DiscountPCT) DiscountPCT.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('DiscountPCT', DiscountPCT.getValue());
        }, this);
        if (LoadingPCT) LoadingPCT.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('LoadingPCT', LoadingPCT.getValue());
        }, this);
        if (EmiratesId) EmiratesId.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('EmiratesId', EmiratesId.getValue());
        }, this);
        if (MemberSince) MemberSince.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('MemberSince', MemberSince.getValue());
        }, this);

        if (EntryTypeCode) EntryTypeCode.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('EntryType', EntryTypeCode.editValue);
        }, this);

        if (HAADFine) HAADFine.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('HAADFine', HAADFine.getValue());
        }, this);

        if (WaiveAmount) WaiveAmount.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('WaiveAmount', WaiveAmount.getValue());
        }, this);

        if (NoOfDays) NoOfDays.on('valid', function (text1, oldval, newval) {
            if (PolicyMemberDtlList.lastSelectedRecord)
                PolicyMemberDtlList.lastSelectedRecord.set('NoOfDays', NoOfDays.getValue());
        }, this);

        var AgentCode = Ext.getCmp('NGIPolicy-AgentCode');
        var BrokerCode = Ext.getCmp('NGIPolicy-BrokerCode');
        var OwnerTypeCode = Ext.getCmp('NGIPolicy-OwnerTypeCode');

        if (form.selectedIndex != -1) {
            OwnerTypeCode.enable();
            BrokerCode.enable();
            OwnerTypeCode.enable();
        }


        if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {

            NgiPolicySelectRowClikAndSelect();

        }, this);

    }
}

function NgiPolicySelectRowClikAndSelect(combo, record, index) {

    var EntryTypeCode = Ext.getCmp('NGIPolicy-EntryTypeCode');
    var Existing_Insurer = Ext.getCmp('NGIPolicy-Existing_Insurer');
    var DateOfEntry = Ext.getCmp('NGIPolicy-DateOfEntry');

    if (EntryTypeCode.editValue == 2) {//Residants
        Existing_Insurer.allowBlank = false; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
    else {
        Existing_Insurer.allowBlank = true; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
}

function OnTemplatePolicyCodeChange(combo, record, index) {
    var PolicyCode = Ext.getCmp('NGIPolicy').selectedIndex;


    PolicyCode = combo.getValue();


    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ElementTemplate',
            Template: PolicyCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnTemplatePolicyCodeChangeComplete, this);
}

function OnTemplatePolicyCodeChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnTemplatePolicyCodeChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var grdFunctionality = Ext.getCmp('PolicyElementsDtlList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();

    var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;

    var PolicyElementsDtlList = Ext.getCmp('PolicyElementsDtlList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Provider
        var Record = responseText.datum[cnt];
        PolicyElementsDtlList.storeId += 1;
        var newRecord = new PolicyElementsDtlList.recordType({
            ID: PolicyElementsDtlList.storeId,
            Serialno: PolicyElementsDtlList.storeId,
            Element_Code: Record.ElementCode,
            Element_Name: Record.ElementName,
            PolicyCode: (PrimKey == -1 ? 1 : PrimKey),
            Description: Record.Remarks,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            CreatedIn: null,
            CreatedOn: null,
            CustomerCode: null,
            LegalentityCode: null,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PolicyElementsDtlList.stopEditing();
        PolicyElementsDtlList.store.add(newRecord);
        PolicyElementsDtlList.store.totalLength = PolicyElementsDtlList.store.getTotalCount() + 1;
        PolicyElementsDtlList.pageBar.updateInfo();

    }


}

function CalculatePerimunButtonHandler(form, login) {

    var BasePremium = Ext.getCmp('NGIPolicy-Base_perimum').getValue();

    if (BasePremium = '' || BasePremium == null || BasePremium == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please enter Gross Price value!');
        return;
    }
    var CategoryCount = Ext.getCmp('NGIPolicyDtlList').store.getCount();
    if (CategoryCount < 1) {
        Ext.MessageBox.alert(login.modulename, 'Category Detail Must have one Record! Cannot Calculate!');
        return;
    }
    var MemberCount = Ext.getCmp('PolicyMemberDtlList').store.getCount();
    if (MemberCount < 1) {
        Ext.MessageBox.alert(login.modulename, 'Member Detail Must have one Record! Cannot Calculate!');
        return;
    }

    var NGIPolicyDtlList = Ext.getCmp('NGIPolicyDtlList');
    var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');
    for (cnt = 0; cnt < PolicyMemberDtlList.store.getCount() ; cnt++) {
        MemberRecord = PolicyMemberDtlList.store.getAt(cnt);
        var Valid = false;
        for (Count = 0; Count < NGIPolicyDtlList.store.getCount() ; Count++) {
            CategoryRecord = NGIPolicyDtlList.store.getAt(Count);
            if (MemberRecord.get('CategoryCode') == CategoryRecord.get('CategoryCode'))
                Valid = true;
        }
        if (!Valid) {
            Ext.MessageBox.alert(login.modulename, 'In Member Detail, Member ' + MemberRecord.get('MemberName') + ' Must have one of the Category in Category Detail!');
            return;
            break;
        }
    }
    var PolicyMemberPremiumList = Ext.getCmp('PolicyMemberPremiumList');
    if (PolicyMemberPremiumList.store.getCount() > 0) {
        Ext.MessageBox.confirm(login.modulename, 'Premium value already calculated. Do you want to calculate again ?', function (button) {
            if (button == 'yes') {

                onBusinessTypeclear('PolicyMemberPremiumList');

                var PolicyMemberDetecord = [];
                var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');
                var count = 0
                for (cnt = 0; cnt < PolicyMemberDtlList.store.getCount() ; cnt++) {
                    PolicyMemberDetecord.push(Ext.encode(PolicyMemberDtlList.store.getAt(cnt).data));
                }

                var PolicyMemberDetecordRow = '[' + PolicyMemberDetecord.join(',') + ']';


                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'PolicyBenefitPremiumFilter',
                        PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex,
                        PolicyMemberDetecordRow: PolicyMemberDetecordRow,
                        BasePremium: Ext.getCmp('NGIPolicy-Base_perimum').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });

                Ext.Ajax.on('requestcomplete', PolicyBenefitPremiumFilterCompleted, this);
            }
        }, this);
    }
    else {
        onBusinessTypeclear('PolicyMemberPremiumList');

        var PolicyMemberDetecord = [];
        var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');
        var count = 0
        for (cnt = 0; cnt < PolicyMemberDtlList.store.getCount() ; cnt++) {
            PolicyMemberDetecord.push(Ext.encode(PolicyMemberDtlList.store.getAt(cnt).data));
        }

        var PolicyMemberDetecordRow = '[' + PolicyMemberDetecord.join(',') + ']';


        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'PolicyBenefitPremiumFilter',
                PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex,
                PolicyMemberDetecordRow: PolicyMemberDetecordRow,
                BasePremium: Ext.getCmp('NGIPolicy-Base_perimum').getValue()
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });

        Ext.Ajax.on('requestcomplete', PolicyBenefitPremiumFilterCompleted, this);
    }

}

function PolicyBenefitPremiumFilterCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyBenefitPremiumFilterCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var PolicyMemberDtlList = Ext.getCmp('PolicyMemberDtlList');
    var PolicyMemberPremiumDltGrid = Ext.getCmp('PolicyMemberPremiumList');

    var TotalFinalPremium = 0;

    //for (var i = 0; i < PolicyMemberDtlList.store.getCount() ; i++) {
    //    var record = PolicyMemberDtlList.store.getAt(i);

    //    PolicyMemberPremiumDltGrid.storeId += 1;
    //    //if (record.get('IsNew') == true || record.get('IsBasePremiumAvail') == 0) {}
    //    var newRecord = new PolicyMemberPremiumDltGrid.recordType({
    //        ID: PolicyMemberPremiumDltGrid.storeId,
    //        Serialno: PolicyMemberPremiumDltGrid.storeId,
    //        Policy_Mem_Code: record.get('ID'),
    //        BenefitIDCode: null,
    //        BenefitIDName: null,
    //        PremiumTypeCode: 0,
    //        PremiumTypeName: 'Base',
    //        Description: 'Base',
    //        Defaultvalue: Ext.getCmp('NGIPolicy-Base_perimum').getValue(),
    //        CalcMethodCode: 0,
    //        CalcMethodName: 'Amount',
    //        Premium_value: Ext.getCmp('NGIPolicy-Base_perimum').getValue(),
    //        LegalentityCode: 0,
    //        CustomerCode: 0,
    //        CompanyCode: record.get('CompanyCode'),
    //        LocationCode: record.get('LocationCode'),
    //        IsNew: true,
    //        IsDirty: true,
    //        IsDeleted: false,
    //        IsSavable: true,
    //        IsValid: true
    //    });
    //    TotalFinalPremium += (1 * Ext.getCmp('NGIPolicy-Base_perimum').getValue());
    //    PolicyMemberPremiumDltGrid.stopEditing();
    //    PolicyMemberPremiumDltGrid.store.add(newRecord);
    //    PolicyMemberPremiumDltGrid.store.totalLength = PolicyMemberPremiumDltGrid.store.getTotalCount() + 1;
    //    PolicyMemberPremiumDltGrid.pageBar.updateInfo();
    //    record.set('IsDirty', true);

    //}

    for (cnt = 0; cnt < responseText.MemberBenefitdatum.length; cnt++) { //Member Detalis
        var Record = responseText.MemberBenefitdatum[cnt];
        var DocAvailable = false;

        PolicyMemberPremiumDltGrid.storeId += 1;
        var newRecord = new PolicyMemberPremiumDltGrid.recordType({
            ID: PolicyMemberPremiumDltGrid.storeId,
            Serialno: PolicyMemberPremiumDltGrid.storeId,
            Policy_Mem_Code: Record.MemberCode,
            PremiumTypeCode: Record.PremiumType,
            PremiumTypeName: Record.PremiumType == 0 ? 'Base' : 'Benefit',
            Defaultvalue: Record.Premium,
            CalcMethodCode: 0,
            CalcMethodName: 'Amount',
            Premium_value: Record.Premium,
            LegalentityCode: 0,
            CustomerCode: 0,
            Description: Record.Description,
            BenefitIDCode: Record.BeniftCode,
            BenefitIDName: Record.BenefitId,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        TotalFinalPremium += (1 * Record.Premium);
        PolicyMemberPremiumDltGrid.stopEditing();
        PolicyMemberPremiumDltGrid.store.add(newRecord);
        PolicyMemberPremiumDltGrid.store.totalLength = PolicyMemberPremiumDltGrid.store.getTotalCount() + 1;
        PolicyMemberPremiumDltGrid.pageBar.updateInfo();
    }
    var detailGrid = Ext.getCmp('PolicyMemberDtlList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
    Ext.getCmp('NGIPolicy-Final_premium').setValue(TotalFinalPremium);
}




var GPolicyID = '';
var GPolicyName = '';
var GPolicy = '';
var GMemberIDCode = '';
var GGroupCode = '';
var PolicyCategoryCode = '';
function PolicyCategorydtlAddButton(form, login) {

    var NGIPolicy = Ext.getCmp('NGIPolicy');
    if (NGIPolicy.selectedIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    else {

        var NGIPolicyDtlList = Ext.getCmp('NGIPolicyDtlList');
        var record = '';
        var Count = NGIPolicyDtlList.store.getCount();
        for (i = 0; i < Count ; i++) {
            record += NGIPolicyDtlList.store.getAt(i).get('CategoryCode');
            if (i < Count - 1)
                record += ',';
        }
        PolicyCategoryCode = record;
        GPolicyID = Ext.getCmp('NGIPolicy-PolicyId').getValue();
        GPolicyName = Ext.getCmp('NGIPolicy-PolicyName').getValue();
        GGroupCode = Ext.getCmp('NGIPolicy-GroupCode').editValue;

        GPolicy = NGIPolicy.selectedIndex;

        var PolicyCategorydtl = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.Policy';
        var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/Policy.xml';
        var PKey = -1;
        var WidgetTitle = 'Policy';
        PolicyCategorydtl.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
    }

}



function Policy(form, login) {

    if (!form.isview) {

        var PolicyOverRideProviderDtlList = Ext.getCmp('PolicyOverRideProviderDtlList');
        var PolicyOverRidePerProviderDtlList = Ext.getCmp('PolicyOverRidePerProviderDtlList');
        if (form.selectedIndex == -1) {
            Ext.getCmp('Policy-DedectableTypeCode').setComboValue(2);
            Ext.getCmp('Policy-LimitTypeCode').setComboValue(2);
            Ext.getCmp('Policy-CoInTypeCode').setComboValue(2);
            Ext.getCmp('Policy-OONDedectableTypeCode').setComboValue(2);
            Ext.getCmp('Policy-OONCoInTypeCode').setComboValue(2);
        }
        var UbipCode = Ext.getCmp('Policy-UbipCode');
        UbipCode.enable();
        UbipCode.allowBlank = true;
        UbipCode.isValid();
        var Limits = Ext.getCmp('Policy-Limits');
        var LimitsTypeCode = Ext.getCmp('Policy-LimitTypeCode');
        var OONDedectableValue = Ext.getCmp('Policy-OONDedectableValue');
        var OONDedectableTypeCode = Ext.getCmp('Policy-OONDedectableTypeCode');
        var DedectableTypeCode = Ext.getCmp('Policy-DedectableTypeCode');
        var DedectableValue = Ext.getCmp('Policy-DedectableValue');

        var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');
        PolicyBenefitsDtlList.store.on('load', function (store, record, options) {
            Ext.getCmp('PolicyBenefitsDtlList_addNew').setVisible(false);
        }, this);

        Limits.on('change', function (field) {
            var val = Limits.getValue();
            if (OONDedectableValue.getValue() == null || OONDedectableValue.getValue() == '') {
                OONDedectableValue.setValue(val);
            }
            if (DedectableValue.getValue() == null || DedectableValue.getValue() == '') {
                DedectableValue.setValue(val);
            }
        }, this);

        if (LimitsTypeCode) LimitsTypeCode.on('select', function (combo, record, index) {
            var comboval = LimitsTypeCode.editValue;
            if (OONDedectableValue.getValue() == Limits.getValue()) {
                OONDedectableTypeCode.setComboValue(comboval);
            }
            if (DedectableValue.getValue() == Limits.getValue()) {
                DedectableTypeCode.setComboValue(comboval);
            }
        }, this);

        form.findById('PolicyOverRideProviderDtlList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 0);
            evt.record.set('LimitTypeName', 'Amount');
            evt.record.set('CoInTypeCode', 0);
            evt.record.set('CoInTypeName', 'Amount');
            evt.record.set('DedectableTypeCode', 0);
            evt.record.set('DedectableTypeName', 'Amount');
            evt.record.set('OONDedectableTypeCode', 0);
            evt.record.set('OONDedectableTypeName', 'Amount');
            evt.record.set('OONCoInTypeCode', 0);
            evt.record.set('OONCoInTypeCodeName', 'Amount');

        }, this);
        form.findById('PolicyOverRidePerProviderDtlList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 0);
            evt.record.set('LimitTypeName', 'Amount');
            evt.record.set('CoInTypeCode', 0);
            evt.record.set('CoInTypeName', 'Amount');
            evt.record.set('DedectableTypeCode', 0);
            evt.record.set('DedectableTypeName', 'Amount');
            evt.record.set('OONDedectableTypeCode', 0);
            evt.record.set('OONDedectableTypeName', 'Amount');
            evt.record.set('OONCoInTypeCode', 0);
            evt.record.set('OONCoInTypeCodeName', 'Amount');
        }, this);

        var PolicyExcludedCountriesDtlList = Ext.getCmp('PolicyExcludedCountriesDtlList');
        var PolicyExcludedCitiesDtlList = Ext.getCmp('PolicyExcludedCitiesDtlList');
        var PolicyExcludedStatesDtlList = Ext.getCmp('PolicyExcludedStatesDtlList');

        var total1 = Ext.getCmp('Policy-TotalPremium');
        var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');

        PolicyBenefitsDtlList.on('afteredit', function (e) {

            var AmountSum1 = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                if (e.grid.store.getAt(i).get('Active') == true)
                    AmountSum1 += (1 * e.grid.store.getAt(i).get('DefaultPremium'));
            }

            total1.setValue(AmountSum1);
        }, this);

        var CardTextArea = Ext.getCmp('Policy-CardTextArea');
        var PolicyAgeWizePremiumDtlList = Ext.getCmp('PolicyAgeWizePremiumDtlList');

        PolicyAgeWizePremiumDtlList.on('rowclick', function (grid, rowIndex, e) {
            PolicyAgeWizePremiumDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);

            CardTextArea.setValue(Record.get('CardText'));
        }, this);

        PolicyAgeWizePremiumDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            PolicyAgeWizePremiumDtlList.lastSelectedRecord = Record;
            CardTextArea.setValue(Record.get('CardText'));
        }, this);


        if (CardTextArea) CardTextArea.on('valid', function (text1, oldval, newval) {
            if (PolicyAgeWizePremiumDtlList.lastSelectedRecord)
                PolicyAgeWizePremiumDtlList.lastSelectedRecord.set('CardText', CardTextArea.getValue())
        }, this);


        var CardText = Ext.getCmp('Policy-CardText');
        var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');

        PolicyBenefitsDtlList.on('rowclick', function (grid, rowIndex, e) {
            PolicyBenefitsDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);

            CardText.setValue(Record.get('CardText'));
        }, this);

        PolicyBenefitsDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            PolicyBenefitsDtlList.lastSelectedRecord = Record;
            CardText.setValue(Record.get('CardText'));
        }, this);


        if (CardText) CardText.on('valid', function (text1, oldval, newval) {
            if (PolicyBenefitsDtlList.lastSelectedRecord)
                PolicyBenefitsDtlList.lastSelectedRecord.set('CardText', CardText.getValue())
        }, this);


        //var total1 = Ext.getCmp('Policy-TotalPremium');
        //  var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');
        //  PolicyBenefitsDtlList.store.on('load', function (store, record, options) {

        //      var Total11 = 0;
        //      for (var i = 0; i < store.getCount() ; i++) {
        //          var record = store.getAt(i);
        //          if (record.get('Active') == true) Total11 += (1 * record.get('DefaultPremium'));

        //      }
        //      total1.setValue(Total11);

        //  }, this);

        PolicyBenefitsDtlList.getColumnModel().getColumnById('Active').on('click', onTotalPremiumActiveClick, this);

        /*//by compassdev9 assign by compassemp
    Ext.getCmp('PolicyBenefitsDtlList').on('beforedelete', function (record) {
        Ext.getCmp('PolicyBenefitsDtlList').DelMsg = 'You Cannot Delete  Data !'

        return false;

    }, this);*/

        var CountryRecord = '';
        PolicyExcludedCountriesDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            CountryRecord = Record;
        }, this);

        PolicyExcludedCountriesDtlList.on('rowclick', function (grid, Index, e) {
            CountryRecord = grid.store.getAt(Index);
        }, this);

        PolicyExcludedCountriesDtlList.store.on('update', function (Store, Record, operation) {
            CountryRecord = Record;
        }, this);

        var ProvinceRecord = '';
        PolicyExcludedStatesDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
            ProvinceRecord = Record;
        }, this);

        PolicyExcludedStatesDtlList.on('rowclick', function (grid, Index, e) {
            ProvinceRecord = grid.store.getAt(Index);
        }, this);

        PolicyExcludedStatesDtlList.on('afteredit', function (e) {
            ProvinceRecord = e.grid.store.getAt(i)
        }, this);

        PolicyExcludedStatesDtlList.store.on('update', function (Store, Record, operation) {
            ProvinceRecord = Record;
        }, this);

        var ProvinceCode = Ext.getCmp('PolicyExcludedStatesDtl-ProvinceCode');
        if (ProvinceCode) ProvinceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (CountryRecord != '')
                evt.combo.store.baseParams.filter = " GP.COUNTRYCODE in (" + CountryRecord.get('CountryCode') + ")";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        var PlaceCode = Ext.getCmp('PolicyExcludedCitiesDtl-PlaceCode');
        if (PlaceCode) PlaceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (ProvinceRecord != '')
                evt.combo.store.baseParams.filter = "gp.placecode in (select PLACECODE from genPlace  where PROVINCECODE in (" + ProvinceRecord.get('ProvinceCode') + "))";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        if (!form.isview) {
            Ext.getCmp('Policy-UbipCode').enable();
            Ext.getCmp('Policy-FrontingSettingCode').disable();
            if (form.selectedIndex != -1) {
                var IsfrontingGroup = Ext.getCmp('Policy-IsfrontingGroup');
                if (IsfrontingGroup.getValue() == true)
                    Ext.getCmp('Policy-FrontingSettingCode').enable();
                else
                    Ext.getCmp('Policy-FrontingSettingCode').disable();
            }

            var IsfrontingGroup = Ext.getCmp('Policy-IsfrontingGroup');
            if (IsfrontingGroup) IsfrontingGroup.on('check', PolcyIsfrontingGroupCheck, this);

            var Category_Code = Ext.getCmp('Policy-CategoryCode');
            var GroupCode = Ext.getCmp('Policy-GroupCode');
            var FrontingSettingCode = Ext.getCmp('Policy-FrontingSettingCode');

            if (Category_Code) Category_Code.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                if (PolicyCategoryCode != '') {
                    evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE not in (" + PolicyCategoryCode + ") and Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where Status=0 and GROUP_CODE=" + GroupCode.editValue + ") ";
                }
                else {
                    evt.combo.store.baseParams.filter = "  Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where Status=0 and GROUP_CODE=" + GroupCode.editValue + ") ";
                }
            }, this);


            //if (FrontingSettingCode) FrontingSettingCode.on('beforequery', function (evt) {

            //    evt.combo.lastQuery = '1=2';
            //    evt.combo.store.baseParams.filter = " Ins.INSCODE in (select FINSURANCE from IM_FRONTING_CONTRACTS) ";

            //}, this);


            if (GroupCode) GroupCode.on('select', function (combo, record, index) {
                Category_Code.clearValue();
            }, this);


            var GaCode = Ext.getCmp('PolicyExcludedGeograficAreasDtl-GaIDCode');
            /*
            if (GaCode) GaCode.on('beforequery', function (evt) {
                var Nerworkcode = '';
                var CoveredNetowrks = Ext.getCmp('PolicyCoveredNetowrksDtlList');
                var cnt = CoveredNetowrks.store.getCount();
                for (var i = 0; i < cnt ; i++) {
                    Nerworkcode += CoveredNetowrks.store.getAt(i).get('NetworkIDCode');
                    if (i < cnt - 1) Nerworkcode += ',';
                }
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " GACODE in(select GACODE from IM_NETWORKSGEOGRAPHICDET where NETWORKCODE in(" + Nerworkcode + ")) ";
    
            }, this);
            */
            //var BenefitIDCode = Ext.getCmp('PolicyBenefitsDtl-BenefitIDCode');

            //if (BenefitIDCode) BenefitIDCode.on('beforequery', function (evt) {
            //    evt.combo.lastQuery = '1=2';
            //    evt.combo.store.baseParams.filter = " BEN.BENEFIT_CODE in(select BENEFIT_CODE from  IM_PLAN_BENEFITS where PLAN_CODE=" + Ext.getCmp('Policy-PlanCode').editValue + ") ";

            //}, this);

            var PolicyPlanCode = Ext.getCmp('Policy-PlanCode');

            PolicyPlanCode.on('select', OnPolicyPlanCodeChange, this);

            var NetworkID = Ext.getCmp('PolicyCoveredNetowrksDtl-NetworkIDCode');

            if (NetworkID) NetworkID.on('select', function (combo, record, index) {

                DetailStore1 = Ext.getCmp('PolicyExcludedCountriesDtlList').getStore();
                var filter = '';
                var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyExcludedCountriesDtl&filter=" + filter;
                if (DetailStore1) {
                    DetailStore1.proxy = new Ext.data.HttpProxy({
                        url: DetUrl
                    });
                    DetailStore1.load({
                        params: {
                            start: 0,
                            limit: 20
                        }

                    });
                }

                onBusinessTypeclear('PolicyExcludedCountriesDtlList');


                DetailStore1 = Ext.getCmp('PolicyExcludedStatesDtlList').getStore();
                var filter = '';
                var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyExcludedStatesDtl&filter=" + filter;
                if (DetailStore1) {
                    DetailStore1.proxy = new Ext.data.HttpProxy({
                        url: DetUrl
                    });
                    DetailStore1.load({
                        params: {
                            start: 0,
                            limit: 20
                        }

                    });
                }

                onBusinessTypeclear('PolicyExcludedStatesDtlList');

                DetailStore1 = Ext.getCmp('PolicyExcludedCitiesDtlList').getStore();
                var filter = '';
                var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyExcludedCitiesDtl&filter=" + filter;
                if (DetailStore1) {
                    DetailStore1.proxy = new Ext.data.HttpProxy({
                        url: DetUrl
                    });
                    DetailStore1.load({
                        params: {
                            start: 0,
                            limit: 20
                        }

                    });
                }

                onBusinessTypeclear('PolicyExcludedCitiesDtlList');
            }, this);

            if ((GPolicyID != null && GPolicyID != '') && (GPolicyName != null && GPolicyName != '')) {

                Ext.getCmp('Policy-PolicyId').setValue(GPolicyID);
                Ext.getCmp('Policy-PolicyName').setValue(GPolicyName);
                Ext.getCmp('Policy-PolicyCode').setValue(GPolicy);
                Ext.getCmp('Policy-GroupCode').setComboValue(GGroupCode);

                GPolicyID = 0, GPolicyName = '', GPolicy = '', GGroupCode = 0;
            }
            /*
            var PolicyCoveredNetowrksDtlList = Ext.getCmp('PolicyCoveredNetowrksDtlList');
            for (var i = 0; i < PolicyCoveredNetowrksDtlList.store.count; i++) {
    
            }*/


            var ProviderCode = Ext.getCmp('PolicyExcludedProvidersDtl-ProviderCode');
            var PKey = Ext.getCmp('Policy').selectedIndex;
            if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                var IncludeProviderGrid = Ext.getCmp('PolicyIncludeProvidersDtlList');
                var ProviderCodes = '';
                var count = IncludeProviderGrid.store.getCount();
                for (var i = 0; i < count ; i++) {
                    ProviderCodes += IncludeProviderGrid.store.getAt(i).get('ProviderCode') + ',';
                }
                if (ProviderCodes != '' && ProviderCodes != null) ProviderCodes = ProviderCodes.substring(0, ProviderCodes.length - 1);
                if (ProviderCodes != '' && ProviderCodes != null) {
                    evt.combo.store.baseParams.filter = (" pro.PROVIDERCODE not in (" + ProviderCodes + ") ");
                }
                else
                    //evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PLANPROVIDERDTL where PLAN_CODE=" + PlanCode.editValue + ")";
                    evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PROVIDER_NETWORK_LINK where NETWORKCODE in (select NETWORKCODE from IM_POLICYCOVEREDNETWORK where PCDCODE=" + PKey + " and ACTIVE=1  ))";

            }, this);

            Ext.getCmp('Policy_editform').on('close', onBeforeclosePolicyPopUp, this);
        }

        var PolicyCoveredNetowrksDtlList = Ext.getCmp('PolicyCoveredNetowrksDtlList');

        PolicyCoveredNetowrksDtlList.on('beforedelete', function (record) {
            Ext.getCmp('PolicyCoveredNetowrksDtlList').DelMsg = 'You Cannot Delete Data !'
            if (record.get('IsNew') == false)
                return false;
        }, this);

        var ElementTemplateCode = Ext.getCmp('Policy-ElementTemplateCode');

        if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (ElementTemplateCode != '')
                evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=0";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        ElementTemplateCode.on('select', OnTemplatePoliciesCatPolicyCodeChange, this);

        var ReportTemplateCode = Ext.getCmp('Policy-ReportTemplateCode');


        if (ReportTemplateCode) ReportTemplateCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (ReportTemplateCode != '')
                evt.combo.store.baseParams.filter = "RPT.MENUID='ID_NGIPOLICY'";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        var PlanCode = Ext.getCmp('Policy-PlanCode');
        var OwnerTypeCode = Ext.getCmp('NGIPolicy-OwnerTypeCode');

        if (PlanCode) PlanCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (PlanCode != '')
                evt.combo.store.baseParams.filter = "plan.OwnerCode=" + OwnerTypeCode.editValue + "";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }, this);

        //var Altlimit = Ext.getCmp('Policy-Altlimit');
        //if (Altlimit) Altlimit.on('change', function (field) {
        //    var Oplimit = Ext.getCmp('Policy-Oplimit');
        //    var Iplimit = Ext.getCmp('Policy-Iplimit');
        //    if (Iplimit.getValue() == null || Iplimit.getValue() == '' || Iplimit.getValue() == 0) {
        //        Iplimit.setValue(field.getValue());
        //    }
        //    if (Oplimit.getValue() == null || Oplimit.getValue() == '' || Oplimit.getValue() == 0) {
        //        Oplimit.setValue(field.getValue());
        //    }
        //}, this);

        //var EmgDetectWINetwValue = Ext.getCmp('Policy-EmgDetectWINetwValue');
        //if (EmgDetectWINetwValue) EmgDetectWINetwValue.on('change', function (field) {
        //    var EmgDetectOONetwValue = Ext.getCmp('Policy-EmgDetectOONetwValue');
        //    if (EmgDetectOONetwValue.getValue() == null || EmgDetectOONetwValue.getValue() == '' || EmgDetectOONetwValue.getValue() == 0) {
        //        EmgDetectOONetwValue.setValue(field.getValue());
        //    }
        //}, this);

        var IncludeProvider = Ext.getCmp('PolicyIncludeProvidersDtl-ProviderCode');
        if (IncludeProvider) IncludeProvider.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            //evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PLANPROVIDERDTL where PLAN_CODE=" + PlanCode.editValue + ")";
            evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PROVIDER_NETWORK_LINK where NETWORKCODE in (select NETWORKCODE from IM_POLICYCOVEREDNETWORK where PCDCODE=" + PKey + " and ACTIVE=1  ))";
        }, this);


    }
}

function OnTemplatePoliciesCatPolicyCodeChange(combo, record, index) {
    var PolicyCode = Ext.getCmp('Policy').selectedIndex;


    PolicyCode = combo.getValue();


    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ElementTemplate',
            Template: PolicyCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnTemplatePoliciesCatPolicyCodeChangeComplete, this);

}

function OnTemplatePoliciesCatPolicyCodeChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnTemplatePoliciesCatPolicyCodeChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var grdFunctionality = Ext.getCmp('PolicyElementDltList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();

    var PrimKey = Ext.getCmp('Policy').selectedIndex;

    var PolicyElementDltList = Ext.getCmp('PolicyElementDltList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Element Detalis
        var Record = responseText.datum[cnt];
        PolicyElementDltList.storeId += 1;
        var newRecord = new PolicyElementDltList.recordType({
            ID: PolicyElementDltList.storeId,
            Serialno: PolicyElementDltList.storeId,
            Element_Code: Record.ElementCode,
            Element_Name: Record.ElementName,
            PCDCODE: (PrimKey == -1 ? 1 : PrimKey),
            Description: Record.Remarks,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            CustomerCode: 0,
            LegalentityCode: 0,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PolicyElementDltList.stopEditing();
        PolicyElementDltList.store.add(newRecord);
        PolicyElementDltList.store.totalLength = PolicyElementDltList.store.getTotalCount() + 1;
        PolicyElementDltList.pageBar.updateInfo();

    }


}

function onBeforeclosePolicyPopUp(form, action) {

    var detailGrid = Ext.getCmp('NGIPolicyDtlList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}

function onTotalPremiumActiveClick(column, e, record, dataindex) {
    var total1 = Ext.getCmp('Policy-TotalPremium');
    var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');

    var AmountSum1 = 0;
    for (var i = 0; i < PolicyBenefitsDtlList.store.getCount() ; i++) {
        var record = PolicyBenefitsDtlList.store.getAt(i);
        //  if (PolicyBenefitsDtlList.store.getAt(i).get('Active') == true)
        if (record.get('Active') == true)
            AmountSum1 += (1 * record.get('DefaultPremium'));
    }

    total1.setValue(AmountSum1);
}


function OnPolicyPlanCodeChange(combo, record, index) {

    onBusinessTypeclear('PolicyCoveredNetowrksDtlList');
    onBusinessTypeclear('PolicyExcludedGeograficAreasDtlList');
    onBusinessTypeclear('PolicyExcludedCountriesDtlList');
    onBusinessTypeclear('PolicyExcludedStatesDtlList');
    onBusinessTypeclear('PolicyExcludedCitiesDtlList');
    onBusinessTypeclear('PolicyBenefitsDtlList');

    var PlanCode = Ext.getCmp('Policy-PlanCode').editValue;



    var CategoryCode = Ext.getCmp('Policy-CategoryCode').getValue();

    if (CategoryCode == '') {
        Ext.MessageBox.alert(login.modulename, 'Select the Category Name to Proceed!');
        Ext.getCmp('Policy-PlanCode').clearValue();
        return true;
    }

    var CategoryCode = Ext.getCmp('Policy-CategoryCode').editValue;
    var PolicyCode = Ext.getCmp('NGIPolicy').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyLoad',
            PlanCode: PlanCode,
            CategoryCode: CategoryCode,
            PolicyCode: PolicyCode,
            TypeCode: 0,
            PolicyType: 0,
            IsChangePlan: 0
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PolicyLoadReqComplete, this);

}

function PolicyLoadReqComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', PolicyLoadReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PolicyIncludeProvidersDtlList = Ext.getCmp('PolicyIncludeProvidersDtlList');

        for (cnt = 0; cnt < responseText.providertotalCount; cnt++) { //Provider
            var ProviderRecord = responseText.providerdatum[cnt];
            PolicyIncludeProvidersDtlList.storeId += 1;
            var newRecord = new PolicyIncludeProvidersDtlList.recordType({
                ID: PolicyIncludeProvidersDtlList.storeId,
                Serialno: PolicyIncludeProvidersDtlList.storeId,
                ProviderCode: ProviderRecord.ProviderCode,
                ProviderName: ProviderRecord.ProviderName,
                Active: 1,
                PCDCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyIncludeProvidersDtlList.stopEditing();
            PolicyIncludeProvidersDtlList.store.add(newRecord);
            PolicyIncludeProvidersDtlList.store.totalLength = PolicyIncludeProvidersDtlList.store.getTotalCount() + 1;
            PolicyIncludeProvidersDtlList.pageBar.updateInfo();

        }

        var PolicyExcludedGeograficAreasDtlList = Ext.getCmp('PolicyExcludedGeograficAreasDtlList');

        for (cnt = 0; cnt < responseText.geographictotalCount; cnt++) {   //Gerograhpic Area
            var Geographicrec = responseText.geographicdatum[cnt];

            PolicyExcludedGeograficAreasDtlList.storeId += 1;

            var newRecord = new PolicyExcludedGeograficAreasDtlList.recordType({
                ID: PolicyExcludedGeograficAreasDtlList.storeId,
                Serialno: PolicyExcludedGeograficAreasDtlList.storeId,
                GaIDName: Geographicrec.GeoGraphicName,
                GaIDCode: Geographicrec.GeoGraphicCode,
                GaName: Geographicrec.GAName,
                PCDCode: 1,
                Active: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyExcludedGeograficAreasDtlList.stopEditing();
            PolicyExcludedGeograficAreasDtlList.store.add(newRecord);
            PolicyExcludedGeograficAreasDtlList.store.totalLength = PolicyExcludedGeograficAreasDtlList.store.getTotalCount() + 1;
            PolicyExcludedGeograficAreasDtlList.pageBar.updateInfo();
            //Geographicrec.CompanyCode

        }


        var PolicyCoveredNetowrksDtlList = Ext.getCmp('PolicyCoveredNetowrksDtlList');

        for (cnt = 0; cnt < responseText.networktotalCount; cnt++) { //Network
            var NetworkRecord = responseText.networkdatum[cnt];
            PolicyCoveredNetowrksDtlList.storeId += 1;
            var newRecord = new PolicyCoveredNetowrksDtlList.recordType({
                ID: PolicyCoveredNetowrksDtlList.storeId,
                Serialno: PolicyCoveredNetowrksDtlList.storeId,
                NetworkIDCode: NetworkRecord.NetworkIDCode,
                NetworkIDName: NetworkRecord.NetworkIDName,
                NetworkName: NetworkRecord.NetworkName,
                ApplicableForCode: NetworkRecord.ApplicableForCode,
                ApplicableForName: NetworkRecord.ApplicableForName,
                Active: 1,
                PCDCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyCoveredNetowrksDtlList.stopEditing();
            PolicyCoveredNetowrksDtlList.store.add(newRecord);
            PolicyCoveredNetowrksDtlList.store.totalLength = PolicyCoveredNetowrksDtlList.store.getTotalCount() + 1;
            PolicyCoveredNetowrksDtlList.pageBar.updateInfo();

        }
        var total = 0;
        var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');
        for (cnt = 0; cnt < responseText.benifittotalCount; cnt++) {  //Benefit Detail
            var BenefitRecord = responseText.benifitdatum[cnt];
            PolicyBenefitsDtlList.storeId += 1;
            var newRecord = new PolicyBenefitsDtlList.recordType({
                ID: PolicyBenefitsDtlList.storeId,
                Serialno: PolicyBenefitsDtlList.storeId,
                BenefitIDCode: BenefitRecord.BenefitIDCode,
                BenefitIDName: BenefitRecord.BenefitIDName,
                BenefitName: BenefitRecord.BenefitName,
                ParentName: BenefitRecord.ParentName,
                DefaultPremium: BenefitRecord.DefaultPremium,
                TypeCode: BenefitRecord.BenefitTypeCode,
                TypeName: BenefitRecord.BenefitTypeName,
                CardText: BenefitRecord.CardText,
                ApplySettingPremium: BenefitRecord.ApplySettingPremium,
                ApplyFullPermiumRefund: BenefitRecord.ApplyFullPermiumRefund,
                Active: 1,
                PCDCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            total += BenefitRecord.DefaultPremium;
            PolicyBenefitsDtlList.stopEditing();
            PolicyBenefitsDtlList.store.add(newRecord);
            PolicyBenefitsDtlList.store.totalLength = PolicyBenefitsDtlList.store.getTotalCount() + 1;
            PolicyBenefitsDtlList.pageBar.updateInfo();

        }
        var tot = Ext.getCmp('Policy-TotalPremium');
        tot.setValue(total);
        var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');
        PolicyBenefitsDtlList.store.load({
            params: {
                start: 0,
                limit: PolicyBenefitsDtlList.pageSize
            }
        });


        var PolicyExcludedCountriesDtlList = Ext.getCmp('PolicyExcludedCountriesDtlList');
        for (cnt = 0; cnt < responseText.countrytotalCount; cnt++) { //Country Detail
            var CountryRecord = responseText.countrydatum[cnt];
            PolicyExcludedCountriesDtlList.storeId += 1;
            var newRecord = new PolicyExcludedCountriesDtlList.recordType({
                ID: PolicyExcludedCountriesDtlList.storeId,
                Serialno: PolicyExcludedCountriesDtlList.storeId,
                CountryCode: CountryRecord.CountryCode,
                CountryName: CountryRecord.CountryName,
                PCDCode: 1,
                Active: 1,
                PolicyExcludedStatesDtlList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyExcludedCountriesDtlList.stopEditing();
            PolicyExcludedCountriesDtlList.store.add(newRecord);
            PolicyExcludedCountriesDtlList.store.totalLength = PolicyExcludedCountriesDtlList.store.getTotalCount() + 1;
            PolicyExcludedCountriesDtlList.pageBar.updateInfo();

            var PolicyExcludedStatesDtlList = Ext.getCmp('PolicyExcludedStatesDtlList');

            for (subcnt = 0; subcnt < responseText.statetotalCount; subcnt++) { //State 
                var StateRecord = responseText.statedatum[subcnt];

                if (CountryRecord.ID != StateRecord.GACountryCode) continue;

                PolicyExcludedStatesDtlList.storeId += 1;
                var subnewRecord = new PolicyExcludedStatesDtlList.recordType({
                    ID: PolicyExcludedStatesDtlList.storeId,
                    Serialno: PolicyExcludedStatesDtlList.storeId,
                    ProvinceCode: StateRecord.ProvinceCode,
                    ProvinceName: StateRecord.ProvinceName,
                    PecCode: PolicyExcludedCountriesDtlList.storeId,
                    Active: 1,
                    PolicyExcludedCitiesDtlList: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PolicyExcludedStatesDtlList.stopEditing();
                PolicyExcludedStatesDtlList.store.add(subnewRecord);
                PolicyExcludedStatesDtlList.store.totalLength = PolicyExcludedStatesDtlList.store.getTotalCount() + 1;
                PolicyExcludedStatesDtlList.pageBar.updateInfo();

                var PolicyExcludedCitiesDtlList = Ext.getCmp('PolicyExcludedCitiesDtlList');

                for (subsubcnt = 0; subsubcnt < responseText.citytotalCount; subsubcnt++) { //City Detail
                    var CityRecord = responseText.citydatum[subsubcnt];

                    if (StateRecord.ID != CityRecord.GAEmirateCode) continue;

                    PolicyExcludedCitiesDtlList.storeId += 1;
                    var SubsubnewRecord = new PolicyExcludedCitiesDtlList.recordType({
                        ID: PolicyExcludedCitiesDtlList.storeId,
                        Serialno: PolicyExcludedCitiesDtlList.storeId,
                        PlaceCode: CityRecord.PlaceCode,
                        PlaceName: CityRecord.PlaceName,
                        PCDCode: 1,
                        PESCode: PolicyExcludedStatesDtlList.storeId,
                        Active: 1,
                        //PolicyExcludedCitiesDtlList: null,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    PolicyExcludedCitiesDtlList.stopEditing();
                    PolicyExcludedCitiesDtlList.store.add(SubsubnewRecord);
                    PolicyExcludedCitiesDtlList.store.totalLength = PolicyExcludedCitiesDtlList.store.getTotalCount() + 1;
                    PolicyExcludedCitiesDtlList.pageBar.updateInfo();
                }
            }
        }
        var PolicyExcludedCountriesDtlList = Ext.getCmp('PolicyExcludedCountriesDtlList');
        PolicyExcludedCountriesDtlList.store.load({
            params: {
                start: 0,
                limit: PolicyExcludedCountriesDtlList.pageSize
            }
        });
    }
}


function PolicyCountryButtonHandler(button, option) { //Policy
    var PlanCode = Ext.getCmp('Policy-PlanCode').editValue;
    if (PlanCode == 0 || PlanCode == null || PlanCode == '') {
        var PolicyCode = Ext.getCmp('Policy').selectedIndex;
    }
    else {
        var PolicyExcludedCountriesDtlList = Ext.getCmp('PolicyExcludedCountriesDtlList');
        var CountryCode = '';
        var Count = PolicyExcludedCountriesDtlList.store.getCount();
        for (i = 0; i < Count; i++) {
            CountryCode += PolicyExcludedCountriesDtlList.store.getAt(i).get('CountryCode') + ',';
        }
        if (CountryCode != '') {
            CountryCode = CountryCode.substring(0, CountryCode.length - 1);
        }
        var PolicyCode = CountryCode;
    }
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('Policy').selectedIndex;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //policycode
            type: 0 //Policy
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}

function IndividualPolCountryButtonHandler(button, option) {  // Individual Ploicy
    var PlanCode = Ext.getCmp('IndividualPolicies-PlanCode').editValue;
    if (PlanCode == 0 || PlanCode == null || PlanCode == '') {
        var PolicyCode = Ext.getCmp('IndividualPolicies').selectedIndex;
    }
    else {
        var IPExcludedCountriesList = Ext.getCmp('IPExcludedCountriesList');
        var CountryCode = '';
        var Count = IPExcludedCountriesList.store.getCount();
        for (i = 0; i < Count; i++) {
            CountryCode += IPExcludedCountriesList.store.getAt(i).get('CountryCode') + ',';
        }
        if (CountryCode != '') {
            CountryCode = CountryCode.substring(0, CountryCode.length - 1);
        }
        var PolicyCode = CountryCode;
    }
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('IndividualPolicies').selectedIndex;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //Individualpolicycode
            type: 1 //Individualpolicy
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}

function QuotationMasterCountryButtonHandler(button, option) {  //Quotation Master
    var PlanCode = Ext.getCmp('NGIQuotationMasterCategoryPopup-PlanCode').editValue;
    if (PlanCode == 0 || PlanCode == null || PlanCode == '') {
        var PolicyCode = Ext.getCmp('NGIQuotationMasterCategoryPopup').selectedIndex;
    }
    else {
        var QuotationMasterCountryList = Ext.getCmp('QuotationMasterCountryList');
        var CountryCode = '';
        var Count = QuotationMasterCountryList.store.getCount();
        for (i = 0; i < Count; i++) {
            CountryCode += QuotationMasterCountryList.store.getAt(i).get('CountryCode') + ',';
        }
        if (CountryCode != '') {
            CountryCode = CountryCode.substring(0, CountryCode.length - 1);
        }
        var PolicyCode = CountryCode;
    }
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('NGIQuotationMasterCategoryPopup').selectedIndex;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //QuotationMaster
            type: 2 //QuotationMaster
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}

function QuotationRequestCountryButtonHandler(button, option) {  //Quotation Request
    var PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').editValue;
    if (PlanCode == 0 || PlanCode == null || PlanCode == '') {
        var PolicyCode = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;
    }
    else {
        var QReqCountryList = Ext.getCmp('QReqCountryList');
        var CountryCode = '';
        var Count = QReqCountryList.store.getCount();
        for (i = 0; i < Count; i++) {
            CountryCode += QReqCountryList.store.getAt(i).get('CountryCode') + ',';
        }
        if (CountryCode != '') {
            CountryCode = CountryCode.substring(0, CountryCode.length - 1);
        }
        var PolicyCode = CountryCode;
    }
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //QuotationRequest
            type: 3 //QuotationRequest
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}

function QuotationRevisionCountryButtonHandler(button, option) {  //Quotation Revision
    var PlanCode = Ext.getCmp('QuotationRevisionCategoryPopup-PlanCode').editValue;
    if (PlanCode == 0 || PlanCode == null || PlanCode == '') {
        var PolicyCode = Ext.getCmp('QuotationRevisionCategoryPopup').selectedIndex;
    }
    else {
        var QRevCatExcludedCountriesDltList = Ext.getCmp('QRevCatExcludedCountriesDltList');
        var CountryCode = '';
        var Count = QRevCatExcludedCountriesDltList.store.getCount();
        for (i = 0; i < Count; i++) {
            CountryCode += QRevCatExcludedCountriesDltList.store.getAt(i).get('CountryCode') + ',';
        }
        if (CountryCode != '') {
            CountryCode = CountryCode.substring(0, CountryCode.length - 1);
        }
        var PolicyCode = CountryCode;
    }
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('QuotationRevisionCategoryPopup').selectedIndex;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //Quotation Revision
            type: 4 //Quotation Revision
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}


function GeographicAreaCountryButtonHandler(button, option) {  //Geograhic area
    var GeographicAreasCountryList = Ext.getCmp('GeographicAreasCountryList');
    var CountryCode = '';
    var Count = GeographicAreasCountryList.store.getCount();
    for (i = 0; i < Count; i++) {
        CountryCode += GeographicAreasCountryList.store.getAt(i).get('CountryCode') + ',';
    }
    if (CountryCode != '') {
        CountryCode = CountryCode.substring(0, CountryCode.length - 1);
    }
    var PolicyCode = CountryCode;
    if (PolicyCode == '') {
        var PolicyCode = Ext.getCmp('GeographicAreas').selectedIndex;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CountryStateCityPopup',
            primary: PolicyCode, //Geograhic area
            type: 5 //Geograhic area
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CountryStateCityPopupCompleted, this);
}
var CSCType = '';
function CountryStateCityPopupCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CountryStateCityPopupCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.CountryStateCityPopupForm = new Ext.form.FormPanel(responseText.CountryStateCityPopupCofig);
    this.CountryStateCityPopupForm.PolicyCategoryType = responseText.PolicyCategoryType;

    if (this.CountryStateCityPopupForm.PolicyCategoryType == 0) { // Policy
        CSCType = 0;
    }
    if (this.CountryStateCityPopupForm.PolicyCategoryType == 1) { // Individual Policy
        CSCType = 1;
    }
    if (this.CountryStateCityPopupForm.PolicyCategoryType == 2) { // Quotation Master
        CSCType = 2;
    }
    if (this.CountryStateCityPopupForm.PolicyCategoryType == 3) { // Quotation Request
        CSCType = 3;
    }
    if (this.CountryStateCityPopupForm.PolicyCategoryType == 4) { // Quotation Response
        CSCType = 4;
    }
    if (this.CountryStateCityPopupForm.PolicyCategoryType == 5) { // Geographic Area
        CSCType = 5;
    }
    this.CountryStateCityPopupForm.addButton({
        text: 'Select All Country',
        handler: function () {
            var PolicyCSCPopUpCountryDtlList = Ext.getCmp('PolicyCSCPopUpCountryDtlList');
            for (var cnt = 0; cnt < PolicyCSCPopUpCountryDtlList.store.getCount() ; cnt++) {

                PolicyCSCPopUpCountryDtlList.store.getAt(cnt).set('Selects', true);
            }
        },
        scope: this,
        tabIndex: this.CountryStateCityPopupForm.FormFieldsCount + 2
    });

    this.CountryStateCityPopupForm.addButton({
        text: 'Select All State',
        handler: function () {
            var PolicyCSCPopUpStateDtlList = Ext.getCmp('PolicyCSCPopUpStateDtlList');
            for (var cnt = 0; cnt < PolicyCSCPopUpStateDtlList.store.getCount() ; cnt++) {

                PolicyCSCPopUpStateDtlList.store.getAt(cnt).set('Selects', true);
            }
        },
        scope: this,
        tabIndex: this.CountryStateCityPopupForm.FormFieldsCount + 2
    });

    this.CountryStateCityPopupForm.addButton({
        text: 'Select All City',
        handler: function () {
            var PolicyCSCPopUpCityDtlList = Ext.getCmp('PolicyCSCPopUpCityDtlList');
            for (var cnt = 0; cnt < PolicyCSCPopUpCityDtlList.store.getCount() ; cnt++) {

                PolicyCSCPopUpCityDtlList.store.getAt(cnt).set('Selects', true);
            }
        },
        scope: this,
        tabIndex: this.CountryStateCityPopupForm.FormFieldsCount + 2
    });

    this.CountryStateCityPopupForm.addButton({
        text: 'Load',
        handler: function () {

            var PolicyCSCPopUpCountryDtlList = Ext.getCmp('PolicyCSCPopUpCountryDtlList');
            var CountryCode = '0,';
            var CountryModRecords = PolicyCSCPopUpCountryDtlList.store.getModifiedRecords();
            for (i = 0; i < CountryModRecords.length ; i++) {
                var record = CountryModRecords[i];
                if (record.get('Selects') == true)
                    CountryCode += record.get('ID') + ',';
            }
            if (CountryCode != '') {
                CountryCode = CountryCode.substring(0, CountryCode.length - 1);
            }
            var PolicyCSCPopUpStateDtlList = Ext.getCmp('PolicyCSCPopUpStateDtlList');
            var StateCode = '0,';
            var StateModRecords = PolicyCSCPopUpStateDtlList.store.getModifiedRecords();
            for (i = 0; i < StateModRecords.length ; i++) {
                var record = StateModRecords[i];
                if (record.get('Selects') == false)
                    StateCode += record.get('ID') + ',';
            }
            if (StateCode != '') {
                StateCode = StateCode.substring(0, StateCode.length - 1);
            }
            var PolicyCSCPopUpCityDtlList = Ext.getCmp('PolicyCSCPopUpCityDtlList');
            var citycodes = '0,';
            var CityModRecords = PolicyCSCPopUpCityDtlList.store.getModifiedRecords();
            for (i = 0; i < CityModRecords.length ; i++) {
                var record = CityModRecords[i];
                if (record.get('Selects') == false)
                    citycodes += record.get('ID') + ',';
            }
            if (citycodes != '') {
                citycodes = citycodes.substring(0, citycodes.length - 1);
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'CountryStateCityPopupSelect',
                    CSCCountryCode: CountryCode,
                    CSCStateCode: StateCode,
                    CSCCityCodes: citycodes
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', CountryStateCityPopupSelectCompleted, this);
        },
        scope: this,
        tabIndex: this.CountryStateCityPopupForm.FormFieldsCount + 2
    });

    this.CountryStateCityPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.CountryStateCityPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.CountryStateCityPopupForm.FormFieldsCount + 2
    });
    this.CountryStateCityPopupFormWindow = new Ext.Window({
        id: 'CountryStateCityPopupFormWindow',
        title: 'CountryStateCityPopup',
        closable: true,
        minimizable: false,
        width: this.CountryStateCityPopupForm.width + 10,
        height: this.CountryStateCityPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.CountryStateCityPopupForm]
    });
    this.CountryStateCityPopupForm.on('render', PolicyCountryStateCityPopUp, this);
    this.CountryStateCityPopupFormWindow.show();
}

function CountryStateCityPopupSelectCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', CountryStateCityPopupSelectCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    var MainWinID = 'Policy';

    if (CSCType == 0) { // Policy
        MainWinID = 'Policy';
    }
    if (CSCType == 1) { // Individual Policy
        MainWinID = 'IndividualPolicies';
    }
    if (CSCType == 2) { // Quotation Master
        MainWinID = 'NGIQuotationMasterCategoryPopup';
    }
    if (CSCType == 3) { // Quotation Request
        MainWinID = 'QuotationRequestCategoryPopup';
    }
    if (CSCType == 4) { // Quotation Response
        MainWinID = 'QuotationRevisionCategoryPopup';
    }
    if (CSCType == 5) { // Geographic Area
        MainWinID = 'GeographicAreas';
    }

    var loadcountrydetailid = 'PolicyExcludedCountriesDtlList';

    if (CSCType == 0) { //Policy Country
        loadcountrydetailid = 'PolicyExcludedCountriesDtlList';
    }
    if (CSCType == 1) {  // Individual Policy
        loadcountrydetailid = 'IPExcludedCountriesList';
    }
    if (CSCType == 2) { // Quotation Master
        loadcountrydetailid = 'QuotationMasterCountryList';
    }
    if (CSCType == 3) { // Quotation Request  
        loadcountrydetailid = 'QReqCountryList';
    }
    if (CSCType == 4) { // Quotation Request  
        loadcountrydetailid = 'QRevCatExcludedCountriesDltList';
    }
    if (CSCType == 5) { // Geographic Area
        loadcountrydetailid = 'GeographicAreasCountryList';
    }

    var ExcludedCountryDtlGrid = Ext.getCmp(loadcountrydetailid);

    var PolicyExcludedStatesDtlList = Ext.getCmp('PolicyExcludedStatesDtlList');

    var loadstatedetailid = 'PolicyExcludedStatesDtlList';

    if (CSCType == 0) { //Policy State
        loadstatedetailid = 'PolicyExcludedStatesDtlList';
    }
    if (CSCType == 1) { // Individual Policy State
        loadstatedetailid = 'IPExcludedStatesList';
    }
    if (CSCType == 2) { // Quotation Master State
        loadstatedetailid = 'QuotationMasterStateList';
    }
    if (CSCType == 3) { // Quotation Request State
        loadstatedetailid = 'QReqStateList';
    }
    if (CSCType == 4) { // Quotation Revision
        loadstatedetailid = 'QRevCatExcludedStatesDltList';
    }
    if (CSCType == 5) { // Geographic Area
        loadstatedetailid = 'GeographicAreasEstateList';
    }

    var ExcludedStatesDtlGrid = Ext.getCmp(loadstatedetailid);

    var PolicyExcludedCitiesDtlList = Ext.getCmp('PolicyExcludedCitiesDtlList');

    var loadcitydetailid = 'PolicyExcludedCitiesDtlList';

    if (CSCType == 0) {  //Policy City
        loadcitydetailid = 'PolicyExcludedCitiesDtlList';
    }
    if (CSCType == 1) { // Individual policy City
        loadcitydetailid = 'IPExcludedCitiesList';
    }
    if (CSCType == 2) { // QuotationMaster City
        loadcitydetailid = 'QuotationMasterCitiesList';
    }
    if (CSCType == 3) { // Quotation Request City
        loadcitydetailid = 'QReqCitiesList';
    }
    if (CSCType == 4) { // Quotation Revision City
        loadcitydetailid = 'QRevCatExcludedCitiesDltList';
    }
    if (CSCType == 5) { // Geographic Area
        loadcitydetailid = 'GeographicAreasCityList';
    }

    var ExcludedCitiesDtlGrid = Ext.getCmp(loadcitydetailid);

    var PKey = Ext.getCmp(MainWinID).selectedIndex;

    for (var pcnt = 0; pcnt < responseText.countrydatum.length ; pcnt++) {      //Country
        var CountryRecord = responseText.countrydatum[pcnt];
        ExcludedCountryDtlGrid.storeId += 1;
        var CountryServiceID = ExcludedCountryDtlGrid.storeId;
        var newRecord = new ExcludedCountryDtlGrid.recordType({

            ID: CountryServiceID,
            Serialno: CountryServiceID,
            PCDCode: (PKey == -1 ? 1 : PKey),
            Quot_CategoryCode: (PKey == -1 ? 1 : PKey),
            PolicyCategoryCode: (PKey == -1 ? 1 : PKey),
            Quotation_Code: (PKey == -1 ? 1 : PKey),
            Quot_Req_CategoryCode: (PKey == -1 ? 1 : PKey),
            QUOT_REV_CATEGORYCODE: (PKey == -1 ? 1 : PKey),
            GACode: (PKey == -1 ? 1 : PKey),
            CountryCode: CountryRecord.ID,
            CountryName: CountryRecord.CountryName,
            Active: 1,
            PolicyExcludedStatesDtlList: null,  // Policy
            IPExcludedStatesList: null,  // Individual Policy
            QuotationMasterStateList: null, // Quotation Master
            QReqStateList: null, // Quotation Request
            QRevCatExcludedStatesDltList: null, // Quotation Revision
            GeographicAreasEstateList: null, // Geographic Area
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true

        });
        ExcludedCountryDtlGrid.stopEditing();
        ExcludedCountryDtlGrid.store.add(newRecord);
        ExcludedCountryDtlGrid.store.totalLength = ExcludedCountryDtlGrid.store.getTotalCount() + 1;
        ExcludedCountryDtlGrid.pageBar.updateInfo();

        for (var subcnt = 0; subcnt < responseText.statedatum.length ; subcnt++) {//state
            var StateRecord = responseText.statedatum[subcnt];
            ExcludedStatesDtlGrid.storeId += 1;
            var StateServiceID = ExcludedStatesDtlGrid.storeId;
            if (CountryRecord.ID != StateRecord.CountryCode) continue;
            var subnewRecord = new ExcludedStatesDtlGrid.recordType({

                ID: StateServiceID,
                Serialno: StateServiceID,
                PecCode: CountryServiceID, // policy & indivudualPolicy fk
                Quot_Cat_Country_Code: CountryServiceID,  // QuotationMaster fk
                Qreq_Cat_Country_Code: CountryServiceID,   //QuotationRequest fk
                PECCode: CountryServiceID,  //Quotatin Revision
                GACountryCode: CountryServiceID, //Geographic Area
                PolicyCategoryCode: (PKey == -1 ? 1 : PKey),
                Quotation_Code: (PKey == -1 ? 1 : PKey),
                Quot_Req_CategoryCode: (PKey == -1 ? 1 : PKey),
                QUOT_REV_CATEGORYCODE: (PKey == -1 ? 1 : PKey),
                GACode: (PKey == -1 ? 1 : PKey),
                GACityCode: '',
                ProvinceCode: StateRecord.ID,
                ProvinceName: StateRecord.ProvinceName,
                CountryCode: '',
                Active: 1,
                PolicyExcludedCitiesDtlList: null, // Policy
                IPExcludedCitiesList: null, // Individual Policy
                QuotationMasterCitiesList: null, // Quotation Master
                QReqCitiesList: null, // Quotation Request
                QRevCatExcludedCitiesDltList: null, //Quotation Revision
                GeographicAreasCityList: null, // Geographic Area
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true

            });
            ExcludedStatesDtlGrid.stopEditing();
            ExcludedStatesDtlGrid.store.add(subnewRecord);
            ExcludedStatesDtlGrid.store.totalLength = ExcludedStatesDtlGrid.store.getTotalCount() + 1;
            ExcludedStatesDtlGrid.pageBar.updateInfo();

            for (var subsubcnt = 0; subsubcnt < responseText.citydatum.length ; subsubcnt++) { //City
                var CityRecord = responseText.citydatum[subsubcnt];
                ExcludedCitiesDtlGrid.storeId += 1;
                var CityServiceID = ExcludedCitiesDtlGrid.storeId;
                if (StateRecord.ID != CityRecord.ProvinceCode) continue;
                var SubsubnewRecord = new ExcludedCitiesDtlGrid.recordType({

                    ID: CityServiceID,
                    Serialno: CityServiceID,
                    PESCode: StateServiceID,  // Policy & IndividualPolicy fk
                    Quot_Cat_State_Code: StateServiceID,  // Quottion Master
                    Qreq_Cat_State_Code: StateServiceID, // Quotation Request
                    Qut_StateCode: StateServiceID, // Quotation Revision
                    GAEmirateCode: StateServiceID, // Geographic Area
                    PolicyCategoryCode: (PKey == -1 ? 1 : PKey),
                    Quotation_Code: (PKey == -1 ? 1 : PKey),
                    Quot_Req_CategoryCode: (PKey == -1 ? 1 : PKey),
                    QUOT_REV_CATEGORYCODE: (PKey == -1 ? 1 : PKey),
                    GACode: (PKey == -1 ? 1 : PKey),
                    GACountryCode: '',
                    PlaceCode: CityRecord.ID,
                    PlaceName: CityRecord.PlaceName,
                    CountryCode: '',
                    Active: 1,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true

                });
                ExcludedCitiesDtlGrid.stopEditing();
                ExcludedCitiesDtlGrid.store.add(SubsubnewRecord);
                ExcludedCitiesDtlGrid.store.totalLength = ExcludedCitiesDtlGrid.store.getTotalCount() + 1;
                ExcludedCitiesDtlGrid.pageBar.updateInfo();
            }
        }
    }
    this.CountryStateCityPopupFormWindow.close();
    CSCType = '';
}

function PolicyCountryStateCityPopUp(form, login) {

    var PolicyCSCPopUpCountryDtlList = Ext.getCmp('PolicyCSCPopUpCountryDtlList');
    //PolicyCSCPopUpCountryDtlList.getColumnModel().getColumnById('Selects').on('click', PolicyCSCPopUpCountryClick, this);

    var PolicyCSCPopUpCountryDtlList = Ext.getCmp('PolicyCSCPopUpCountryDtlList');
    var PolicyCSCPopUpCityDtlList = Ext.getCmp('PolicyCSCPopUpCityDtlList');
    var PolicyCSCPopUpStateDtlList = Ext.getCmp('PolicyCSCPopUpStateDtlList');

    var CountryRecord = '';
    PolicyCSCPopUpCountryDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
        CountryRecord = Record;
    }, this);

    PolicyCSCPopUpCountryDtlList.on('rowclick', function (grid, Index, e) {
        CountryRecord = grid.store.getAt(Index);
    }, this);

    PolicyCSCPopUpCountryDtlList.store.on('update', function (Store, Record, operation) {
        CountryRecord = Record;
    }, this);

    var ProvinceRecord = '';
    PolicyCSCPopUpStateDtlList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
        ProvinceRecord = Record;
    }, this);

    PolicyCSCPopUpStateDtlList.on('rowclick', function (grid, Index, e) {
        ProvinceRecord = grid.store.getAt(Index);
    }, this);

    PolicyCSCPopUpStateDtlList.on('afteredit', function (e) {
        ProvinceRecord = e.grid.store.getAt(i)
    }, this);

    PolicyCSCPopUpStateDtlList.store.on('update', function (Store, Record, operation) {
        ProvinceRecord = Record;
    }, this);

    //PolicyCSCPopUpCountryDtlList.getColumnModel().getColumnById('Active').on('click', onGeographicCountryActiveClick, this);

    var ProvinceCode = Ext.getCmp('PolicyCSCPopUpStateDtl-ProvinceCode');
    if (ProvinceCode) ProvinceCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (CountryRecord != '')
            evt.combo.store.baseParams.filter = " GP.COUNTRYCODE in (" + CountryRecord.get('CountryCode') + ")";
        else
            evt.combo.store.baseParams.filter = "1=2";
    }, this);

    var PlaceCode = Ext.getCmp('GeographicAreasCity-PlaceCode');
    if (PlaceCode) PlaceCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (ProvinceRecord != '')
            evt.combo.store.baseParams.filter = "gp.placecode in (select PLACECODE from genPlace  where PROVINCECODE in (" + ProvinceRecord.get('ProvinceCode') + "))";
        else
            evt.combo.store.baseParams.filter = "1=2";
    }, this);

}
function PolicyCSCPopUpCountryClick(field, Checked) {

    var PolicyCSCPopUpCountryDtlList = Ext.getCmp('PolicyCSCPopUpCountryDtlList');
    if (Checked) {


        var FilterQry = '', CountryCode = '';
        for (var i = 0; i < PolicyCSCPopUpCountryDtlList.store.getCount() ; i++) {
            var record = PolicyCSCPopUpCountryDtlList.store.getAt(i);
            if (record.get('Selects'))
                CountryCode += record.get('ID') + ',';
        }
        this.PolicyCSCPopUpCountryLoad(CountryCode);

    } else {
        var FilterQry = '', CountryCode = '';
        for (var i = 0; i < PolicyCSCPopUpCountryDtlList.store.getCount() ; i++) {
            var record = PolicyCSCPopUpCountryDtlList.store.getAt(i);
            if (record.get('Selects'))
                CountryCode += record.get('ID') + ',';
        }
        this.PolicyCSCPopUpCountryLoad(CountryCode);
    }
}

function PolicyCSCPopUpCountryLoad(CountryCode) {

    var FilterQry = "COUNTRYCODE in (" + CountryCode.trim().substr(0, (CountryCode.length - 1)) + ")";

    DetailStore = Ext.getCmp('PolicyCSCPopUpStateDtlList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyCSCPopUpStateDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PolcyIsfrontingGroupCheck(field, Checked) {

    var FrontingSettingCode = Ext.getCmp('Policy-FrontingSettingCode').disable();
    if (Checked) {
        FrontingSettingCode.enable();
        FrontingSettingCode.allowBlank = false;
        FrontingSettingCode.isValid();
    } else {
        FrontingSettingCode.allowBlank = true;
        FrontingSettingCode.clearValue();
        FrontingSettingCode.disable();
    }
}

var BenefitRecord = [], PlanCode = '';
function PolicySettingBenefits(record) {

    PlanCode = Ext.getCmp('Policy-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }
    Categorycode = Ext.getCmp('Policy-CategoryCode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }

    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadPolicyBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 0, //QuotationMaster
            BenefitCode: record.get('BenefitIDCode'),
            PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadPolicyBenefitSettingComplete, this);

}

function BenefitsSetting(form, login) {

    if (form.selectedIndex == -1) {
        Ext.getCmp('BenefitsSetting-DedectableTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-LimitTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-CoInTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-OONCoInTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-WNSLTypeCode').setComboValue(2);
        Ext.getCmp('BenefitsSetting-ONSLTypeCode').setComboValue(2);
    }

    if (!form.isView) {

        var BenefitSettingOverridePerProviderDetList = Ext.getCmp('BenefitSettingOverridePerProviderDetList');
        var BenefitSettingOverridePerProviderList = Ext.getCmp('BenefitSettingOverridePerProviderList');
        var BenefitSettingRegionDetList = Ext.getCmp('BenefitSettingRegionDetList');


        var CustomizePerProvider = Ext.getCmp('BenefitsSetting-CustomizePerProvider');
        var CustomizePerRegion = Ext.getCmp('BenefitsSetting-CustomizePerRegion');
        var IsMaternatyBenefit = Ext.getCmp('BenefitsSetting-IsMaternatyBenefit');



        if (CustomizePerProvider.getValue() == true) {
            Ext.getCmp('BenefitsSetting-DedectableValue').disable();
            Ext.getCmp('BenefitsSetting-DedectableTypeCode').disable();
            Ext.getCmp('BenefitsSetting-Limits').disable();
            Ext.getCmp('BenefitsSetting-LimitTypeCode').disable();
            Ext.getCmp('BenefitsSetting-CoInValue').disable();
            Ext.getCmp('BenefitsSetting-CoInTypeCode').disable();
            Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').disable();
            Ext.getCmp('BenefitsSetting-OONDedectableValue').disable();
            Ext.getCmp('BenefitsSetting-OONCoInTypeCode').disable();
            Ext.getCmp('BenefitsSetting-OONCoInValue').disable();
            Ext.getCmp('BenefitSettingOverridePerProviderList').enable();
        }
        else {
            Ext.getCmp('BenefitSettingOverridePerProviderList').disable();
        }
        if (IsMaternatyBenefit.getValue() == false) {
            Ext.getCmp('BenefitsSetting-NumberofVisits').disable();
            Ext.getCmp('BenefitsSetting-PeriodTypeCode').disable();
            Ext.getCmp('BenefitsSetting-WaitingPeriod').disable();
        }
        if (CustomizePerRegion.getValue() == true) {
            Ext.getCmp('BenefitSettingRegionDetList').enable();
        }
        else {
            Ext.getCmp('BenefitSettingRegionDetList').disable();
        }


        form.findById('BenefitSettingOverridePerProviderDetList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('BenefitSettingOverridePerProviderList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('BenefitSettingSubBenefitList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
        }, this);
        var CustomizePerProvider = Ext.getCmp('BenefitsSetting-CustomizePerProvider');
        var CustomizePerRegion = Ext.getCmp('BenefitsSetting-CustomizePerRegion');
        var IsMaternatyBenefit = Ext.getCmp('BenefitsSetting-IsMaternatyBenefit');
        if (CustomizePerProvider) CustomizePerProvider.on('check', CustomizePerProviderCheck, this);
        if (IsMaternatyBenefit) IsMaternatyBenefit.on('check', IsMaternatyBenefitCheck, this);

        if (CustomizePerRegion) CustomizePerRegion.on('check', function (field, Checked) {
            if (Checked) {
                BenefitSettingRegionDetList.enable();
            }
            else {
                onBusinessTypeclear('BenefitSettingRegionDetList');
                BenefitSettingRegionDetList.disable();
            }
        }, this);

        Ext.getCmp('BenefitSettingRelationLimitsList').getColumnModel().getColumnById('IsApplicable').on('click', onBenClickIsApplicable, this);

        if (BenefitRecord.length > 0 && PlanCode != '') {
            Ext.getCmp('BenefitsSetting-PlanCode').setComboValue(PlanCode);
            Ext.getCmp('BenefitsSetting-BenefitIDCode').setComboValue(BenefitRecord[0].BenefitIDCode);
            Ext.getCmp('BenefitsSetting-BenefitName').setValue(BenefitRecord[0].BenefitName);
            BenefitRecord = [], PlanCode = '';
        }

        var Limits = Ext.getCmp('BenefitsSetting-Limits');
        if (Limits) Limits.on('change', function (field) {
            var DedectableValue = Ext.getCmp('BenefitsSetting-DedectableValue');
            var OONDedectableValue = Ext.getCmp('BenefitsSetting-OONDedectableValue');
            if (DedectableValue.getValue() == null || DedectableValue.getValue() == '' || DedectableValue.getValue() == 0) {
                DedectableValue.setValue(field.getValue());
            }
            if (OONDedectableValue.getValue() == null || OONDedectableValue.getValue() == '' || OONDedectableValue.getValue() == 0) {
                OONDedectableValue.setValue(field.getValue());
            }
        }, this);

    }
}


function onBenClickIsApplicable(column, e, record, dataIndex) {
    if (!record.get('IsApplicable'))
        record.set('Premium', 0);
}

function CustomizePerProviderCheck(field, Checked) {

    var BenefitSettingOverridePerProviderList = Ext.getCmp('BenefitSettingOverridePerProviderList');
    if (!Checked) {
        Ext.getCmp('BenefitsSetting-DedectableValue').enable();
        Ext.getCmp('BenefitsSetting-Limits').enable();
        Ext.getCmp('BenefitsSetting-CoInValue').enable();
        Ext.getCmp('BenefitsSetting-DedectableTypeCode').enable();
        Ext.getCmp('BenefitsSetting-CoInTypeCode').enable();
        Ext.getCmp('BenefitsSetting-LimitTypeCode').enable();
        Ext.getCmp('BenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('BenefitsSetting-Limits').setValue(null);
        Ext.getCmp('BenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('BenefitsSetting-DedectableTypeCode').setComboValue(0);
        Ext.getCmp('BenefitsSetting-DedectableValue').allowBlank = false;
        Ext.getCmp('BenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('BenefitsSetting-LimitTypeCode').setComboValue(0);
        Ext.getCmp('BenefitsSetting-Limits').allowBlank = false;
        Ext.getCmp('BenefitsSetting-Limits').isValid();
        Ext.getCmp('BenefitsSetting-CoInTypeCode').setComboValue(0);
        Ext.getCmp('BenefitsSetting-CoInValue').allowBlank = false;
        Ext.getCmp('BenefitsSetting-CoInValue').isValid();
        Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').enable();
        Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').setComboValue(0);
        Ext.getCmp('BenefitsSetting-OONDedectableValue').enable();
        Ext.getCmp('BenefitsSetting-OONDedectableValue').allowBlank = false;
        Ext.getCmp('BenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('BenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('BenefitsSetting-OONCoInTypeCode').enable();
        Ext.getCmp('BenefitsSetting-OONCoInTypeCode').setComboValue(0);
        Ext.getCmp('BenefitsSetting-OONCoInValue').enable();
        Ext.getCmp('BenefitsSetting-OONCoInValue').allowBlank = false;
        Ext.getCmp('BenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('BenefitsSetting-OONCoInValue').isValid();
        BenefitSettingOverridePerProviderList.disable();
        onBusinessTypeclear('BenefitSettingOverridePerProviderList');
    } else {
        BenefitSettingOverridePerProviderList.enable();
        Ext.getCmp('BenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('BenefitsSetting-Limits').setValue(null);
        Ext.getCmp('BenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('BenefitsSetting-DedectableTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-LimitTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-CoInTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-DedectableValue').allowBlank = true;
        Ext.getCmp('BenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('BenefitsSetting-Limits').allowBlank = true;
        Ext.getCmp('BenefitsSetting-Limits').isValid();
        Ext.getCmp('BenefitsSetting-CoInValue').allowBlank = true;
        Ext.getCmp('BenefitsSetting-CoInValue').isValid();
        Ext.getCmp('BenefitsSetting-DedectableValue').disable();
        Ext.getCmp('BenefitsSetting-Limits').disable();
        Ext.getCmp('BenefitsSetting-CoInValue').disable();
        Ext.getCmp('BenefitsSetting-LimitTypeCode').disable();
        Ext.getCmp('BenefitsSetting-DedectableTypeCode').disable();
        Ext.getCmp('BenefitsSetting-CoInTypeCode').disable();
        Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').disable();
        Ext.getCmp('BenefitsSetting-OONDedectableTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-OONDedectableValue').disable();
        Ext.getCmp('BenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('BenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('BenefitsSetting-OONDedectableValue').allowBlank = true;
        Ext.getCmp('BenefitsSetting-OONCoInTypeCode').disable();
        Ext.getCmp('BenefitsSetting-OONCoInTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-OONCoInValue').disable();
        Ext.getCmp('BenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('BenefitsSetting-OONCoInValue').isValid();
        Ext.getCmp('BenefitsSetting-OONCoInValue').allowBlank = true;

    }
}

function IsMaternatyBenefitCheck(field, Checked) {

    var BenefitSettingSubBenefitList = Ext.getCmp('BenefitSettingSubBenefitList');
    if (Checked) {
        Ext.getCmp('BenefitsSetting-WaitingPeriod').enable()
        Ext.getCmp('BenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('BenefitsSetting-WaitingPeriod').allowBlank = false;
        Ext.getCmp('BenefitsSetting-WaitingPeriod').isValid();

        Ext.getCmp('BenefitsSetting-NumberofVisits').enable()
        Ext.getCmp('BenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('BenefitsSetting-NumberofVisits').allowBlank = false;
        Ext.getCmp('BenefitsSetting-NumberofVisits').isValid();

        Ext.getCmp('BenefitsSetting-PeriodTypeCode').enable()
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').clearValue();
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').allowBlank = false;
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').isValid();


    } else {
        Ext.getCmp('BenefitsSetting-WaitingPeriod').disable();
        Ext.getCmp('BenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('BenefitsSetting-WaitingPeriod').allowBlank = true;
        Ext.getCmp('BenefitsSetting-WaitingPeriod').isValid();
        Ext.getCmp('BenefitsSetting-NumberofVisits').disable();
        Ext.getCmp('BenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('BenefitsSetting-NumberofVisits').allowBlank = true;
        Ext.getCmp('BenefitsSetting-NumberofVisits').isValid();
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').disable();
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').setValue(null);
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').allowBlank = true;
        Ext.getCmp('BenefitsSetting-PeriodTypeCode').isValid();

    }
}

function PlanMasterBenefitSetting(record) {

    PlanCode = Ext.getCmp('NGIPlanMaster').selectedIndex;
    if (PlanCode == -1) {
        Ext.MessageBox.alert(login.modulename, "You are not allow to make Benefit Setting. Please save the reocrd first !");
        return true;
    }

    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Please Select the Benefit ID!");
        return true;
    }
    else BenefitRecord.push(record.data);

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadBenefitSetting',
            PlanCode: PlanCode,
            BenefitCode: record.get('BenefitIDCode')

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadBenefitSettingComplete, this);

}



function QReqExisitingBenefitSetting(record) {

    PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }

    Categorycode = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }
    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadQuotationBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 0, //QuotationReq
            BenefitCode: record.get('BenefitIDCode'),
            QuotationCode: Ext.getCmp('QuotationRequest').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadQuotationBenefitSettingComplete, this);

}
function QReqRequestedBenefitSetting(record) {

    PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }
    Categorycode = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }
    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadQuotationBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 0, //QuotationReq
            BenefitCode: record.get('BenefitIDCode'),
            QuotationCode: Ext.getCmp('QuotationRequest').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadQuotationBenefitSettingComplete, this);

}
function QuotationMasterReqBenefitSetting(record) {

    PlanCode = Ext.getCmp('NGIQuotationMasterCategoryPopup-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }
    Categorycode = Ext.getCmp('NGIQuotationMasterCategoryPopup-Categorycode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }

    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadQuotationBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 1, //QuotationMaster
            BenefitCode: record.get('BenefitIDCode'),
            QuotationCode: Ext.getCmp('NGIQuotationMaster').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadQuotationBenefitSettingComplete, this);

}


function QuotationsMasterExisitingBenefitSetting(record) {

    PlanCode = Ext.getCmp('NGIQuotationMasterCategoryPopup-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }
    Categorycode = Ext.getCmp('NGIQuotationMasterCategoryPopup-Categorycode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }

    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadQuotationBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 1, //QuotationMaster
            BenefitCode: record.get('BenefitIDCode'),
            QuotationCode: Ext.getCmp('NGIQuotationMaster').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadQuotationBenefitSettingComplete, this);

}
function LoadQuotationBenefitSettingComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadQuotationBenefitSettingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (responseText.success) {

        var BenefitSetting = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.BenefitsSetting.QuotationsBenefitsSetting';
        var Url = '/forms/HumanResources/NGI/UnderWritting/BenefitsSetting/QuotationBenefitsSetting.xml';
        var WidgetTitle = 'Quotation Benefit Setting';
        BenefitSetting.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
    }


}



function LoadPolicyBenefitSettingComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadPolicyBenefitSettingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (responseText.success) {

        var BenefitSetting = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.BenefitsSetting.PolicyBenefitsSetting';
        var Url = '/forms/HumanResources/NGI/UnderWritting/BenefitsSetting/PolicyBenefitsSetting.xml';
        var WidgetTitle = 'Policy Benefit Setting';
        BenefitSetting.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
    }


}

function QuotationsBenefitsSetting(form, login) {

    if (form.selectedIndex == -1) {
        Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-WNSLTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-ONSLTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-EmgDetectWINetwTypeCode').setComboValue(2);
        Ext.getCmp('QuotationsBenefitsSetting-EmgDetectOONetwTypeCode').setComboValue(2);
    }
    if (!form.isview) {


        var LimitPerDay = Ext.getCmp('QuotationsBenefitsSetting-LimitPerDay');
        var ActivateSpecialLimt = Ext.getCmp('QuotationsBenefitsSetting-ActivateSpecialLimt');

        LimitPerDay.checked = true;
        ActivateSpecialLimt.Checked = true;
        if (LimitPerDay) LimitPerDay.on('check', function (field, Checked) {
            var LimitPerAmount = Ext.getCmp('QuotationsBenefitsSetting-LimitPerAmount');
            if (Checked) {
                LimitPerAmount.enable();
            }
            else {
                LimitPerAmount.setValue(null);
                LimitPerAmount.disable();

            }
        }, this);

        if (ActivateSpecialLimt) ActivateSpecialLimt.on('check', function (field, Checked) {
            var LimitSplAmount = Ext.getCmp('QuotationsBenefitsSetting-LimitSplAmount');
            var StaringDay = Ext.getCmp('QuotationsBenefitsSetting-StaringDay');
            if (Checked) {
                LimitSplAmount.enable();
                StaringDay.enable();
            }
            else {

                LimitSplAmount.setValue(null);
                LimitSplAmount.disable();
                StaringDay.setValue(null);
                StaringDay.disable();

            }


        }, this);

        //var CustomizePerProvider = Ext.getCmp('QuotationsBenefitsSetting-CustomizePerProvider');
        var IsMaternatyBenefit = Ext.getCmp('QuotationsBenefitsSetting-IsMaternatyBenefit');
        //var CustomizePerRegion = Ext.getCmp('QuotationsBenefitsSetting-CustomizePerRegion');
        /*
        if (CustomizePerProvider.getValue() == true) {
            Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').disable();
            Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-Limits').disable();
            Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-CoInValue').disable();
            Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').disable();
            Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').disable();
            Ext.getCmp('QuotationsBenefitSettingOverridePerProviderList').enable();
        }
        else {
            Ext.getCmp('QuotationsBenefitSettingOverridePerProviderList').disable();
        }
        */
        if (IsMaternatyBenefit.getValue() == false) {
            Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').disable();
            Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').disable();
            Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').disable();
        }



        /*
        if (CustomizePerRegion.getValue() == true) {
            Ext.getCmp('QuotationBenefitSettingRegionDtlList').enable();
        }
        else {
            Ext.getCmp('QuotationBenefitSettingRegionDtlList').disable();
        }
        */
        var QuotationBenefitSettingOverridePerProviderDetList = Ext.getCmp('QuotationBenefitSettingOverridePerProviderDetList');
        var QuotationsBenefitSettingOverridePerProviderList = Ext.getCmp('QuotationsBenefitSettingOverridePerProviderList');
        var QuotationBenefitSettingRegionDtlList = Ext.getCmp('QuotationBenefitSettingRegionDtlList');

        form.findById('QuotationBenefitSettingOverridePerProviderDetList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('QuotationsBenefitSettingOverridePerProviderList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('QuotationBenefitSettingSubBenefitList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
        }, this);
        //var CustomizePerProvider = Ext.getCmp('QuotationsBenefitsSetting-CustomizePerProvider');
        var QuotationBenefitSettingSubBenefitList = Ext.getCmp('QuotationBenefitSettingSubBenefitList');
        var IsMaternatyBenefit = Ext.getCmp('QuotationsBenefitsSetting-IsMaternatyBenefit');
        //if (CustomizePerProvider) CustomizePerProvider.on('check', QuotationCustomizePerProviderCheck, this);
        if (IsMaternatyBenefit) IsMaternatyBenefit.on('check', QuotationIsMaternatyBenefitCheck, this);
        /*
        var CustomizePerRegion = Ext.getCmp('QuotationsBenefitsSetting-CustomizePerRegion');
        if (CustomizePerRegion) CustomizePerRegion.on('check', function (field, Checked) {
            if (Checked) {
                QuotationBenefitSettingRegionDtlList.enable();
            }
            else {
                onBusinessTypeclear('QuotationBenefitSettingRegionDtlList');
                QuotationBenefitSettingRegionDtlList.disable();
            }
        }, this);
        */
        Ext.getCmp('QuotationBenefitSettingRelationList').on('addrecord', function (evt) {
            evt.record.set('IsApplicable', 1);
        }, this);
        Ext.getCmp('QuotationBenefitSettingRelationList').getColumnModel().getColumnById('IsApplicable').on('click', onRelClickIsApplicable, this);

        if (BenefitRecord.length > 0 && PlanCode != '') {
            Ext.getCmp('QuotationsBenefitsSetting-PlanCode').setComboValue(PlanCode);
            Ext.getCmp('QuotationsBenefitsSetting-BenefitIDCode').setComboValue(BenefitRecord[0].BenefitIDCode);
            Ext.getCmp('QuotationsBenefitsSetting-BenefitName').setValue(BenefitRecord[0].BenefitName);
            BenefitRecord = [], PlanCode = '';
        }

        //var Limits = Ext.getCmp('QuotationsBenefitsSetting-Limits');
        //if (Limits) Limits.on('change', function (field) {
        //    var DedectableValue = Ext.getCmp('QuotationsBenefitsSetting-DedectableValue');
        //    var OONDedectableValue = Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue');
        //    if (DedectableValue.getValue() == null || DedectableValue.getValue() == '' || DedectableValue.getValue() == 0) {
        //        DedectableValue.setValue(field.getValue());
        //    }
        //    if (OONDedectableValue.getValue() == null || OONDedectableValue.getValue() == '' || OONDedectableValue.getValue() == 0) {
        //        OONDedectableValue.setValue(field.getValue());
        //    }
        //}, this);

        //var EmgDetectWINetwValue = Ext.getCmp('QuotationsBenefitsSetting-EmgDetectWINetwValue');
        //if (EmgDetectWINetwValue) EmgDetectWINetwValue.on('change', function (field) {
        //    var EmgDetectOONetwValue = Ext.getCmp('QuotationsBenefitsSetting-EmgDetectOONetwValue');
        //    if (EmgDetectOONetwValue.getValue() == null || EmgDetectOONetwValue.getValue() == '' || EmgDetectOONetwValue.getValue() == 0) {
        //        EmgDetectOONetwValue.setValue(field.getValue());
        //    }
        //}, this);
    }
}


function onRelClickIsApplicable(column, e, record, dataIndex) {
    if (!record.get('IsApplicable'))
        record.set('Premium', 0);
}
/*
function QuotationCustomizePerProviderCheck(field, Checked) {

    var QuotationsBenefitSettingOverridePerProviderList = Ext.getCmp('QuotationsBenefitSettingOverridePerProviderList');
    if (!Checked) {
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').enable();
        Ext.getCmp('QuotationsBenefitsSetting-Limits').enable();
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').enable();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').enable();
        Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').enable();
        Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').enable();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-Limits').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').setComboValue(0);
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').setComboValue(0);
        Ext.getCmp('QuotationsBenefitsSetting-Limits').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-Limits').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').setComboValue(0);
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').enable();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').setComboValue(0);
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').enable();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').enable();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').setComboValue(0);
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').enable();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').isValid();
        QuotationsBenefitSettingOverridePerProviderList.disable();
        onBusinessTypeclear('QuotationsBenefitSettingOverridePerProviderList');
    } else {
        QuotationsBenefitSettingOverridePerProviderList.enable();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-Limits').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-Limits').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-Limits').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableValue').disable();
        Ext.getCmp('QuotationsBenefitsSetting-Limits').disable();
        Ext.getCmp('QuotationsBenefitsSetting-CoInValue').disable();
        Ext.getCmp('QuotationsBenefitsSetting-LimitTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-DedectableTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-CoInTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').disable();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-OONDedectableValue').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').disable();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-OONCoInValue').allowBlank = true;

    }
}
*/
function QuotationIsMaternatyBenefitCheck(field, Checked) {

    var QuotationBenefitSettingSubBenefitList = Ext.getCmp('QuotationBenefitSettingSubBenefitList');
    if (Checked) {
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').enable()
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').isValid();

        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').enable()
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').isValid();

        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').enable()
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').clearValue();
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').allowBlank = false;
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').isValid();


    } else {
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').disable();
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-WaitingPeriod').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').disable();
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-NumberofVisits').isValid();
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').disable();
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').setValue(null);
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').allowBlank = true;
        Ext.getCmp('QuotationsBenefitsSetting-PeriodTypeCode').isValid();

    }
}

function PolicyBenefitsSetting(form, login) {

    if (form.selectedIndex == -1) {
        Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-WNSLTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-ONSLTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-EmgDetectWINetwTypeCode').setComboValue(2);
        Ext.getCmp('PolicyBenefitsSetting-EmgDetectOONetwTypeCode').setComboValue(2);
    }

    if (!form.isview) {


        var BenefitIDCode = Ext.getCmp('PolicyBenefitsSetting-BenefitIDCode');

        var DetBenefitIDCode = Ext.getCmp('PolicyBenefitSettingSubBenefit-BenefitIDCode');

        var LimitPerDay = Ext.getCmp('PolicyBenefitsSetting-LimitPerDay');
        var ActivateSpecialLimt = Ext.getCmp('PolicyBenefitsSetting-ActivateSpecialLimt');
        LimitPerDay.checked = true;
        ActivateSpecialLimt.Checked = true;

        if (LimitPerDay) LimitPerDay.on('check', function (field, Checked) {
            var LimitPerAmount = Ext.getCmp('PolicyBenefitsSetting-LimitPerAmount');
            if (Checked) {
                LimitPerAmount.enable();
            }
            else {
                LimitPerAmount.setValue(null);
                LimitPerAmount.disable();

            }
        }, this);

        if (ActivateSpecialLimt) ActivateSpecialLimt.on('check', function (field, Checked) {
            var LimitSplAmount = Ext.getCmp('PolicyBenefitsSetting-LimitSplAmount');
            var StaringDay = Ext.getCmp('PolicyBenefitsSetting-StaringDay');
            if (Checked) {
                LimitSplAmount.enable();
                StaringDay.enable();
            }
            else {

                LimitSplAmount.setValue(null);
                LimitSplAmount.disable();
                StaringDay.setValue(null);
                StaringDay.disable();

            }


        }, this);


        if (DetBenefitIDCode) DetBenefitIDCode.on('beforequery', function (evt) {
            var BenefitIDCode = Ext.getCmp('PolicyBenefitsSetting-BenefitIDCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "BEN.BENEFIT_CODE in (select BENEFIT_CODE from  IIM_BENEFIT_CODES_DET where BEN.BENEFIT_CODE =" + BenefitIDCode + ")";
        }, this);

        //var CustomizePerProvider = Ext.getCmp('PolicyBenefitsSetting-CustomizePerProvider');
        var IsMaternatyBenefit = Ext.getCmp('PolicyBenefitsSetting-IsMaternatyBenefit');
        //var CustomizePerRegion = Ext.getCmp('PolicyBenefitsSetting-CustomizePerRegion');
        /*
        if (CustomizePerProvider.getValue() == true) {
            Ext.getCmp('PolicyBenefitsSetting-DedectableValue').disable();
            Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-Limits').disable();
            Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-CoInValue').disable();
            Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').disable();
            Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').disable();
            Ext.getCmp('PolicyBenefitSettingOverridePerProviderList').enable();
        }
        else {
            Ext.getCmp('PolicyBenefitSettingOverridePerProviderList').disable();
        }
        */
        if (IsMaternatyBenefit.getValue() == false) {
            Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').disable();
            Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').disable();
            Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').disable();
        }
        /*
        if (CustomizePerRegion.getValue() == true) {
            Ext.getCmp('PolicyBenefitSettingRegionDtlList').enable();
        }
        else {
            Ext.getCmp('PolicyBenefitSettingRegionDtlList').disable();
        }
        */


        var PolicyBenefitSettingOverridePerProviderDetList = Ext.getCmp('PolicyBenefitSettingOverridePerProviderDetList');
        var PolicyBenefitSettingOverridePerProviderList = Ext.getCmp('PolicyBenefitSettingOverridePerProviderList');
        var PolicyBenefitSettingRegionDtlList = Ext.getCmp('PolicyBenefitSettingRegionDtlList');

        form.findById('PolicyBenefitSettingOverridePerProviderDetList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('PolicyBenefitSettingOverridePerProviderList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
            evt.record.set('CoInTypeCode', 2);
            evt.record.set('CoInTypeName', 'Not Applicable');
            evt.record.set('DedectableTypeCode', 2);
            evt.record.set('DedectableTypeName', 'Not Applicable');
            evt.record.set('WNSLTypeCode', 2);
            evt.record.set('WNSLTypeName', 'Not Applicable');
            evt.record.set('ONSLTypeCode', 2);
            evt.record.set('ONSLTypeName', 'Not Applicable');
        }, this);
        form.findById('PolicyBenefitSettingOverridePerProviderList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 2);
            evt.record.set('LimitTypeName', 'Not Applicable');
        }, this);
        //var CustomizePerProvider = Ext.getCmp('PolicyBenefitsSetting-CustomizePerProvider');
        //var CustomizePerRegion = Ext.getCmp('PolicyBenefitsSetting-CustomizePerRegion');
        var IsMaternatyBenefit = Ext.getCmp('PolicyBenefitsSetting-IsMaternatyBenefit');
        //if (CustomizePerProvider) CustomizePerProvider.on('check', PolicyCustomizePerProviderCheck, this);
        if (IsMaternatyBenefit) IsMaternatyBenefit.on('check', PolicyIsMaternatyBenefitCheck, this);
        /*
        if (CustomizePerRegion) CustomizePerRegion.on('check', function (field, Checked) {
            if (Checked) {
                PolicyBenefitSettingRegionDtlList.enable();
            }
            else {
                onBusinessTypeclear('PolicyBenefitSettingRegionDtlList');
                PolicyBenefitSettingRegionDtlList.disable();
            }
        }, this);
        */
        if (BenefitRecord.length > 0 && PlanCode != '') {
            Ext.getCmp('PolicyBenefitsSetting-PlanCode').setComboValue(PlanCode);
            Ext.getCmp('PolicyBenefitsSetting-BenefitIDCode').setComboValue(BenefitRecord[0].BenefitIDCode);
            Ext.getCmp('PolicyBenefitsSetting-BenefitName').setValue(BenefitRecord[0].BenefitName);
            BenefitRecord = [], PlanCode = '';
        }

        Ext.getCmp('PolicyBenefitsSettingAgeLimitSubDtlList').on('addrecord', function (evt) {
            evt.record.set('IsApplicable', 1);
        }, this);
        Ext.getCmp('PolicyBenefitsSettingAgeLimitSubDtlList').getColumnModel().getColumnById('IsApplicable').on('click', onClickIsApplicable, this);

        //var RelationSUbDet = Ext.getCmp('PolicyBenefitsSettingAgeLimitSubDtlList');

        //if (RelationSUbDet) RelationSUbDet.on('beforeedit', function (e) {
        //    if (e.record.get('IsApplicable')) { //by factor
        //        e.grid.getColumnModel().getColumnById('Premium').editable = true;
        //    }
        //    else if (e.record.get('IsApplicable')==false)
        //        {
        //        e.grid.getColumnModel().getColumnById('Premium').editable = false;
        //    }

        //}, this);

        //var Limits = Ext.getCmp('PolicyBenefitsSetting-Limits');
        //if (Limits) Limits.on('change', function (field) {
        //    var DedectableValue = Ext.getCmp('PolicyBenefitsSetting-DedectableValue');
        //    var OONDedectableValue = Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue');
        //    if (DedectableValue.getValue() == null || DedectableValue.getValue() == '' || DedectableValue.getValue() == 0) {
        //        DedectableValue.setValue(field.getValue());
        //    }
        //    if (OONDedectableValue.getValue() == null || OONDedectableValue.getValue() == '' || OONDedectableValue.getValue() == 0) {
        //        OONDedectableValue.setValue(field.getValue());
        //    }
        //}, this);

        //var EmgDetectWINetwValue = Ext.getCmp('PolicyBenefitsSetting-EmgDetectWINetwValue');
        //if (EmgDetectWINetwValue) EmgDetectWINetwValue.on('change', function (field) {
        //    var EmgDetectOONetwValue = Ext.getCmp('PolicyBenefitsSetting-EmgDetectOONetwValue');
        //    if (EmgDetectOONetwValue.getValue() == null || EmgDetectOONetwValue.getValue() == '' || EmgDetectOONetwValue.getValue() == 0) {
        //        EmgDetectOONetwValue.setValue(field.getValue());
        //    }
        //}, this);
    }
}

function onClickIsApplicable(column, e, record, dataIndex) {
    if (!record.get('IsApplicable'))
        record.set('Premium', 0);
}
/*
function PolicyCustomizePerProviderCheck(field, Checked) {

    var PolicyBenefitSettingOverridePerProviderList = Ext.getCmp('PolicyBenefitSettingOverridePerProviderList');
    if (!Checked) {
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').enable();
        Ext.getCmp('PolicyBenefitsSetting-Limits').enable();
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').enable();
        Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').enable();
        Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').enable();
        Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').enable();
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-Limits').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').setComboValue(0);
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').setComboValue(0);
        Ext.getCmp('PolicyBenefitsSetting-Limits').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-Limits').isValid();
        Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').setComboValue(0);
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').enable();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').setComboValue(0);
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').enable();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').enable();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').setComboValue(0);
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').enable();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').isValid();
        PolicyBenefitSettingOverridePerProviderList.disable();
        onBusinessTypeclear('PolicyBenefitSettingOverridePerProviderList');
    } else {
        PolicyBenefitSettingOverridePerProviderList.enable();
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-Limits').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-Limits').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-Limits').isValid();
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-DedectableValue').disable();
        Ext.getCmp('PolicyBenefitsSetting-Limits').disable();
        Ext.getCmp('PolicyBenefitsSetting-CoInValue').disable();
        Ext.getCmp('PolicyBenefitsSetting-LimitTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-DedectableTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-CoInTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').disable();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-OONDedectableValue').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').disable();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').isValid();
        Ext.getCmp('PolicyBenefitsSetting-OONCoInValue').allowBlank = true;

    }
}
*/
function PolicyIsMaternatyBenefitCheck(field, Checked) {

    if (Checked) {
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').enable()
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').isValid();

        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').enable()
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').isValid();

        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').enable()
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').clearValue();
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').allowBlank = false;
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').isValid();


    } else {
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').disable();
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-WaitingPeriod').isValid();
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').disable();
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-NumberofVisits').isValid();
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').disable();
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').setValue(null);
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').allowBlank = true;
        Ext.getCmp('PolicyBenefitsSetting-PeriodTypeCode').isValid();

    }
}

function PoliciesSettingBenefits(record) {
    var PolicyCode = Ext.getCmp('Policy').selectedIndex;
    var CategoryCode = Ext.getCmp('policy-CategoryCode').editValue;
    var PlanCode = Ext.getCmp('Policy-PlanCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'BenefitSettingLoad',
            PlanCode: PlanCode,
            BenefitCode: record.get('BenefitIDCode'),
            PolicyCode: PolicyCode,
            CategoryCode: CategoryCode,
            Type: 0
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadBenefitSettingComplete, this);


}


function IndividualPoliciesSettingBenefits(record) {

    PlanCode = Ext.getCmp('IndividualPolicies-PlanCode').editValue;
    if (PlanCode == null || PlanCode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Plan Name  !");
        return true;
    }
    Categorycode = Ext.getCmp('IndividualPolicies-CategoryCode').editValue;
    if (Categorycode == null || Categorycode == '') {
        Ext.MessageBox.alert(login.modulename, "Select the Category!");
        return true;
    }

    if (record.get('BenefitIDCode') == null) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Benefit !");
        return true;
    }
    else BenefitRecord.push(record.data);


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadPolicyBenefitSetting',
            PlanCode: PlanCode,
            Categorycode: Categorycode,
            TypCode: 1, //Individual Policy
            BenefitCode: record.get('BenefitIDCode'),
            PolicyCode: Ext.getCmp('NGIIndividualPolicies').selectedIndex

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadPolicyBenefitSettingComplete, this);

}


function LoadBenefitSettingComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadBenefitSettingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (responseText.success) {
        var BenefitSetting = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.BenefitsSetting';
        var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/BenefitsSetting.xml';
        var WidgetTitle = 'Benefit Setting';
        BenefitSetting.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
    }
}


function ProviderTariffLoadExcelColumns(form, login) {

    var FileName = Ext.getCmp('NGIUploadProviderTariff-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('NGIUploadProviderTariff').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ProviderTariffLoadExcelColumns',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProviderTariffLoadExcelColumnsComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}

function ProviderTariffLoadExcelColumnsComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ProviderTariffLoadExcelColumnsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PrimaryKey = Ext.getCmp('NGIUploadProviderTariff').selectedIndex;
        var MenuID = 'ID_NGIPROVIDERTARIFF';
        var TemplateCode = Ext.getCmp('NGIUploadProviderTariff-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProviderTariffUploadPrcComplete, this);

    }

}

function ProviderTariffUploadPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ProviderTariffUploadPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('NGIUploadProviderTariff').selectedIndex;
        var MenuID = 'ID_NGIPROVIDERTARIFF';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);

    }
}

function ProTariffImportDataPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ProTariffImportDataPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    this.UploadDataErrorPopupForm = new Ext.form.FormPanel(responseText.ImportFunctionCallCofig);
    this.UploadDataErrorPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.UploadDataErrorPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.UploadDataErrorPopupForm.FormFieldsCount + 2
    });
    this.UploadDataErrorPopupFormWindow = new Ext.Window({
        id: 'ErrorFormWindow',
        title: 'Import Error Log',
        closable: true,
        minimizable: false,
        width: this.UploadDataErrorPopupForm.width + 10,
        height: this.UploadDataErrorPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.UploadDataErrorPopupForm]
    });
    this.UploadDataErrorPopupForm.on('render', UploadQuotationMemberPopUp, this);
    this.UploadDataErrorPopupFormWindow.show();
}


function TypeVersions(form, login) {
}

function METypeVersions(form, login) {
}

function IFFCollectReceiptPost(form, login) {

    var PrimKey = Ext.getCmp('IFFCollectReceipt').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'IFFCollectReceiptPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IFFCollectReceiptPostComplete, this);
}

function IFFCollectReceiptPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', IFFCollectReceiptPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}

function CPBenefitsAnnualLimitsPopup(form, login) {

    var PolicyIdCode = Ext.getCmp('CancelPolicies-PolicyIdCode').getValue();
    if (!PolicyIdCode) {
        Ext.MessageBox.alert(login.modulename, 'Please select Policy Code !');
        return;
    }

    var primary;
    primary = PolicyIdCode;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CPBenefitsAnnualLimitsPopup',
            primary: primary
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CPBenefitsAnnualLimitsPopupCompleted, this);
}

function CPBenefitsAnnualLimitsPopupCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CPBenefitsAnnualLimitsPopupCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.CPBenefitsAnnualLimitsPopupForm = new Ext.form.FormPanel(responseText.CPBenefitsAnnualLimitsPopupCofig);

    this.CPBenefitsAnnualLimitsPopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var CPBenefitsAnnualLimitsPopupDltList = Ext.getCmp('CPBenefitsAnnualLimitsPopupDltList');
            for (var cnt = 0; cnt < CPBenefitsAnnualLimitsPopupDltList.store.getCount() ; cnt++) {

                CPBenefitsAnnualLimitsPopupDltList.store.getAt(cnt).set('Selects', true);

            }
        },
        scope: this,
        tabIndex: this.CPBenefitsAnnualLimitsPopupForm.FormFieldsCount + 2
    });
    this.CPBenefitsAnnualLimitsPopupForm.addButton({
        text: 'Load',
        handler: function () {

            var CPBenefitsAnnualLimitsGrid = Ext.getCmp('CPBenefitsAnnualLimitsList');
            var CPBenefitsAnnualLimitsPopupDltList = Ext.getCmp('CPBenefitsAnnualLimitsPopupDltList');

            var PKey = Ext.getCmp('CancelPolicies').selectedIndex;
            for (var pcnt = 0; pcnt < CPBenefitsAnnualLimitsPopupDltList.store.getCount() ; pcnt++) {

                var PopupRecord = CPBenefitsAnnualLimitsPopupDltList.store.getAt(pcnt);
                var isavailable = false;
                for (var ccnt = 0; ccnt < CPBenefitsAnnualLimitsGrid.store.getCount() ; ccnt++) {

                    var gridrecord = CPBenefitsAnnualLimitsGrid.store.getAt(ccnt);
                    if (gridrecord.get('BenefitIDCode') == PopupRecord.get('ID')) {
                        isavailable = true;
                        break;
                    }
                }
                if (isavailable || !PopupRecord.get('Selects')) continue;

                CPBenefitsAnnualLimitsGrid.storeId += 1;
                var ServiceID = CPBenefitsAnnualLimitsGrid.storeId;
                var newRecord = new CPBenefitsAnnualLimitsGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    PCCODE: (PKey == -1 ? 1 : PKey),
                    BenefitIDCode: PopupRecord.get('ID'),
                    BenefitIDName: PopupRecord.get('BenefitIDName'),
                    BenefitName: PopupRecord.get('BenefitName'),
                    TypeCode: PopupRecord.get('TypeCode'),
                    TypeName: PopupRecord.get('TypeName'),
                    AnnualLimit: 0,
                    ConsumedBalance: 0,
                    AvailableBalance: 0,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true

                });
                CPBenefitsAnnualLimitsGrid.stopEditing();
                CPBenefitsAnnualLimitsGrid.store.add(newRecord);
                CPBenefitsAnnualLimitsGrid.store.totalLength = CPBenefitsAnnualLimitsGrid.store.getTotalCount() + 1;
                CPBenefitsAnnualLimitsGrid.pageBar.updateInfo();
            }
            this.CPBenefitsAnnualLimitsPopupFormWindow.close();
            var CPBenefitsAnnualLimitsList = Ext.getCmp('CPBenefitsAnnualLimitsList');
            CPBenefitsAnnualLimitsList.store.load({
                params: {
                    start: 0,
                    limit: CPBenefitsAnnualLimitsList.pageSize
                }
            });

        },
        scope: this,
        tabIndex: this.CPBenefitsAnnualLimitsPopupForm.FormFieldsCount + 2

    });
    this.CPBenefitsAnnualLimitsPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.CPBenefitsAnnualLimitsPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.CPBenefitsAnnualLimitsPopupForm.FormFieldsCount + 2
    });
    this.CPBenefitsAnnualLimitsPopupFormWindow = new Ext.Window({
        id: 'CPBenefitsAnnualLimitsPopupFormWindow',
        title: 'BenefitCompletionPopup',
        closable: true,
        minimizable: false,
        width: this.CPBenefitsAnnualLimitsPopupForm.width + 10,
        height: this.CPBenefitsAnnualLimitsPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.CPBenefitsAnnualLimitsPopupForm]
    });

    this.CPBenefitsAnnualLimitsPopupFormWindow.show();
}

function CPPolicyMemberPopup(form, login) {
    var PolicyIdCode = Ext.getCmp('CancelPolicies-PolicyIdCode').getValue();
    if (!PolicyIdCode) {
        Ext.MessageBox.alert(login.modulename, 'Please select Policy Code !');
        return;
    }

    var primary;
    primary = PolicyIdCode;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CPPolicyMemberPopup',
            primary: primary
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CPPolicyMemberPopupCompleted, this);
}

function CPPolicyMemberPopupCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CPPolicyMemberPopupCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.CPPolicyMemberPopupForm = new Ext.form.FormPanel(responseText.CPPolicyMemberPopupCofig);

    this.CPPolicyMemberPopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var CPPolicyMemberPopupDltList = Ext.getCmp('CPPolicyMemberPopupDltList');
            for (var cnt = 0; cnt < CPPolicyMemberPopupDltList.store.getCount() ; cnt++) {

                CPPolicyMemberPopupDltList.store.getAt(cnt).set('selects', true);

            }
        },
        scope: this,
        tabIndex: this.CPPolicyMemberPopupForm.FormFieldsCount + 2
    });
    this.CPPolicyMemberPopupForm.addButton({
        text: 'Load',
        handler: function () {
            ////var CPPolicyMemberGrid = Ext.getCmp('CPPolicyMember');
            ////var CPPolicyMemberPopupDltList = Ext.getCmp('CPPolicyMemberPopupDltList');

            //var PKey = Ext.getCmp('CancelPolicies').selectedIndex;
            //for (var pcnt = 0; pcnt < CPPolicyMemberPopupDltList.store.getCount() ; pcnt++) {

            //    var PopupRecord = CPPolicyMemberPopupDltList.store.getAt(pcnt);
            //    var isavailable = false;
            //    for (var ccnt = 0; ccnt < CPPolicyMemberGrid.store.getCount() ; ccnt++) {

            //        var gridrecord = CPPolicyMemberGrid.store.getAt(ccnt);
            //        if (gridrecord.get('BenefitIDCode') == PopupRecord.get('ID')) {
            //            isavailable = true;
            //            break;
            //        }
            //    }
            //    if (isavailable ||!PopupRecord.get('selects')) continue;



            var PrimKey = Ext.getCmp('CancelPolicies').selectedIndex;

            var CPPolicyMemberPopupDltList = Ext.getCmp('CPPolicyMemberPopupDltList');

            var CPPolicyMemberGrid = Ext.getCmp('CPPolicyMemberList');

            for (var pcnt = 0; pcnt < CPPolicyMemberPopupDltList.store.getCount() ; pcnt++) {

                var PopupRecord = CPPolicyMemberPopupDltList.store.getAt(pcnt);

                if (!PopupRecord.get('selects')) continue;

                CPPolicyMemberGrid.storeId += 1;
                var MemberID = CPPolicyMemberGrid.storeId;
                var newRecord = new CPPolicyMemberGrid.recordType({
                    ID: MemberID,
                    SerialNo: MemberID,
                    MemberId: PopupRecord.get('Member_id'),
                    MemberName: PopupRecord.get('First_Name'),
                    Mobile: PopupRecord.get('Mobile_Number'),
                    Email: null,
                    JoinDate: null,
                    EndDate: null,
                    CancelationDate: null,
                    StatusCode: 0,
                    SponsorCode: 0,
                    PCCODE: (PrimKey == -1 ? 1 : PrimKey),//master primary Key
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true


                });
                CPPolicyMemberGrid.stopEditing();
                CPPolicyMemberGrid.store.add(newRecord);
                CPPolicyMemberGrid.store.totalLength = CPPolicyMemberGrid.store.getTotalCount() + 1;
                CPPolicyMemberGrid.pageBar.updateInfo();
            }
            this.CPPolicyMemberPopupFormWindow.close();
            var CPPolicyMemberList = Ext.getCmp('CPPolicyMemberList');
            CPPolicyMemberList.store.load({
                params: {
                    start: 0,
                    limit: CPPolicyMemberList.pageSize
                }
            });

        },
        scope: this,
        tabIndex: this.CPPolicyMemberPopupForm.FormFieldsCount + 2

    });
    this.CPPolicyMemberPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.CPPolicyMemberPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.CPPolicyMemberPopupForm.FormFieldsCount + 2
    });
    this.CPPolicyMemberPopupFormWindow = new Ext.Window({
        id: 'CPPolicyMemberPopupFormWindow',
        title: 'CPPolicyMemberPopup',
        closable: true,
        minimizable: false,
        width: this.CPPolicyMemberPopupForm.width + 10,
        height: this.CPPolicyMemberPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.CPPolicyMemberPopupForm]
    });

    this.CPPolicyMemberPopupFormWindow.show();
}


function PoliciesCategoryedit(record) {

    var Policies = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.Policy';
    var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/Policy.xml';
    var WidgetTitle = 'Policies';
    Policies.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);
}



function QRevisionCalcPremium(form, login) {

    var BasePremium = Ext.getCmp('QuotationRevision-BasePremium').getValue()

    if (BasePremium = '' || BasePremium == null || BasePremium == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please enter Gross Price value!');
        return;
    }
    var CategoryCount = Ext.getCmp('QuotationRevisionCategoryDltList').store.getCount();
    if (CategoryCount < 1) {
        Ext.MessageBox.alert(login.modulename, 'Category Detail Must have one Record! Cannot Calculate!');
        return;
    }
    var MemberCount = Ext.getCmp('QuotationRevisionMemberDtlList').store.getCount();
    if (MemberCount < 1) {
        Ext.MessageBox.alert(login.modulename, 'Member Detail Must have one Record! Cannot Calculate!');
        return;
    }

    var QuotationRevisionCategoryDltList = Ext.getCmp('QuotationRevisionCategoryDltList');
    var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
    for (cnt = 0; cnt < QuotationRevisionMemberDtlList.store.getCount() ; cnt++) {
        MemberRecord = QuotationRevisionMemberDtlList.store.getAt(cnt);
        var Valid = false;
        for (Count = 0; Count < QuotationRevisionCategoryDltList.store.getCount() ; Count++) {
            CategoryRecord = QuotationRevisionCategoryDltList.store.getAt(Count);
            if (MemberRecord.get('CategoryCode') == CategoryRecord.get('CategoryCode'))
                Valid = true;
        }
        if (!Valid) {
            Ext.MessageBox.alert(login.modulename, 'In Member Detail, Member ' + MemberRecord.get('Member_Name') + ' Must have one of the Category in Category Detail!');
            return;
            break;
        }
    }

    var QRevMemPolicyPremiumDltList = Ext.getCmp('QRevMemPolicyPremiumDltList');
    if (QRevMemPolicyPremiumDltList.store.getCount() > 0) {
        Ext.MessageBox.confirm(login.modulename, 'Premium value already calculated. Do you want to calculate again ?', function (button) {
            if (button == 'yes') {

                onBusinessTypeclear('QRevMemPolicyPremiumDltList');

                var QRevMember = [];
                var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
                var count = 0
                for (cnt = 0; cnt < QuotationRevisionMemberDtlList.store.getCount() ; cnt++) {
                    QRevMember.push(Ext.encode(QuotationRevisionMemberDtlList.store.getAt(cnt).data));
                }

                var QRevMemberDetecordRow = '[' + QRevMember.join(',') + ']';


                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRPosting.aspx',
                    params: {
                        action: 'QRevBenefitPremiumFilter',
                        QuotationCode: Ext.getCmp('QuotationRevision').selectedIndex,
                        QRevMemberDetecordRow: QRevMemberDetecordRow,
                        BasePremium: Ext.getCmp('QuotationRevision-BasePremium').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });

                Ext.Ajax.on('requestcomplete', QRevBenefitPremiumFilterCompleted, this);
            }
        }, this);
    }
    else {
        onBusinessTypeclear('QRevMemPolicyPremiumDltList');

        var QRevMember = [];
        var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
        var count = 0
        for (cnt = 0; cnt < QuotationRevisionMemberDtlList.store.getCount() ; cnt++) {
            QRevMember.push(Ext.encode(QuotationRevisionMemberDtlList.store.getAt(cnt).data));
        }

        var QRevMemberDetecordRow = '[' + QRevMember.join(',') + ']';


        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'QRevBenefitPremiumFilter',
                QuotationCode: Ext.getCmp('QuotationRevision').selectedIndex,
                QRevMemberDetecordRow: QRevMemberDetecordRow,
                BasePremium: Ext.getCmp('QuotationRevision-BasePremium').getValue()
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });

        Ext.Ajax.on('requestcomplete', QRevBenefitPremiumFilterCompleted, this);
    }

    //var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
    //var QRevMemPolicyPremiumDltGrid = Ext.getCmp('QRevMemPolicyPremiumDltList');
    //QRevMemPolicyPremiumDltGrid.store.pruneModifiedRecords = true;
    //QRevMemPolicyPremiumDltGrid.store.added = [];
    //QRevMemPolicyPremiumDltGrid.store.modified = [];
    //QRevMemPolicyPremiumDltGrid.store.pruneModifiedRecords = false;
    //QRevMemPolicyPremiumDltGrid.pageBar.updateInfo();
    //for (var i = 0; i < QuotationRevisionMemberDtlList.store.getCount() ; i++) {
    //    var record = QuotationRevisionMemberDtlList.store.getAt(i);

    //    QRevMemPolicyPremiumDltGrid.storeId += 1;
    //    if (record.get('IsNew') == true || record.get('IsBasePremiumAvail') == 0) {
    //var newRecord = new QRevMemPolicyPremiumDltGrid.recordType({
    //    ID: QRevMemPolicyPremiumDltGrid.storeId,
    //    SerialNo: QRevMemPolicyPremiumDltGrid.storeId,
    //    Quot_Rev_Mem_Code: record.get('ID'),
    //    BenefitIDCode: 0,
    //    BenefitIDName: 'Benefit',
    //    BenefitName: 'Benefit',
    //    Premium_TypeCode: 0,
    //    Premium_TypeName: 'Base',
    //    Description: 'Base',
    //    DefaultValue: Ext.getCmp('QuotationRevision-BasePremium').getValue(),
    //    CalcMethodCode: 0,
    //    CalcMethodName: 'Amount',
    //    Premium_Value: Ext.getCmp('QuotationRevision-BasePremium').getValue(),
    //    LegalEntityCode: 0,
    //    CustomerCode: 0,
    //    CompanyCode: record.get('CompanyCode'),
    //    LocationCode: record.get('LocationCode'),
    //    IsNew: true,
    //    IsDirty: true,
    //    IsDeleted: false,
    //    IsSavable: true,
    //    IsValid: true
    //});
    //        QRevMemPolicyPremiumDltGrid.stopEditing();
    //        QRevMemPolicyPremiumDltGrid.store.add(newRecord);
    //        QRevMemPolicyPremiumDltGrid.store.totalLength = QRevMemPolicyPremiumDltGrid.store.getTotalCount() + 1;
    //        QRevMemPolicyPremiumDltGrid.pageBar.updateInfo();
    //        record.set('IsDirty', true);
    //    }
    //}
    //var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
    //QuotationRevisionMemberDtlList.store.load({
    //    params: {
    //        start: 0,
    //        limit: QuotationRevisionMemberDtlList.pageSize
    //    }
    //});
}

function QRevBenefitPremiumFilterCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', QRevBenefitPremiumFilterCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var QuotationRevisionMemberDtlList = Ext.getCmp('QuotationRevisionMemberDtlList');
    var QRevMemPolicyPremiumDltList = Ext.getCmp('QRevMemPolicyPremiumDltList');

    var TotalFinalPremium = 0;

    //for (var i = 0; i < QuotationRevisionMemberDtlList.store.getCount() ; i++) {
    //    var record = QuotationRevisionMemberDtlList.store.getAt(i);

    //    QRevMemPolicyPremiumDltList.storeId += 1;
    //    //if (record.get('IsNew') == true || record.get('IsBasePremiumAvail') == 0) {}
    //    var newRecord = new QRevMemPolicyPremiumDltList.recordType({
    //        ID: QRevMemPolicyPremiumDltList.storeId,
    //        SerialNo: QRevMemPolicyPremiumDltList.storeId,
    //        Quot_Rev_Mem_Code: record.get('ID'),
    //        BenefitIDCode: 0,
    //        BenefitIDName: 'Benefit',
    //        BenefitName: 'Benefit',
    //        Premium_TypeCode: 0,
    //        Premium_TypeName: 'Base',
    //        Description: 'Base',
    //        DefaultValue: Ext.getCmp('QuotationRevision-BasePremium').getValue(),
    //        CalcMethodCode: 0,
    //        CalcMethodName: 'Amount',
    //        Premium_Value: Ext.getCmp('QuotationRevision-BasePremium').getValue(),
    //        LegalEntityCode: 0,
    //        CustomerCode: 0,
    //        CompanyCode: record.get('CompanyCode'),
    //        LocationCode: record.get('LocationCode'),
    //        IsNew: true,
    //        IsDirty: true,
    //        IsDeleted: false,
    //        IsSavable: true,
    //        IsValid: true
    //    });
    //    TotalFinalPremium += (1 * Ext.getCmp('QuotationRevision-BasePremium').getValue());
    //    QRevMemPolicyPremiumDltList.stopEditing();
    //    QRevMemPolicyPremiumDltList.store.add(newRecord);
    //    QRevMemPolicyPremiumDltList.store.totalLength = QRevMemPolicyPremiumDltList.store.getTotalCount() + 1;
    //    QRevMemPolicyPremiumDltList.pageBar.updateInfo();
    //    record.set('IsDirty', true);

    //}

    for (cnt = 0; cnt < responseText.MemberBenefitdatum.length; cnt++) { //Member Detalis
        var Record = responseText.MemberBenefitdatum[cnt];
        var DocAvailable = false;

        QRevMemPolicyPremiumDltList.storeId += 1;
        var newRecord = new QRevMemPolicyPremiumDltList.recordType({
            ID: QRevMemPolicyPremiumDltList.storeId,
            SerialNo: QRevMemPolicyPremiumDltList.storeId,
            Quot_Rev_Mem_Code: Record.MemberCode,
            BenefitIDCode: Record.BeniftCode,
            BenefitIDName: Record.BenefitId,
            BenefitName: 'Benefit',
            Premium_TypeCode: Record.PremiumType,
            Premium_TypeName: Record.PremiumType == 0 ? 'Base' : 'Benefit',
            Description: Record.Description,
            DefaultValue: Record.Premium,
            CalcMethodCode: 0,
            CalcMethodName: 'Amount',
            Premium_Value: Record.Premium,
            LegalEntityCode: 0,
            CustomerCode: 0,
            CompanyCode: login.CompanyCode,
            LocationCode: login.CompanyCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        TotalFinalPremium += (1 * Record.Premium);
        QRevMemPolicyPremiumDltList.stopEditing();
        QRevMemPolicyPremiumDltList.store.add(newRecord);
        QRevMemPolicyPremiumDltList.store.totalLength = QRevMemPolicyPremiumDltList.store.getTotalCount() + 1;
        QRevMemPolicyPremiumDltList.pageBar.updateInfo();
    }
    var detailGrid = Ext.getCmp('QuotationRevisionMemberDtlList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
    Ext.getCmp('QuotationRevision-FinalPremium').setValue(TotalFinalPremium);
}

function QuotationPostOfRevisionHandler(Button, Option) {

    var selectIndex = Ext.getCmp('NGIQuotationMaster').selectedIndex;

    if (selectIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
        return;
    }

    Ext.getCmp('ID_NGIQUOTATIONMASTER_editform').close();
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostOfRevision',
            selectIndex: selectIndex,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostOfRevisionComplete, this);

}

function PostOfRevisionComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PostOfRevisionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        var QuotationRevision = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.QuotationRevision';
        var Url = '/forms/HumanResources/NGI/UnderWritting/QuotationRevision.xml';
        var WidgetTitle = 'Quotation Revision';
        QuotationRevision.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
    }

}

function PolicyConversionBackBtHandler(card, btnID, direction) {

    card = Ext.getCmp(card);
    var PolicymasterCode = Ext.getCmp('PoliciesConversation-PolicymasterCode');
    var PolicyrevisionCode = Ext.getCmp('PoliciesConversation-PolicyrevisionCode');
    var PolicyCode = Ext.getCmp('PoliciesConversation-PolicyCode');
    var Policy = Ext.getCmp('PoliciesConversation-Policy');
    PolicymasterCode.disable();
    PolicyrevisionCode.disable();
    if (card.actItemInd == 4) {
        card.actItemInd = 3;
    }
    else if (card.actItemInd == 3) {
        card.actItemInd = 2;
    }
    else if (card.actItemInd == 2) {
        card.actItemInd = 1;
    }
    else if (card.actItemInd == 1) {
        if (PolicyCode.editValue == 1) {
            PolicymasterCode.enable();
            PolicyrevisionCode.disable();
            PolicyCode.enable();
            Policy.enable();
        }
        else {
            PolicymasterCode.disable();
            PolicyrevisionCode.enable();
            PolicyCode.enable();
            Policy.enable();
        }
        card.actItemInd = 0;
    }
    else
        card.actItemInd = card.actItemInd - direction;

    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);

    if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
    else Ext.getCmp(btnID + 'move-prev').disable();

    if (card.actItemInd == (card.MaxItems - 1)) {
        Ext.getCmp(btnID + 'move-next').disable();
        Ext.getCmp(btnID + 'move-finish').enable();
    }
    else {
        Ext.getCmp(btnID + 'move-next').enable();
        Ext.getCmp(btnID + 'move-finish').disable();
    }

    if (card.actItemInd == (card.MinItems - 1)) {
        Ext.getCmp(btnID + 'move-prev').disable();
    }
    else {
        Ext.getCmp(btnID + 'move-prev').enable();
    }
}

function PolicyConversionNextBtHandler(card, btnID, direction) {

    card = Ext.getCmp(card);
    var PolicyCode = Ext.getCmp('PoliciesConversation-PolicyCode');
    var PolicymasterCode = Ext.getCmp('PoliciesConversation-PolicymasterCode');
    var PolicyrevisionCode = Ext.getCmp('PoliciesConversation-PolicyrevisionCode');
    var Policy = Ext.getCmp('PoliciesConversation-Policy');

    var PolicyStartDate = Ext.getCmp('PoliciesConversation-PolicyStartDate').getValue();
    var PolicyEndDate = Ext.getCmp('PoliciesConversation-PolicyEndDate').getValue();
    var StartDate = new Date(PolicyStartDate);
    var EndDate = new Date(PolicyEndDate);

    if (card.actItemInd == 1) {
        if (StartDate != '' && EndDate != '' && StartDate >= EndDate) {
            Ext.MessageBox.alert(login.modulename, 'Policy End Date should be greater than Policy Start Date!');
            return;
        }
    }

    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);
            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });

    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }
    if (card.actItemInd == 0) {
        card.actItemInd = 0;
    }
    if (card.actItemInd == 1) {

        if (PolicymasterCode.editValue == 0 && PolicyrevisionCode.editValue == 0) {
            Ext.MessageBox.alert(login.modulename, 'You Must Select either Quotation Master or Quotation Revision !');
        }
        else if (Policy.getValue() == '' || Policy.getValue() == null) {
            Ext.MessageBox.alert(login.modulename, 'Policy Name Should not be Empty or Null! You Must Enter');
        }
        else {
            PolicymasterCode.disable();
            PolicyrevisionCode.disable();
            PolicyCode.disable();
            Policy.disable();
            card.actItemInd = 2;
        }
    }
    else if (card.actItemInd == 2) {

        var CategoryDetailgrid = Ext.getCmp('PoliciesConversionCategoryList');
        var CategoryCode = '';
        var CategoryRecord = [];
        for (var i = 0; i < CategoryDetailgrid.store.getCount() ; i++) {
            var record = CategoryDetailgrid.store.getAt(i);
            if (record.get('Selectcheck') == true) {
                CategoryRecord.push(record.data);
            }
        }
        for (var i = 0; i < CategoryRecord.length; i++) {
            CategoryCode += CategoryRecord[i].CategorydetailCode;
            if (i < (CategoryRecord.length) - 1)
                CategoryCode += ',';
        }

        if (CategoryCode == '') {
            onBusinessTypeclear('PoliciesConversationMemberList');
        }

        if (CategoryCode != '' && Ext.getCmp('PoliciesConversionCategoryList').isModified) {
            Ext.getCmp('PoliciesConversionCategoryList').isModified = false;
            if (PolicyrevisionCode.editValue != 0) {
                onBusinessTypeclear('PoliciesConversationMemberList');
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'PolicyConversionMemberLoad',
                        QuotationCode: PolicyrevisionCode.editValue,
                        CategoryCode: CategoryCode,
                        Type: 2
                    },

                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyConversionRevMasterLoadComplete, this);
            }
            else {
                onBusinessTypeclear('PoliciesConversationMemberList');
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'PolicyConversionMemberLoad',
                        QuotationCode: PolicymasterCode.editValue,
                        CategoryCode: CategoryCode,
                        Type: 1
                    },

                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyConversionQuoMasterMemberLoadComplete, this);
            }
        }
        card.actItemInd = 3;
    }
    else if (card.actItemInd == 3) {
        card.actItemInd = 4;

    }
    else
        card.actItemInd = card.actItemInd + direction;

    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);

    if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
    else Ext.getCmp(btnID + 'move-prev').disable();

    if (card.actItemInd == (card.MaxItems - 1)) {
        Ext.getCmp(btnID + 'move-next').disable();
        Ext.getCmp(btnID + 'move-finish').enable();
    }
    else {
        Ext.getCmp(btnID + 'move-next').enable();
        Ext.getCmp(btnID + 'move-finish').disable();
    }

    if (card.actItemInd == (card.MinItems - 1)) {
        Ext.getCmp(btnID + 'move-prev').disable();
    }
    else {
        Ext.getCmp(btnID + 'move-prev').enable();
    }

    var FilterQry = '';

    //if (card.actItemInd == 1) {

    //    DetailStore = Ext.getCmp('PoliciesConversionCategoryList').getStore();

    //    if (DetailStore && !DetailStore.Firstimeloaded) {
    //        DetailStore.Firstimeloaded = true;
    //        DetailStore.load({
    //            params: {
    //                start: 0,
    //                limit: 20
    //            }
    //        });
    //    }


    //}

    if (card.actItemInd == 3) {
        DetailStore = Ext.getCmp('PoliciesConversationMemberList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }

}

function PolicyConversionRevMasterLoadComplete(conn, response) {
    onBusinessTypeclear('PoliciesConversationMemberList');
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyConversionRevMasterLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {
        var Primary = Ext.getCmp('PoliciesConversation').selectedIndex;
        var PoliciesConversationMemberList = Ext.getCmp('PoliciesConversationMemberList');

        for (cnt = 0; cnt < responseText.RevMemberdatum.length; cnt++) {

            var RevMemberRecords = responseText.RevMemberdatum[cnt];

            PoliciesConversationMemberList.storeId += 1;
            var newRecord = new PoliciesConversationMemberList.recordType({
                ID: PoliciesConversationMemberList.storeId,
                Serialno: PoliciesConversationMemberList.storeId,
                Policy_Conv_Code: Primary == -1 ? 1 : Primary,
                Type: 2,
                Remarks: '',
                LegalentityCode: 0,
                CustomerCode: 0,
                QuoMemberDetailCode: RevMemberRecords.ID,
                MemberName: RevMemberRecords.Member_Name,
                NationalityName: RevMemberRecords.NationalityName,
                MaritalstatusName: RevMemberRecords.MaritalStatusName,
                MemberrelationName: RevMemberRecords.MemberRelationName,
                GenderName: RevMemberRecords.GenderName,
                PoliciesConversationMemberDtlList: null,
                Selectcheck: true,

                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PoliciesConversationMemberList.stopEditing();
            PoliciesConversationMemberList.store.add(newRecord);
            PoliciesConversationMemberList.store.totalLength = PoliciesConversationMemberList.store.getTotalCount() + 1;
            PoliciesConversationMemberList.pageBar.updateInfo();
        }

    }
}


function PolicyConversionQuoMasterMemberLoadComplete(conn, response) {
    onBusinessTypeclear('PoliciesConversationMemberList');
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyConversionQuoMasterMemberLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {
        var Primary = Ext.getCmp('PoliciesConversation').selectedIndex;
        var PoliciesConversationMemberList = Ext.getCmp('PoliciesConversationMemberList');

        for (cnt = 0; cnt < responseText.MasterMemberdatum.length; cnt++) {

            var MasMemberRecords = responseText.MasterMemberdatum[cnt];

            PoliciesConversationMemberList.storeId += 1;
            var newRecord = new PoliciesConversationMemberList.recordType({
                ID: PoliciesConversationMemberList.storeId,
                Serialno: PoliciesConversationMemberList.storeId,
                Policy_Conv_Code: Primary == -1 ? 1 : Primary,
                Type: 1,
                Remarks: '',
                LegalentityCode: 0,
                CustomerCode: 0,
                QuoMemberDetailCode: MasMemberRecords.ID,
                MemberName: MasMemberRecords.Member_Name,
                NationalityName: MasMemberRecords.NationalityName,
                MaritalstatusName: MasMemberRecords.Marital_statusName,
                MemberrelationName: MasMemberRecords.Member_Relation_Name,
                GenderName: MasMemberRecords.Member_genderName,
                PoliciesConversationMemberDtlList: null,
                Selectcheck: true,

                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PoliciesConversationMemberList.stopEditing();
            PoliciesConversationMemberList.store.add(newRecord);
            PoliciesConversationMemberList.store.totalLength = PoliciesConversationMemberList.store.getTotalCount() + 1;
            PoliciesConversationMemberList.pageBar.updateInfo();

        }

    }
}

function PolicyConversionCancelBtnHandler(card, btnID, direction) {

    card = Ext.getCmp('PoliciesConversationWIZ001');
    card.actItemInd = 0;
    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);
    var PolicyCode = Ext.getCmp('PoliciesConversation-PolicyCode');
    var PolicymasterCode = Ext.getCmp('PoliciesConversation-PolicymasterCode');
    var PolicyrevisionCode = Ext.getCmp('PoliciesConversation-PolicyrevisionCode');
    Ext.getCmp('WIZ001move-next').enable();
    Ext.getCmp('WIZ001move-prev').disable();
    Ext.getCmp('WIZ001move-finish').disable();
    if (PolicyCode.editValue == 1) {
        PolicymasterCode.enable();
        PolicyrevisionCode.disable();
        PolicyCode.enable();
    }
    else {
        PolicymasterCode.disable();
        PolicyrevisionCode.enable();
        PolicyCode.enable();
    }
}
function AddCommentsButtonHandler() {
    var DotLine = '--------------------------------------------------------------------------------------------------------------------------------------------------';
    var Remarks = Ext.getCmp('PoliciesConversation-Remarks');
    var Comments = Ext.getCmp('PoliciesConversation-Comments');
    var AddComment = Remarks.getValue();
    /*
    if (Remarks.getValue() == null || Remarks.getValue() == '')
        Remarks.setValue(Comments.getValue());
    else
        Remarks.setValue(Remarks.getValue() + "\n" + Comments.getValue());
    */


    var Coment = AddComment + "\n" + login.UserName.toUpperCase() + " " + "[" + new Date().format(login.jsdateformat + " " + (login.TimeFormat == 'hh:mm:ss tt' ? 'h:i:s a' : (login.TimeFormat == 'hh:mm tt' ? 'h:i a' : 'H:i'))) + "]: \n" + Comments.getValue() + "\n" + DotLine;
    Remarks.setValue(Coment);

    Comments.setValue(null);



}
function PolicyConversionBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);
    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);

                Ext.MessageBox.show({
                    title: GlobalTerminologies.LBLERROR,
                    msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });

    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }



    PolicyConversionForm = Ext.getCmp('PoliciesConversation');
    var params = {};
    PolicyConversionForm.form.items.each(function (f) {
        if (f.isValid && !f.isValid(true)) {
            Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, f.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return;
        }

        if (f.disabled) {
            params[f.id + 'DISVAL'] = f.getValue();
        }

        if (f.dataColumn && f.editValue && f.editValue != 0 && f.editValue != f.getValue() && f.value != '') {
            f.setValue(f.editValue);
        }

        //to get the invisible tab values
        if (!f.rendered) {
            if (f.editValue) {
                params[f.id + 'DISVAL'] = f.editValue;
            }
            else {
                params[f.id + 'DISVAL'] = f.getValue();
            }
        }

        if (f.xtype == 'htmleditor') {
            f.value = Ext.util.Format.htmlEncode(f.getValue());
            f.el.dom.value = Ext.util.Format.htmlEncode(f.getValue());
        }

    });

    if (PolicyConversionForm.form.isValid() == true) {
        var detailNames = [];
        var detailData = [];
        var details = PolicyConversionForm.findByType('detailgrid');
        for (var i = 0, len = details.length; i < len; i++) {
            if (!details[i].isValid(true)) return;
            var tempData = [];
            var ds = details[i].getStore();
            var editedRecords = ds.getModifiedRecords();
            if (details[i].mustHaveChild) {
                showError = false;
                if (PolicyConversionForm.selectedIndex == -1 && ds && ds.getCount() == 0) {
                    showError = true;
                } else if ((PolicyConversionForm.selectedIndex != -1) && (details[i].rendered) && (ds.getCount() == 0) && !(details[i].masterName)) {
                    showError = true;
                }
                if (showError) {
                    Ext.MessageBox.show({
                        title: GlobalTerminologies.LBLERROR,
                        msg: details[i].title + ' ' + GlobalTerminologies.MSGCOMMON011,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    return;
                }
            }
            for (var j = 0, count = editedRecords.length; j < count; j++) {
                var record = editedRecords[j];
                if (record.get('IsNew') == false) {
                    var recordData = Ext.apply({}, editedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            var addedRecords = ds.getAddedRecords();
            for (var j = 0, count = addedRecords.length; j < count; j++) {
                var record = addedRecords[j];
                if (record.get('IsDeleted') == false) {
                    var recordData = Ext.apply({}, addedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            if (tempData.length > 0) {
                var temp = '[' + tempData.join(',') + ']';
                detailData.push(temp);
                var detailName = details[i].getBOName();
                if (detailName) detailName = detailName.substr(detailName.lastIndexOf('.') + 1);
                detailNames.push(detailName);
            }
        }
        for (var j = 0, lenj = details.length; j < lenj; j++) {
            details[j].loadData = true;
        }
        //var params = {};
        if (detailNames.length > 0 && detailData.length > 0) {
            params.detailnames = detailNames.join(',');
            params.detaildata = '[' + detailData.join(',') + ']';
        }

        params.action = 'save';
        params.id = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PoliciesConversation';
        if (Ext.getCmp('PoliciesConversation').selectedIndex) {
            params.index = (Ext.getCmp('PoliciesConversation').selectedIndex);
        }
        else {
            params.index = -1;
        }
        PolicyConversionForm.form.baseParams = params;
        showMask(GlobalTerminologies.MSGSAVEWIDGET);
        PolicyConversionForm.form.submit({});
    }
}


function CardPrint(form, login) {

    if (!form.isview) {

        var MemberCode = Ext.getCmp('CardPrint-MemberCode');

        if (MemberCode) MemberCode.on('beforequery', function (evt) {
            var PolicyCode = Ext.getCmp('CardPrint-PolicyCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "IM.MEMBER_CODE in  (select MEMBERCODE from  IM_MEMBERPOLICY where POLICYCODE=" + PolicyCode + " and MEMBERENDDATE is null ) and IM.PRINTT=0";
        }, this);

        var Policy = Ext.getCmp('CardPrint-PolicyIDCode');
        var Type = Ext.getCmp('CardPrint-PolicyTypeCode');
        Policy.disable();
        if (Type) Type.on('select', function (combo, record, index) {
            if (Type.getValue() != '')
                Policy.enable();
        }, this);
        if (Policy) Policy.on('beforequery', function (evt) {
            var Type = Ext.getCmp('CardPrint-PolicyTypeCode').getValue();
            if (Type == 1) {  // Policy
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "pol.TypeCode=1";
            }
            if (Type == 2) { // Individual Policy
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "pol.TypeCode=2";
            }

        }, this);
    }
}

function CardRePrint(form, login) {
    if (!form.isview) {

        var MemberCode = Ext.getCmp('CardRePrint-MemberCode');

        if (MemberCode) MemberCode.on('beforequery', function (evt) {
            var PolicyCode = Ext.getCmp('CardRePrint-PolicyCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " IM.MEMBER_CODE in  (select MEMBERCODE from  IM_MEMBERPOLICY where POLICYCODE=" + PolicyCode + " and MEMBERENDDATE is null ) and IM.PRINTT=1 ";
        }, this);

    }
}

function CardReturn(form, login) {
    if (!form.isview) {

        var MemberCode = Ext.getCmp('CardReturn-MemberCode');

        if (MemberCode) MemberCode.on('beforequery', function (evt) {
            var PolicyCode = Ext.getCmp('CardReturn-PolicyCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " IM.MEMBER_CODE in  (select MEMBERCODE from  IM_MEMBERPOLICY where POLICYCODE=" + PolicyCode + " and MEMBERENDDATE is not null) and IM.PRINTT=1 ";
        }, this);

    }
}



function ProviderSetting(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('ProviderSetting-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
    }
}

function RecommendedUBPIDButtonHandler(form, login) {

    var PolicyBenefitsDtlList = Ext.getCmp('PolicyBenefitsDtlList');
    var record = '';
    var Count = PolicyBenefitsDtlList.store.getCount();
    for (i = 0; i < Count; i++) {
        record += PolicyBenefitsDtlList.store.getAt(i).get('BenefitIDCode');
        if (i < Count - 1)
            record += ',';
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadUBPID',
            UBPIDBenefitCode: record,
            Type: 1,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnRecommendedUBPIDButtonComplete, this);
}
function RecommendedIndUBPIDButtonHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadUBPID',
            Type: 2,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnRecommendedUBPIDButtonComplete, this);
}
function OnRecommendedUBPIDButtonComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', OnRecommendedUBPIDButtonComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.UBPIDPopupForm = new Ext.form.FormPanel(responseText.LoadUBPIDPopupCofig);
    this.UBPIDPopupForm.addButton({
        text: 'Load',
        handler: function () {
            var UBPIDPopUpDetailList = Ext.getCmp('UBPIDPopUpDetailList');
            var count = 0;
            var value = 0;
            for (var cnt = 0; cnt < UBPIDPopUpDetailList.store.getCount() ; cnt++) {
                if (UBPIDPopUpDetailList.store.getAt(cnt).get('Selects') == true) {
                    value = UBPIDPopUpDetailList.store.getAt(cnt).get('ID');
                    count++;
                }
            }
            if (count == 0) {
                Ext.MessageBox.alert(login.modulename, 'Cannot Load! Please Select One Record!');
                return;
            }
            if (count > 1) {
                Ext.MessageBox.alert(login.modulename, 'Do Not Select More than One Record!');
                return;
            }
            if (responseText.Type == 1) {
                Ext.getCmp('Policy-UbipCode').setComboValue(value);
            } else {
                Ext.getCmp('IndividualPolicies-UbipCode').setComboValue(value);
            }

            this.UBPIDPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.UBPIDPopupForm.FormFieldsCount + 2
    });

    this.UBPIDPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.UBPIDPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.UBPIDPopupForm.FormFieldsCount + 2
    });
    this.UBPIDPopupFormWindow = new Ext.Window({
        id: 'UBPIDPopupFormWindow',
        title: 'Load Recommended',
        closable: true,
        minimizable: false,
        width: this.UBPIDPopupForm.width + 10,
        height: this.UBPIDPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.UBPIDPopupForm]
    });
    this.UBPIDPopupFormWindow.show();
}


function DriverMaster(form, login) {

    if (!form.isView) {
        Ext.getCmp('DriverMaster-StatuCcode').setComboValue(0);
        Ext.getCmp('DriverMaster-StatuCcode').disable();
    }
    if (!form.isView) {
        var CheckAddress = Ext.getCmp('DriverMaster-CheckAddress');



        CheckAddress.on('check', onCheckAddress, this);



    }
}

function onCheckAddress(field, checked) {

    var Address = Ext.getCmp('DriverMaster-Address');
    var PinCode = Ext.getCmp('DriverMaster-PinCode');

    var PermenantAddress = Ext.getCmp('DriverMaster-PermenantAddress');
    var PermenantPinCode = Ext.getCmp('DriverMaster-PermenantPinCode');

    if (checked) {

        PermenantAddress.setValue(Address.getValue());
        PermenantPinCode.setValue(PinCode.getValue());
    }

    else {
        PermenantAddress.setValue(null);
        PermenantPinCode.setValue(null);
    }

}


function DriverVehicleAssign(form, login) {
    if (!form.isView) {
        Ext.getCmp('DriverVehicleAssign-StatusCode').setComboValue(0);
        Ext.getCmp('DriverVehicleAssign-StatusCode').disable();
    }

}


function HLDrivervehicleAssignPost(form, login) {
    var PrimKey = Ext.getCmp('DriverVehicleAssign').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HLDrivervehicleAssignPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HLDrivervehicleAssignPostComplete, this);
}
function HLDrivervehicleAssignPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HLDrivervehicleAssignPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DRIVVECHICASSIGN_editform').close();
    }

}

function VehicleLandmark(form, login) {
}

function HLVehileLandMarkChangePost(form, login) {
    var VehicleCode = Ext.getCmp('VehicleLandmark-VehicleCode').getValue();
    var LandmarkCode = Ext.getCmp('VehicleLandmark-LandmarkCode').getValue();

    if (VehicleCode == '' || VehicleCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please Enter The Specified Vehicle ID To Change The Landmark!');
        return;
    }

    if (LandmarkCode == '' || LandmarkCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please Enter The Landmark !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HLVehileLandMarkChangePost',
            VehicleCode: VehicleCode,
            LandmarkCode: LandmarkCode,

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HLVehileLandMarkChangePostComplete, this);
}

function HLVehileLandMarkChangePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HLVehileLandMarkChangePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLANCHANG_editform').close();
    }

}


function VehicleAttendance(form, login) {

    if (!form.isView) {

        Ext.getCmp('VehicleAttendance-StatusCode').setComboValue(0);
        Ext.getCmp('VehicleAttendance-StatusCode').disable();
    }
}


function VehicleAttendancePost(Button, Option) {
    var PrimKey = Ext.getCmp('VehicleAttendance').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehicleAttendancePost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehicleAttendancePostComplete, this);
}

function VehicleAttendancePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', VehicleAttendancePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLEATTENDANCE_editform').close();
    }
}

function VehicleTariff(form, login) {

    if (!form.isView) {

        Ext.getCmp('VehicleTariff-StatusCode').setComboValue(0);
        Ext.getCmp('VehicleTariff-StatusCode').disable();
        var Processedby = Ext.getCmp('VehicleTariff-Processedby').disable();
        Processedby.setValue(login.username);
        Processedby.disable();

        var Det = Ext.getCmp('VehicleTariffDetailList');
        Det.on('afteredit', function (e) {

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var TotalAmount = 0;
                var Record = e.grid.store.getAt(i);
                if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {
                    TotalAmount += (Record.get('Totaltariff') - Record.get('Discountvalue'));
                }
                else if (Record.get('DiscountTypeCode') == 1) {
                    TotalAmount += (Record.get('Totaltariff') - ((Record.get('Totaltariff') * Record.get('Discountvalue')) / 100));
                }
                e.grid.store.getAt(i).set('Netvalue', TotalAmount);
            }

        }, this);

        var PeriodCode = Ext.getCmp('VehicleTariff-PeriodCode');
        var VehicleCode = Ext.getCmp('VehicleTariffDetail-VehicleCode');

        if (VehicleCode) VehicleCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (IsIndividual.getValue() == true)
                evt.combo.store.baseParams.filter = " Ele.ISINDIVIDUAL=1";
            else
                evt.combo.store.baseParams.filter = "";
        }, this);

    }
}


function VehicleTariffPost(Button, Option) {
    var PrimKey = Ext.getCmp('VehicleTariff').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehicleTariffPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehicleTariffPostComplete, this);
}

function VehicleTariffPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', VehicleTariffPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLETARIFF_editform').close();
    }
}

function VehichleTariffButtonHdlr(Button, Option) {



    var Period = Ext.getCmp('VehicleTariff-PeriodCode').editValue;
    var Primkey = Ext.getCmp('VehicleTariff').selectedIndex;

    if (Primkey == -1) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: 'Please Save The Vehicle Tarrif Master To Process !',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        return;
    }

    var VehicleTariffDetailCnt = Ext.getCmp('VehicleTariffDetailList').store.getCount();

    if (VehicleTariffDetailCnt > 0) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: 'Vehicle Tariff Process Already Done For This Period !',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehicleTariffProcess',
            Period: Period,
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehicleTariffProcessComplete, this);
}

function VehicleTariffProcessComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', VehicleTariffProcessComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var store = Ext.getCmp('VehicleTariffDetailList').getStore();
        store.reload();
    }




}


function VehichleTariffReprocess(Button, Option) {


    var Period = Ext.getCmp('VehicleTariff-PeriodCode').editValue;


    var Primkey = Ext.getCmp('VehicleTariff').selectedIndex;
    // To reprocess
    var VehicleTariffDetailGrid = Ext.getCmp('VehicleTariffDetailList');



    var VehicleTariffDetailRecord = [];
    var count = 0
    for (cnt = 0; cnt < VehicleTariffDetailGrid.store.getCount() ; cnt++)
        if (VehicleTariffDetailGrid.store.getAt(cnt).get('Selectt') == true) {
            VehicleTariffDetailRecord.push(Ext.encode(VehicleTariffDetailGrid.store.getAt(cnt).data));

            count++;
        }


    var VehicleTariffDetailRecordRow = '[' + VehicleTariffDetailRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do Reprocess !");
        return true;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehichleTariffReprocessUpdate',
            VehicleTariffDetailRecordRow: VehicleTariffDetailRecordRow,
            Period: Period,
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehichleTariffReprocessComplete, this);

}

function VehichleTariffReprocessComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', VehichleTariffReprocessComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

    var store = Ext.getCmp('VehicleTariffDetailList').getStore();
    store.reload();
}


function ScreenSettingPopUpButton(form, login) {
    if (Ext.getCmp('ScreenSetting-MenuCode').getValue() == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select Menu Name');
        return;
    }
    showMask();
    var PrimKey = Ext.getCmp('ScreenSetting').selectedIndex;
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadScreenFieldSetting',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadScreenFieldSettingComplete, this);
}

function LoadScreenFieldSettingComplete(conn, response) {

    hideMask();

    Ext.Ajax.un('requestcomplete', LoadScreenFieldSettingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ScreenSettingPopUpForm = new Ext.form.FormPanel(responseText.LoadScreenFieldSettingCofig);
    this.ScreenSettingPopUpForm.selectedIndex = responseText.PKey;

    this.ScreenSettingPopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var ScreenSettingPopUpDtlList = Ext.getCmp('ScreenSettingPopUpDtlList');

            for (var pcnt = 0; pcnt < ScreenSettingPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = ScreenSettingPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.ScreenSettingPopUpForm.FormFieldsCount + 2
    });

    this.ScreenSettingPopUpForm.addButton({
        text: 'Load',
        handler: function () {

            var PrimKey = Ext.getCmp('ScreenSetting').selectedIndex;

            var ScreenSettingPopUpDtlList = Ext.getCmp('ScreenSettingPopUpDtlList');

            var ScreenSettingDtlList = Ext.getCmp('ScreenSettingDtlList');

            for (var pcnt = 0; pcnt < ScreenSettingPopUpDtlList.store.getCount() ; pcnt++) {
                var PopupRecord = ScreenSettingPopUpDtlList.store.getAt(pcnt);
                var DocAvailable = false;

                for (var cnt = 0; cnt < ScreenSettingDtlList.store.getCount() ; cnt++) {
                    var Record = ScreenSettingDtlList.store.getAt(cnt)
                    if (Record.get('Presentation') == PopupRecord.get('Presentation') && Record.get('Field') == PopupRecord.get('Field')) {
                        DocAvailable = true;
                        break;
                    }
                }
                if (DocAvailable) continue;


                if (!PopupRecord.get('Selectcheck')) continue;

                ScreenSettingDtlList.storeId += 1;
                var ServiceID = ScreenSettingDtlList.storeId;
                var newRecord = new ScreenSettingDtlList.recordType({
                    ID: ServiceID,
                    SerialNo: ServiceID,
                    ScreenSettingCode: (PrimKey == -1 ? 1 : PrimKey),//master primary Key
                    Presentation: PopupRecord.get('Presentation'),
                    FieldID: PopupRecord.get('FieldID'),
                    Field: PopupRecord.get('Field'),
                    Value: PopupRecord.get('Value'),
                    Display_EN: PopupRecord.get('Display_EN'),
                    Display_AR: PopupRecord.get('Display_AR'),
                    IsUpper: PopupRecord.get('IsUpper'),
                    AllowNull: PopupRecord.get('AllowNull'),
                    NonVisible: PopupRecord.get('NonVisible'),
                    NonEdit: PopupRecord.get('NonEdit'),
                    NotInEdit: PopupRecord.get('NotInEdit'),
                    NotRequired: PopupRecord.get('NotRequired'),
                    MinimumValue: PopupRecord.get('MinimumValue'),
                    MaximumValue: PopupRecord.get('MaximumValue'),
                    LocationCode: login.LocationCode,
                    CompanyCode: login.CompanyCode,

                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                ScreenSettingDtlList.stopEditing();
                ScreenSettingDtlList.store.add(newRecord);
                ScreenSettingDtlList.store.totalLength = ScreenSettingDtlList.store.getTotalCount() + 1;
                ScreenSettingDtlList.pageBar.updateInfo();

            }

            this.ScreenSettingPopUpWindow.close();

            var ScreenSettingDtlList = Ext.getCmp('ScreenSettingDtlList');
            ScreenSettingDtlList.store.load({
                params: {
                    start: 0,
                    limit: ScreenSettingDtlList.pageSize
                }
            });
        },


        scope: this,
        formBind: true,
        tabIndex: this.ScreenSettingPopUpForm.FormFieldsCount + 2
    });

    this.ScreenSettingPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ScreenSettingPopUpWindow.close();
        },
        scope: this,
        tabIndex: this.ScreenSettingPopUpForm.FormFieldsCount + 2
    });


    this.ScreenSettingPopUpWindow = new Ext.Window({
        id: 'ScreenSettingPopUpWindow',
        title: 'Reception Service Details',
        closable: true,
        minimizable: false,
        width: this.ScreenSettingPopUpForm.width + 10,
        height: this.ScreenSettingPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ScreenSettingPopUpForm]
    });
    this.ScreenSettingPopUpForm.on('render', ScreenSettingPopUp, this);
    this.ScreenSettingPopUpWindow.show();


}
function ScreenSettingPopUp(form, login) {
    if (!form.isView) {
        var ScreenSettingPopUpDtlList = Ext.getCmp('ScreenSettingPopUpDtlList');
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('IsUpper').editable = false;
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('AllowNull').editable = false;
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('NonVisible').editable = false;
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('NonEdit').editable = false;
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('NotInEdit').editable = false;
        ScreenSettingPopUpDtlList.getColumnModel().getColumnById('NotRequired').editable = false;
    }
}

function MemberPolicy(form, login) {

    if (form.isView) {
        var total1 = Ext.getCmp('MemberPolicy-RefundablePremiumTotal');
        var MemberPolicyRefundablePremiumDtlList = Ext.getCmp('MemberPolicyRefundablePremiumDtlList');
        MemberPolicyRefundablePremiumDtlList.store.on('load', function (store, record, options) {
            var UnitTotal = 0;
            for (var i = 0; i < MemberPolicyRefundablePremiumDtlList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('Premium_Value'));
            }
            total1.setRawValue(UnitTotal.toFixed(2));
        }, this);
        var total2 = Ext.getCmp('MemberPolicy-AdditionalPremiumTotal');
        var MemberPolicyPremiumDetailList = Ext.getCmp('MemberPolicyPremiumDetailList');
        MemberPolicyPremiumDetailList.store.on('load', function (store, record, options) {
            var UnitTotal = 0;
            for (var i = 0; i < MemberPolicyPremiumDetailList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('Premium_Value'));
            }
            total2.setRawValue(UnitTotal.toFixed(2));
        }, this);
        var total3 = Ext.getCmp('MemberPolicy-SumInsurerTotal');
        var MemberPolicyDetailList = Ext.getCmp('MemberPolicyDetailList');
        MemberPolicyDetailList.store.on('load', function (store, record, options) {
            var UnitTotal = 0;
            for (var i = 0; i < MemberPolicyDetailList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('Suminsurer'));
            }
            total3.setRawValue(UnitTotal.toFixed(2));
        }, this);
        var total4 = Ext.getCmp('MemberPolicy-BenefitLimitTotal');
        var MemberPolicyDetailList = Ext.getCmp('MemberPolicyDetailList');
        MemberPolicyDetailList.store.on('load', function (store, record, options) {
            var UnitTotal = 0;
            for (var i = 0; i < MemberPolicyDetailList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('BenefitLimit'));
            }
            total4.setRawValue(UnitTotal.toFixed(2));
        }, this);
    }

}

function AttEmployeePost(fom, login) {

    var Status = Ext.getCmp('AttEmployeeLeaveEntry-StatusCode').getValue();
    var PrimKey = Ext.getCmp('AttEmployeeLeaveEntry').selectedIndex;
    if (Status == 1) {
        Ext.MessageBox.alert(login.modulename, 'Record is already posted !');
        return;
    }
    else {
        Ext.getCmp('AttEmployeeLeaveEntry-StatusCode').disable();
    }
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AttendanceEmpPosting',
            PrimKey: PrimKey


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AttendanceEmpPostingComplete, this);
}

function AttendanceEmpPostingComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', AttendanceEmpPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


    }
    Ext.getCmp('ID_EMPLOYEELEAVE_editform').close();
}

function AttEmployeeOptionPost(fom, login) {

    var Status = Ext.getCmp('AttEmployeeLeaveOptions-StatusCode').getValue();
    var PrimKey = Ext.getCmp('AttEmployeeLeaveOptions').selectedIndex;
    if (Status == 1) {
        Ext.MessageBox.alert(login.modulename, 'Record is already posted !');
        return;
    }
    else {
        Ext.getCmp('AttEmployeeLeaveOptions-StatusCode').disable();
    }
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AttendanceEmpOptionPostingTest',
            PrimKey: PrimKey


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AttendanceEmpOptionPostingComplete, this);
}


function AttendanceEmpOptionPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AttendanceEmpOptionPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_EMPLOYEELEAVEOPTION_editform').close();
    }

}

function WorkingHours(form, login) {

    var From = Ext.getCmp('WorkingHours-From');
    var To = Ext.getCmp('WorkingHours-To');
    var BreakFrom = Ext.getCmp('WorkingHours-BreakFrom');
    var BreakTo = Ext.getCmp('WorkingHours-BreakTo');
    var TotalWorkingHours = Ext.getCmp('WorkingHours-TotalWorkingHours');

    if (From) From.on('blur', onQRMemberDOBBlur, this);
    if (To) To.on('blur', onQRMemberDOBBlur, this);
    if (BreakFrom) BreakFrom.on('blur', onQRMemberDOBBlur, this);
    if (BreakTo) BreakTo.on('blur', onQRMemberDOBBlur, this);






}

function onQRMemberDOBBlur(field) {

    var From = Ext.getCmp('WorkingHours-From').getValue();
    var To = Ext.getCmp('WorkingHours-To').getValue();
    var BreakFrom = Ext.getCmp('WorkingHours-BreakFrom').getValue();
    var BreakTo = Ext.getCmp('WorkingHours-BreakTo').getValue();
    var TotalWorkingHours = Ext.getCmp('WorkingHours-TotalWorkingHours');


    var IIn1 = (new Date("01/01/2007 " + From).getHours() * 60) + new Date("01/01/2007 " + From).getMinutes();
    var OOut1 = (new Date("01/01/2007 " + BreakFrom).getHours() * 60) + new Date("01/01/2007 " + BreakFrom).getMinutes();


    var IIn2 = (new Date("01/01/2007 " + BreakTo).getHours() * 60) + new Date("01/01/2007 " + BreakTo).getMinutes();
    var OOut2 = (new Date("01/01/2007 " + To).getHours() * 60) + new Date("01/01/2007 " + To).getMinutes();


    if (IIn1 >= OOut2) {
        Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "To" Time !');
        return;
    }
    if (OOut1 <= IIn1) {
        Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "BreakFrom" Time !');
        return;
    }

    if (IIn2 <= OOut1) {
        Ext.MessageBox.alert(login.modulename, '"BreakFrom" Time should be lesser than the "BreakTo" Time !');
        return;
    }


    if (IIn2 >= OOut2) {
        Ext.MessageBox.alert(login.modulename, '"Break To" Time should be lesser than the "To" Time !');
        return;
    }


    var MorWorkHrs = 0;
    var EveWorkHrs = 0;

    if (OOut1 > IIn1) {
        MorWorkHrs = (OOut1 - IIn1);
    }

    if (OOut2 > IIn2 && IIn2 > OOut1) {
        EveWorkHrs = (OOut2 - IIn2);
    }

    var TotWorkHrs = (MorWorkHrs + EveWorkHrs);

    var twhr = Math.floor(TotWorkHrs / 60) + ((TotWorkHrs % 60) / 100);
    TotalWorkingHours.setValue(twhr);
}


function GEWorkingHours(form, login) {
    var From = Ext.getCmp('GEWorkingHours-From');
    var To = Ext.getCmp('GEWorkingHours-To');
    var BreakFrom = Ext.getCmp('GEWorkingHours-BreakFrom');
    var BreakTo = Ext.getCmp('GEWorkingHours-BreakTo');
    var TotalWorkingHours = Ext.getCmp('GEWorkingHours-TotalWorkingHours');

    if (From) From.on('blur', ongeQRMemberDOBBlur, this);
    if (To) To.on('blur', ongeQRMemberDOBBlur, this);
    if (BreakFrom) BreakFrom.on('blur', ongeQRMemberDOBBlur, this);
    if (BreakTo) BreakTo.on('blur', ongeQRMemberDOBBlur, this);

}
function ongeQRMemberDOBBlur(field) {

    var From = Ext.getCmp('GEWorkingHours-From').getValue();
    var To = Ext.getCmp('GEWorkingHours-To').getValue();
    var BreakFrom = Ext.getCmp('GEWorkingHours-BreakFrom').getValue();
    var BreakTo = Ext.getCmp('GEWorkingHours-BreakTo').getValue();
    var TotalWorkingHours = Ext.getCmp('GEWorkingHours-TotalWorkingHours');


    var IIn1 = (new Date("01/01/2007 " + From).getHours() * 60) + new Date("01/01/2007 " + From).getMinutes();
    var OOut1 = (new Date("01/01/2007 " + BreakFrom).getHours() * 60) + new Date("01/01/2007 " + BreakFrom).getMinutes();


    var IIn2 = (new Date("01/01/2007 " + BreakTo).getHours() * 60) + new Date("01/01/2007 " + BreakTo).getMinutes();
    var OOut2 = (new Date("01/01/2007 " + To).getHours() * 60) + new Date("01/01/2007 " + To).getMinutes();


    if (IIn1 >= OOut2) {
        Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "To" Time !');
        return;
    }
    if (OOut1 <= IIn1) {
        Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "BreakFrom" Time !');
        return;
    }

    if (IIn2 <= OOut1) {
        Ext.MessageBox.alert(login.modulename, '"BreakFrom" Time should be lesser than the "BreakTo" Time !');
        return;
    }


    if (IIn2 >= OOut2) {
        Ext.MessageBox.alert(login.modulename, '"Break To" Time should be lesser than the "To" Time !');
        return;
    }


    var MorWorkHrs = 0;
    var EveWorkHrs = 0;

    if (OOut1 > IIn1) {
        MorWorkHrs = (OOut1 - IIn1);
    }

    if (OOut2 > IIn2 && IIn2 > OOut1) {
        EveWorkHrs = (OOut2 - IIn2);
    }

    var TotWorkHrs = (MorWorkHrs + EveWorkHrs);

    var twhr = Math.floor(TotWorkHrs / 60) + ((TotWorkHrs % 60) / 100);
    TotalWorkingHours.setValue(twhr);
}

//function QuotationPostHandler(Button, Option) {

//    var selectIndex = Ext.getCmp('Datas').selectedIndex;


//    showMask();
//    Ext.Ajax.request({
//        url: 'tools/HumanResources/HRPosting.aspx',
//        params: {
//            action: 'QuotationPost',
//            selectIndex: selectIndex,
//        },
//        method: 'POST',
//        failure: function (result, request) {
//            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//        },
//        timeout: 1200000,
//        scope: this
//    });
//    Ext.Ajax.on('requestcomplete', QuotationPostComplete, this);

//}

//function QuotationPostComplete(conn, response) {

//    hideMask();
//    Ext.Ajax.un('requestcomplete', QuotationPostComplete, this);
//    var responseText = Ext.util.JSON.decode(response.responseText);

//    if (!responseText.success) {
//        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
//        return;
//    }
//    else {
//        var SampleQuotation = new Ext.biz.WidgetInfo();
//        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.SampleQuotation';
//        var Url = '/forms/HumanResources/NGI/UnderWritting/SampleQuotation.xml';
//        var WidgetTitle = 'SampleQuotation';
//        SampleQuotation.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
//    }

//}
PolCategoryCode = '';
function PolicyCategoryCopyButton(form, login) {
    var NGIPolicy = Ext.getCmp('NGIPolicy');
    if (NGIPolicy.selectedIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    else {
        var NGIPolicyDtlList = Ext.getCmp('NGIPolicyDtlList');
        var record = '';
        var Count = NGIPolicyDtlList.store.getCount();
        for (i = 0; i < Count ; i++) {
            record += NGIPolicyDtlList.store.getAt(i).get('CategoryCode');
            if (i < Count - 1)
                record += ',';
        }
    }

    if (record == '') {
        Ext.MessageBox.alert(login.modulename, 'Category Detail Should have One Record!');
        return;
    }
    PolCategoryCode = record;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyCategoryCopy'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PolicyCategoryCopyComplete, this);
}

function PolicyCategoryCopyComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyCategoryCopyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.PolicyCategoryCopyPopupForm = new Ext.form.FormPanel(responseText.CategoryCopyConfig);
    this.PolicyCategoryCopyPopupForm.addButton({
        text: 'Copy Category',
        handler: function () {

            var FromCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-FromCategoryCode').editValue;
            var ToCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-ToCategoryCode').editValue;
            var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
            if (PrimKey == -1) {
                Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
                return;
            }
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PolicyCategoryCopyPosting',
                    FromCategoryCode: FromCategoryCode,
                    ToCategoryCode: ToCategoryCode,
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', PolicyCategoryCopyPostingCompleted, this);
            this.PolicyCategoryCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyCategoryCopyPopupForm.FormFieldsCount + 2
    });

    this.PolicyCategoryCopyPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PolicyCategoryCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyCategoryCopyPopupForm.FormFieldsCount + 2
    });
    this.PolicyCategoryCopyPopupFormWindow = new Ext.Window({
        id: 'PolicyCategoryCopyPopupForm',
        title: 'Category Copy',
        closable: true,
        minimizable: false,
        width: this.PolicyCategoryCopyPopupForm.width + 10,
        height: this.PolicyCategoryCopyPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PolicyCategoryCopyPopupForm]
    });
    this.PolicyCategoryCopyPopupForm.on('render', PolicyCategoryCopyPopup, this);
    this.PolicyCategoryCopyPopupFormWindow.show();
}
function PolicyCategoryCopyPopup(form, login) {

    var FromCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-FromCategoryCode');
    var GroupCode = Ext.getCmp('NGIPolicy-GroupCode');
    if (FromCategoryCode) FromCategoryCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (PolCategoryCode != '') {
            evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE in (" + PolCategoryCode + ")";
        }
    }, this);

    var ToCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-ToCategoryCode');
    if (ToCategoryCode) ToCategoryCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (PolCategoryCode != '') {
            evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE not in (" + PolCategoryCode + ") and Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where Status=0 and GROUP_CODE=" + GroupCode.editValue + ") ";
        }
    }, this);
}

function PolicyCategoryCopyPostingCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', PolicyCategoryCopyPostingCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var NGIPolicyDtlList = Ext.getCmp('NGIPolicyDtlList');
        NGIPolicyDtlList.store.load({
            params: {
                start: 0,
                limit: NGIPolicyDtlList.pageSize
            }
        });
    }
}
function IndGenerateRenewalMemberCardID(button, option) {
    var PrimKey = Ext.getCmp('NGIIndividualPolicies').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'IndPolicyGenerateCardID',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IndGenerateRenewalMemberCardIDComplete, this);
}
function IndGenerateRenewalMemberCardIDComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IndGenerateRenewalMemberCardIDComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {
        //            Ext.getCmp('HRContract-StatusCode').setComboValue(1);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}
function GenerateRenewalMemberCardID(button, option) {
    var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyGenerateCardID',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GenerateRenewalMemberCardIDComplete, this);
}

function GenerateRenewalMemberCardIDComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', GenerateRenewalMemberCardIDComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {
        //            Ext.getCmp('HRContract-StatusCode').setComboValue(1);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}
function PolicyCopyHandler(button, option) {
    var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    PolicyId = Ext.getCmp('NGIPolicy-PolicyId').getValue();
    PolicyName = Ext.getCmp('NGIPolicy-PolicyName').getValue();
    GGroupCode = Ext.getCmp('NGIPolicy-GroupCode').editValue;
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyCopy',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PolicyCopyComplete, this);
}

function PolicyCopyComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyCopyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.PolicyCopyPopupForm = new Ext.form.FormPanel(responseText.PolicyCopyConfig);
    this.PolicyCopyPopupForm.addButton({
        text: 'Copy Policy',
        handler: function () {
            var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
            var PolicyName = Ext.getCmp('PolicyCopyPopUp-PolicyName').getValue();
            var StartDate = Ext.getCmp('PolicyCopyPopUp-StartDate').getValue();
            var EndDate = Ext.getCmp('PolicyCopyPopUp-EndDate').getValue();
            var GroupCode = Ext.getCmp('PolicyCopyPopUp-GroupCode').getValue();
            var NewPolicyStartDate = new Date(StartDate);
            var NewPolicyEndDate = new Date(EndDate);

            if (PrimKey == -1) {
                Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
                return;
            }

            if (PolicyName == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Enter New Policy Name!');
                return;
            }
            if (NewPolicyStartDate != '' && NewPolicyEndDate != '' && NewPolicyStartDate >= NewPolicyEndDate) {
                Ext.MessageBox.alert(login.modulename, 'Policy End Date should be greater than Policy Start Date!');
                return;
            }
            if (GroupCode == '' || GroupCode == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select Group!');
                return;
            }
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PolicyCopyPosting',
                    PolicyName: PolicyName,
                    StartDate: StartDate,
                    EndDate: EndDate,
                    GroupCode: GroupCode,
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PolicyCopyPostingCompleted, this);
            this.PolicyCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyCopyPopupForm.FormFieldsCount + 2
    });

    this.PolicyCopyPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PolicyCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyCopyPopupForm.FormFieldsCount + 2
    });
    this.PolicyCopyPopupFormWindow = new Ext.Window({
        id: 'PolicyCopyPopupForm',
        title: 'Policy Copy',
        closable: true,
        minimizable: false,
        width: this.PolicyCopyPopupForm.width + 10,
        height: this.PolicyCopyPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PolicyCopyPopupForm]
    });
    this.PolicyCopyPopupForm.on('render', PolicyCopyPopUp, this);
    this.PolicyCopyPopupFormWindow.show();
}
function PolicyCopyPopUp(form, login) {
    var StartDate = Ext.getCmp('PolicyCopyPopUp-StartDate');
    var EndDate = Ext.getCmp('PolicyCopyPopUp-EndDate');
    var fromdate = StartDate.getValue();
    var Todate = fromdate.add(Date.YEAR, 1);
    EndDate.setValue(Todate);
    if (StartDate) StartDate.on('change', function (field) {
        var fromdate = StartDate.getValue();
        var Todate = fromdate.add(Date.YEAR, 1);
        EndDate.setValue(Todate);
    }, this);
}

function PolicyCopyPostingCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', PolicyCopyPostingCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_NGIPOLICY_editform').close();
    }
}






ReqCategoryCode = '';
function QuotationRequestCategoryCopy(form, login) {
    var QuotationRequest = Ext.getCmp('QuotationRequest');
    if (QuotationRequest.selectedIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    else {
        var QuotationRequestCategoryDltList = Ext.getCmp('QuotationRequestCategoryDltList');
        var record = '';
        var Count = QuotationRequestCategoryDltList.store.getCount();
        for (i = 0; i < Count ; i++) {
            record += QuotationRequestCategoryDltList.store.getAt(i).get('CategoryCode');
            if (i < Count - 1)
                record += ',';
        }
    }
    if (record == '') {
        Ext.MessageBox.alert(login.modulename, 'Category Detail Should have One Record!');
        return;
    }
    ReqCategoryCode = record;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyCategoryCopy'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', QuotationRequestCategoryCopyComplete, this);
}

function QuotationRequestCategoryCopyComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', QuotationRequestCategoryCopyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.QuotationRequestCategoryCopyPopupForm = new Ext.form.FormPanel(responseText.CategoryCopyConfig);
    this.QuotationRequestCategoryCopyPopupForm.addButton({
        text: 'Copy Category',
        handler: function () {

            var FromCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-FromCategoryCode').editValue;
            var ToCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-ToCategoryCode').editValue;
            var PrimKey = Ext.getCmp('QuotationRequest').selectedIndex;
            if (PrimKey == -1) {
                Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
                return;
            }
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'QuotationRequestCopyPosting',
                    FromCategoryCode: FromCategoryCode,
                    ToCategoryCode: ToCategoryCode,
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', QuotationRequestCategoryCopyPostingCompleted, this);
            this.QuotationRequestCategoryCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.QuotationRequestCategoryCopyPopupForm.FormFieldsCount + 2
    });

    this.QuotationRequestCategoryCopyPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.QuotationRequestCategoryCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.QuotationRequestCategoryCopyPopupForm.FormFieldsCount + 2
    });
    this.QuotationRequestCategoryCopyPopupFormWindow = new Ext.Window({
        id: 'QuotationRequestCategoryCopyPopupForm',
        title: 'Category Copy',
        closable: true,
        minimizable: false,
        width: this.QuotationRequestCategoryCopyPopupForm.width + 10,
        height: this.QuotationRequestCategoryCopyPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.QuotationRequestCategoryCopyPopupForm]
    });
    this.QuotationRequestCategoryCopyPopupForm.on('render', QuotationRequestCategoryCopyPopup, this);
    this.QuotationRequestCategoryCopyPopupFormWindow.show();
}
function QuotationRequestCategoryCopyPopup(form, login) {

    var FromCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-FromCategoryCode');
    var GroupCode = Ext.getCmp('QuotationRequest-GroupCode');
    if (FromCategoryCode) FromCategoryCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (ReqCategoryCode != '') {
            evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE in (" + ReqCategoryCode + ")";
        }
    }, this);

    var ToCategoryCode = Ext.getCmp('PolicyCategoryCopyPopUp-ToCategoryCode');
    if (ToCategoryCode) ToCategoryCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (ReqCategoryCode != '') {
            evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE not in (" + ReqCategoryCode + ") and Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where Status=0 and GROUP_CODE=" + GroupCode.editValue + ") ";
        }
    }, this);
}

function QuotationRequestCategoryCopyPostingCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', QuotationRequestCategoryCopyPostingCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var QuotationRequestCategoryDltList = Ext.getCmp('QuotationRequestCategoryDltList');
        QuotationRequestCategoryDltList.store.load({
            params: {
                start: 0,
                limit: QuotationRequestCategoryDltList.pageSize
            }
        });
    }
}

function PolicyRenewalAgePopUpedit(record) {

    var Type = Ext.getCmp('PolicyRenewal-TypeCode').editValue;
    if (Type == 1) { // Policy
        var Policies = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalAgePopUp';
        var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/PolicyRenewalAgePopUp.xml';
        var WidgetTitle = 'Policy Renewal AgePopUp';
        Policies.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);
    }
    if (Type == 2) {  // Individual Policy
        var Policies = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalIndividualPolicyAge';
        var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/PolicyRenewalIndividualPolicyAge.xml';
        var WidgetTitle = 'Policy Renewal AgePopUp';
        Policies.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);
    }
}

function PolicyRenewalAgePopUp(form, login) {

    var Grid = Ext.getCmp('PolicyRenewalAgePopUpDtlList');
    Grid.on('afteredit', function (e) {
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var ReNewalValue = e.grid.store.getAt(i).get('ReNewalValue');
            var Premium = e.grid.store.getAt(i).get('Premium');
            if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 0) {  //  Amount
                if (ReNewalValue > Premium) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to ' + Premium + '');
                    return;
                }
            }
            else if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 1) {  // Precentage
                if (ReNewalValue > 100) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to 100');
                    return;
                }
            }
        }
    }, this);

    var PolicyRenewalAgePopUpSubDtlList = Ext.getCmp('PolicyRenewalAgePopUpSubDtlList');
    PolicyRenewalAgePopUpSubDtlList.on('afteredit', function (e) {
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var ReNewalValue = e.grid.store.getAt(i).get('ReNewalValue');
            var Premium = e.grid.store.getAt(i).get('Premium');
            if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 0) {  //  Amount
                if (ReNewalValue > Premium) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to ' + Premium + '');
                    return;
                }
            }
            else if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 1) {  // Precentage
                if (ReNewalValue > 100) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to 100');
                    return;
                }
            }
        }
    }, this);
}


function PolicyRenewalIndividualPolicyAge(form, login) {

    var Grid = Ext.getCmp('PolicyRenewalIndividualPolicyAgeDtlList');
    Grid.on('afteredit', function (e) {
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var ReNewalValue = e.grid.store.getAt(i).get('ReNewalValue');
            var Premium = e.grid.store.getAt(i).get('Premium');
            if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 0) {  //  Amount
                if (ReNewalValue > Premium) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to ' + Premium + '');
                    return;
                }
            }
            else if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 1) {  // Precentage
                if (ReNewalValue > 100) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to 100');
                    return;
                }
            }
        }
    }, this);

    var PolicyRenewalIndividualPolicyAgeSubDtlList = Ext.getCmp('PolicyRenewalIndividualPolicyAgeSubDtlList');
    PolicyRenewalIndividualPolicyAgeSubDtlList.on('afteredit', function (e) {
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var ReNewalValue = e.grid.store.getAt(i).get('ReNewalValue');
            var Premium = e.grid.store.getAt(i).get('Premium');
            if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 0) {  //  Amount
                if (ReNewalValue > Premium) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to ' + Premium + '');
                    return;
                }
            }
            else if (e.grid.store.getAt(i).get('ReNewalTypeCode') == 1) {  // Precentage
                if (ReNewalValue > 100) {
                    e.grid.store.getAt(i).set('ReNewalValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'ReNewal Value should be less or equal to 100');
                    return;
                }
            }
        }
    }, this);
}


function LoadLoanAndAdvancesPopUp(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadLoanAndAdvancesPopUp',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', LoadLoanAndAdvancesPopUpCompleted, this);
}

function LoadLoanAndAdvancesPopUpCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadLoanAndAdvancesPopUpCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.LoadLoanAndAdvancesPopUpForm = new Ext.form.FormPanel(responseText.LoadLoanAndAdvancesPopUpCofig);


    this.LoadLoanAndAdvancesPopUpForm.addButton({
        text: 'Post Payment',
        handler: function () {


            var Loans_and_AdvancesDetailsList = Ext.getCmp('Loans_and_AdvancesDetailsList');

            var PKey = Ext.getCmp('Loans_and_Advances').selectedIndex;

            var Misc_receipt_idCode = Ext.getCmp('PopUpLoanAdvances-Misc_receipt_idCode').getValue();
            var Misc_receipt_idName = Ext.getCmp('PopUpLoanAdvances-Misc_receipt_idCode').lastSelectionText;
            var PaymentDate = Ext.getCmp('PopUpLoanAdvances-PaymentDate').getValue();
            var PaymentAmount = Ext.getCmp('PopUpLoanAdvances-PaymentAmount').getValue();
            var Comments = Ext.getCmp('PopUpLoanAdvances-Comments').getValue();
            var StatusCode = Ext.getCmp('PopUpLoanAdvances-StatusCode').getValue();
            var StatusName = Ext.getCmp('PopUpLoanAdvances-StatusCode').lastSelectionText;

            if (Misc_receipt_idCode == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Select Receipt Number !');
                return;
            }

            if (StatusName == null) {
                Ext.MessageBox.alert(login.modulename, 'Please Select Status!');
                return;
            }

            if (Comments == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Enter Comments !');
                return;
            }

            Loans_and_AdvancesDetailsList.storeId += 1;
            var ServiceID = Loans_and_AdvancesDetailsList.storeId;
            var newRecord = new Loans_and_AdvancesDetailsList.recordType({

                ID: ServiceID,
                LoanSerialno: ServiceID,
                Loan_Code: (PKey == -1 ? 1 : PKey),
                Misc_receipt_idCode: Misc_receipt_idCode,
                Misc_receipt_idName: Misc_receipt_idName,
                Payment_Date: PaymentDate.format(login.jsdateformat),
                Amount: PaymentAmount,
                Comments: Comments,
                StatusCode: StatusCode,
                StatusName: StatusName,
                Run_ID: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            Loans_and_AdvancesDetailsList.stopEditing();
            Loans_and_AdvancesDetailsList.store.add(newRecord);
            Loans_and_AdvancesDetailsList.store.totalLength = Loans_and_AdvancesDetailsList.store.getTotalCount() + 1;
            Loans_and_AdvancesDetailsList.pageBar.updateInfo();

            this.LoadLoanAndAdvancesPopUpFormWindow.close();
            var Loans_and_AdvancesDetailsList = Ext.getCmp('Loans_and_AdvancesDetailsList');
            Loans_and_AdvancesDetailsList.store.load({
                params: {
                    start: 0,
                    limit: Loans_and_AdvancesDetailsList.pageSize
                }
            });

        },
        scope: this,
        tabIndex: this.LoadLoanAndAdvancesPopUpForm.FormFieldsCount + 2

    });
    this.LoadLoanAndAdvancesPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.LoadLoanAndAdvancesPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.LoadLoanAndAdvancesPopUpForm.FormFieldsCount + 2
    });
    this.LoadLoanAndAdvancesPopUpFormWindow = new Ext.Window({
        id: 'LoadLoanAndAdvancesPopUpFormWindow',
        title: 'Settlement',
        closable: true,
        minimizable: false,
        width: this.LoadLoanAndAdvancesPopUpForm.width + 10,
        height: this.LoadLoanAndAdvancesPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.LoadLoanAndAdvancesPopUpForm]
    });
    this.LoadLoanAndAdvancesPopUpForm.on('render', LoadLoanAndAdvancesPopUpRender, this);
    this.LoadLoanAndAdvancesPopUpFormWindow.show();

}

function LoadLoanAndAdvancesPopUpRender(form, login) {

    var StatusCode = Ext.getCmp('PopUpLoanAdvances-StatusCode');
    StatusCode.setComboValue(0);

}
function CardPrintDeActivateHandler(form, login) {

}

function BlockMembersHandler(form, login) {

    var CardPrintSearchDetailList = Ext.getCmp('CardPrintSearchDetailList');
    var Reason = Ext.getCmp('CardPrintSearch-Reason').getValue();
    var count = 0, MemberCode = 0, statusCnt = 0; MemberCardID = 0;
    for (var cnt = 0; cnt < CardPrintSearchDetailList.store.getCount() ; cnt++) {
        var CardPrintSearchDtl = CardPrintSearchDetailList.store.getAt(cnt);
        if (CardPrintSearchDtl.get('Selectt')) {
            count++;
            MemberCode = MemberCode + ',' + CardPrintSearchDtl.get('MemberIDCode');
            MemberCardID = MemberCardID + ',' + CardPrintSearchDtl.get('ID');
        }

        if (CardPrintSearchDtl.get('Selectt') && CardPrintSearchDtl.get('StatusCode') == 2) {//BlockMember
            statusCnt++;
        }
    }
    if (statusCnt > 0) {
        Ext.MessageBox.alert(login.modulename, 'This Member Already Blocked!');
        return;
    }
    if (MemberCode != '') MemberCode = MemberCode.substring(0, MemberCode.length - 1);
    if (MemberCode == '' || MemberCode == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select the Members to Block!');
        return;
    }
    if (Reason == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Enter Reason to block Members!');
        return;
    }

    if (MemberCode != '') {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'BlockMembers',
                MemberCode: MemberCode,
                MemberCardID: MemberCardID,
                count: count,
                Reason: Reason
            },

            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', BlockMembersComplete, this);
    }
}

function BlockMembersComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BlockMembersComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function EndorsementPostingUnPost(form, login) {
    var Primkey = Ext.getCmp('EndorsementPosting').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('EndorsementPosting-AuthorizedStatusCode');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'EndorsementPostingUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingUnPostComplete, this);
        }
    }, this);

}

function EndorsementPostingReverse(form, login) {
    var Primkey = Ext.getCmp('EndorsementPosting').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('EndorsementPosting-AuthorizedStatusCode');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EndorsementPostingReversePopup',
            PrimKey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EndorsementPostingReversePopupComplete, this);


}

function EndorsementPostingReversePopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndorsementPostingReversePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        this.ReversePopupForm = new Ext.form.FormPanel(responseText.ReverseCofig);
        this.ReversePopupForm.addButton({
            text: 'Select All',
            handler: function () {

                var ReversePopupDetList = Ext.getCmp('EndorsementPostingReversePopupDetList');
                for (var cnt = 0; cnt < ReversePopupDetList.store.getCount() ; cnt++) {
                    ReversePopupDetList.store.getAt(cnt).set('Include_Claim', true);
                }
            },
            scope: this,
            tabIndex: this.ReversePopupForm.FormFieldsCount + 2

        });
        this.ReversePopupForm.addButton({
            text: 'UnSelect All',
            handler: function () {
                var ReversePopupDetList = Ext.getCmp('EndorsementPostingReversePopupDetList');
                for (var cnt = 0; cnt < ReversePopupDetList.store.getCount() ; cnt++) {
                    ReversePopupDetList.store.getAt(cnt).set('Include_Claim', false);
                }
            },
            scope: this,
            tabIndex: this.ReversePopupForm.FormFieldsCount + 2

        });
        this.ReversePopupForm.addButton({
            text: 'Reverse',
            handler: function () {
                var Primkey = Ext.getCmp('EndorsementPosting').selectedIndex;
                var ReversePopupModifiedRecords = [];
                var ReversePopupDetList = Ext.getCmp('EndorsementPostingReversePopupDetList');
                var RcrCnt = 0;
                for (var cnt = 0; cnt < ReversePopupDetList.store.getCount() ; cnt++) {
                    if (ReversePopupDetList.store.getAt(cnt).get('Include_Claim') == true) {
                        ReversePopupModifiedRecords.push(Ext.encode(ReversePopupDetList.store.getAt(cnt).data));
                        RcrCnt++;
                    }
                }

                if (RcrCnt > 0) {
                    var ReversePopupModifiedRecordsRow = '[' + ReversePopupModifiedRecords.join(',') + ']';

                    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Reverse this Record', function (button) {
                        if (button == 'yes') {
                            showMask();

                            Ext.Ajax.request({
                                url: 'tools/HumanResources/HRPosting.aspx',
                                params: {
                                    action: 'EndorsementPostingReverse',
                                    ReversePopupModifiedRecordsRow: ReversePopupModifiedRecordsRow,
                                    Primkey: Primkey
                                },
                                method: 'POST',
                                failure: function (result, request) {
                                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                                },
                                timeout: 1200000,
                                scope: this
                            });
                            Ext.Ajax.on('requestcomplete', EndorsementPostingReverseComplete, this);
                        }
                    }, this);
                }
                else {
                    Ext.MessageBox.alert(login.modulename, 'No found Claim for Reverse Payment. Please select atleast one of the claim from detail. !');
                }

            },
            scope: this,
            tabIndex: this.ReversePopupForm.FormFieldsCount + 2

        });

        this.ReversePopupForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.ReversePopupFormWindow.close();
            },
            scope: this,
            tabIndex: this.ReversePopupForm.FormFieldsCount + 2

        });

        this.ReversePopupFormWindow = new Ext.Window({
            id: 'ReversePopupFormWindow',
            title: 'Endorsement Reverse Popup',
            closable: true,
            minimizable: false,
            width: this.ReversePopupForm.width + 10,
            height: this.ReversePopupForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.ReversePopupForm]
        });
        this.ReversePopupForm.on('render', ReversePopupFormRender, this);
        this.ReversePopupFormWindow.show();
    }

}

function ReversePopupFormRender(form, login) {
    var ReversePopupDetList = Ext.getCmp('EndorsementPostingReversePopupDetList');
    for (var cnt = 0; cnt < ReversePopupDetList.store.count ; cnt++) {
        ReversePopupDetList.store.getAt(cnt).set('Include_Claim', true);
    }

    var Primkey = Ext.getCmp('EndorsementPosting').selectedIndex;
    var FilterQry = " iecd.EndoresmentCode=" + Primkey + " and nvl(iecd.IsReverseClaim,0)=0 ";
    DetailStore = Ext.getCmp('EndorsementPostingReversePopupDetList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.EndorsementPostingReversePopupDet&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function EndorsementPostingReverseComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndorsementPostingReverseComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        this.ReversePopupFormWindow.close();
    }
}

function EndorsementPostingUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndorsementPostingUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


    }
}
function EndorsementPosting(form, login) {

    if (form.selectedIndex == -1) {
        Ext.getCmp('EndorsementPosting-SourceCode').setComboValue(3);
        var AccountDesignationCode = Ext.getCmp('EndorsementPosting-AccountDesignationCode');
        AccountDesignationCode.allowBlank = true;
        AccountDesignationCode.isValid();
    }

    if (!form.isView) {


        var TypeCode = Ext.getCmp('EndorsementPosting-PolicyTypeCode');
        var PolicyCode = Ext.getCmp('EndorsementPosting-PolicyIDCode');
        var IndividualpolicyCode = Ext.getCmp('EndorsementPosting-IPPolicyIDCode');
        var ProviderCode = Ext.getCmp('EndorsementPosting-ProviderCode');
        var SourceCode = Ext.getCmp('EndorsementPosting-SourceCode');
        var BrokerCode = Ext.getCmp('EndorsementPosting-BrokerCode');
        var MemberCode = Ext.getCmp('EndorsementPosting-MemberCode');
        var GroupCode = Ext.getCmp('EndorsementPosting-GroupCode');
        var AccountDesignationCode = Ext.getCmp('EndorsementPosting-AccountDesignationCode');
        var PolicyName = Ext.getCmp('EndorsementPosting-PolicyName');

        if (AccountDesignationCode) AccountDesignationCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (SourceCode.editValue == 2) {
                evt.combo.store.baseParams.filter = " Gro.PARENT_GROUP=" + GroupCode.editValue + " or  Gro.Group_Code=" + GroupCode.editValue + "";
            }
            if (SourceCode.editValue == 3) {
                evt.combo.store.baseParams.filter = " Gro.PARENT_GROUP in (select GroupCode from im_policy where policycode=" + PolicyCode.editValue + ") or Gro.Group_Code in (select GroupCode from im_policy where policycode=" + PolicyCode.editValue + ") ";
            }
        }, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=1 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=2 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);



        ProviderCode.disable();
        BrokerCode.disable();
        MemberCode.disable();
        GroupCode.disable();
        // PolicyCode.disable();
        IndividualpolicyCode.disable();

        var OwnerTypeCode = Ext.getCmp('EndorsementPosting-OwnerTypeCode');
        var TPATypeCode = Ext.getCmp('EndorsementPosting-TPATypeCode');
        if (TPATypeCode) TPATypeCode.on('select', function (combo, record, index) {
            Ext.getCmp('EndorsementPosting-AccountDesignationCode').setValue(null);
        }, this);

        if (form.selectedIndex != -1) {
            TPATypeCode.disable();
            //OwnerTypeCode.disable();
        }
        if (SourceCode) SourceCode.on('select', function (combo, record, index) {

            var SourceCode = Ext.getCmp('EndorsementPosting-SourceCode').editValue;
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            AccountDesignationCode.clearValue();

            if (SourceCode == 0 || SourceCode == 8) {     // Provider//ReimBursment Provider claims
                ProviderCode.enable();
                ProviderCode.allowBlank = false;
                ProviderCode.isValid();

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                PolicyName.setValue(null);
            }
            if (SourceCode == 1) {  // Broker
                BrokerCode.enable();
                BrokerCode.allowBlank = false;
                BrokerCode.isValid();

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }
            if (SourceCode == 2) {  // Group

                GroupCode.enable();
                GroupCode.allowBlank = false;
                GroupCode.isValid();

                AccountDesignationCode.enable();

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;

                PolicyName.setValue(null);
            }
            if (SourceCode == 3) { // policy

                PolicyCode.enable();
                PolicyCode.allowBlank = false;
                PolicyCode.isValid();

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                PolicyName.setValue(null);

                AccountDesignationCode.enable();
            }

            if (SourceCode == 4) { // Individual policy

                IndividualpolicyCode.enable();
                IndividualpolicyCode.allowBlank = false;
                IndividualpolicyCode.isValid();

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }
            if (SourceCode == 5) { // Member

                MemberCode.enable();
                MemberCode.allowBlank = false;
                MemberCode.isValid();

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }
            if (SourceCode == 6) { // In Net

                TPATypeCode.disable();
                TPATypeCode.setComboValue(1);


                OwnerTypeCode.enable();
                OwnerTypeCode.allowBlank = false;
                OwnerTypeCode.isValid();

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;


                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }
            if (SourceCode == 7) { // Out Net

                TPATypeCode.disable();
                TPATypeCode.setComboValue(2);


                OwnerTypeCode.enable();
                OwnerTypeCode.allowBlank = false;
                OwnerTypeCode.isValid();

                BrokerCode.disable();
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;

                MemberCode.disable();
                MemberCode.clearValue();
                MemberCode.allowBlank = true;

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;


                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }

            if (SourceCode != 6 && SourceCode != 7) {
                OwnerTypeCode.enable();
                OwnerTypeCode.clearValue();
                OwnerTypeCode.allowBlank = true;
                OwnerTypeCode.isValid();

                TPATypeCode.enable();
                TPATypeCode.clearValue();
            }
        }, this);


        if (SourceCode) SourceCode.on('clear', function (combo, record, index) {

            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            ProviderCode.disable();
            BrokerCode.disable();
            MemberCode.disable();
            GroupCode.disable();
            ProviderCode.allowBlank = true;
            MemberCode.allowBlank = true;
            BrokerCode.allowBlank = true;
            GroupCode.allowBlank = true;
            BrokerCode.clearValue();
            MemberCode.clearValue();
            GroupCode.clearValue();
            ProviderCode.clearValue();
            PolicyCode.clearValue();
            IndividualpolicyCode.clearValue();
            PolicyName.setValue(null);
            AccountDesignationCode.disable();
            AccountDesignationCode.clearValue();
        }, this);


        /*
        ProviderCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);

        BrokerCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);

        GroupCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);

        PolicyCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);

        IndividualpolicyCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);

        MemberCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('EndoresmentPostingSubDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'EndorsementMemberPosting',
                    ProviderCode: ProviderCode.editValue == '' ? 0 : ProviderCode.editValue,
                    BrokerCode: BrokerCode.editValue == '' ? 0 : BrokerCode.editValue,
                    GroupCode: GroupCode.editValue == '' ? 0 : GroupCode.editValue,
                    SourceCode: SourceCode.editValue == '' ? 0 : SourceCode.editValue,
                    PolicyCode: PolicyCode.editValue == '' ? 0 : PolicyCode.editValue,
                    IndividualpolicyCode: IndividualpolicyCode.editValue == '' ? 0 : IndividualpolicyCode.editValue,
                    MemberCode: MemberCode.editValue == '' ? 0 : MemberCode.editValue
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorsementPostingComplete, this);
        }, this);
        */ //commented by compassemp since all posting done after save.

        var EndoresmentPostingSubDtlList = Ext.getCmp('EndoresmentPostingSubDtlList').getStore();
        EndoresmentPostingSubDtlList.on('load', function (store, records, options) {

            var TotalAmt = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                TotalAmt += (1 * record.get('DenialAmount'));

            }
            Ext.getCmp('EndorsementPosting-Totall').setValue(TotalAmt);

        }, this);


    }

    var DetectableAmountTotal = Ext.getCmp('EndorsementPosting-DetectableAmountTotal');
    var CoInsurerAmountTotal = Ext.getCmp('EndorsementPosting-CoInsurerAmountTotal');
    var RequestAmountTotal = Ext.getCmp('EndorsementPosting-RequestAmountTotal');
    var ApprovedAmountTotal = Ext.getCmp('EndorsementPosting-ApprovedAmountTotal');
    var DenailValueTotal = Ext.getCmp('EndorsementPosting-DenailValueTotal');
    var EndorsementPostingClaimDtlList = Ext.getCmp('EndorsementPostingClaimDtlList');

    EndorsementPostingClaimDtlList.store.on('load', function (store, record, options) {
        var DetectableTotal = 0, CoInsurerTotal = 0, RequestTotal = 0, ApprovedTotal = 0, DenailTotal = 0;
        for (var i = 0; i < EndorsementPostingClaimDtlList.store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) DetectableTotal += (1 * record.get('Detectable'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) CoInsurerTotal += (1 * record.get('CoInsurer'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) RequestTotal += (1 * record.get('RequestAmount'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) ApprovedTotal += (1 * record.get('ApprovedAmount'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) DenailTotal += (1 * record.get('DenailValue'));
        }
        DetectableAmountTotal.setRawValue(DetectableTotal.toFixed(2));
        CoInsurerAmountTotal.setRawValue(CoInsurerTotal.toFixed(2));
        RequestAmountTotal.setRawValue(RequestTotal.toFixed(2));
        ApprovedAmountTotal.setRawValue(ApprovedTotal.toFixed(2));
        DenailValueTotal.setRawValue(DenailTotal.toFixed(2));
    }, this);


    var IsHNMPostDone = Ext.getCmp('EndorsementPosting-IsHNMPostDone');
    if (login.userglobalrights && login.userglobalrights.indexOf('128') < 0 && Ext.getCmp('EndorsementPostingReverse') || IsHNMPostDone.getValue() == 1)//Bank Transfer
        Ext.getCmp('EndorsementPostingReverse').disable();

}
function EndorsementPostingComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', EndorsementPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
        return;
    }

    var PrimKey = Ext.getCmp('EndorsementPosting').selectedIndex;

    var EndoresmentPostingSubDtlList = Ext.getCmp('EndoresmentPostingSubDtlList');

    for (cnt = 0; cnt < responseText.EndorsementDtldatum.length; cnt++) { //LoadEnddoresement Detalis
        var Record = responseText.EndorsementDtldatum[cnt];
        EndoresmentPostingSubDtlList.storeId += 1;
        var newSubRecord = new EndoresmentPostingSubDtlList.recordType({
            ID: EndoresmentPostingSubDtlList.storeId,
            SerialNo: EndoresmentPostingSubDtlList.storeId,
            PolicyTypeCode: Record.PolicyTypeCode,
            PolicyTypeName: 'Individual Policy',
            PolicyId: Record.PolicyId,
            PolicyName: Record.PolicyName,
            DenialAmount: Record.DenialAmount,
            PolicyCode: Record.PolicyCode,
            ProviderCode: Record.ProviderCode,
            MemberCode: Record.MemberCode,
            GroupCode: Record.GroupCode,
            AgentCode: Record.AgentCode,
            BrokerCode: Record.BrokerCode,
            ClaimCode: 0,//Record.ClaimCode,
            TypeCode: Record.TypeCode,
            EndoresmentCode: (PrimKey == -1 ? 1 : PrimKey),
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        EndoresmentPostingSubDtlList.stopEditing();
        EndoresmentPostingSubDtlList.store.add(newSubRecord);
        EndoresmentPostingSubDtlList.store.totalLength = EndoresmentPostingSubDtlList.store.getTotalCount() + 1;
        EndoresmentPostingSubDtlList.pageBar.updateInfo();

    }
    DetailStore = Ext.getCmp('EndoresmentPostingSubDtlList').getStore();
    if (DetailStore && !DetailStore.Firstimeloaded) {
        DetailStore.Firstimeloaded = true;
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function CourseCompletion(form, login) {
    if (!form.isView) {
        var StatusCode = Ext.getCmp('CourseCompletion-StatusCode');
        StatusCode.disable();
    }
    if (form.selectedIndex == -1) {
        StatusCode.setComboValue(0);
    }
}
function CourseCompletionPost(form, login) {
    var RefCode = Ext.getCmp('CourseCompletion-AssignCode').editValue;
    var pkey = Ext.getCmp('CourseCompletion').selectedIndex;
    if (pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'AssignedPost',
                RefCode: RefCode,
                pkey: pkey

            },

            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', AssignedPostComplete, this);
    }
}


function AssignedPostComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', AssignedPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO

        });
        Ext.getCmp('ID_COURSECOMPLETION_editform').close();
    }
}
function UpdateMemberdtl(form, login) {
    if (!form.isView) {
        var MemberCode = Ext.getCmp('UpdateMemberdtl-MemberIdCode');
        var Member_Type = Ext.getCmp('UpdateMemberdtl-Member_Type');
        var NewCategoryCode = Ext.getCmp('UpdateMemberdtl-NewCategoryCode');

        MemberCode.on('select', function fnd(combo, record, index) {

            //Set New Values

            Ext.getCmp('UpdateMemberdtl-NewGenderCode').setComboValue(record.data.Gender);
            Ext.getCmp('UpdateMemberdtl-NewRelationCode').setComboValue(record.data.Relation);
            Ext.getCmp('UpdateMemberdtl-NewMartitalStatusCode').setComboValue(record.data.Marital_Status);
            Ext.getCmp('UpdateMemberdtl-NewCategoryCode').setComboValue(record.data.Category_Code);
            Ext.getCmp('UpdateMemberdtl-NewNationalityCode').setComboValue(record.data.Nationality);
            Ext.getCmp('UpdateMemberdtl-Phone').setValue(record.data.Phone_number);
            Ext.getCmp('UpdateMemberdtl-Dateofbirth').setValue(record.data.Date_of_birth);
            Ext.getCmp('UpdateMemberdtl-Age').setValue(record.data.OldAge);
            Ext.getCmp('UpdateMemberdtl-Email').setValue(record.data.EmailId);

            if (Member_Type.getValue() == 0)//Depentdent
                NewCategoryCode.disable();
            else
                NewCategoryCode.enable();

        }, this);

        if (form.selectedIndex != -1) {
            if (Member_Type.getValue() == 0)//Depentdent
                NewCategoryCode.disable();
            else
                NewCategoryCode.enable();
        }

        var Dateofbirth = Ext.getCmp('UpdateMemberdtl-Dateofbirth');
        Dateofbirth.on('valid', function (Field) {
            var DOB = Ext.getCmp('UpdateMemberdtl-Dateofbirth').getValue();
            if (typeof (DOB) == 'string') DOB = Date.parseDate(DOB, login.jsdateformat);
            else DOB = DOB;
            var CurDate = new Date();
            var Month = (CurDate.getMonth() - DOB.getMonth()) + ((CurDate.getFullYear() - DOB.getFullYear()) * 12);
            Ext.getCmp('UpdateMemberdtl-Age').setValue(Math.ceil(Month / 12))
        }, this);

        var NewCategoryCode = Ext.getCmp('UpdateMemberdtl-NewCategoryCode');
        if (NewCategoryCode) NewCategoryCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " cat.CATEGORY_CODE in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL where policycode in (select PolicyCode from IM_MEMBERPOLICY where MEMBERPOLICYCODE= " + MemberCode.editValue + "))";
        }, this);

    }
}

function PolicyBillingChange(form, login) {

    if (!form.isview) {

        var TypeCode = Ext.getCmp('PolicyBillingChange-PolicyTypeCode');
        var PolicyCode = Ext.getCmp('PolicyBillingChange-PolicyIDCode');
        var BillingTypeCode = Ext.getCmp('PolicyBillingChange-NewBillingTypeCode');
        var IndividualpolicyCode = Ext.getCmp('PolicyBillingChange-IPPolicyIDCode');
        var AgentCode = Ext.getCmp('PolicyBillingChange-AgentCode');
        var BrokerCode = Ext.getCmp('PolicyBillingChange-BrokerCode');
        var BranchCodee = Ext.getCmp('PolicyBillingChange-BranchCodee');
        var NewAgentCode = Ext.getCmp('PolicyBillingChange-NewAgentCode');
        var NewBrokerCode = Ext.getCmp('PolicyBillingChange-NewBrokerCode');



        TypeCode.on('select', function (combo, record, index) {
            if (TypeCode.editValue == 1) { //policy
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IndividualpolicyCode.disable(); IndividualpolicyCode.clearValue(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
            }
            if (TypeCode.editValue == 2) { //Individual Policy
                IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
                PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
            Ext.getCmp('PolicyBillingChange-PolicyName').setValue(null);
            Ext.getCmp('PolicyBillingChange-OldBillingTypeCode').clearValue();
            // BillingTypeCode.clearValue();
            AgentCode.clearValue();
            BrokerCode.clearValue();
            BranchCodee.clearValue();
        }, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=1";
        }, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=2";
        }, this);

        var PolicyTypeCode = Ext.getCmp('PolicyBillingChange-PolicyTypeCode');
        if (BillingTypeCode) BillingTypeCode.on('beforequery', function (evt) {
            BillingTypeCode.lastQuery = '1=2';
            if (PolicyTypeCode.editValue == 1)//Policy
            {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,2';
            }
            if (PolicyTypeCode.editValue == 2) { // individual policy
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,3';
            }

        }, this);

        PolicyCode.disable();
        IndividualpolicyCode.disable();

        PolicyCode.on('select', function (combo, record, index) {
            //BillingTypeCode.clearValue();
            AgentCode.clearValue();
            BrokerCode.clearValue();
            BranchCodee.clearValue();
        }, this);
        IndividualpolicyCode.on('select', function (combo, record, index) {
            //BillingTypeCode.clearValue();
            AgentCode.clearValue();
            BrokerCode.clearValue();
            BranchCodee.clearValue();
        }, this);

    }

    if (form.selectedIndex == -1)
        BillingTypeCode.setComboValue(1);
    BillingTypeCode.on('select', function (combo, record, index) {
        //onBusinessTypeclear('PolicyBillingChangeOldCommissionDetailList');
        NewAgentCode.clearValue();
        NewBrokerCode.clearValue();
    }, this);

    var PolicyBillingChangeOldCommissionDetailList = Ext.getCmp('PolicyBillingChangeOldCommissionDetailList');
    PolicyBillingChangeOldCommissionDetailList.on('afteredit', function (e) {

        if (e.record.get('Calc_MethodCode') == 0)
            e.record.set('Commission_value', e.record.get('DefaultValue'));

    }, this);

    PolicyBillingChangeOldCommissionDetailList.on('addrecord', function (evt) {
        if (BillingTypeCode.editValue == 0) {
            if (NewAgentCode.getValue() == '' || AgentCode.getValue() == null) {//Agent
                Ext.MessageBox.alert(login.modulename, 'Select Agent Name Before add new Record !');
                onBusinessTypeclear('PolicyBillingChangeOldCommissionDetailList');
                return;
            }
        }
        if (BillingTypeCode.editValue == 1) {
            if (NewBrokerCode.getValue() == '' || BrokerCode.getValue() == null) {//Broker
                Ext.MessageBox.alert(login.modulename, 'Select Broker Name Before add new Record !');
                onBusinessTypeclear('PolicyBillingChangeOldCommissionDetailList');
                return;
            }
        }
    }, this);

    PolicyBillingChangeOldCommissionDetailList.on('afteredit', function (e) {
        if (e.record.get('Comission_TypesCode') == 1)
            e.record.set('CommissionToNewName', NewAgentCode.lastSelectionText);
        else if (e.record.get('Comission_TypesCode') == 0)
            e.record.set('CommissionToNewName', NewBrokerCode.lastSelectionText);

    }, this);

    PolicyBillingChangeOldCommissionDetailList.on('beforeedit', function (evt) {
        var ComissionTypeCode = Ext.getCmp('PolicyBillingChangeOldCommissionDetail-Comission_TypesCode');

        var CommFileter = '2,4,5,6,7,8';
        if (BillingTypeCode.editValue == 1) {//Agent
            CommFileter += ',0';

        }
        else if (BillingTypeCode.editValue == 0) {//Broker
            CommFileter += ',1';

        }
        ComissionTypeCode.lastQuery = '1=2';
        ComissionTypeCode.constantFilter = CommFileter;

    }, this);

}


function PBCCommissionLoadButton(form, login) {

    onBusinessTypeclear('PolicyBillingChangeOldCommissionDetailList');
    var PolicyTypeCode = Ext.getCmp('PolicyBillingChange-PolicyTypeCode').editValue;
    if (PolicyTypeCode == 1) {
        var PolicyCode = Ext.getCmp('PolicyBillingChange-PolicyIDCode').editValue;
        if (PolicyCode == 0 || PolicyCode == null) {
            Ext.MessageBox.alert(login.modulename, 'Please Select Policy');
            return;
        }
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'PBCPolicyCommissionLoad',
                PolicyCode: PolicyCode
            },

            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', PBCPolicyCommissionLoadComplete, this);
    }
    if (PolicyTypeCode == 2) {
        onBusinessTypeclear('PolicyBillingChangeOldCommissionDetailList');
        var IPPolicyIDCode = Ext.getCmp('PolicyBillingChange-IPPolicyIDCode').editValue;
        if (IPPolicyIDCode == 0 || IPPolicyIDCode == null) {
            Ext.MessageBox.alert(login.modulename, 'Please Select Individual Policy');
            return;
        }

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'PolicyIPCommissionLoad',
                IPPolicyIDCode: IPPolicyIDCode
            },

            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', IPCommissionLoadComplete, this);
    }
}

function PBCPolicyCommissionLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', PBCPolicyCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var PolicyBillingChangeOldCommissionDetailList = Ext.getCmp('PolicyBillingChangeOldCommissionDetailList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) { //Commission Detail
            var CommissionRecord = responseText.commissiondatum[cnt];
            PolicyBillingChangeOldCommissionDetailList.storeId += 1;
            var newRecord = new PolicyBillingChangeOldCommissionDetailList.recordType({
                ID: PolicyBillingChangeOldCommissionDetailList.storeId,
                Serialno: PolicyBillingChangeOldCommissionDetailList.storeId,
                PolicyBillingChangeCode: 1,
                OldPolicyCommissionCode: CommissionRecord.ID,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                CommissionToNewName: CommissionRecord.CommissionToNewName,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: CommissionRecord.Commission_value,
                Description: CommissionRecord.CommissionToNewName,
                LegalentityCode: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyBillingChangeOldCommissionDetailList.stopEditing();
            PolicyBillingChangeOldCommissionDetailList.store.add(newRecord);
            PolicyBillingChangeOldCommissionDetailList.store.totalLength = PolicyBillingChangeOldCommissionDetailList.store.getTotalCount() + 1;
            PolicyBillingChangeOldCommissionDetailList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('PolicyBillingChangeOldCommissionDetailList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}
function PBCIPCommissionLoadButton(form, login) {

}

function IPCommissionLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', IPCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    //return;
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var PolicyBillingChangeOldCommissionDetailList = Ext.getCmp('PolicyBillingChangeOldCommissionDetailList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) {
            var CommissionRecord = responseText.commissiondatum[cnt];
            PolicyBillingChangeOldCommissionDetailList.storeId += 1;
            var newRecord = new PolicyBillingChangeOldCommissionDetailList.recordType({
                ID: PolicyBillingChangeOldCommissionDetailList.storeId,
                Serialno: PolicyBillingChangeOldCommissionDetailList.storeId,
                PolicyBillingChangeCode: 1,
                OldPolicyCommissionCode: CommissionRecord.ID,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                CommissionToNewName: CommissionRecord.CommissionToNewName,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: CommissionRecord.Commission_value,
                Description: CommissionRecord.CommissionToNewName,
                LegalentityCode: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PolicyBillingChangeOldCommissionDetailList.stopEditing();
            PolicyBillingChangeOldCommissionDetailList.store.add(newRecord);
            PolicyBillingChangeOldCommissionDetailList.store.totalLength = PolicyBillingChangeOldCommissionDetailList.store.getTotalCount() + 1;
            PolicyBillingChangeOldCommissionDetailList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('PolicyBillingChangeOldCommissionDetailList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}



function BulkEmpElementEntry(form, login) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'BulkEmpElementEntry'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BulkEmpElementEntryComplete, this);
}

function BulkEmpElementEntryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BulkEmpElementEntryComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EmpElementEntryForm = new Ext.form.FormPanel(responseText.BulkEmpEleCofig);

    this.EmpElementEntryForm.addButton({
        text: 'Save',
        handler: function () {

            var PayRollCode = Ext.getCmp('BulkEmpElementEntry-PayRollCode').editValue;
            var PeriodCode = Ext.getCmp('BulkEmpElementEntry-PayRollPeriodCode').editValue;
            var ElementCode = Ext.getCmp('BulkEmpElementEntry-BalanceCode').editValue;
            var Value = Ext.getCmp('BulkEmpElementEntry-Value').getValue();
            if (PayRollCode == 0) {
                Ext.MessageBox.alert(login.modulename, 'PayRollCode shoud not be Empty. Please select the Payroll Name !');
                return;
            }
            if (PeriodCode == 0) {
                Ext.MessageBox.alert(login.modulename, 'Payroll Period shoud not be Empty. Please select the Payroll Period !');
                return;
            }
            if (ElementCode == 0) {
                Ext.MessageBox.alert(login.modulename, 'Balance Name shoud not be Empty. Please select the Balance Name !');
                return;
            }
            var BulkEmpElementEntryDtlGrid = Ext.getCmp('BulkEmpElementEntryDtlList');
            var ModifiedRecords = BulkEmpElementEntryDtlGrid.store.getModifiedRecords();

            var BulkEmpOpenBalModifiedRecords = [];

            if (ModifiedRecords.length < 1) {
                Ext.MessageBox.alert(login.modulename, 'There is no records found in details. You cannot update the Employee Balance!');
                return;
            }

            for (var cnt = 0; cnt < ModifiedRecords.length ; cnt++) {
                if (ModifiedRecords[cnt].data.IsDeleted)
                    continue;
                BulkEmpOpenBalModifiedRecords.push(Ext.encode(ModifiedRecords[cnt].data));
            }

            var BulkEmpElementRecordsRow = '[' + BulkEmpOpenBalModifiedRecords.join(',') + ']';

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'BulkEmpElementEntryUpdate',
                    PayrollCode: PayRollCode,
                    PeriodCode: PeriodCode,
                    ElementCode: ElementCode,
                    Value: Value,
                    BulkEmpElementRecordsRow: BulkEmpElementRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', BulkEmpElementEntryUpdateComplete, this);
        },
        scope: this,
        tabIndex: this.EmpElementEntryForm.FormFieldsCount + 2

    });

    this.EmpElementEntryForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EmpElementEntryFormWindow.close();
        },
        scope: this,
        tabIndex: this.EmpElementEntryForm.FormFieldsCount + 2

    });

    this.EmpElementEntryFormWindow = new Ext.Window({
        id: 'EmpElementEntryFormWindow',
        title: 'Bulk Employee Opening Balance',
        closable: true,
        minimizable: false,
        width: this.EmpElementEntryForm.width + 10,
        height: this.EmpElementEntryForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EmpElementEntryForm]
    });
    this.EmpElementEntryFormWindow.on('render', EmpElementEntryFormRender, this);
    this.EmpElementEntryFormWindow.show();
}

function EmpElementEntryFormRender(form, login) {
    var PeriodCode = Ext.getCmp('BulkEmpOpeningBalance-PayRollPeriodCode');
    var PayrollCode = Ext.getCmp('BulkEmpOpeningBalance-PayRollCode');

    if (PeriodCode) PayrollCode.on('select', function (combo, record, index) {
        PeriodCode.clearValue();
    }, this);

    if (PayrollCode) PayrollCode.on('clear', function (e) {
        PeriodCode.clearValue();
    }, this);

    if (PeriodCode) PeriodCode.on('beforequery', function (evt) {
        var PayrollCode = Ext.getCmp('BulkEmpOpeningBalance-PayRollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PERIOD_CODE in (select PY.PERIOD_CODE from PY_Payroll_Periods PY where PY.PAYROLL_CODE=" + PayrollCode + ")";
    }, this);
}

function BulkEmpElementEntryUpdateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', BulkEmpElementEntryUpdateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        //Ext.getCmp('ID_BULKEMPOPENINGBALANCE_editform').close();
    }
}

function BulkEmpElementEntryDtlPopupHandler(button, options) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EmpElementEntryDtlPopup'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EmpElementEntryDtlPopupComplete, this);
}

function EmpElementEntryDtlPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EmpElementEntryDtlPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EmpOpeningBalancePopupForm = new Ext.form.FormPanel(responseText.BulkEmpPopCofig);

    this.EmpOpeningBalancePopupForm.selectedIndex = 1;

    this.EmpOpeningBalancePopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var BulkEmpOpeningBalPopUpDtlList = Ext.getCmp('BulkEmpOpeningBalPopUpDtlList');

            for (var pcnt = 0; pcnt < BulkEmpOpeningBalPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = BulkEmpOpeningBalPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selec', true);
            }
        },
        scope: this,
        tabIndex: this.EmpOpeningBalancePopupForm.FormFieldsCount + 2
    });

    this.EmpOpeningBalancePopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var BulkEmpOpeningBalPopUpDtlList = Ext.getCmp('BulkEmpOpeningBalPopUpDtlList');

            for (var pcnt = 0; pcnt < BulkEmpOpeningBalPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = BulkEmpOpeningBalPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selec', false);
            }
        },
        scope: this,
        tabIndex: this.EmpOpeningBalancePopupForm.FormFieldsCount + 2
    });

    this.EmpOpeningBalancePopupForm.addButton({
        text: 'Load',
        handler: function () {

            var BulkEmpElementEntryDtlListGrid = Ext.getCmp('BulkEmpElementEntryDtlList');

            var selectcnt = 0;
            var EmployeeCode = new Array();
            var EmployeeName = new Array();
            var EmployeeFullName = new Array();

            var BulkEmpOpeningBalPopUpDtlList = Ext.getCmp('BulkEmpOpeningBalPopUpDtlList');
            var BulkEmpElementEntryDtlList = Ext.getCmp('BulkEmpElementEntryDtlList');
            var count = BulkEmpElementEntryDtlList.store.getCount();
            var store = Ext.getCmp('BulkEmpOpeningBalPopUpDtlList').getStore();

            for (var cnt = 0; cnt < store.getCount() ; cnt++) {

                var record = BulkEmpOpeningBalPopUpDtlList.store.getAt(cnt);
                if (record.get('Selec') == true) {

                    var isavailable = false;
                    for (var count = 0; count < BulkEmpElementEntryDtlList.getStore().getCount() ; count++) {
                        if (record.get('ID') == BulkEmpElementEntryDtlList.getStore().getAt(count).get('EmployeeCode')) {
                            record.set('Selec', true);
                            isavailable = true;
                            break;
                        }
                    }
                    if (isavailable) continue;
                    selectcnt = selectcnt + 1;
                    EmployeeCode[selectcnt] = record.get('ID');
                    EmployeeName[selectcnt] = record.get('Employee_Number');
                    EmployeeFullName[selectcnt] = record.get('FullName');
                }
            }

            var BulkEmpElementEntryDtlList = Ext.getCmp('BulkEmpElementEntryDtlList');

            for (var count = 1; count <= selectcnt; count++) {
                BulkEmpElementEntryDtlList.storeId += 1;
                var BULKEMPID = BulkEmpElementEntryDtlList.storeId;
                var newRecord = new BulkEmpElementEntryDtlList.recordType({
                    ID: BULKEMPID,
                    BulkEmp_ElementDtl_Code: 1,
                    Serialno: BULKEMPID,
                    EmployeeCode: EmployeeName[count],
                    EmployeeName: EmployeeName[count],
                    EmployeeFullName: EmployeeFullName[count],

                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                BulkEmpElementEntryDtlList.stopEditing();
                BulkEmpElementEntryDtlList.store.add(newRecord);
                BulkEmpElementEntryDtlList.store.totalLength = BulkEmpElementEntryDtlList.store.getTotalCount() + 1;
                BulkEmpElementEntryDtlList.pageBar.updateInfo();
            }

            this.EmpOpeningBalancePopupFormWindow.close();
            var BulkEmpElementEntryDtlList = Ext.getCmp('BulkEmpElementEntryDtlList');
            BulkEmpElementEntryDtlList.store.load({
                params: {
                    start: 0,
                    limit: BulkEmpElementEntryDtlList.pageSize
                }
            });

        },
        scope: this,
        tabIndex: this.EmpOpeningBalancePopupForm.FormFieldsCount + 2

    });

    this.EmpOpeningBalancePopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EmpOpeningBalancePopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.EmpOpeningBalancePopupForm.FormFieldsCount + 2

    });

    this.EmpOpeningBalancePopupFormWindow = new Ext.Window({
        id: 'EmpOpeningBalancePopupFormWindow',
        title: 'Bulk Employee Opening Balance Popup',
        closable: true,
        minimizable: false,
        width: this.EmpOpeningBalancePopupForm.width + 10,
        height: this.EmpOpeningBalancePopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EmpOpeningBalancePopupForm]
    });
    this.EmpOpeningBalancePopupForm.on('render', BulkEmpOpeningBalPopUpRender, this);
    this.EmpOpeningBalancePopupFormWindow.show();
}
function GeneralCommissionBillingDetails(form, login) {

    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('GeneralCommissionBillingDetails-PinCode').setValue(isAdditinalInfoRecord.get('AgentPinCode'));
            Ext.getCmp('GeneralCommissionBillingDetails-CountryCode').setValue(isAdditinalInfoRecord.get('CountryName'));
            Ext.getCmp('GeneralCommissionBillingDetails-StateCode').setValue(isAdditinalInfoRecord.get('StateName'));
            Ext.getCmp('GeneralCommissionBillingDetails-CityCode').setValue(isAdditinalInfoRecord.get('CityName'));
        }
        if (form.selectedIndex == -1) {
            Ext.getCmp('GeneralCommissionBillingDetails-StateCode').disable();
            Ext.getCmp('GeneralCommissionBillingDetails-CityCode').disable();
        }
        var Country = Ext.getCmp('GeneralCommissionBillingDetails-CountryCode');
        if (Country) Country.on('select', function (combo, record, index) {
            Ext.getCmp('GeneralCommissionBillingDetails-StateCode').enable();
        }, this);
        var State = Ext.getCmp('GeneralCommissionBillingDetails-StateCode');
        if (State) State.on('select', function (combo, record, index) {
            Ext.getCmp('GeneralCommissionBillingDetails-CityCode').enable();
        }, this);
        if (State) State.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('GeneralCommissionBillingDetails-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
        }, this);
        var CityCode = Ext.getCmp('GeneralCommissionBillingDetails-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('GeneralCommissionBillingDetails-StateCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
        }, this);

        Country.on('select', function fnd(combo, record, index) {
            State.clearValue();
            CityCode.clearValue();
        }, this);
        State.on('select', function fnd(combo, record, index) {
            CityCode.clearValue();
        }, this);

    }
}

function ProviderPayment(form, login) {
    var total1 = Ext.getCmp('ProviderPayment-Total1');
    total1.maxValue = 999999999999999.99;
    var ProviderPaymentDtlList = Ext.getCmp('ProviderPaymentDtlList');
    ProviderPaymentDtlList.store.on('load', function (store, record, options) {
        var UnitTotal = 0;
        for (var i = 0; i < ProviderPaymentDtlList.store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('Amount'));
        }
        total1.setRawValue(UnitTotal.toFixed(2));
    }, this);

    var ProviderPaymentExcluedDtlList = Ext.getCmp('ProviderPaymentExcluedDtlList');
    ProviderPaymentExcluedDtlList.store.on('load', function (store, record, options) {
        Ext.getCmp('ProviderPaymentExcluedDtlList_addNew').setVisible(false);
    }, this);

}

function PolicyUnPost(form, login) {
    var Primkey = Ext.getCmp('NGIPolicy').selectedIndex;
    var OldPolicyCode = Ext.getCmp('NGIPolicy-OldPolicyCode');
    var AuthorizedStatusCode = Ext.getCmp('NGIPolicy-AuthorizedStatusCode');
    if (OldPolicyCode > 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont allow to unpost the Renewed Policy !');
        return;
    }
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'PolicyUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PolicyUnPostComplete, this);
        }
    }, this);

}

function PolicyUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_NGIPOLICY_editform').close();

    }
}


function IndividualPolicyUnPost(form, login) {
    var Primkey = Ext.getCmp('NGIIndividualPolicies').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('NGIIndividualPolicies-AuthorizedStatusCode');
    var OldPolicyCode = Ext.getCmp('NGIIndividualPolicies-OldPolicyCode');
    if (OldPolicyCode > 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont allow to unpost the Renewed Policy !');
        return;
    }
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'IndividualPolicyUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', IndividualPolicyUnPostComplete, this);
        }
    }, this);

}

function IndividualPolicyUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IndividualPolicyUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_INDIVIDUALPOLICIE_editform').close();

    }
}

function BenefitMasterPbm(form, login) {

    if (!form.isView) {

        var StatusCode = Ext.getCmp('BenefitMasterPbm-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();

        var ApplicableCode = Ext.getCmp('BenefitMasterPbm-ApplicableCode');
        ApplicableCode.setComboValue(2);
    }

}
function ElementMasterPbm(form, login) {

    if (!form.isView) {
        Ext.getCmp('ElementMasterPbm-StatusCode').setComboValue(0);
    }
}

function ElementTemplatePbm(form, login) {

    if (form.selectedIndex == -1 && !form.isView) {
        var IsIndividual = Ext.getCmp('ElementTemplatePbm-IsIndividual');

        if (IsIndividual) IsIndividual.on('check', function (field, Checked) {
            if (Checked) {
                onBusinessTypeclear('ElementTemplateDtlPbmList');
                ElementTemplateDtlList.disable();
            }

            if (!Checked) {
                onBusinessTypeclear('ElementTemplateDtlPbmList');
                ElementTemplateDtlList.disable();
            }

        }, this);
    }

    if (!form.isView) {

        var IsIndividual = Ext.getCmp('ElementTemplatePbm-IsIndividual');
        var ElementCode = Ext.getCmp('ElementTemplateDtlPbm-ElementCode');

        if (ElementCode) ElementCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (IsIndividual.getValue() == true)
                evt.combo.store.baseParams.filter = " Ele.ISINDIVIDUAL=1";
            else
                evt.combo.store.baseParams.filter = "";
        }, this);
    }
}


function JVPostingReverse(form, login) {

    var ReversejvDone = Ext.getCmp('JVPosting-ReversejvDone').getValue();
    var MemberTypeCode = Ext.getCmp('JVPosting-MemberTypeCode').getValue();
    if (MemberTypeCode == 5) {//Others
        Ext.MessageBox.alert(login.modulename, 'You can not allow to Reverse the record for this Member Type !');
        return;
    }
    if (ReversejvDone == 1) {
        Ext.MessageBox.alert(login.modulename, 'Reverse JV done for this record !');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Reverse this JV', function (button) {
        if (button == 'yes') {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'JVPostingPopUp'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', JVPostingPopUpComplete, this);
        }
    }, this);
}

function JVPostingPopUpComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', JVPostingPopUpComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.JVPostingPopUpForm = new Ext.form.FormPanel(responseText.JVPostingPopUpCofig);

    this.JVPostingPopUpForm.addButton({
        text: 'Reverse',
        handler: function () {

            var PrimaryKey = Ext.getCmp('JVPosting').selectedIndex;

            var MemberTypeCode = Ext.getCmp('JVPostingPopUp-MemberTypeCode').getValue();
            var AgenCode = Ext.getCmp('JVPostingPopUp-AgentCode');
            var BrokerCode = Ext.getCmp('JVPostingPopUp-BrokerCode');
            var ReInsuranceCode = Ext.getCmp('JVPostingPopUp-ReInsuranceCode');
            var MemberIDCode = Ext.getCmp('JVPostingPopUp-MemberIDCode');
            var GroupCode = Ext.getCmp('JVPostingPopUp-GroupCode');
            var ProviderCode = Ext.getCmp('JVPostingPopUp-ProviderCode');

            var ChangeCode = 0;
            if (MemberTypeCode == 0)//Agent
            {
                if (AgenCode.getValue() < 1 || AgenCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'Agenet Name should not empty !');
                    return;
                }

                ChangeCode = AgenCode.getValue();
            }
            if (MemberTypeCode == 1)//Broker
            {
                if (BrokerCode.getValue() < 1 || BrokerCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'Broker Name should not empty !');
                    return;
                }
                ChangeCode = BrokerCode.getValue();
            }
            if (MemberTypeCode == 2)//Group
            {
                if (GroupCode.getValue() < 1 || GroupCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'Group Name should not empty !');
                    return;
                }
                ChangeCode = GroupCode.getValue();
            }
            if (MemberTypeCode == 3)//Member
            {
                if (MemberIDCode.getValue() < 1 || MemberIDCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'Member Name should not empty !');
                    return;
                }
                ChangeCode = MemberIDCode.getValue();
            }
            if (MemberTypeCode == 4)//Provider
            {
                if (ProviderCode.getValue() < 1 || ProviderCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'Provider Name should not empty !');
                    return;
                }
                ChangeCode = ProviderCode.getValue();
            }
            if (MemberTypeCode == 6)//Insurer
            {
                if (ReInsuranceCode.getValue() < 1 || ReInsuranceCode.getValue() == '') {
                    Ext.MessageBox.alert(login.modulename, 'ReInsurance Name should not empty !');
                    return;
                }
                ChangeCode = ReInsuranceCode.getValue();
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'JVPostingReverse',
                    PrimaryKey: PrimaryKey,
                    ChangeCode: ChangeCode,
                    MemberType: MemberTypeCode

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', JVPostingReverseComplete, this);


        },
        scope: this,
        tabIndex: this.JVPostingPopUpForm.FormFieldsCount + 2
    });

    this.JVPostingPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.JVPostingPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.JVPostingPopUpForm.FormFieldsCount + 2
    });

    this.JVPostingPopUpFormWindow = new Ext.Window({
        id: 'JVPostingPopUpForm',
        title: 'JV Posting PopUp',
        closable: true,
        minimizable: false,
        width: this.JVPostingPopUpForm.width + 10,
        height: this.JVPostingPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.JVPostingPopUpForm]
    });
    this.JVPostingPopUpForm.on('render', JVPostingPopUp.createDelegate(this.form, [login], true), this);
    this.JVPostingPopUpFormWindow.show();
}

function JVPostingReverseComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', JVPostingReverseComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var WidgetObj = Ext.getCmp('ID_FIN_NGIJVPOSTING_editform').scope;
        this.JVPostingPopUpFormWindow.close();
        Ext.getCmp('ID_FIN_NGIJVPOSTING_editform').close();
        WidgetObj.afterCloseWind(WidgetObj);
    }

}

function JVPostingPopUp(form, login) {

    var PolicyCode = Ext.getCmp('JVPosting-PolicyCode').getValue();
    var MemberTypeCode = Ext.getCmp('JVPostingPopUp-MemberTypeCode');
    var AgenCode = Ext.getCmp('JVPostingPopUp-AgentCode');
    var BrokerCode = Ext.getCmp('JVPostingPopUp-BrokerCode');
    var ReInsuranceCode = Ext.getCmp('JVPostingPopUp-ReInsuranceCode');
    var MemberIDCode = Ext.getCmp('JVPostingPopUp-MemberIDCode');
    var GroupCode = Ext.getCmp('JVPostingPopUp-GroupCode');
    var ProviderCode = Ext.getCmp('JVPostingPopUp-ProviderCode');

    if (AgenCode) AgenCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "age.AgentCode not in (" + Ext.getCmp('JVPosting-AgentCode').getValue() + ")";
    }, this);

    if (BrokerCode) BrokerCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Bro.BROKERCODE not in (" + Ext.getCmp('JVPosting-BrokerCode').getValue() + ")";
    }, this);

    if (MemberIDCode) MemberIDCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " mem.MemberCode not in (" + Ext.getCmp('JVPosting-MemberCode').getValue() + ")";
    }, this);

    if (GroupCode) GroupCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " Gro.GROUP_CODE not in (" + Ext.getCmp('JVPosting-GroupCode').getValue() + ")";
    }, this);

    if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " pro.PROVIDERCODE not in (" + Ext.getCmp('JVPosting-ProviderCode').getValue() + ")";
    }, this);

    //if (ReInsuranceCode) ReInsuranceCode.on('beforequery', function (evt) {
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = " detl.REINSURANCE in (" + Ext.getCmp('JVPosting-InsurerCode').getValue() + ")"
    //    //evt.combo.store.baseParams.filter = " detl.REINSURANCE in (select REINSURANCE from IM_QUOTASHARE_TREATY where  CONTRACTTYPE in  (select CONTRACTTYPE  from im_policy where policycode=" + PolicyCode + ") and INSURANCECO  in  (select INSURANCECO  from im_policy where policycode=" + PolicyCode + ") and to_date( (select STARTDATE  from im_policy where policycode=" + PolicyCode + " ),'" + login.dateformat + "') between VALIDFROM and VALIDTO ) ";
    //}, this);

    if (MemberTypeCode) MemberTypeCode.on('select', function (combo, record, index) {
        Ext.getCmp('JVPostingPopUp-AccountNo').setValue(null);
        Ext.getCmp('JVPostingPopUp-PinCode').setValue(null);
        Ext.getCmp('JVPostingPopUp-CurrencyName').setValue(null);
        if (MemberTypeCode.getValue() == 0)//Agent
        {
            AgenCode.enable(); AgenCode.allowBlank = false; AgenCode.isValid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid()
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid()
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid()
        }
        else if (MemberTypeCode.getValue() == 1)//Broker
        {
            BrokerCode.enable(); BrokerCode.allowBlank = false; BrokerCode.isValid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid();
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid();
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid();
        }
        else if (MemberTypeCode.getValue() == 2)//Group
        {
            GroupCode.enable(); GroupCode.allowBlank = false; GroupCode.isValid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid();
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid();
        }
        else if (MemberTypeCode.getValue() == 3)//Member
        {
            MemberIDCode.enable(); MemberIDCode.allowBlank = false; MemberIDCode.isValid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid();
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid();
        }
        else if (MemberTypeCode.getValue() == 4)//Provider
        {
            ProviderCode.enable(); ProviderCode.allowBlank = false; ProviderCode.isValid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid();
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid();
        }
        else if (MemberTypeCode.getValue() == 6)//Insurer
        {
            ReInsuranceCode.enable(); ReInsuranceCode.allowBlank = false; ReInsuranceCode.isValid();
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid();
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid();
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid();
        }
        else {
            ProviderCode.disable(); ProviderCode.clearValue(); ProviderCode.allowBlank = true; ProviderCode.clearInvalid();
            ReInsuranceCode.disable(); ReInsuranceCode.clearValue(); ReInsuranceCode.allowBlank = true; ReInsuranceCode.clearInvalid()
            AgenCode.disable(); AgenCode.clearValue(); AgenCode.allowBlank = true; AgenCode.clearInvalid();
            GroupCode.disable(); GroupCode.clearValue(); GroupCode.allowBlank = true; GroupCode.clearInvalid();
            BrokerCode.disable(); BrokerCode.clearValue(); BrokerCode.allowBlank = true; BrokerCode.clearInvalid();
            MemberIDCode.disable(); MemberIDCode.clearValue(); MemberIDCode.allowBlank = true; MemberIDCode.clearInvalid();
        }

    }, this);

}
function LeaveRequest(form, login) {
    if (!form.isView) {

        Ext.getCmp('LeaveRequest-AuthorizedStatusCode').setComboValue(0);
        Ext.getCmp('LeaveRequest-AuthorizedStatusCode').disable();
        if (login.employeecode != null) {
            var EmployeeIDCode = Ext.getCmp('LeaveRequest-EmployeeIDCode');
            var EmployeeName = Ext.getCmp('LeaveRequest-EmployeeName');
            var MobileNo = Ext.getCmp('LeaveRequest-MobileNo');
            var EmailId = Ext.getCmp('LeaveRequest-EmailId');
            var Payroll_Name = Ext.getCmp('LeaveRequest-Payroll_Name');

            EmployeeIDCode.setComboValue(login.employeecode);
            EmployeeIDCode.disable();
            EmployeeName.setValue(login.portalemployee.EmployeeFullName);
            MobileNo.setValue(login.portalemployee.MobileNo);
            EmailId.setValue(login.portalemployee.EmailId);
            Payroll_Name.setValue(login.portalemployee.PayrollName);
        }
    }

}

function PermissionRequest(form, login) {
    if (!form.isView) {

        Ext.getCmp('PermissionRequest-AuthorizedStatusCode').setComboValue(0);
        Ext.getCmp('PermissionRequest-AuthorizedStatusCode').disable();
        if (login.employeecode != null) {
            var EmployeeIDCode = Ext.getCmp('PermissionRequest-EmployeeIDCode');
            var EmployeeName = Ext.getCmp('PermissionRequest-EmployeeName');
            var MobileNo = Ext.getCmp('PermissionRequest-MobileNo');
            var EmailId = Ext.getCmp('PermissionRequest-EmailId');
            var Payroll_Name = Ext.getCmp('PermissionRequest-Payroll_Name');

            EmployeeIDCode.setComboValue(login.employeecode);
            EmployeeIDCode.disable();
            EmployeeName.setValue(login.portalemployee.EmployeeFullName);
            MobileNo.setValue(login.portalemployee.MobileNo);
            EmailId.setValue(login.portalemployee.EmailId);
            Payroll_Name.setValue(login.portalemployee.PayrollName);
        }
        //EmployeeCode.setComboValue(login.EmployeeCode);
        //EmployeeCode.disable();
        var FromTime = Ext.getCmp('PermissionRequest-FromTime');
        var ToTime = Ext.getCmp('PermissionRequest-ToTime');
        var NoofHours = Ext.getCmp('PermissionRequest-NoofHours');
        if (FromTime) FromTime.on('blur', onPermissionReqBlur, this);
        if (ToTime) ToTime.on('blur', onPermissionReqBlur, this);
    }
}


function onPermissionReqBlur(field) {

    var FromTime = Ext.getCmp('PermissionRequest-FromTime').getValue();
    var ToTime = Ext.getCmp('PermissionRequest-ToTime').getValue();

    var NoofHours = Ext.getCmp('PermissionRequest-NoofHours');


    var IIn1 = (new Date("01/01/2007 " + FromTime).getHours() * 60) + new Date("01/01/2007 " + FromTime).getMinutes();
    var OOut1 = (new Date("01/01/2007 " + ToTime).getHours() * 60) + new Date("01/01/2007 " + ToTime).getMinutes();



    if (IIn1 >= OOut1) {
        Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "To" Time !');
        return;
    }


    var MorWorkHrs = 0;

    if (OOut1 > IIn1) {
        MorWorkHrs = (OOut1 - IIn1);
    }

    var twhr = Math.floor(MorWorkHrs / 60) + ((MorWorkHrs % 60) / 100);
    NoofHours.setValue(twhr);
}

var DelmeberCode = '';


function DelMemebrUploadHndlr(form, login) {

    DelmeberCode = Ext.getCmp('DelCancelMember').selectedIndex;
    if (DelmeberCode == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
        return true;
    }
    else {
        var UploadPolicyMember = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.UploadDelCancelMember';
        var Url = 'forms/HumanResources/NGI/UnderWritting/UploadDelCancelMember.xml';
        var PKey = -1;
        var WidgetTitle = 'Upload Add Member';
        UploadPolicyMember.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'DelMemberPolicyImportData');
    }

}

//Delcancel member
function UploadDelCancelMember(form, login) {

    if (!form.isview) {

        var UploadCode = Ext.getCmp('UploadDelCancelMember-UploadTemplateCode');
        if (UploadCode) UploadCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADDELCANCEL')";
        }, this);

        var DelMemberPolicyCode = Ext.getCmp('UploadDelCancelMember-DelMemberPolicyCode');
        if (DelmeberCode != '') {
            DelMemberPolicyCode.setComboValue(DelmeberCode);
            DelMemberPolicyCode.disable();
        }
        DelmeberCode = '';
    }
}

function DelMemberDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('UploadDelCancelMember-UploadTemplateCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DelMemberDownloadTemplateReqComplete, this);

}

function DelMemberDownloadTemplateReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DelMemberDownloadTemplateReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}


function DelMemberVieworDownload(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.UploadDelCancelMember';
    var Primary = Ext.getCmp('UploadDelCancelMember').selectedIndex;

    var FileName = Ext.getCmp('UploadDelCancelMember-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DelMemberVieworDownloadReqComplete, this);
}

function DelMemberVieworDownloadReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DelMemberVieworDownloadReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function DelMemberPolicyImportData(form, login) {

    var SelectedIndex = Ext.getCmp('UploadDelCancelMember').selectedIndex;

    if (SelectedIndex != -1) {

        var FileName = Ext.getCmp('UploadDelCancelMember-ImageFileName').getValue();
        if (FileName == '') {
            Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
            return;
        }
        else if (FileName.lastIndexOf('.xl') < 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
            return;
        }

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'DelMemberMemberImportData',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', DelMemberImportDataComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
        return true;
    }
}


function DelMemberImportDataComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', DelMemberImportDataComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Msg,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('UploadDelCancelMember').selectedIndex;
        var MenuID = 'ID_UPLOADDELCANCEL';
        var TemplateCode = Ext.getCmp('UploadDelCancelMember-UploadTemplateCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', DelMemberImportDataPrcComplete, this);

    }

}

function DelMemberImportDataPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', DelMemberImportDataPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});
        var PrimaryKey = Ext.getCmp('UploadDelCancelMember').selectedIndex;
        var MenuID = 'ID_UPLOADDELCANCEL';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ImportDataPrcComplete, this);

    }
}
function AdditionOfService(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('AdditionOfService-ProviderType');
        var GroupName = Ext.getCmp('AdditionOfService-GroupName');
        var ProviderName = Ext.getCmp('AdditionOfService-ProviderName');
        var AlternateName = Ext.getCmp('AdditionOfService-AlternateName');
        var CountryName = Ext.getCmp('AdditionOfService-CountryName');
        var StateName = Ext.getCmp('AdditionOfService-StateName');
        var CityName = Ext.getCmp('AdditionOfService-CityName');
        var ProviderCode = Ext.getCmp('AdditionOfService-ProviderCode');


        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);

    }
}

function TarriffRevision(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('TarriffRevision-ProviderType');
        var GroupName = Ext.getCmp('TarriffRevision-GroupName');
        var ProviderName = Ext.getCmp('TarriffRevision-ProviderName');
        var AlternateName = Ext.getCmp('TarriffRevision-AlternateName');
        var CountryName = Ext.getCmp('TarriffRevision-CountryName');
        var StateName = Ext.getCmp('TarriffRevision-StateName');
        var CityName = Ext.getCmp('TarriffRevision-CityName');
        var CompanyCode = Ext.getCmp('TarriffRevision-CompanyCode');
        CompanyCode.text = 'Download';
        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);
    }
}

function PhysicianEmpanelment(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('PhysicianEmpanelment-ProviderType');
        var GroupName = Ext.getCmp('PhysicianEmpanelment-GroupName');
        var ProviderName = Ext.getCmp('PhysicianEmpanelment-ProviderName');
        var AlternateName = Ext.getCmp('PhysicianEmpanelment-AlternateName');
        var CountryName = Ext.getCmp('PhysicianEmpanelment-CountryName');
        var StateName = Ext.getCmp('PhysicianEmpanelment-StateName');
        var CityName = Ext.getCmp('PhysicianEmpanelment-CityName');


        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);
    }
}

function PortalContact(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('PortalContact-ProviderType');
        var GroupName = Ext.getCmp('PortalContact-GroupName');
        var ProviderName = Ext.getCmp('PortalContact-ProviderName');

        ProviderName.setValue(login.portalprovider.ProviderName);
        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
    }
}


function PortalOtherRequest(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('PortalOtherRequest-ProviderType');
        var GroupName = Ext.getCmp('PortalOtherRequest-GroupName');
        var ProviderName = Ext.getCmp('PortalContact-ProviderName');

        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
    }
}

function HealthNetForm(form, login) {
    if (!form.isView) {
        var ProviderTypeCode = Ext.getCmp('HealthNetForm-ProviderTypeCode');
        var GroupName = Ext.getCmp('HealthNetForm-GroupAssociatedwith');
        var SubmissionTypeCode = Ext.getCmp('HealthNetForm-SubmissionTypeCode');
        //var EmirateCode = Ext.getCmp('HealthNetForm-EmirateCode');
        var CompleteAddress = Ext.getCmp('HealthNetForm-CompleteAddress');
        var MainMobile = Ext.getCmp('HealthNetForm-TelephoneNo');
        var EMail = Ext.getCmp('HealthNetForm-EMail');
        var FaxNo = Ext.getCmp('HealthNetForm-FaxNo');


        ProviderTypeCode.setComboValue(login.portalprovider.ProviderTypeCode);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        SubmissionTypeCode.setComboValue(login.portalprovider.ClaimQuoteTypeCode);
        // EmirateCode.setComboValue(login.portalprovider.StateCode);
        CompleteAddress.setValue(login.portalprovider.Address);
        MainMobile.setValue(login.portalprovider.MobileNo);
        EMail.setValue(login.portalprovider.EMail);
        FaxNo.setValue(login.portalprovider.FaxNumber);
    }
}

function DocumentRequest(form, login) {
    if (!form.isview) {

        if (login.userglobalrights && login.userglobalrights.indexOf('200') < 0 && Ext.getCmp('HRDocumentRequestPost'))
            Ext.getCmp('HRDocumentRequestPost').disable();

        if (login.employeecode != null) {
            var EmployeeIDCode = Ext.getCmp('DocumentRequest-EmployeeIDCode');
            var EmployeeName = Ext.getCmp('DocumentRequest-EmployeeName');
            var MobileNo = Ext.getCmp('DocumentRequest-MobileNo');
            var EmailId = Ext.getCmp('DocumentRequest-EmailId');
            var Payroll_Name = Ext.getCmp('DocumentRequest-Payroll_Name');

            EmployeeIDCode.setComboValue(login.employeecode);
            EmployeeIDCode.disable();
            EmployeeName.setValue(login.portalemployee.EmployeeFullName);
            MobileNo.setValue(login.portalemployee.MobileNo);
            EmailId.setValue(login.portalemployee.EmailId);
            Payroll_Name.setValue(login.portalemployee.PayrollName);
        }
        var pkey = Ext.getCmp('DocumentRequest').selectedIndex;
        var status = Ext.getCmp('DocumentRequest-AuthorizedStatusCode');
        var DocumentCode = Ext.getCmp('DocumentRequestDetail-DocumentCode');

        //if (EmployeeIDCode) EmployeeIDCode.on('beforequery', function (evt) {
        //    evt.combo.lastQuery = '1=2';
        //    evt.combo.store.baseParams.filter = "gec.Person_Code=" + login.employeecode + "";
        //}, this);

        if (pkey == -1) {
            status.setComboValue(0);
        }

        //if (DocumentCode) DocumentCode.on('beforequery', function (evt) {
        //    evt.combo.lastQuery = '1=2';
        //    evt.combo.store.baseParams.filter = "doc.DocumentCode in (select DOCUMENTCODE from HR_PERSONS_DOCUMENTS where PERSON_CODE= " + login.employeecode + ")";
        //}, this);

    }
}

function ChangeInAccountDetails(form, login) {
    if (!form.isview) {
        var pkey = Ext.getCmp('ChangeInAccountDetails').selectedIndex;
        var Status = Ext.getCmp('ChangeInAccountDetails-AuthorizedStatusCode');
        Status.disable();
        if (pkey == -1) {
            Status.setComboValue(0);
        }
    }
}

function BankAccountForm(form, login) {
    if (!form.isview) {
        var pkey = Ext.getCmp('BankAccountForm').selectedIndex;
        var Status = Ext.getCmp('BankAccountForm-AuthorizedStatusCode');
        Status.disable();
        if (pkey == -1) {
            Status.setComboValue(0);
        }
    }
}



function PolicyRegeneratePremiumhandler(form, login) {

    var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyRegeneratePremiumPopUp',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PolicyRegeneratePremiumPopUpComplete, this);
}


function PolicyRegeneratePremiumPopUpComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyRegeneratePremiumPopUpComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.PolicyRegeneratePremiumPopUpForm = new Ext.form.FormPanel(responseText.PolicyRegeneratePremiumPopUpCofig);

    this.PolicyRegeneratePremiumPopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var PolicyRegeneratePremiumPopUpDtlList = Ext.getCmp('PolicyRegeneratePremiumPopUpDtlList');
            for (var cnt = 0; cnt < PolicyRegeneratePremiumPopUpDtlList.store.getCount() ; cnt++) {

                PolicyRegeneratePremiumPopUpDtlList.store.getAt(cnt).set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.PolicyRegeneratePremiumPopUpForm.FormFieldsCount + 2
    });
    this.PolicyRegeneratePremiumPopUpForm.addButton({
        text: 'Un Select All',
        handler: function () {
            var PolicyRegeneratePremiumPopUpDtlList = Ext.getCmp('PolicyRegeneratePremiumPopUpDtlList');
            for (var cnt = 0; cnt < PolicyRegeneratePremiumPopUpDtlList.store.getCount() ; cnt++) {

                PolicyRegeneratePremiumPopUpDtlList.store.getAt(cnt).set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.PolicyRegeneratePremiumPopUpForm.FormFieldsCount + 2
    });
    this.PolicyRegeneratePremiumPopUpForm.addButton({
        text: 'Regenerate Premium',
        handler: function () {

            var PrimKey = Ext.getCmp('NGIPolicy').selectedIndex;
            if (PrimKey == -1) {
                Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
                return;
            }
            var PolicyRegeneratePremiumPopUpDtlList = Ext.getCmp('PolicyRegeneratePremiumPopUpDtlList');
            var CategoryCode = '';
            var Count = PolicyRegeneratePremiumPopUpDtlList.store.getCount();
            var NoOfSelect = 0;
            for (i = 0; i < Count; i++) {
                var record = PolicyRegeneratePremiumPopUpDtlList.store.getAt(i);
                if (record.get('Selectcheck') == true) {
                    NoOfSelect++;
                    if (record.get('EffectiveDate') == '') {
                        Ext.MessageBox.alert(login.modulename, 'EffectiveDate should not be empty for the Member ' + record.get('MemberName'));
                        return;
                    }
                    else {
                        CategoryCode += PolicyRegeneratePremiumPopUpDtlList.store.getAt(i).get('ID') + ',';
                    }
                }

            }
            if (NoOfSelect == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select Atleast One Member');
                return;
            }
            if (CategoryCode != '') {
                CategoryCode = CategoryCode.substring(0, CategoryCode.length - 1);
            }
            var Category_Code = CategoryCode;

            Ext.MessageBox.confirm(login.modulename, 'This will Regenerate the premium for all the Members of selected category.Do you wish to continue ?.', function (button) {

                if (button == 'yes') {

                    showMask();
                    Ext.Ajax.request({
                        url: 'tools/HumanResources/HRGeneralRequest.aspx',
                        params: {
                            action: 'PolicyRegeneratePremium',
                            PrimKey: PrimKey,
                            CategoryCode: Category_Code
                        },
                        method: 'POST',
                        failure: function (result, request) {
                            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                        },
                        timeout: 1200000,
                        scope: this
                    });
                    Ext.Ajax.on('requestcomplete', PolicyRegeneratePremiumComplete, this);
                }
                else return;

            }, this);


        },
        scope: this,
        tabIndex: this.PolicyRegeneratePremiumPopUpForm.FormFieldsCount + 2

    });
    this.PolicyRegeneratePremiumPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PolicyRegeneratePremiumPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyRegeneratePremiumPopUpForm.FormFieldsCount + 2
    });
    this.PolicyRegeneratePremiumPopUpFormWindow = new Ext.Window({
        id: 'PolicyRegeneratePremiumPopUpFormWindow',
        title: 'Policy Regenerate Premium PopUp',
        closable: true,
        minimizable: false,
        width: this.PolicyRegeneratePremiumPopUpForm.width + 10,
        height: this.PolicyRegeneratePremiumPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PolicyRegeneratePremiumPopUpForm]
    });
    this.PolicyRegeneratePremiumPopUpForm.on('render', PolicyRegeneratePremiumPopUp, this);
    this.PolicyRegeneratePremiumPopUpFormWindow.show();
}

function PolicyRegeneratePremiumPopUp(form, login) {

}

function PolicyRegeneratePremiumComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyRegeneratePremiumComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        this.PolicyRegeneratePremiumPopUpFormWindow.close();
        var PrimaryKey = Ext.getCmp('NGIPolicy').selectedIndex;
        var MenuID = 'ID_NGIPOLICY';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ImportDataPrcComplete, this);
    }
}

function IndividualPolicyRegeneratePremiumhandler(form, login) {

    var PrimKey = Ext.getCmp('NGIIndividualPolicies').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'IndividualPolicyRegeneratePremium',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IndividualPolicyRegeneratePremiumComplete, this);
}

function IndividualPolicyRegeneratePremiumComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IndividualPolicyRegeneratePremiumComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        var PrimaryKey = Ext.getCmp('NGIIndividualPolicies').selectedIndex;
        var MenuID = 'ID_INDIVIDUALPOLICIE';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ImportDataPrcComplete, this);
    }
}

function NonPayOrPartialyPaidClaimPayment(form, login) {

    if (form.selectedIndex == -1) {
        Ext.getCmp('NonPayOrPartialyPaidClaimPayment-SourceCode').setComboValue(3);
        var AccountDesignationCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-AccountDesignationCode');
        AccountDesignationCode.allowBlank = true;
        AccountDesignationCode.isValid();
    }

    if (!form.isView) {

        var PolicyCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-PolicyIDCode');
        var IndividualpolicyCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-IPPolicyIDCode');
        var ProviderCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-ProviderCode');
        var SourceCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-SourceCode');
        var GroupCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-GroupCode');
        var AccountDesignationCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-AccountDesignationCode');
        var PolicyName = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-PolicyName');

        var SourceCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-SourceCode');
        SourceCode.constantFilter = '0,2,3,4,8';

        if (AccountDesignationCode) AccountDesignationCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (SourceCode.editValue == 2) {
                evt.combo.store.baseParams.filter = " Gro.PARENT_GROUP=" + GroupCode.editValue + " or  Gro.Group_Code=" + GroupCode.editValue + "";
            }
            if (SourceCode.editValue == 3) {
                evt.combo.store.baseParams.filter = " Gro.PARENT_GROUP in (select GroupCode from im_policy where policycode=" + PolicyCode.editValue + ") or Gro.Group_Code in (select GroupCode from im_policy where policycode=" + PolicyCode.editValue + ") ";
            }
        }, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=1 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "POLI.TypeCode=2 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);

        ProviderCode.disable();
        GroupCode.disable();
        IndividualpolicyCode.disable();


        if (SourceCode) SourceCode.on('select', function (combo, record, index) {

            var SourceCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-SourceCode').editValue;
            onBusinessTypeclear('NonpayOrPartialyPaidClaimSubdtlList');
            AccountDesignationCode.clearValue();

            if (SourceCode == 0 || SourceCode == 8) {     // Provider//ReimBursment Provider claims
                ProviderCode.enable();
                ProviderCode.allowBlank = false;
                ProviderCode.isValid();


                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;
                GroupCode.clearInvalid();

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;
                PolicyCode.clearInvalid();

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;
                IndividualpolicyCode.clearInvalid();

                PolicyName.setValue(null);
                AccountDesignationCode.disable();
            }
            if (SourceCode == 2) {  // Group

                GroupCode.enable();
                GroupCode.allowBlank = false;
                GroupCode.isValid();

                AccountDesignationCode.enable();

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;
                PolicyCode.clearInvalid();

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;
                IndividualpolicyCode.clearInvalid();

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;
                ProviderCode.clearInvalid();

                PolicyName.setValue(null);
                AccountDesignationCode.enable();
            }
            if (SourceCode == 3) { // policy

                PolicyCode.enable();
                PolicyCode.allowBlank = false;
                PolicyCode.isValid();

                IndividualpolicyCode.disable();
                IndividualpolicyCode.clearValue();
                IndividualpolicyCode.allowBlank = true;
                IndividualpolicyCode.clearInvalid();

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;
                GroupCode.clearInvalid();

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;
                ProviderCode.clearInvalid();

                PolicyName.setValue(null);
                AccountDesignationCode.enable();
            }

            if (SourceCode == 4) { // Individual policy

                IndividualpolicyCode.enable();
                IndividualpolicyCode.allowBlank = false;
                IndividualpolicyCode.isValid();

                PolicyCode.disable();
                PolicyCode.clearValue();
                PolicyCode.allowBlank = true;
                PolicyCode.clearInvalid();

                GroupCode.disable();
                GroupCode.clearValue();
                GroupCode.allowBlank = true;
                GroupCode.clearInvalid();

                ProviderCode.disable();
                ProviderCode.clearValue();
                ProviderCode.allowBlank = true;
                ProviderCode.clearInvalid();

                PolicyName.setValue(null);

                AccountDesignationCode.disable();
                AccountDesignationCode.clearValue();
            }


        }, this);

        if (SourceCode) SourceCode.on('clear', function (combo, record, index) {
            onBusinessTypeclear('NonpayOrPartialyPaidClaimSubdtlList');
            ProviderCode.disable();
            GroupCode.disable();
            ProviderCode.allowBlank = true;
            GroupCode.allowBlank = true;
            GroupCode.clearValue();
            ProviderCode.clearValue();
            PolicyCode.clearValue();
            IndividualpolicyCode.clearValue();
            PolicyName.setValue(null);
            AccountDesignationCode.disable();
            AccountDesignationCode.clearValue();
        }, this);

        var NonpayOrPartialyPaidClaimSubdtlList = Ext.getCmp('NonpayOrPartialyPaidClaimSubdtlList').getStore();
        NonpayOrPartialyPaidClaimSubdtlList.on('load', function (store, records, options) {

            var TotalAmt = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                TotalAmt += (1 * record.get('DenialAmount'));

            }
            Ext.getCmp('NonPayOrPartialyPaidClaimPayment-Totall').setValue(TotalAmt);

        }, this);

    }

    var DetectableAmountTotal = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-DetectableAmountTotal');
    var CoInsurerAmountTotal = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-CoInsurerAmountTotal');
    var RequestAmountTotal = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-RequestAmountTotal');
    var ApprovedAmountTotal = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-ApprovedAmountTotal');
    var DenailValueTotal = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-DenailValueTotal');
    var NonpayOrPartialyPaidClaimdtlList = Ext.getCmp('NonpayOrPartialyPaidClaimdtlList');

    NonpayOrPartialyPaidClaimdtlList.store.on('load', function (store, record, options) {
        var DetectableTotal = 0, CoInsurerTotal = 0, RequestTotal = 0, ApprovedTotal = 0, DenailTotal = 0;
        for (var i = 0; i < NonpayOrPartialyPaidClaimdtlList.store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) DetectableTotal += (1 * record.get('Detectable'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) CoInsurerTotal += (1 * record.get('CoInsurer'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) RequestTotal += (1 * record.get('RequestAmount'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) ApprovedTotal += (1 * record.get('ApprovedAmount'));
            if (record.get('IsDeleted') == false && !record.get('Include_Claim')) DenailTotal += (1 * record.get('DenailValue'));
        }
        DetectableAmountTotal.setRawValue(DetectableTotal.toFixed(2));
        CoInsurerAmountTotal.setRawValue(CoInsurerTotal.toFixed(2));
        RequestAmountTotal.setRawValue(RequestTotal.toFixed(2));
        ApprovedAmountTotal.setRawValue(ApprovedTotal.toFixed(2));
        DenailValueTotal.setRawValue(DenailTotal.toFixed(2));
    }, this);


    var PaymentCode = Ext.getCmp('NonPayOrPartialyPaidClaimPayment-PaymentCode');
    if (login.userglobalrights && login.userglobalrights.indexOf('129') < 0 && Ext.getCmp('NonPayEndorsementPostingReverse'))//Bank Transfer
        Ext.getCmp('NonPayEndorsementPostingReverse').disable();


}

var ChangeMemberPreCode = '';

function NGIChangeMemberPremiumHndlr(form, login) {

    ChangeMemberPreCode = Ext.getCmp('ChangeMemberPremium').selectedIndex;
    if (ChangeMemberPreCode == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
        return true;
    }
    else {
        var UploadIndividualPolicyMember = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.UploadChangeMemberPremium';
        var Url = 'forms/HumanResources/NGI/UnderWritting/UploadChangeMemberPremium.xml';
        var PKey = -1;
        var WidgetTitle = 'Upload Individual Policy Member';
        UploadIndividualPolicyMember.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'ChangeMemberPremiumImportData');
    }

}
function UploadChangeMemberPremium(form, login) {

    var UploadCode = Ext.getCmp('UploadChangeMemberPremium-UploadTemplateCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADCHANGEMEMPRE')";
    }, this);

    if (!form.isView) {
        var ChangeMemberPremiumCode = Ext.getCmp('UploadChangeMemberPremium-ChangeMemberPremiumCode');
        var PolicyName = Ext.getCmp('UploadChangeMemberPremium-PolicyName');
        if (ChangeMemberPreCode != '') {

            ChangeMemberPremiumCode.setComboValue(ChangeMemberPreCode);
            PolicyName.setValue(Ext.getCmp('ChangeMemberPremium-PolicyName').getValue());
        }
        ChangeMemberPreCode = '';
    }
}

function ChangeMemberPremium(form, login) {
    Ext.getCmp('ChangeMemberPremium-Startdate').disable();
    Ext.getCmp('ChangeMemberPremium-Enddate').disable();
    Ext.getCmp('ChangeMemberPremium-PolicyIdCode').disable();
    Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode').disable();
    var ChangeMemberPremiumMemberDtlList = Ext.getCmp('ChangeMemberPremiumMemberDtlList');

    if (!form.isView) {

        var TypeCode = Ext.getCmp('ChangeMemberPremium-PolicyTypesCode');
        var PolicyCode = Ext.getCmp('ChangeMemberPremium-PolicyIdCode');
        var IndividualpolicyCode = Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode');
        var PolicyName = Ext.getCmp('ChangeMemberPremium-PolicyName');
        var PolicytypeName = Ext.getCmp('ChangeMemberPremium-PolicytypeName');
        var Startdate = Ext.getCmp('ChangeMemberPremium-Startdate');
        var Enddate = Ext.getCmp('ChangeMemberPremium-Enddate');
        var GroupName = Ext.getCmp('ChangeMemberPremium-GroupName');
        var Base_perimum = Ext.getCmp('ChangeMemberPremium-Base_perimum');
        var ChangeMemberPremiumCommissionDtlList = Ext.getCmp('ChangeMemberPremiumCommissionDtlList');
        var GeneralCommBillingCode = Ext.getCmp('ChangeMemberPremiumCommissionDtl-GeneralCommBillingCode');

        var MemberCode = Ext.getCmp('ChangeMemberPremiumMemberDtl-MemberCode');
        var CategoryCode = Ext.getCmp('ChangeMemberPremiumMemberDtl-CategoryCode');


        var ChangeMemberPremiumMemberDtlList = Ext.getCmp('ChangeMemberPremiumMemberDtlList');

        var PolicyEndDate = Ext.getCmp('ChangeMemberPremium-Enddate').getValue();
        var StartDate = Ext.getCmp('ChangeMemberPremium-Startdate').getValue();
        var SharingSummary = Ext.getCmp('ChangeMemberPremium-SharingSummary');
        var ChangeMemberPremiumSharingDtlList = Ext.getCmp('ChangeMemberPremiumSharingDtlList');//Sharing Detail Load: to Calculate Sharing Amount

        TypeCode.on('select', function (combo, record, index) {
            if (TypeCode.editValue == 1) {  //policy
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IndividualpolicyCode.disable(); IndividualpolicyCode.clearValue(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
            }
            if (TypeCode.editValue == 2) { //Individual Policy
                IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
                PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
            PolicyName.setValue(null); PolicytypeName.setValue(null); Startdate.setValue(null); Enddate.setValue(null); GroupName.setValue(null);
            Base_perimum.setValue(null);
        }, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "pol.TypeCode=1";
        }, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "pol.TypeCode=2";
        }, this);

        if (PolicyCode) PolicyCode.on('select', ChangeMemberPremiumPolicyselectEvt, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('select', ChangeMemberPremiumIndPolicyselectEvt, this);

        ChangeMemberPremiumCommissionDtlList.on('afteredit', function (e) {

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var FinalAmount = Ext.getCmp('ChangeMemberPremium-TotalApplyAmount').getValue();
                var DefValueAmnt = 0, DefValuePre = 0;
                if (e.grid.store.getAt(i).get('Calc_MethodCode') == 0) {  //  Amount
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    DefValueAmnt = e.grid.store.getAt(i).get('DefaultValue');
                    DefValuePre == 0;
                }
                else if (e.grid.store.getAt(i).get('Calc_MethodCode') == 1) {  // Precentage
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    var FinalAmount = Ext.getCmp('ChangeMemberPremium-TotalApplyAmount').getValue();
                    if (DefaultValue > 100) {
                        e.grid.store.getAt(i).set('Commission_value', 0);
                        e.grid.store.getAt(i).set('DefaultValue', 0);
                        Ext.MessageBox.alert(login.modulename, 'Default value should be less or equal to 100');
                        return;
                    }
                    DefValuePre = FinalAmount != 0 ? ((FinalAmount * e.grid.store.getAt(i).get('DefaultValue')) / 100) : 0;
                    DefValueAmnt == 0;
                }
                var Total = DefValueAmnt == 0 ? DefValuePre : DefValueAmnt;
                e.grid.store.getAt(i).set('Commission_value', Total);
            }
            if (e.record.get('Comission_TypesCode') == 2) // NGI Commission
                e.record.set('Description', GeneralCommBillingCode.lastSelectionText);

        }, this);


        Ext.getCmp('ChangeMemberPremiumMemberDtlList').on('rowclick', function (grid, rowIndex, Record) {

            var MemberPolicyCode = grid.getStore().getAt(rowIndex).get('MemberPolicyCode');
            var FilterQry = "pco.MEMBERPOLICYCODE=" + MemberPolicyCode;
            FilterQry = '';
            DetailStore = Ext.getCmp('ChangeMemberPremiumAdditionalPreDtlList').getStore();
            var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.ChangeMemberPremiumAdditionalPreDtl&filter=" + FilterQry;
            if (DetailStore) {
                DetailStore.proxy = new Ext.data.HttpProxy({
                    url: DetUrl
                });
                DetailStore.load({
                    params: {
                        start: 0,
                        limit: 20
                    }
                });
            }

        }, this);

        if (MemberCode) MemberCode.on('beforequery', function (evt) {
            var PolicyCode = Ext.getCmp('ChangeMemberPremium-PolicyIdCode').editValue;
            var IndPolicyCode = Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode').editValue;
            var TypeCode = Ext.getCmp('ChangeMemberPremium-PolicyTypesCode').editValue;
            var MemberPolicyCode = TypeCode == 1 ? PolicyCode : IndPolicyCode;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " IME.MEMBERPOLICYCODE  in (select MEMBERPOLICYCODE from IM_MEMBERPOLICY where POLICYCODE=" + MemberPolicyCode + " and TYPEE=" + TypeCode + ")";
        }, this);

        if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
            var PolicyCode = Ext.getCmp('ChangeMemberPremium-PolicyIdCode').editValue;
            var IndPolicyCode = Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode').editValue;
            var TypeCode = Ext.getCmp('ChangeMemberPremium-PolicyTypesCode').editValue;
            var MemberPolicyCode = TypeCode == 1 ? PolicyCode : IndPolicyCode;

            if (TypeCode == 1) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL where  POLICYCODE in(select POLICYCODE from IM_POLICY where POLICYCODE=" + MemberPolicyCode + "))";
            }
            else {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_NGIINDPOLICYCATEGORY where  INDIVIDUALPOLICYCODE in(select INDIVIDUALPOLICYCODE from IM_INDIVIDUALPOLICY where INDIVIDUALPOLICYCODE" + MemberPolicyCode + "))";
            }
        }, this);

        if (ChangeMemberPremiumMemberDtlList) ChangeMemberPremiumMemberDtlList.on('afteredit', function (e) {

            var MemberStartDate = e.record.get('MemberStartDate');
            var EffectiveDate = e.record.get('EffectiveDate');

            if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
            else PolicyEndDate = PolicyEndDate;

            if (typeof (MemberStartDate) == 'string') MemberStartDate = Date.parseDate(MemberStartDate, login.jsdateformat);
            else MemberStartDate = MemberStartDate;

            if (EffectiveDate != '') {
                if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
                else EffectiveDate = EffectiveDate;

                if (PolicyEndDate < EffectiveDate) {
                    Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
                    e.record.set('EffectiveDate', '');
                    //e.record.set('BasePremium', 0);
                    return;
                }

                var Member_StartDate = e.record.get('MemberStartDate');
                if (MemberStartDate > EffectiveDate) {
                    Ext.MessageBox.alert(login.modulename, "EffectiveDate should greater then Member joined Date. Member Joined Date was " + Member_StartDate + "");
                    e.record.set('EffectiveDate', '');
                    //e.record.set('BasePremium', 0);
                    return;
                }

                if (typeof (StartDate) == 'string') StartDate = Date.parseDate(StartDate, login.jsdateformat);
                else StartDate = StartDate;

                var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
                var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
                var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());

                var TotalPolicyDays = Math.floor(t1 - t3) / (1000 * 60 * 60 * 24);
                var diff = Math.floor(t1 - t2) / (1000 * 60 * 60 * 24);

                DeletionRemainigDays = diff;

                //var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);

                //e.grid.store.getAt(i).set('BasePremium', ApplyAmountValue);
            }
        }, this);

        ChangeMemberPremiumSharingDtlList.getStore().on('load', function (store, record, options) {
            var Total11 = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Total11 += (1 * record.get('FinalPremiumValue'));
            }
            SharingSummary.setValue(Total11);
        }, this);

        ChangeMemberPremiumSharingDtlList.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
            var AmountSum = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                if (e.grid.store.getAt(i).get('ReInsurValueTypeCode') == 1) {// Percentage
                    e.grid.store.getAt(i).set('FinalPremiumValue', 0);
                }
                AmountSum += (1 * e.grid.store.getAt(i).get('FinalPremiumValue'));
            }
            SharingSummary.setValue(AmountSum);
        }, this);

        ChangeMemberPremiumMemberDtlList.getStore().on('load', function (store, record, options) {
            var Total11 = 0, Total12 = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) {
                    Total11 += (1 * record.get('FullPremium'));
                    Total12 += (1 * record.get('NewPremium'));
                }

            }
            Ext.getCmp('ChangeMemberPremium-OldPremiumTotal').setRawValue(Total11.toFixed(2));
            Ext.getCmp('ChangeMemberPremium-NewPremiumTotal').setRawValue(Total12.toFixed(2));

        }, this);

        var ChangeMemberPremiumMemberGrid = Ext.getCmp('ChangeMemberPremiumMemberDtlList');
        ChangeMemberPremiumMemberGrid.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
            var AmountSum = 0;
            NewPre = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                AmountSum += (1 * e.grid.store.getAt(i).get('FullPremium'));
                NewPre += (1 * e.grid.store.getAt(i).get('NewPremium'));
            }
            Ext.getCmp('ChangeMemberPremium-OldPremiumTotal').setValue(AmountSum);
            Ext.getCmp('ChangeMemberPremium-NewPremiumTotal').setValue(NewPre);
        }, this);

    }

    ChangeMemberPremiumMemberDtlList.getStore().on('load', function (store, record, options) {
        var Total11 = 0, Total12 = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) {
                Total11 += (1 * record.get('FullPremium'));
                Total12 += (1 * record.get('NewPremium'));
            }

        }
        Ext.getCmp('ChangeMemberPremium-OldPremiumTotal').setRawValue(Total11.toFixed(2));
        Ext.getCmp('ChangeMemberPremium-NewPremiumTotal').setRawValue(Total12.toFixed(2));

    }, this);

    ChangeMemberPremiumMemberDtlList.on('addrecord', function (evt) {
        evt.record.set('EffectiveDate', '');
    }, this);

}

function ChangePremiumMemberLoad(form, login) {

    var Primary = Ext.getCmp('ChangeMemberPremium').selectedIndex;

    showMask();
    Ext.Ajax.request({

        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ChangePremiumMemberLoad'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', ChangePremiumMemberLoadCompleted, this);

}



function ChangePremiumMemberLoadCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ChangePremiumMemberLoadCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.ChangePremiumMemberPopupForm = new Ext.form.FormPanel(responseText.ChangePremiumMemberCofig);

    this.ChangePremiumMemberPopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var ChangeMemberPremiumPopupDetList = Ext.getCmp('ChangeMemberPremiumPopupDetList');

            for (var pcnt = 0; pcnt < ChangeMemberPremiumPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = ChangeMemberPremiumPopupDetList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.ChangePremiumMemberPopupForm.FormFieldsCount + 2
    });

    this.ChangePremiumMemberPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var ChangeMemberPremiumPopupDetList = Ext.getCmp('ChangeMemberPremiumPopupDetList');

            for (var pcnt = 0; pcnt < ChangeMemberPremiumPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = ChangeMemberPremiumPopupDetList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.ChangePremiumMemberPopupForm.FormFieldsCount + 2
    });

    this.ChangePremiumMemberPopupForm.addButton({
        text: 'Load',
        handler: function () {

            var ChangeCategoryCode = Ext.getCmp('ChangeMemberPremiumPopup-ChangeCategoryCode');
            //if (CategoryCode == '' && CategoryCode < 1) {
            //    Ext.MessageBox.alert(login.modulename, 'CategoryCode should not empty. !');
            //    return;
            //}
            var MemberGridRecords = []; var cnt = 0;
            var ChangeMemberPremiumPopupDetList = Ext.getCmp('ChangeMemberPremiumPopupDetList');
            var Primary = Ext.getCmp('ChangeMemberPremium').selectedIndex;
            var ChangeMemberPremiumMemberDtlList = Ext.getCmp('ChangeMemberPremiumMemberDtlList');
            for (var i = 0; i < ChangeMemberPremiumPopupDetList.store.getCount() ; i++) {
                /*
                if (MemberGrid.store.getAt(i).get('Selectcheck') == true) {
                    MemberGridRecords.push(Ext.encode(MemberGrid.store.getAt(i).data));
                    cnt++;
                }*/
                var MemRecord = ChangeMemberPremiumPopupDetList.store.getAt(i);
                if (!MemRecord.get('Selectcheck')) continue;

                ChangeMemberPremiumMemberDtlList.storeId += 1;
                var newRecord = new ChangeMemberPremiumMemberDtlList.recordType({
                    ID: ChangeMemberPremiumMemberDtlList.storeId,
                    Serialno: ChangeMemberPremiumMemberDtlList.storeId,
                    ChangeMemberPremiumCode: Primary == -1 ? 1 : Primary,
                    Location: null,
                    LegalentityCode: 0,
                    CustomerCode: 0,
                    MemberCode: MemRecord.get('ID'),
                    MemberName: MemRecord.get('MemberName'),
                    GenderName: MemRecord.get('Member_genderName'),
                    MemberrelationCode: MemRecord.get('RelationCode'),
                    MemberrelationName: MemRecord.get('Member_Relation_Name'),
                    MaritalstatusCode: MemRecord.get('Marital_StatusCode'),
                    MaritalstatusName: MemRecord.get('Marital_statusName'),
                    NationalityCode: MemRecord.get('NationalityCode'),
                    NationalityName: MemRecord.get('NationalityName'),
                    Age: MemRecord.get('Age'),
                    CategoryCode: ChangeCategoryCode.getValue(),
                    CategoryName: ChangeCategoryCode.lastSelectionText,
                    MemberPolicyCode: MemRecord.get('MemberPolicyCode'),
                    Date_of_birth: MemRecord.get('Date_of_birth'),
                    MEMBER_ID: MemRecord.get('MemberId'),
                    ChangeMemberPremiumAdditionalPreDtlList: null,
                    MemberStartDate: null,
                    FullPremium: MemRecord.get('FullPremium'),
                    NewPremium: 0,
                    EffectiveDate: new Date().format(login.jsdateformat),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                ChangeMemberPremiumMemberDtlList.stopEditing();
                ChangeMemberPremiumMemberDtlList.store.add(newRecord);
                ChangeMemberPremiumMemberDtlList.store.totalLength = ChangeMemberPremiumMemberDtlList.store.getTotalCount() + 1;
                ChangeMemberPremiumMemberDtlList.pageBar.updateInfo();


            }

            this.ChangePremiumMemberPopupFormWindow.close();

            /*
            if (cnt > 0) {
                var MemberGridRecordsRow = '[' + MemberGridRecords.join(',') + ']';
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'ChangePremiumMemberDetailLoad',
                        MemberGridRecordsRow: MemberGridRecordsRow
                        
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', ChangePremiumMemberDetailLoadComplete, this);
                
            }
            else {
                Ext.MessageBox.alert(login.modulename, 'No Selected records.You cannot load member records !');
                return;
            }*/
            var ChangeMemberPremiumMemberDtlList = Ext.getCmp('ChangeMemberPremiumMemberDtlList');
            ChangeMemberPremiumMemberDtlList.store.load({
                params: {
                    start: 0,
                    limit: ChangeMemberPremiumMemberDtlList.pageSize
                }
            });

        },

        scope: this,
        formBind: true,
        tabIndex: this.ChangePremiumMemberPopupForm.FormFieldsCount + 2
    });

    this.ChangePremiumMemberPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ChangePremiumMemberPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.ChangePremiumMemberPopupForm.FormFieldsCount + 2
    });

    this.ChangePremiumMemberPopupFormWindow = new Ext.Window({
        id: 'ChangePremiumMemberPopupFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.ChangePremiumMemberPopupForm.width + 10,
        height: this.ChangePremiumMemberPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ChangePremiumMemberPopupForm]
    });
    this.ChangePremiumMemberPopupForm.on('render', ChangePremiumMemberPopupRender, this);
    this.ChangePremiumMemberPopupFormWindow.show();

}

function ChangePremiumMemberDetailLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ChangePremiumMemberDetailLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        var Primary = Ext.getCmp('ChangeMemberPremium');
        var ChangeMemberPremiumMemberDtlList = Ext.getCmp('ChangeMemberPremiumMemberDtlList');
        var ChangeCategoryCode = Ext.getCmp('ChangeMemberPremiumPopup-ChangeCategoryCode');
        for (cnt = 0; cnt < responseText.datum.length; cnt++) {
            var MemRecord = responseText.datum[cnt];
            ChangeMemberPremiumMemberDtlList.storeId += 1;
            var newRecord = new ChangeMemberPremiumMemberDtlList.recordType({
                ID: ChangeMemberPremiumMemberDtlList.storeId,
                Serialno: ChangeMemberPremiumMemberDtlList.storeId,
                ChangeMemberPremiumCode: Primary == -1 ? 1 : Primary,
                Location: null,
                LegalentityCode: 0,
                CustomerCode: 0,
                MemberCode: MemRecord.ID,
                MemberName: MemRecord.MemberName,
                GenderName: MemRecord.Member_genderName,
                MemberRelationCode: MemRecord.RelationCode,
                MemberRelationName: MemRecord.Member_Relation_Name,
                MaritalStatusCode: MemRecord.Marital_StatusCode,
                MaritalStatusName: MemRecord.Marital_statusName,
                NationalityCode: 0,
                NationalityName: null,
                Age: MemRecord.Age,
                CategoryCode: ChangeCategoryCode.getValue(),
                CategoryName: ChangeCategoryCode.lastSelectionText,
                MemberPolicyCode: 0,
                Date_of_birth: MemRecord.Date_of_birth,
                NewmMeberid: MemRecord.MemberId,
                ChangeMemberPremiumAdditionalPreDtlList: null,
                MemberStartDate: null,
                FullPremium: MemRecord.FullPremium,
                NewPremium: 0,
                EffectiveDate: new Date().format(login.jsdateformat),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangeMemberPremiumMemberDtlList.stopEditing();
            ChangeMemberPremiumMemberDtlList.store.add(newRecord);
            ChangeMemberPremiumMemberDtlList.store.totalLength = ChangeMemberPremiumMemberDtlList.store.getTotalCount() + 1;
            ChangeMemberPremiumMemberDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('ChangeMemberPremiumMemberDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}


function ChangePremiumMemberPopupRender(form, login) {

    var PolicyTypeCode = Ext.getCmp('ChangeMemberPremium-PolicyTypesCode');
    var IPPolicyIDCode = Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode');
    var PolicyIdCode = Ext.getCmp('ChangeMemberPremium-PolicyIdCode');
    var ChangeCategoryCode = Ext.getCmp('ChangeMemberPremiumPopup-ChangeCategoryCode');
    var CategoryCode = Ext.getCmp('ChangeMemberPremiumPopup-CategoryCode');
    var FilterQry = '';


    if (CategoryCode) CategoryCode.on('beforequery', function (evt) {

        if (PolicyTypeCode.editValue == 1) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL where  POLICYCODE in(select POLICYCODE from IM_POLICY where POLICYCODE=" + PolicyIdCode.editValue + "))";
        }
        else {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_NGIINDPOLICYCATEGORY where  INDIVIDUALPOLICYCODE in(select INDIVIDUALPOLICYCODE from IM_INDIVIDUALPOLICY where INDIVIDUALPOLICYCODE" + IPPolicyIDCode.editValue + "))";
        }
    }, this);

    if (ChangeCategoryCode) ChangeCategoryCode.on('beforequery', function (evt) {

        if (PolicyTypeCode.editValue == 1) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL where  POLICYCODE in(select POLICYCODE from IM_POLICY where POLICYCODE=" + PolicyIdCode.editValue + "))";
        }
        else {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORYCODE from IM_NGIINDPOLICYCATEGORY where  INDIVIDUALPOLICYCODE in(select INDIVIDUALPOLICYCODE from IM_INDIVIDUALPOLICY where INDIVIDUALPOLICYCODE" + IPPolicyIDCode.editValue + "))";
        }
    }, this);

    CategoryCode.on('select', function (combo, record, index) {

        var APolicyCode = 0;
        if (PolicyTypeCode.editValue == 1)
            APolicyCode = PolicyIdCode.editValue;
        else if (PolicyTypeCode.editValue == 2)
            APolicyCode = IPPolicyIDCode.editValue;

        FilterQry = ' Mem.PolicyType =' + PolicyTypeCode.editValue;

        if (PolicyIdCode.editValue !== '' && PolicyIdCode.editValue != 0) {
            if (FilterQry == '')
                FilterQry += " Mem.PolicyCode  =" + APolicyCode;
            else
                FilterQry += " and Mem.PolicyCode  =" + APolicyCode;
        }

        if (CategoryCode.getValue() !== '' && CategoryCode.getValue() != 0) {
            if (FilterQry == '')
                FilterQry += " Mem.Category_Code  =" + CategoryCode.getValue() + " ";
            else
                FilterQry += " and Mem.Category_Code  =" + CategoryCode.getValue() + " ";
        }


        var DetailStore = Ext.getCmp('ChangeMemberPremiumPopupDetList').getStore();

        var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.ChangeMemberPremiumPopupDet&filter=" + FilterQry;
        if (DetailStore) {
            DetailStore.proxy = new Ext.data.HttpProxy({
                url: DetUrl
            });
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 25
                }
            });
        }

    }, this);




    FilterQry = '1=2';

    var DetailStore = Ext.getCmp('ChangeMemberPremiumPopupDetList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.ChangeMemberPremiumPopupDet&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25
            }
        });
    }
}
function ChangeMemberPremiumPolicyselectEvt(form, login) {

    onBusinessTypeclear('ChangeMemberPremiumCommissionDtlList');
    var PolicyCode = Ext.getCmp('ChangeMemberPremium-PolicyIdCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyCommissionLoad',
            PolicyCode: PolicyCode,
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CMPCommissionLoadComplete, this);
}

function CMPCommissionLoadComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', CMPCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    //return;
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var ChangeMemberPremiumSharingDtlList = Ext.getCmp('ChangeMemberPremiumCommissionDtlList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) { //City Detail
            var CommissionRecord = responseText.commissiondatum[cnt];
            ChangeMemberPremiumSharingDtlList.storeId += 1;
            var newRecord = new ChangeMemberPremiumSharingDtlList.recordType({
                ID: ChangeMemberPremiumSharingDtlList.storeId,
                SerialNo: ChangeMemberPremiumSharingDtlList.storeId,
                ChangeMemberPremiumCode: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                Description: CommissionRecord.CommissionToNewName,
                LegalentityCode: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangeMemberPremiumSharingDtlList.stopEditing();
            ChangeMemberPremiumSharingDtlList.store.add(newRecord);
            ChangeMemberPremiumSharingDtlList.store.totalLength = ChangeMemberPremiumSharingDtlList.store.getTotalCount() + 1;
            ChangeMemberPremiumSharingDtlList.pageBar.updateInfo();
        }

        var ChangeMemberPremiumSharingDtlList = Ext.getCmp('ChangeMemberPremiumSharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            ChangeMemberPremiumSharingDtlList.storeId += 1;
            var SharingRecord = new ChangeMemberPremiumSharingDtlList.recordType({
                ID: ChangeMemberPremiumSharingDtlList.storeId,
                Serialno: ChangeMemberPremiumSharingDtlList.storeId,
                ChangeMemberPremiumCode: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangeMemberPremiumSharingDtlList.stopEditing();
            ChangeMemberPremiumSharingDtlList.store.add(SharingRecord);
            ChangeMemberPremiumSharingDtlList.store.totalLength = ChangeMemberPremiumSharingDtlList.store.getTotalCount() + 1;
            ChangeMemberPremiumSharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('ChangeMemberPremiumSharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}


// UUpload Individual Policy Member


function ChangeMemberPremiumIndPolicyselectEvt(form, login) {
    onBusinessTypeclear('ChangeMemberPremiumCommissionDtlList');
    var PolicyCode = Ext.getCmp('ChangeMemberPremium-IPPolicyIDCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyIPCommissionLoad',
            IPPolicyIDCode: PolicyCode
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CMPIPCommissionLoadComplete, this);
}

function CMPIPCommissionLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CMPIPCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var ChangeMemberPremiumCommissionDtlList = Ext.getCmp('ChangeMemberPremiumCommissionDtlList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) {
            var CommissionRecord = responseText.commissiondatum[cnt];
            ChangeMemberPremiumCommissionDtlList.storeId += 1;
            var newRecord = new ChangeMemberPremiumCommissionDtlList.recordType({
                ID: ChangeMemberPremiumCommissionDtlList.storeId,
                SerialNo: ChangeMemberPremiumCommissionDtlList.storeId,
                ChangeMemberPremiumCode: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                LegalentityCode: CommissionRecord.LegalentityCode,
                Description: CommissionRecord.LegalentityCode,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                CustomerCode: CommissionRecord.CustomerCode,
                Description: CommissionRecord.IndPolcyCommisionTo,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangeMemberPremiumCommissionDtlList.stopEditing();
            ChangeMemberPremiumCommissionDtlList.store.add(newRecord);
            ChangeMemberPremiumCommissionDtlList.store.totalLength = ChangeMemberPremiumCommissionDtlList.store.getTotalCount() + 1;
            ChangeMemberPremiumCommissionDtlList.pageBar.updateInfo();
        }
        var ChangeMemberPremiumSharingDtlList = Ext.getCmp('ChangeMemberPremiumSharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            ChangeMemberPremiumSharingDtlList.storeId += 1;
            var SharingRecord = new ChangeMemberPremiumSharingDtlList.recordType({
                ID: ChangeMemberPremiumSharingDtlList.storeId,
                Serialno: ChangeMemberPremiumSharingDtlList.storeId,
                ChangeMemberPremiumCode: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangeMemberPremiumSharingDtlList.stopEditing();
            ChangeMemberPremiumSharingDtlList.store.add(SharingRecord);
            ChangeMemberPremiumSharingDtlList.store.totalLength = ChangeMemberPremiumSharingDtlList.store.getTotalCount() + 1;
            ChangeMemberPremiumSharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('ChangeMemberPremiumSharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}

var ClaimFilterQry = '';
function MEOnlineClaimsSearchHistry(form, login) {

    var CardNo = Ext.getCmp('MEOnlineClaimSearch-CardNo');
    var MemberName = Ext.getCmp('MEOnlineClaimSearch-Member_Name');
    var RelationCode = Ext.getCmp('MEOnlineClaimSearch-RelationCode');
    var RefNo = Ext.getCmp('MEOnlineClaimSearch-Claimref');
    var Emirates = Ext.getCmp('MEOnlineClaimSearch-EmiratesID');
    var Providermobileno = Ext.getCmp('MEOnlineClaimSearch-Providermobileno');
    var EncounterStartDate = Ext.getCmp('MEOnlineClaimSearch-EncounterStartDate');
    var EncounterEndDate = Ext.getCmp('MEOnlineClaimSearch-EncounterEndDate');
    var TreatmentTypeCode = Ext.getCmp('MEOnlineClaimSearch-TreatmentTypeCode');
    var MedicalFile = Ext.getCmp('MEOnlineClaimSearch-MedicalFile');
    var CDCode = Ext.getCmp('MEOnlineClaimSearch-CDCode');
    var ProviderIDCode = Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode');
    var InsuranceCode = Ext.getCmp('MEOnlineClaimSearch-InsuranceCode');
    var GenerCode = Ext.getCmp('MEOnlineClaimSearch-GenderCode');
    var EmailId = Ext.getCmp('MEOnlineClaimSearch-Sendmail');
    var PaymentStatusCode = Ext.getCmp('MEOnlineClaimSearch-PaymentStatusCode');

    onBusinessTypeclear('MEOnlineClaimReqApprovalHistoryDtlList');
    onBusinessTypeclear('MEOnlineClaimReqApprovalHistoryActivityList');
    onBusinessTypeclear('MEOnlineClaimReqApprovalHistoryDiagnosisList');

    var FilterQry = " NVL(CRH.IS_HIDE,0)=0 and CRH.SOURCE_TYPE=" + DefaultClaimSourseType;

    if (ProviderIDCode.getValue() !== '' && ProviderIDCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderIDCode.getValue() + ") ";
        else
            FilterQry += " AND Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderIDCode.getValue() + ") ";
    }

    if (PaymentStatusCode.getValue() !== '' && PaymentStatusCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " NVL(GET_CLAIM_PAYMENTSTATUS(CRH.CLAIM_CODE),0)  = '" + PaymentStatusCode.lastSelectionText + "' ";
        else
            FilterQry += " and NVL(GET_CLAIM_PAYMENTSTATUS(CRH.CLAIM_CODE),0)  ='" + PaymentStatusCode.lastSelectionText + "' ";
    }

    if (InsuranceCode.getValue() !== '' && InsuranceCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " CRH.PAYERCODE  = " + InsuranceCode.editValue + " ";
        else
            FilterQry += " and CRH.PAYERCODE  =" + InsuranceCode.editValue + " ";
    }

    if (MemberName.getValue() !== '' && MemberName.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.MemberName)  like upper( '%" + MemberName.getValue() + "%' )");
        else
            FilterQry += (" and upper (CRH.MemberName)  like upper( '%" + MemberName.getValue() + "%' )");
    }

    if (Emirates.getValue() !== '' && Emirates.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.EMIRATEID)  like upper( '%" + Emirates.getValue() + "%' )");
        else
            FilterQry += ("and upper (CRH.EMIRATEID)  like upper( '%" + Emirates.getValue() + "%' )");
    }

    if (RelationCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " CRH.STATUSTYPE  =" + RelationCode.getValue() + " ";
        else
            FilterQry += " and CRH.STATUSTYPE  =" + RelationCode.getValue() + " ";
    }

    if (GenerCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " CRH.GENDERCODE  =" + GenerCode.getValue() + " ";
        else
            FilterQry += " and CRH.GENDERCODE  =" + GenerCode.getValue() + " ";
    }

    if (CardNo.getValue() !== '' && CardNo.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += (" upper (CRH.CARDID)  like upper( '%" + CardNo.getValue() + "%' )");
        else
            FilterQry += (" and upper (CRH.CARDID)  like upper( '%" + CardNo.getValue() + "%' )");
    }

    if (CDCode.getValue() !== '' && CDCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " CRH.CDCode  = " + CDCode.getValue() + " ";
        else
            FilterQry += " and CRH.CDCode  =" + CDCode.getValue() + " ";
    }

    if (TreatmentTypeCode.getValue() !== '') { // && TreatmentTypeCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " CRH.TREATMENT_TYPE  = " + TreatmentTypeCode.getValue() + " ";
        else
            FilterQry += "and  CRH.TREATMENT_TYPE  =" + TreatmentTypeCode.getValue() + " ";
    }

    if (MedicalFile.getValue() !== '' && MedicalFile.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.MedicalFile)  like upper( '%" + MedicalFile.getValue() + "%' )");
        else
            FilterQry += (" and upper (CRH.MedicalFile)  like upper( '%" + MedicalFile.getValue() + "%' )");
    }

    if (EncounterStartDate.getValue() != '' && EncounterStartDate.getValue() != null && EncounterEndDate.getValue() != '' && EncounterEndDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "  CRH.ENCOUNTER_START_DATE between TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and  CRH.ENCOUNTER_START_DATE between TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }
    else {
        if (EncounterStartDate.getValue() != '' && EncounterStartDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += "  CRH.ENCOUNTER_START_DATE>=TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and  CRH.ENCOUNTER_START_DATE>=TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
        if (EncounterEndDate.getValue() != '' && EncounterEndDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += "  CRH.ENCOUNTER_START_DATE<=TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and  CRH.ENCOUNTER_START_DATE<=TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
    }

    if (RefNo.getValue() !== '' && RefNo.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.CLAIMREF_NO)  like upper( '%" + RefNo.getValue() + "%' )");
        else
            FilterQry += (" and upper (CRH.CLAIMREF_NO)  like upper( '%" + RefNo.getValue() + "%' )");
    }

    if (Providermobileno.getValue() !== '' && Providermobileno.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.MOBLIENO)  like upper( '%" + Providermobileno.getValue() + "%' )");
        else
            FilterQry += ("and upper (CRH.MOBLIENO)  like upper( '%" + Providermobileno.getValue() + "%' )");
    }

    if (EmailId.getValue() !== '' && EmailId.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper ( CRH.EMAILID)  like upper( '%" + EmailId.getValue() + "%' )");
        else
            FilterQry += ("and upper ( CRH.EMAILID)  like upper( '%" + EmailId.getValue() + "%' )");
    }

    ClaimFilterQry = FilterQry;
}
function MEOnlineClaimsSearchShowAllHistory(form, login) {

    MEOnlineClaimsSearchHistry();
    var FilterQry = ClaimFilterQry;

    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100,
            }
        });
    }

}
function MEOnlineClaimProcessClear(form, login) {

    Ext.getCmp('MEOnlineClaimSearch-Claimref').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-CardNo').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-Member_Name').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-EmiratesID').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-RelationCode').clearValue();
    Ext.getCmp('MEOnlineClaimSearch-Providermobileno').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-TreatmentTypeCode').clearValue();
    Ext.getCmp('MEOnlineClaimSearch-MedicalFile').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-CDCode').clearValue();
    Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode').clearValue();
    Ext.getCmp('MEOnlineClaimSearch-InsuranceCode').clearValue();
    Ext.getCmp('MEOnlineClaimSearch-ProviderName').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-GenderCode').clearValue();

    Ext.getCmp('MEOnlineClaimSearch-EncounterStartDate').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-EncounterEndDate').setValue(null);
    Ext.getCmp('MEOnlineClaimSearch-PaymentStatusCode').clearValue();


    FilterQry = '1=2';
    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}
function MEOnlineClaimsSearchNew(form, login) {
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Claim Processing', 'Please wait until the Detail loads !');
        return;
    }
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/MEOnlineApprovedClaims.xml', PKey = -1, WidgetTitle = 'New Calim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

// -----------------------------------------Claim Submission ----------------------------------------------------

function ReqOnlineClaimSerachHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ReqOnlineClaimSerach'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReqOnlineClaimSerachHandlerComplete, this);
}

function ReqOnlineClaimSerachHandlerComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ReqOnlineClaimSerachHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.OnlineClaimSerachForm = new Ext.form.FormPanel(responseText.ReqOnlineClaimSerachCofig);
    DefaultClaimSourseType = 1;

    this.OnlineClaimSerachForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.OnlineClaimSerachFormWindow.close();
        },
        scope: this,
        tabIndex: this.OnlineClaimSerachForm.FormFieldsCount + 2
    });

    this.OnlineClaimSerachForm.addButton({
        text: 'Bulk Claim Submission',
        handler: function () {

            var PrimKey = '0';
            var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
            var ProviderCode = 0, ProCnt = 0; var InsurerCode = 0, InsCnt = 0;
            var CheckCnt = 0,StatusCnt=0;

            for (Cnt = 0; Cnt < MEOnlineClaimReqApprovalHistoryDtlList.store.modified.length; Cnt++) {

                if (MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('BulkSelect') == true) {
                    PrimKey += ',' + MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('ID');
                    CheckCnt++;

                    if (MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('AuthorizedStatus') != 0)
                        StatusCnt++;
                    
                    if (ProviderCode == 0)
                        ProviderCode = MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('Provider_Code');
                    else {
                        if (ProviderCode != MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('Provider_Code'))
                            ProCnt++;
                    }

                    if (InsurerCode == 0)
                        InsurerCode = MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('PayerCode');
                    else {
                        if (InsurerCode != MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('PayerCode'))
                            InsCnt++;
                    }
                }
            }
            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Submit');
                return;
            }
            if (StatusCnt > 0) {

                Ext.MessageBox.alert(login.modulename, 'All selected record should be in Pending status.');
                return;
            }
            if (ProCnt > 0) {
                Ext.MessageBox.alert(login.modulename, 'Provider should be same for all selected record');
                return;
            }
            if (InsCnt > 0) {
                Ext.MessageBox.alert(login.modulename, 'Receiver should be same for all selected record');
                return;
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'BulkClaimSubmissonOpen',
                    ProviderCode: ProviderCode,
                    PrimKey: PrimKey,
                    ClaimSourceType: DefaultClaimSourseType
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', BulkClaimSubmissonOpenComplete, this);
        },
        scope: this,
        tabIndex: this.OnlineClaimSerachForm.FormFieldsCount + 2
    });

    this.OnlineClaimSerachFormWindow = new Ext.Window({
        id: 'OnlineClaimSerachFormWindow',
        title: 'Claim Submission',
        closable: true,
        minimizable: false,
        width: this.OnlineClaimSerachForm.width + 10,
        height: this.OnlineClaimSerachForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.OnlineClaimSerachForm]
    });
    this.OnlineClaimSerachForm.on('render', MEOnlineClaimSearch, this);
    this.OnlineClaimSerachFormWindow.show();
}

function BulkClaimSubmissonOpenComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BulkClaimSubmissonOpenComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
        MEOnlineClaimReqApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: MEOnlineClaimReqApprovalHistoryDtlList.pageSize
            }
        });
    }
}

function BulkClaimsubmissionSearch(form, login) {

    var ProviderCode = Ext.getCmp('BulkClaimSubmissionPopup-ProviderCode');
    var InsuranceCode = Ext.getCmp('BulkClaimSubmissionPopup-InsuranceCode');
    var EncounterStartDate = Ext.getCmp('BulkClaimSubmissionPopup-FromDate');
    var EncounterEndDate = Ext.getCmp('BulkClaimSubmissionPopup-ToDate');

    //onBusinessTypeclear('BulkClaimSubmissionPopupDtlList');

    //var FilterQry = '';

    //if (ProviderCode.getValue() !== '' && ProviderCode.getValue() != 0) {
    //    if (FilterQry == '')
    //        FilterQry += " Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderCode.getValue() + ") ";
    //    else
    //        FilterQry += " AND Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderCode.getValue() + ") ";
    //}

    //if (InsuranceCode.getValue() !== '' && InsuranceCode.getValue() != 0) {
    //    if (FilterQry == '')
    //        FilterQry += " ClaReq.PAYERCODE  = " + InsuranceCode.editValue + " ";
    //    else
    //        FilterQry += " and ClaReq.PAYERCODE  =" + InsuranceCode.editValue + " ";
    //}

    //if (EncounterStartDate.getValue() != '' && EncounterStartDate.getValue() != null && EncounterEndDate.getValue() != '' && EncounterEndDate.getValue() != null) {
    //    if (FilterQry == '')
    //        FilterQry += "  ClaReq.ENCOUNTER_START_DATE between TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //    else
    //        FilterQry += " and  ClaReq.ENCOUNTER_START_DATE between TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //}
    //else {
    //    if (EncounterStartDate.getValue() != '' && EncounterStartDate.getValue() != null) {
    //        if (FilterQry == '')
    //            FilterQry += "  ClaReq.ENCOUNTER_START_DATE>=TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //        else
    //            FilterQry += " and  ClaReq.ENCOUNTER_START_DATE>=TO_DATE('" + EncounterStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //        ClaReq
    //        if (EncounterEndDate.getValue() != '' && EncounterEndDate.getValue() != null) {
    //            if (FilterQry == '')
    //                FilterQry += "  ClaReq.ENCOUNTER_START_DATE<=TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //            else
    //                FilterQry += " and  ClaReq.ENCOUNTER_START_DATE<=TO_DATE('" + EncounterEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    //        }
    //    }

    //    DetailStore = Ext.getCmp('BulkClaimSubmissionPopupDtlList').getStore();

    //    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.BulkClaimSubmissionPopupDtl&filter=" + FilterQry;
    //    if (DetailStore) {
    //        DetailStore.proxy = new Ext.data.HttpProxy({
    //            url: DetUrl
    //        });
    //        DetailStore.load({
    //            params: {
    //                start: 0,
    //                limit: 20
    //            }
    //        });
    //    }
    //}
}
function BulkClaimsubmissionClear(form, login) {

    Ext.getCmp('BulkClaimSubmissionPopup-ProviderCode').clearValue();
    Ext.getCmp('BulkClaimSubmissionPopup-InsuranceCode').clearValue();

    Ext.getCmp('BulkClaimSubmissionPopup-FromDate').setValue(null);
    Ext.getCmp('BulkClaimSubmissionPopup-ToDate').setValue(null);

    FilterQry = '1=2';
    DetailStore = Ext.getCmp('BulkClaimSubmissionPopupDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.BulkClaimSubmissionPopupDtl&filter=" + FilterQry;
    if (DetailStore) {

        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

///----------------------------------------- PriorRequest  Claim Submission    -------------------------------------


function PriorRequestOnlineClaimSerachHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorRequestOnlineClaimSerach'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PriorRequestOnlineClaimSerachHandlerComplete, this);
}

function PriorRequestOnlineClaimSerachHandlerComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PriorRequestOnlineClaimSerachHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.OnlineClaimSerachForm = new Ext.form.FormPanel(responseText.PriorRequestOnlineClaimSerachCofig);
    DefaultClaimSourseType = 4;
    this.OnlineClaimSerachForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.OnlineClaimSerachFormWindow.close();
        },
        scope: this,
        tabIndex: this.OnlineClaimSerachForm.FormFieldsCount + 2
    });

    this.OnlineClaimSerachForm.addButton({
        text: 'Bulk Submission',
        handler: function () {

            var PrimKey = '0';
            var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
            var ProviderCode = 0, ProCnt = 0; var InsurerCode = 0, InsCnt = 0;
            var CheckCnt = 0, StatusCnt = 0;

            for (Cnt = 0; Cnt < MEOnlineClaimReqApprovalHistoryDtlList.store.modified.length; Cnt++) {

                if (MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('BulkSelect') == true) {
                    PrimKey += ',' + MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('ID');
                    CheckCnt++;

                    if (MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('AuthorizedStatus') != 0)
                        StatusCnt++;

                    if (ProviderCode == 0)
                        ProviderCode = MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('Provider_Code');
                    else {
                        if (ProviderCode != MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('Provider_Code'))
                            ProCnt++;
                    }

                    if (InsurerCode == 0)
                        InsurerCode = MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('PayerCode');
                    else {
                        if (InsurerCode != MEOnlineClaimReqApprovalHistoryDtlList.store.modified[Cnt].get('PayerCode'))
                            InsCnt++;
                    }
                }
            }
            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Submit');
                return;
            }
            if (StatusCnt > 0) {

                Ext.MessageBox.alert(login.modulename, 'All selected record should be in Pending status.');
                return;
            }
            if (ProCnt > 0) {
                Ext.MessageBox.alert(login.modulename, 'Provider should be same for all selected record');
                return;
            }
            if (InsCnt > 0) {
                Ext.MessageBox.alert(login.modulename, 'Receiver should be same for all selected record');
                return;
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'BulkClaimSubmissonOpen',
                    ProviderCode: ProviderCode,
                    PrimKey: PrimKey,
                    ClaimSourceType: DefaultClaimSourseType
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', BulkClaimSubmissonOpenComplete, this);
        },
        scope: this,
        tabIndex: this.OnlineClaimSerachForm.FormFieldsCount + 2
    });

    this.OnlineClaimSerachFormWindow = new Ext.Window({
        id: 'OnlineClaimSerachFormWindow',
        title: 'Prior Request Claim Submission',
        closable: true,
        minimizable: false,
        width: this.OnlineClaimSerachForm.width + 10,
        height: this.OnlineClaimSerachForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.OnlineClaimSerachForm]
    });
    this.OnlineClaimSerachForm.on('render', MEOnlineClaimSearch, this);
    this.OnlineClaimSerachFormWindow.show();
}

///----------------------------------------- ERXRequest  Claim Submission    -------------------------------------


function ERXRequestOnlineClaimSerachHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ERXRequestOnlineClaimSerach'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ERXRequestOnlineClaimSerachHandlerComplete, this);
}

function ERXRequestOnlineClaimSerachHandlerComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ERXRequestOnlineClaimSerachHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.OnlineClaimSerachForm = new Ext.form.FormPanel(responseText.ERXRequestOnlineClaimSerachCofig);
    DefaultClaimSourseType = 6;
    this.OnlineClaimSerachForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.OnlineClaimSerachFormWindow.close();
        },
        scope: this,
        tabIndex: this.OnlineClaimSerachForm.FormFieldsCount + 2
    });

    this.OnlineClaimSerachFormWindow = new Ext.Window({
        id: 'OnlineClaimSerachFormWindow',
        title: 'ERX Request Claim Submission',
        closable: true,
        minimizable: false,
        width: this.OnlineClaimSerachForm.width + 10,
        height: this.OnlineClaimSerachForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.OnlineClaimSerachForm]
    });
    this.OnlineClaimSerachForm.on('render', MEOnlineClaimSearch, this);
    this.OnlineClaimSerachFormWindow.show();
}


function MEOnlineClaimSearch(form, login1) {

    Ext.getCmp('MEOnlineClaimReqApprovalHistoryActivity-ActivityTypeCode').on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "DETAILCODE  in (select DETAILCODE from IM_VERSION_DETALIS where VERSIONCODE in (select VERSIONCODE from  IM_ACTIVITY_DETAILS where TYPECODE in (select TYPECODE from  IM_ACTIVITY_TYPES where TYPECODE =100000000000000007 )))";
    }, this);

    Ext.getCmp('MEOnlineClaimReqApprovalHistoryDiagnosis-TypeCode').on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " DETAILCODE  in (select count(DETAILCODE) from IM_VERSION_DETALIS where VERSIONCODE in (select VERSIONCODE from  IM_ACTIVITY_DETAILS where TYPECODE =100000000000000001 ))";
    }, this);

    var RelationCode = Ext.getCmp('MEOnlineClaimSearch-RelationCode');
    if (DefaultClaimSourseType == 1)
        RelationCode.constantFilter = '0,1,2,3,9,10';
    else if (DefaultClaimSourseType == 4)
        RelationCode.constantFilter = '0,1,4';
    else if (DefaultClaimSourseType == 6)
        RelationCode.constantFilter = '0,1,6';

    Ext.getCmp('MEOnlineClaimSearch-CardNo').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-InsuranceCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-CDCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-Claimref').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-EncounterStartDate').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-EncounterEndDate').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-Member_Name').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-GenderCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-Providermobileno').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-EmiratesID').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-Sendmail').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-MedicalFile').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-TreatmentTypeCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-PaymentStatusCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEOnlineClaimSearch-RelationCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MEOnlineClaimEnterKeySearch();
        }
    }, this);

    FilterQry = "1=2";
    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

    if (Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList'))
        MEOnlineClaimReqApprovalHistoryConfig = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getColumnModel().config;

    for (var i = 0; i < MEOnlineClaimReqApprovalHistoryConfig.length; i++)
        if (!MEOnlineClaimReqApprovalHistoryConfig[i].actions && !MEOnlineClaimReqApprovalHistoryConfig[i].checkbox) MEOnlineClaimReqApprovalHistoryConfig[i].renderer = MEOnlineClaimReqApprovalHistoryRender;

    var Provider_Code = Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode');
    if (Provider_Code) Provider_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " im.PROVIDERCODE in (select PROVIDERCODE from ME_DISTRIBUTE_PROVIDER Det join ME_DISTRIBUTE_CLAIM Mas on  Mas.DISTRIBUTE_CODE=Det.DISTRIBUTE_CODE and Mas.DOCTORCODE=" + login.UserCode + " ) ";
    }, this);

    var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
    MEOnlineClaimReqApprovalHistoryDtlList.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        CollectionsSearchSelectID = Record.get('ID');
        Ext.getCmp('MEOnlineClaimSearch-Comments').setValue(Record.get('Comments'));

        MeOnlineClaimSelectedRecordRow = Record;

    }, this);

    MEOnlineClaimReqApprovalHistoryDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        MeOnlineClaimSelectedRecordRow = Record;
    }, this);
    if (DefaultClaimSourseType == 1)
        MEOnlineClaimReqApprovalHistoryDtlList.getColumnModel().getColumnById('IsClaimSubmitted').hidden = true;
    else
        MEOnlineClaimReqApprovalHistoryDtlList.getColumnModel().getColumnById('IsClaimSubmitted').editable = false;


}

function MEOnlineClaimEnterKeySearch(form, login) {

    MEOnlineClaimsSearchHistry();
    var FilterQry = ClaimFilterQry;
    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100,
            }
        });
    }

}


function ClaimSubmissionprint(record) {

    if (CollectionsSearchSelectID == '' || Ext.isEmpty(CollectionsSearchSelectID)) {
        Ext.MessageBox.alert(login.modulename, "Please Select Record To Print");
        return;
    }
    else {
        PrimKey = CollectionsSearchSelectID;
    }
    var WidgetObj = Ext.getCmp('ID_MEONLINECLAIMSEARCHS').scope;
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Print', function (button) {
        if (button == 'yes') {
            var RepObj = new Ext.biz.WidgetInfo();
            RepObj.immediatePrintClick(record.get('ID'), 'Claim Submission', 'ID_MEONLINECLAIMSEARCHS', '1');
        }

    }, this);

}


function PriorClaimSubmissionprint(record) {

    if (CollectionsSearchSelectID == '' || Ext.isEmpty(CollectionsSearchSelectID)) {
        Ext.MessageBox.alert(login.modulename, "Please Select Record To Print");
        return;
    }
    else {
        PrimKey = CollectionsSearchSelectID;
    }
    var WidgetObj = Ext.getCmp('ID_MEPRIOREQCLAIMSUBMISSION').scope;
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Print', function (button) {
        if (button == 'yes') {
            var RepObj = new Ext.biz.WidgetInfo();
            RepObj.immediatePrintClick(record.get('ID'), 'Claim Submission', 'ID_MEPRIOREQCLAIMSUBMISSION', '1');
        }

    }, this);

}

function ERXClaimSubmissionprint(record) {

    if (CollectionsSearchSelectID == '' || Ext.isEmpty(CollectionsSearchSelectID)) {
        Ext.MessageBox.alert(login.modulename, "Please Select Record To Print");
        return;
    }
    else {
        PrimKey = CollectionsSearchSelectID;
    }
    var WidgetObj = Ext.getCmp('ID_MEERXREQCLAIMSUBMISSION').scope;
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Print', function (button) {
        if (button == 'yes') {
            var RepObj = new Ext.biz.WidgetInfo();
            RepObj.immediatePrintClick(record.get('ID'), 'Claim Submission', 'ID_MEERXREQCLAIMSUBMISSION', '1');
        }

    }, this);

}


function MEOnlineClaimReqApprovalHistoryRender(value, metaData, record, rowIndex, colIndex, store) {

    if (record.get('AuthorizedStatus') == 0) {
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    }
    else if (record.get('AuthorizedStatus') == 1) {
        return '<span style="font-weight:bold; color:orange;">' + value + '</span>';
    }
    else if (record.get('AuthorizedStatus') == 4 || record.get('AuthorizedStatus') == 6 || record.get('AuthorizedStatus') == 9 || record.get('AuthorizedStatus') == 10) {
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('AuthorizedStatus') == 3) {
        return '<span style="font-weight:bold; color:red;">' + value + '</span>';
    }
    else {
        return '<span style="font-weight:bold; color:black;">' + value + '</span>';
    }

}

/*function GetMedicalMemberDetailsByCardNoComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', GetMedicalMemberDetailsByCardNoComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (responseText.MemberCardDetailsCount > 0) {
        var MemberRecord = responseText.datum[0];

        Ext.getCmp('MEOnlineClaimSearch-Member_Name').setValue(MemberRecord.MemberName);
        Ext.getCmp('MEOnlineClaimSearch-GenderCode').setValue(MemberRecord.Gender);
        Ext.getCmp('MEOnlineClaimSearch-RelationCode').setValue(MemberRecord.RelationCode);
        Ext.getCmp('MEOnlineClaimSearch-GenderName').setValue(MemberRecord.GenderName);
        Ext.getCmp('MEOnlineClaimSearch-RelationName').setValue(MemberRecord.RelationName);
        Ext.getCmp('MEOnlineClaimSearch-Dateofbirth').setValue(MemberRecord.Date_of_birth);
        Ext.getCmp('MEOnlineClaimSearch-Age').setValue(MemberRecord.Age);
        Ext.getCmp('MEOnlineClaimSearch-PolicyStartDate').setValue(MemberRecord.CoverdFromDate);
        Ext.getCmp('MEOnlineClaimSearch-Validtodate').setValue(MemberRecord.CoveredEndDate);
        Ext.getCmp('MEOnlineClaimSearch-MemberIDCodee').setValue(MemberRecord.ID);  // MemberCode

    }
    else {
        Ext.getCmp('MEOnlineClaimSearch-Member_Name').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-GenderCode').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-RelationCode').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-GenderName').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-RelationName').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-Dateofbirth').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-Age').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-PolicyStartDate').setValue(null);
        Ext.getCmp('MEOnlineClaimSearch-Validtodate').setValue(null);
        JMemberName = '';

        Ext.MessageBox.alert('Claim Processing', 'Member Not Found !');
    }

}*/

var ACActivityTypeCode = '', ActivityTypeChecked = '', CliamRequestActivityDummy = '', CliamRequestDiagnosisDummy = '';

function MEOnlineClaimAppProcessReqAddActivity(form, login) {

    var Diagnosis = Ext.getCmp('MEOnlineApprovedClaims-Diagnosis');
    var Drugs = Ext.getCmp('MEOnlineApprovedClaims-Drugs');
    var Procedure = Ext.getCmp('MEOnlineApprovedClaims-Procedures');
    var ServiceList = Ext.getCmp('MEOnlineApprovedClaims-DubaiServiceList');
    var HCPCS = Ext.getCmp('MEOnlineApprovedClaims-HCPCS');
    var Dental = Ext.getCmp('MEOnlineApprovedClaims-Dental');

    if (Drugs.checked == false && Procedure.checked == false && ServiceList.checked == false && HCPCS.checked == false && Diagnosis.checked == false && Dental.checked == false) {
        Ext.MessageBox.alert(login.modulename, 'Please Choose checkbox');
        return;
    }
    else {
        if (Drugs.checked == true) {
            ActivityTypeChecked = 5;
            ACActivityTypeCode = '100000000000000003';
        }
        if (Procedure.checked == true) {
            ActivityTypeChecked = 3;
            ACActivityTypeCode = '100000000000000002';
        }
        if (ServiceList.checked == true) {
            ActivityTypeChecked = 8;
            ACActivityTypeCode = '100000000000000004';
        }
        if (HCPCS.checked == true) {
            ActivityTypeChecked = 4;
            ACActivityTypeCode = '100000000000000006';

        }
        if (Dental.checked == true) {
            ActivityTypeChecked = 6;
            ACActivityTypeCode = '100000000000000005';

        }
        if (Diagnosis.checked == true) {
            ActivityTypeChecked = 1;
            ACActivityTypeCode = '100000000000000001';
        }
        if (Diagnosis.checked == true) {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'AddClaimRequestDiagnosis'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', AddClaimRequestDiagnosisComplete, this);
        }
        else {

            var Provider_Code = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
            var PayerCode = Ext.getCmp('MEOnlineApprovedClaims-PayerCode');

            if (Provider_Code.getValue() == '' || Provider_Code.editValue == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select the Provider !');
                return;

            }

            if (PayerCode.getValue() == '' || PayerCode.editValue == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select the Insurance !');
                return;

            }

            if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {    // For ERX Drug Details
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'ERXRequestAddClaimRequestActivity',
                        ActivityTypeChecked: ActivityTypeChecked
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', AddClaimRequestActivityComplete, this);
            }
            else {

                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'AddClaimRequestActivity',
                        ActivityTypeChecked: ActivityTypeChecked,
                        //ACActivityTypeCode:ACActivityTypeCode
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', AddClaimRequestActivityComplete, this);
            }
        }
    }
}


function AddClaimRequestDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddClaimRequestDiagnosisComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddClaimRequestDiagnosisForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Save',
        handler: function () {
            var TypeCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-TypeCode');
            var DetailCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-DetailCode');
            var Description = Ext.getCmp('MEOnlineClaimViewDiagnosis-Description');
            var LongDescription = Ext.getCmp('MEOnlineClaimViewDiagnosis-LongDescription');
            var OrderBy = Ext.getCmp('MEOnlineClaimViewDiagnosis-OrderBy');
            var MEOnlineClaimViewDiagnosisList = Ext.getCmp('MEOnlineClaimViewDiagnosisDtlList');
            var Primary = Ext.getCmp('MEOnlineApprovedClaims').selectedIndex;

            MEOnlineClaimViewDiagnosisList.storeId += 1;
            var StoreID = MEOnlineClaimViewDiagnosisList.storeId;
            var newRecord = new MEOnlineClaimViewDiagnosisList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                LongDescription: LongDescription.getValue(),
                Activity_Code: ACActivityTypeCode,
                TypeCode: TypeCode.getValue(),
                TypeName: TypeCode.lastSelectionText,
                CustomerCode: 0,
                OrderBy: OrderBy.getValue(),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                MEOnlineClaimViewDiagnosisObservationList: null,
                MEOnlineClaimViewDiagnosisRemarksList: null,
                MEOnlineClaimViewDiagnosisRemarksPopupList: null,
                MEOnlineClaimViewDiagnosisObservationPopupList: null,
                Reception_Diag_Code: 0,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MEOnlineClaimViewDiagnosisList.stopEditing();
            MEOnlineClaimViewDiagnosisList.store.add(newRecord);
            MEOnlineClaimViewDiagnosisList.store.totalLength = MEOnlineClaimViewDiagnosisList.store.getTotalCount() + 1;
            MEOnlineClaimViewDiagnosisList.pageBar.updateInfo();

            var MEOnlineClaimViewDiagnosisRemarksList = Ext.getCmp('MEOnlineClaimViewDiagnosisRemarksList');
            var Count = Ext.getCmp('MEOnlineClaimViewDiagnosisRemarksPopupList').store.getCount();
            for (cnt = 0; cnt < Count ; cnt++) {
                MEOnlineClaimViewDiagnosisRemarksList.storeId += 1;
                var remarkstoreId = MEOnlineClaimViewDiagnosisRemarksList.storeId;
                var record = Ext.getCmp('MEOnlineClaimViewDiagnosisRemarksPopupList').store.getAt(cnt);
                if (StoreID.ID != remarkstoreId.Activity_Detail_Code) continue;
                var newRecord = new MEOnlineClaimViewDiagnosisRemarksList.recordType({
                    ID: remarkstoreId,
                    SerialNo: remarkstoreId,
                    Activity_Detail_Code: StoreID,
                    ISAdded: 0,
                    Remarks: record.get('Remarks'),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MEOnlineClaimViewDiagnosisRemarksList.stopEditing();
                MEOnlineClaimViewDiagnosisRemarksList.store.add(newRecord);
                MEOnlineClaimViewDiagnosisRemarksList.store.totalLength = MEOnlineClaimViewDiagnosisRemarksList.store.getTotalCount() + 1;
                MEOnlineClaimViewDiagnosisRemarksList.pageBar.updateInfo();

            }
            /* var MEOnlineClaimViewDiagnosisObservationList = Ext.getCmp('MEOnlineClaimViewDiagnosisObservationList');
             var Count = Ext.getCmp('MEOnlineClaimViewDiagnosisObservationPopupList').store.getCount();
             for (cnt = 0; cnt < Count ; cnt++) {
                 MEOnlineClaimViewDiagnosisObservationList.storeId += 1;
                 var ObsstoreId = MEOnlineClaimViewDiagnosisObservationList.storeId;
                 var record = Ext.getCmp('MEOnlineClaimViewDiagnosisObservationPopupList').store.getAt(cnt);
                 if (StoreID.ID != ObsstoreId.Activity_Detail_Code) continue;
                 var newRecord = new MEOnlineClaimViewDiagnosisObservationList.recordType({
                     ID: ObsstoreId,
                     SerialNo: ObsstoreId,
                     Activity_Detail_Code: StoreID,
                     TypeCode: record.get('TypeCode'),
                     TypeName: record.get('TypeName'),
                     Code: record.get('Code'),
                     Value: record.get('Value'),
                     ValueTypeCode: record.get('ValueTypeCode'),
                     ValueTypeName: record.get('ValueTypeName'),
                     CompanyCode: login.CompanyCode,
                     LocationCode: login.LocationCode,
                     IsNew: true,
                     IsDirty: true,
                     IsDeleted: false,
                     IsSavable: true,
                     IsValid: true
                 });
                 MEOnlineClaimViewDiagnosisObservationList.stopEditing();
                 MEOnlineClaimViewDiagnosisObservationList.store.add(newRecord);
                 MEOnlineClaimViewDiagnosisObservationList.store.totalLength = MEOnlineClaimViewDiagnosisObservationList.store.getTotalCount() + 1;
                 MEOnlineClaimViewDiagnosisObservationList.pageBar.updateInfo();
             }*/

            this.AddClaimRequestDiagnosisFormWindow.close();
        },
        formBind: true,
        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestDiagnosisFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisFormWindow = new Ext.Window({
        id: 'AddClaimRequestDiagnosisForm',
        title: 'Diagnosis',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestDiagnosisForm.width + 10,
        height: this.AddClaimRequestDiagnosisForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestDiagnosisForm]
    });
    this.AddClaimRequestDiagnosisForm.on('render', MedAddClaimRequestDiagnosisFormRender, this);
    this.AddClaimRequestDiagnosisFormWindow.show();

}
var actycode = '', net = 0;
function AddClaimRequestActivityComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddClaimRequestActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var ActivityTypeCode = responseText.ActivityCode
    var ActivityName = responseText.ActivityName
    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            var ActivityStartDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityStartDate');
            var TreatmentTypeCode = Ext.getCmp('MEOnlineClaimViewActivity-TreatmentTypeCode');
            var VersionCode = Ext.getCmp('MEOnlineClaimViewActivity-VersionCode');
            var DetailCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode');
            var Description = Ext.getCmp('MEOnlineClaimViewActivity-Description');
            var LongDescription = Ext.getCmp('MEOnlineClaimViewActivity-ShtDescription');
            var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
            var NetPrice = Ext.getCmp('MEOnlineClaimViewActivity-NetPrice');
            var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
            var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');
            var CDCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode');
            var ClinicianName = Ext.getCmp('MEOnlineClaimViewActivity-ClinicianName');
            var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
            var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
            var DiscountValue = Ext.getCmp('MEOnlineClaimViewActivity-DiscountValue');
            var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
            var ActivityEndDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityEndDate');
            var DenialCode = Ext.getCmp('MEOnlineClaimViewActivity-DenialCode');
            var DenialName = Ext.getCmp('MEOnlineClaimViewActivity-DenialName');
            var DenialLongDesc = Ext.getCmp('MEOnlineClaimViewActivity-DenialLongDesc');
            var Prior_Athorization_Id = Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id');

            if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {    // For ERX Drug Details
                var No_of_days = Ext.getCmp('MEOnlineClaimViewActivity-No_of_days');
                var FrequencyTypeCode = Ext.getCmp('MEOnlineClaimViewActivity-FrequencyTypeCode');
                var Frequency = Ext.getCmp('MEOnlineClaimViewActivity-Frequency');
                var Refills = Ext.getCmp('MEOnlineClaimViewActivity-Refills');
                var Instructions = Ext.getCmp('MEOnlineClaimViewActivity-Instructions');
                var RouteOfAdminCode = Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode');
            }

            var MEOnlineClaimViewActivityList = Ext.getCmp('MEOnlineClaimViewActivityDtlList');
            var Primary = Ext.getCmp('MEOnlineApprovedClaims').selectedIndex;

            MEOnlineClaimViewActivityList.storeId += 1;
            var StoreID = MEOnlineClaimViewActivityList.storeId;
            var newRecord = new MEOnlineClaimViewActivityList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                ActivityTypeCode: ACActivityTypeCode,
                ActivityTypeName: ActivityName,
                TreatmentTypeCode: TreatmentTypeCode.getValue(),
                TreatmentTypeName: TreatmentTypeCode.lastSelectionText,
                VersionCode: VersionCode.getValue(),
                VersionName: null,
                ProviderName: null,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                ShtDescription: LongDescription.getValue(),
                LongDescription: LongDescription.getValue(),
                DiscountValue: DiscountValue.getValue(),
                NetPrice: NetPrice.getValue(),
                CDCode: CDCode.getValue() == null ? '' : CDCode.getValue(),
                CDName: CDCode.lastSelectionText == null ? '' : CDCode.lastSelectionText,
                ClinicianName: ClinicianName.getValue(),
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                Total: Total.getValue(),
                PatientSharePercent: PatientSharePercent.getValue(),
                PatientShare: PatientShare.getValue(),
                ActivityStartDate: ActivityStartDate.getValue(),
                Deductible_Amount: Deductible_Amount.getValue(),
                ActivityEndDate: ActivityEndDate.getValue(),
                Prior_Athorization_ID: Prior_Athorization_Id.getValue(),
                PaymentAmount: null,
                CustomerCode: 0,
                DenialCode: '',
                DenialName: null,
                DenialLongDesc: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                MEOnlineClaimViewActivityRemarksList: null,
                MEOnlineClaimViewActivityObservationList: null,
                MEOnlineClaimViewActivityRemarksPopupList: null,
                MEOnlineClaimViewActivityObservationPopupList: null,
                Reception_Service_Code: 0,
                No_of_days: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? No_of_days.getValue() : '',
                FrequencyTypeCode: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? FrequencyTypeCode.getValue() : '',
                FrequencyTypeName: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? FrequencyTypeCode.lastSelectionText : '',
                Frequency: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? Frequency.getValue() : '',
                Refills: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? Refills.getValue() : '',
                Instructions: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? Instructions.getValue() : '',
                RouteOfAdminCode: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? RouteOfAdminCode.getValue() : '',
                RouteOfAdminName: (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) != '' ? RouteOfAdminCode.getValue() > 0 ? RouteOfAdminCode.lastSelectionText : '' : '',
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });


            MEOnlineClaimViewActivityList.stopEditing();
            MEOnlineClaimViewActivityList.store.add(newRecord);
            MEOnlineClaimViewActivityList.store.totalLength = MEOnlineClaimViewActivityList.store.getTotalCount() + 1;
            MEOnlineClaimViewActivityList.pageBar.updateInfo();

            if (DefaultClaimSourseType != 6) {

                var MEOnlineClaimViewActivityRemarksList = Ext.getCmp('MEOnlineClaimViewActivityRemarksList');
                var Count = Ext.getCmp('MEOnlineClaimViewActivityRemarksPopupList').store.getCount();
                for (cnt = 0; cnt < Count ; cnt++) {
                    MEOnlineClaimViewActivityRemarksList.storeId += 1;
                    var remarkstoreId = MEOnlineClaimViewActivityRemarksList.storeId;
                    var record = Ext.getCmp('MEOnlineClaimViewActivityRemarksPopupList').store.getAt(cnt);
                    if (StoreID.ID != remarkstoreId.Activity_Detail_Code) continue;
                    var newRecord = new MEOnlineClaimViewActivityRemarksList.recordType({
                        ID: remarkstoreId,
                        SerialNo: remarkstoreId,
                        Activity_Detail_Code: StoreID,
                        ISAdded: 0,
                        Remarks: record.get('Remarks'),
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    MEOnlineClaimViewActivityRemarksList.stopEditing();
                    MEOnlineClaimViewActivityRemarksList.store.add(newRecord);
                    MEOnlineClaimViewActivityRemarksList.store.totalLength = MEOnlineClaimViewActivityRemarksList.store.getTotalCount() + 1;
                    MEOnlineClaimViewActivityRemarksList.pageBar.updateInfo();

                }

                var MEOnlineClaimViewActivityObservationList = Ext.getCmp('MEOnlineClaimViewActivityObservationList');
                var Count = Ext.getCmp('MEOnlineClaimViewActivityObservationPopupList').store.getCount();
                for (cnt = 0; cnt < Count ; cnt++) {
                    MEOnlineClaimViewActivityObservationList.storeId += 1;
                    var ObsstoreId = MEOnlineClaimViewActivityObservationList.storeId;
                    var record = Ext.getCmp('MEOnlineClaimViewActivityObservationPopupList').store.getAt(cnt);
                    if (StoreID.ID != ObsstoreId.Activity_Detail_Code) continue;
                    var newRecord = new MEOnlineClaimViewActivityObservationList.recordType({
                        ID: ObsstoreId,
                        SerialNo: ObsstoreId,
                        Activity_Detail_Code: StoreID,
                        TypeCode: record.get('TypeCode'),
                        TypeName: record.get('TypeName'),
                        Code: record.get('Code'),
                        Value: record.get('Value'),
                        ValueTypeCode: record.get('ValueTypeCode'),
                        ValueTypeName: record.get('ValueTypeName'),
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    MEOnlineClaimViewActivityObservationList.stopEditing();
                    MEOnlineClaimViewActivityObservationList.store.add(newRecord);
                    MEOnlineClaimViewActivityObservationList.store.totalLength = MEOnlineClaimViewActivityObservationList.store.getTotalCount() + 1;
                    MEOnlineClaimViewActivityObservationList.pageBar.updateInfo();

                }
            }
            MEClaimActivityAmoutnCalculation();
            this.AddClaimRequestActivityFormWindow.close();

            /* var MEOnlineClaimViewActivityList = Ext.getCmp('MEOnlineClaimViewActivityList');
             MEOnlineClaimViewActivityList.store.load({
                 params: {
                     start: 0,
                     limit: MEOnlineClaimViewActivityList.pageSize
                 }
             });*/
        },
        formBind: true,
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Activity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });

    this.AddClaimRequestActivityForm.on('render', AddClaimRequestActivityFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

function MEOnlineClaimViewActivityEdit(record) {

    var Diagnosis = Ext.getCmp('MEOnlineApprovedClaims-Diagnosis');
    var Drugs = Ext.getCmp('MEOnlineApprovedClaims-Drugs');
    var Procedure = Ext.getCmp('MEOnlineApprovedClaims-Procedures');
    var ServiceList = Ext.getCmp('MEOnlineApprovedClaims-DubaiServiceList');
    var HCPCS = Ext.getCmp('MEOnlineApprovedClaims-HCPCS');
    /*
    if (Drugs.checked == false && Procedure.checked == false && ServiceList.checked == false && HCPCS.checked == false && Diagnosis.checked == false) {
        Ext.MessageBox.alert(login.modulename, 'Please Choose checkbox');
        return;
    }
    else {
        
        if (Drugs.checked == true) {
            ActivityTypeChecked = 5;
            ACActivityTypeCode = '100000000000000003';
        }
        if (Procedure.checked == true) {
            ActivityTypeChecked = 3;
            ACActivityTypeCode = '100000000000000002';
        }
        if (ServiceList.checked == true) {
            ActivityTypeChecked = 8;
            ACActivityTypeCode = '100000000000000004';
        }
        if (HCPCS.checked == true) {
            ActivityTypeChecked = 4;
            ACActivityTypeCode = '100000000000000006';
        }
    }
     */
    ACActivityTypeCode = record.get('ActivityTypeCode');
    if (ACActivityTypeCode == '100000000000000003')
        ActivityTypeChecked = 5;
    if (ACActivityTypeCode == '100000000000000002')
        ActivityTypeChecked = 3;
    if (ACActivityTypeCode == '100000000000000004')
        ActivityTypeChecked = 8;
    if (ACActivityTypeCode == '100000000000000006')
        ActivityTypeChecked = 4;
    if (ACActivityTypeCode == '100000000000000005')
        ActivityTypeChecked = 6;

    if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {    // For ERX Drug Details
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'REXRequestAddClaimRequestActivityEdit',
                ActivityTypeChecked: ActivityTypeChecked
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEOnlineClaimViewActivityEditComplete, this);
        CliamRequestActivityDummy = record;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'AddClaimRequestActivityEdit',
                ActivityTypeChecked: ActivityTypeChecked
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEOnlineClaimViewActivityEditComplete, this);
        CliamRequestActivityDummy = record;
    }
}


var MEActivityStartDate = '', MEVersionCode = '', MEVersionName = '', MEDetailCode = '', MEDetailName = '', MEDescription = '', MELongDescription = '', MERequestQty = '', METreatmentTypeCode = '', METreatmentTypeName = '';
var MENetPrice = '', MERequestAmount = ''.METotal = '', MECDCode = '', MECDName = '', MEClinicianName = '', MEActivityEndDate = '', MEActivityTypeCode = '', MEActivityTypeName = '';
var MEPatientSharePercent = '', MEPatientShare = '', MEDiscountValue = '', MDeductibleAmount = '', MNo_of_days = '', MFrequencyTypeCode = '', MFrequency = '', MRefills = '', MInstructions = '', MRouteOfAdminCode = ''; MEPrior_Athorization_Id = '';

function MEOnlineClaimViewActivityEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEOnlineClaimViewActivityEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var ActivityTypeCode = responseText.ActivityTypeCode
    var ActivityName = responseText.ActivityName
    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            MEActivityStartDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityStartDate').getValue();
            MEActivityEndDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityEndDate').getValue();
            //MEVersionCode = Ext.getCmp('MEOnlineClaimViewActivity-VersionCode').getValue();
            //MEVersionName = Ext.getCmp('MEOnlineClaimViewActivity-VersionCode').lastSelectionText;
            METreatmentTypeCode = Ext.getCmp('MEOnlineClaimViewActivity-TreatmentTypeCode').getValue();
            METreatmentTypeName = Ext.getCmp('MEOnlineClaimViewActivity-TreatmentTypeCode').lastSelectionText;
            MEDetailCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode').getValue();
            MEDetailName = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('MEOnlineClaimViewActivity-Description').getValue();
            //MELongDescription = Ext.getCmp('MEOnlineClaimViewActivity-LongDescription').getValue();
            MERequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty').getValue();
            MENetPrice = Ext.getCmp('MEOnlineClaimViewActivity-NetPrice').getValue();
            MERequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount').getValue();
            METotal = Ext.getCmp('MEOnlineClaimViewActivity-Total').getValue();
            MECDCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode').getValue();
            MEClinicianName = Ext.getCmp('MEOnlineClaimViewActivity-ClinicianName').getValue();
            MEDiscountValue = Ext.getCmp('MEOnlineClaimViewActivity-DiscountValue').getValue();
            MDeductibleAmount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount').getValue();
            MEPrior_Athorization_Id = Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').getValue();
            if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {    // For ERX Drug Details
                MNo_of_days = Ext.getCmp('MEOnlineClaimViewActivity-No_of_days').getValue();
                MFrequencyTypeCode = Ext.getCmp('MEOnlineClaimViewActivity-FrequencyTypeCode').getValue();
                MFrequency = Ext.getCmp('MEOnlineClaimViewActivity-Frequency').getValue();
                MRefills = Ext.getCmp('MEOnlineClaimViewActivity-Refills').getValue();
                MInstructions = Ext.getCmp('MEOnlineClaimViewActivity-Instructions').getValue();
                MRouteOfAdminCode = Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode').getValue();
            }

            MEPatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent').getValue();
            MEPatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare').getValue();
            AddClaimRequestActivityNewMode();
            this.AddClaimRequestActivityFormWindow.close();

            /*    var MEOnlineClaimViewActivityList = Ext.getCmp('MEOnlineClaimViewActivityList');
                MEOnlineClaimViewActivityList.store.load({
                    params: {
                        start: 0,
                        limit: MEOnlineClaimViewActivityList.pageSize
                    }
                });*/
        },

        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', AddClaimRequestActivityEditFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

function MEOnlineClaimViewDiagnosisEdit(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddClaimRequestDiagnosisEdit'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEAddClaimRequestDiagnosisComplete, this);
    MEOnClaimRequestDiagnosis = record;
}

var METypeCode = '', MEOrderBy = '', METypeName = '', MEDetailCode = '', MEDetailName = '', MEDescription = '', MELongDescription = '';
//var MENetPrice = '', MERequestAmount = ''.METotal = '', MECDCode = '', MECDName = '', MEClinicianName = '', MEActivityStartDate = '', MEActivityTypeCode = '', MEActivityTypeName = '';

function MEAddClaimRequestDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEAddClaimRequestDiagnosisComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var TypeCode = responseText.TypeCode
    var TypeName = responseText.TypeName
    this.AddMEClaimRequestDiagnosisForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddMEClaimRequestDiagnosisForm.addButton({
        text: 'Save',
        handler: function () {
            METypeCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-TypeCode').getValue();
            METypeName = Ext.getCmp('MEOnlineClaimViewDiagnosis-TypeCode').lastSelectionText;
            MEDetailCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-DetailCode').getValue();
            MEDetailName = Ext.getCmp('MEOnlineClaimViewDiagnosis-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('MEOnlineClaimViewDiagnosis-Description').getValue();
            MELongDescription = Ext.getCmp('MEOnlineClaimViewDiagnosis-LongDescription').getValue();
            MEOrderBy = Ext.getCmp('MEOnlineClaimViewDiagnosis-OrderBy').getValue();
            //var MEOnlineClaimViewDiagnosisList = Ext.getCmp('MEOnlineClaimViewDiagnosisList');
            //var Primary = Ext.getCmp('MEOnlineApprovedClaims').selectedIndex;
            MEOnAddClaimRequestDiagnosisNewMode();
            this.AddMEClaimRequestDiagnosisFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddMEClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddMEClaimRequestDiagnosisForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddMEClaimRequestDiagnosisFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddMEClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddMEClaimRequestDiagnosisFormWindow = new Ext.Window({
        id: 'MEAddClaimRequestDiagnosisForm',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddMEClaimRequestDiagnosisForm.width + 10,
        height: this.AddMEClaimRequestDiagnosisForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddMEClaimRequestDiagnosisForm]
    });
    this.AddMEClaimRequestDiagnosisForm.on('render', AddMEClaimRequestDiagnosisFormRender, this);
    this.AddMEClaimRequestDiagnosisFormWindow.show();

}
var record = '';
function MEOnAddClaimRequestDiagnosisNewMode(form, login) {
    record = MEOnClaimRequestDiagnosis;
    record.set('TypeCode', METypeCode);
    record.set('TypeName', METypeName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);
    record.set('OrderBy', MEOrderBy);
}
function AddMEClaimRequestDiagnosisFormRender(form, login) {
    record = MEOnClaimRequestDiagnosis;
    Ext.getCmp('MEOnlineClaimViewDiagnosis-TypeCode').setComboValue(record.get('TypeCode'));
    Ext.getCmp('MEOnlineClaimViewDiagnosis-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('MEOnlineClaimViewDiagnosis-Description').setValue(record.get('Description'));
    Ext.getCmp('MEOnlineClaimViewDiagnosis-LongDescription').setValue(record.get('LongDescription'));
    Ext.getCmp('MEOnlineClaimViewDiagnosis-OrderBy').setValue(record.get('OrderBy'));
}


//function MEOnlineClaimViewDiagnosisEdit(record) {
//    var NewCase = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewDiagnosis', Url = '/forms/Medical/MEOnlineClaimViewDiagonis.xml', PKey = record.get('ID'), WidgetTitle = 'Diagnosis';
//    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
//}

//function MEOnlineClaimViewActivityEdit(record) {
//    var NewCase = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewActivity', Url = '/forms/Medical/MEOnlineClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'Activity';
//    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
//}
function AddClaimRequestActivityEditFormRender(form, login) {
    var record = CliamRequestActivityDummy;
    Ext.getCmp('MEOnlineClaimViewActivity-ActivityStartDate').setValue(record.get('ActivityStartDate'));
    Ext.getCmp('MEOnlineClaimViewActivity-ActivityEndDate').setValue(record.get('ActivityEndDate'));
    //Ext.getCmp('MEOnlineClaimViewActivity-VersionCode').setComboValue(record.get('VersionCode'));
    Ext.getCmp('MEOnlineClaimViewActivity-TreatmentTypeCode').setComboValue(record.get('TreatmentTypeCode'));
    Ext.getCmp('MEOnlineClaimViewActivity-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('MEOnlineClaimViewActivity-Description').setValue(record.get('Description'));
    //Ext.getCmp('MEOnlineClaimViewActivity-LongDescription').setValue(record.get('LongDescription'));
    Ext.getCmp('MEOnlineClaimViewActivity-NetPrice').setValue(record.get('NetPrice'));
    Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount').setValue(record.get('RequestAmount'));
    Ext.getCmp('MEOnlineClaimViewActivity-RequestQty').setValue(record.get('RequestQty'));
    Ext.getCmp('MEOnlineClaimViewActivity-Total').setValue(record.get('Total'));
    Ext.getCmp('MEOnlineClaimViewActivity-CDCode').setComboValue(record.get('CDCode'));
    Ext.getCmp('MEOnlineClaimViewActivity-ClinicianName').setValue(record.get('ClinicianName'));
    Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent').setValue(record.get('PatientSharePercent'));
    Ext.getCmp('MEOnlineClaimViewActivity-PatientShare').setValue(record.get('PatientShare'));
    Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount').setValue(record.get('Deductible_Amount'));
    Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').setValue(record.get('Prior_Athorization_ID'));

    if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {    // For ERX Drug Details
        Ext.getCmp('MEOnlineClaimViewActivity-No_of_days').setValue(record.get('No_of_days'));
        Ext.getCmp('MEOnlineClaimViewActivity-FrequencyTypeCode').setComboValue(record.get('FrequencyTypeCode'));
        Ext.getCmp('MEOnlineClaimViewActivity-Frequency').setValue(record.get('Frequency'));
        Ext.getCmp('MEOnlineClaimViewActivity-Refills').setValue(record.get('Refills'));
        Ext.getCmp('MEOnlineClaimViewActivity-Instructions').setValue(record.get('Instructions'));
        Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode').setComboValue(record.get('RouteOfAdminCode'));
    }
    if (DefaultClaimSourseType == 4)
        Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').disable();
    else
        Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').enable();


    var VersionCode = Ext.getCmp('MEOnlineClaimViewActivity-VersionCode');
    var VersionDtlCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode');
    var ClinicianCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode');
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');

    if (Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode')) {
        var RouteOfAdminCode = Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode');
        if (RouteOfAdminCode) RouteOfAdminCode.on('beforequery', function (evt) {  // DenialReason
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mst.ROUTEOFADMINNAME is not null";

        }, this);
    }

    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.VersionCode from IM_ACTIVITY_DETAILS IAD where IAD.TypeCode in (Select TypeCode from IM_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);
    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        VersionDtlCode.enable();
        VersionDtlCode.clearValue();
    }, this);

    var ProviderActivityType = Ext.getCmp('MEOnlineApprovedClaims-ProviderActivityType').getValue();

    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ivd.VersionCode in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);

    var ClinicianCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode');
    var providercode = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
    if (ClinicianCode) ClinicianCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CLI.CDCode in (select CDCode from ME_PROVIDER_CLINICIAN_LINK where  PROVIDERCODE=" + providercode.editValue + " )";

    }, this);

    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');

    if (Deductible_Amount) Deductible_Amount.on('valid', onRequestAmountVaild, this);
    if (PatientSharePercent) PatientSharePercent.on('valid', onPatientSharePercentBlur, this);
    //if (PatientShare) PatientShare.on('valid', onPatientSharePercentBlur, this);
    if (RequestAmount) RequestAmount.on('valid', onRequestAmountVaild, this);
    if (RequestQty) RequestQty.on('valid', onRequestAmountVaild, this);
    /*
    if (ACActivityTypeCode == '100000000000000003' && DefaultClaimSourseType == 6) {
        if (Deductible_Amount) Deductible_Amount.on('valid', onRequestAmountVaildForERXRequest, this);
        if (PatientSharePercent) PatientSharePercent.on('valid', onPatientSharePercentBlurForERXRequest, this);
        if (RequestAmount) RequestAmount.on('valid', onRequestAmountVaildForERXRequest, this);
        if (RequestQty) RequestQty.on('valid', onRequestAmountVaildForERXRequest, this);
    }
    */
    var providercode = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
    var PayerCode = Ext.getCmp('MEOnlineApprovedClaims-PayerCode');
    var NetPrice = Ext.getCmp('MEOnlineClaimViewActivity-NetPrice');
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');

    var DetailCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode');
    if (DetailCode) DetailCode.on('select', function (combo, record, index) {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ClaimActivityPriceLoad',
                DetailCode: DetailCode.getValue(),
                ProviderCode: providercode.editValue,
                PayerCode: PayerCode.editValue

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ClaimActivityPriceLoadComplete, this);
    }, this);
}

function MedAddClaimRequestDiagnosisFormRender(form, login) {

    var VersionCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-TypeCode');
    var VersionDtlCode = Ext.getCmp('MEOnlineClaimViewDiagnosis-DetailCode');
    var ShortDesc = Ext.getCmp('MEOnlineClaimViewDiagnosis-Description');
    var OrderBy = Ext.getCmp('MEOnlineClaimViewDiagnosis-OrderBy');
    var DiaCount = Ext.getCmp('MEOnlineClaimViewDiagnosisDtlList').store.getCount();

    OrderBy.setValue(Number(DiaCount) + 1)

    var ProviderActivityType = Ext.getCmp('MEOnlineApprovedClaims-ProviderActivityType').getValue();
    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ivd.VersionCode  in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =-1))";
    }, this);
}

function AddClaimRequestActivityFormRender(form, login1) {

    if (DefaultClaimSourseType == 4)
        Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').disable();
    else
        Ext.getCmp('MEOnlineClaimViewActivity-Prior_Athorization_Id').enable();

    var ActivityStartDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityStartDate');
    var ActivityEndDate = Ext.getCmp('MEOnlineClaimViewActivity-ActivityEndDate');

    var EncounterStartDate = Ext.getCmp('MEOnlineApprovedClaims-EncounterStartDate').getValue();
    var EncounterEndDate = Ext.getCmp('MEOnlineApprovedClaims-EncounterEndDate').getValue();

    if (Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode')) {
        var RouteOfAdminCode = Ext.getCmp('MEOnlineClaimViewActivity-RouteOfAdminCode');
        if (RouteOfAdminCode) RouteOfAdminCode.on('beforequery', function (evt) {  // DenialReason
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mst.ROUTEOFADMINNAME is not null";

        }, this);
    }

    ActivityStartDate.setValue(EncounterStartDate);
    ActivityEndDate.setValue(EncounterEndDate);

    var VersionCode = Ext.getCmp('MEOnlineClaimViewActivity-VersionCode');
    var VersionDtlCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode');
    var LongDesc = Ext.getCmp('MEOnlineClaimViewActivity-LongDesc');
    var ShortDesc = Ext.getCmp('MEOnlineClaimViewActivity-ShortDesc');
    var ClinicianCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode');
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var ActTreatmentTypeCode = Ext.getCmp('MEOnlineClaimViewActivity-TreatmentTypeCode');
    var ActCDCode = Ext.getCmp('MEOnlineClaimViewActivity-CDCode');
    var ClinicianName = Ext.getCmp('MEOnlineClaimViewActivity-ClinicianName');

    var TreatmentTypeCode = Ext.getCmp('MEOnlineApprovedClaims-TreatmentTypeCode').editValue;
    var CDCode = Ext.getCmp('MEOnlineApprovedClaims-CDCode').editValue;
    var hdrClinicianName = Ext.getCmp('MEOnlineApprovedClaims-ClinicianName').getValue();

    ActTreatmentTypeCode.setComboValue(TreatmentTypeCode);
    ActCDCode.setComboValue(CDCode); ClinicianName.setValue(hdrClinicianName);
    // var CProvider = Ext.getCmp('PriorRequestActivity-ProviderName');
    //VersionDtlCode.disable();
    var providercode = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
    var ProviderActivityType = Ext.getCmp('MEOnlineApprovedClaims-ProviderActivityType').getValue();
    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VersionCode in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);
    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        VersionDtlCode.enable();
        VersionDtlCode.clearValue();
    }, this);

    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ivd.VersionCode in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE= " + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);


    if (ClinicianCode) ClinicianCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "CLI.CDCode in (select CDCode from ME_PROVIDER_CLINICIAN_LINK where  PROVIDERCODE=" + providercode.editValue + " )";

    }, this);


    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
    RequestQty.setValue(1);
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');

    if (Deductible_Amount) Deductible_Amount.on('valid', onRequestAmountVaild, this);
    if (PatientSharePercent) PatientSharePercent.on('valid', onPatientSharePercentBlur, this);
    //if (PatientShare) PatientShare.on('valid', onPatientSharePercentBlur, this);
    if (RequestAmount) RequestAmount.on('valid', onRequestAmountVaild, this);
    if (RequestQty) RequestQty.on('valid', onRequestAmountVaild, this);

    var providercode = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
    var PayerCode = Ext.getCmp('MEOnlineApprovedClaims-PayerCode');
    var NetPrice = Ext.getCmp('MEOnlineClaimViewActivity-NetPrice');
    if (NetPrice) NetPrice.on('valid', function (text1, oldval, newval) {
        RequestAmount.setValue(NetPrice.getValue());
    }, this);
    var DetailCode = Ext.getCmp('MEOnlineClaimViewActivity-DetailCode');
    if (DetailCode) DetailCode.on('select', function (combo, record, index) {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ClaimActivityPriceLoad',
                DetailCode: DetailCode.getValue(),
                ProviderCode: providercode.editValue,
                PayerCode: PayerCode.editValue

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ClaimActivityPriceLoadComplete, this);
    }, this);

}
function onRequestAmountBlur(field) {
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');

    var tot = 0;
    tot = ((1 * RequestAmount.getValue()) - ((1 * PatientShare.getValue()) + (1 * Deductible_Amount.getValue())));
    Total.setValue(tot * RequestQty.getValue());
}

function onRequestAmountVaild(field) {
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');

    if (Number(RequestAmount.getValue()) < Number(Deductible_Amount.getValue())) {
        Deductible_Amount.setValue(0);
        Ext.MessageBox.alert(login.modulename, 'Deductible Amount Should not greater then Request Amount!');
        return;
    }

    var ReqAmt = Number(RequestAmount.getValue()) * Number(RequestQty.getValue());
    var Patient = (ReqAmt * Number(PatientSharePercent.getValue())) / 100;
    PatientShare.setValue(Patient);

    var Tota = 0;
    Tota = ReqAmt - (Patient + Number(Deductible_Amount.getValue()));
    Total.setValue(Tota);
}

function onPatientSharePercentBlur(field) {

    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');

    if (Number(RequestAmount.getValue()) < Number(Deductible_Amount.getValue())) {
        Deductible_Amount.setValue(0);
        Ext.MessageBox.alert(login.modulename, 'Deductible Amount Should not greater then Request Amount!');
        return;
    }

    var ReqAmt = Number(RequestAmount.getValue()) * Number(RequestQty.getValue());
    var Patient = (ReqAmt * Number(PatientSharePercent.getValue())) / 100;
    PatientShare.setValue(Patient);

    var Tota = 0;
    Tota = ReqAmt - (Patient + Number(Deductible_Amount.getValue()));
    Total.setValue(Tota);

}

function onPatientSharePercentBlurForERXRequest(field) {
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty').getValue();
    var Frequency = Ext.getCmp('MEOnlineClaimViewActivity-Frequency').getValue();
    var No_of_days = Ext.getCmp('MEOnlineClaimViewActivity-No_of_days').getValue();

    var ReqAmt = ((1 * RequestAmount.getValue()) * RequestQty * Frequency * No_of_days);
    tot = ((ReqAmt * (1 * PatientSharePercent.getValue())) / 100);
    PatientShare.setValue(tot);

    var Tota = 0;
    Tota = ((1 * ReqAmt) - ((1 * tot) + (1 * Deductible_Amount.getValue())));
    Total.setValue(Tota);
}


function onRequestAmountVaildForERXRequest(field) {
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty').getValue();
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var Frequency = Ext.getCmp('MEOnlineClaimViewActivity-Frequency').getValue();
    var No_of_days = Ext.getCmp('MEOnlineClaimViewActivity-No_of_days').getValue();

    var ReqAmt = ((1 * RequestAmount.getValue()) * RequestQty * Frequency * No_of_days);
    tot = ((ReqAmt * (1 * PatientSharePercent.getValue())) / 100);
    PatientShare.setValue(tot);

    var Tota = 0;
    Tota = ((1 * ReqAmt) - ((1 * tot) + (1 * Deductible_Amount.getValue())));
    Total.setValue(Tota);
}

function onPatientShareVaild(field) {
    var PatientSharePercent = Ext.getCmp('MEOnlineClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEOnlineClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEOnlineClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');

    tot = ((((1 * PatientShare.getValue()) * 100)) / (1 * RequestAmount.getValue()));
    PatientSharePercent.setValue(Math.round(tot.toFixed(4)));

    Total.setValue(((1 * RequestAmount.getValue()) - (1 * PatientShare.getValue())) - (1 * Deductible_Amount.getValue()));
    //tot = ((((1 * PatientShare.getValue()) * 100)) / (1 * Total.getValue()));
    //PatientSharePercent.setValue(Math.round(tot.toFixed(4)));

}



function ClaimActivityPriceLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ClaimActivityPriceLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var NetPrice = Ext.getCmp('MEOnlineClaimViewActivity-NetPrice');
    var DiscountValue = Ext.getCmp('MEOnlineClaimViewActivity-DiscountValue');
    if (responseText.Netvalue != 0)
        NetPrice.setValue(responseText.Netvalue);
    if (responseText.DiscountValue != 0)
        DiscountValue.setValue(responseText.DiscountValue);
    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    RequestAmount.setValue(NetPrice.getValue());
    onRequestAmountVaild();
}

var record = '';
function AddClaimRequestActivityNewMode(form, login) {

    record = CliamRequestActivityDummy;
    record.set('VersionCode', MEVersionCode);
    record.set('VersionName', MEVersionName);
    record.set('TreatmentTypeCode', METreatmentTypeCode);
    record.set('TreatmentTypeName', METreatmentTypeName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);
    record.set('NetPrice', MENetPrice);
    record.set('DiscountValue', MEDiscountValue);
    record.set('RequestQty', MERequestQty);
    record.set('CDCode', MECDCode);
    record.set('CDName', MECDName);
    record.set('ClinicianName', MEClinicianName);
    record.set('RequestAmount', MERequestAmount);
    record.set('Total', METotal);
    record.set('PatientSharePercent', MEPatientSharePercent);
    record.set('PatientShare', MEPatientShare);
    record.set('Deductible_Amount', MDeductibleAmount);
    record.set('ActivityStartDate', MEActivityStartDate);
    record.set('ActivityEndDate', MEActivityEndDate);
    record.set('Prior_Athorization_ID', MEPrior_Athorization_Id);
    record.set('No_of_days', MNo_of_days);
    record.set('FrequencyTypeCode', MFrequencyTypeCode);
    record.set('Frequency', MFrequency);
    record.set('Refills', MRefills);
    record.set('Instructions', MInstructions);
    record.set('RouteOfAdminCode', MRouteOfAdminCode);

}


function MEOnlineClaimViewActivityDelete(record) {
}
function MEOnlineClaimViewDiagnosisDelete(record) {
}

function MedOnlineClaimProcessShowXML(record) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MedOnlineClaimProcessShowXML',
            Primary: record.get('ID')
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MedOnlineClaimProcessShowXMLComplete, this);

}
function MedOnlineClaimProcessStatusLOG(record) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MedOnlineClaimProcessStatusLOG',
            Primary: record.get('ID')
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MedOnlineClaimProcessStatusLogComplete, this);
}

function MedOnlineClaimProcessStatusLogComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimProcessStatusLogComplete, this);
    var responseText = Ext.util.Format.htmlDecode(response.responseText);
    //if (!responseText.success) {
    //    Ext.MessageBox.alert(login.modulename, responseText.Msg);
    //} else {

    this.MedOnlineClaimProcessShowXMLForm = new Ext.FormPanel({
        title: 'Claim Status Log',
        labelAlign: 'left',
        labelWidth: 105,
        autoHeight: true,
        width: 950,
        buttonAlign: 'center',
        method: 'POST',
        frame: true,
        monitorValid: true,
        items: [new Ext.form.TextArea({
            fieldLabel: 'Status Log',
            name: 'StatusLog',
            width: 800,
            height: 500,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: responseText,
            tabIndex: 2
        })]
    });

    this.MedOnlineClaimProcessShowXMLForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.MedOnlineClaimProcessShowXMLFormWindow.close();
        },
        scope: this,
        tabIndex: this.MedOnlineClaimProcessShowXMLForm.FormFieldsCount + 2
    });

    this.MedOnlineClaimProcessShowXMLFormWindow = new Ext.Window({
        id: 'ClaimSubmissionStatusLog',
        title: 'Claim Submission Status Log',
        width: 950,
        //height:150,
        autoHeight: true,
        plain: true,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        bodyStyle: 'padding:0px',
        closeTips: 'Close',
        modal: true,
        items: [this.MedOnlineClaimProcessShowXMLForm]
    });
    this.MedOnlineClaimProcessShowXMLFormWindow.show();
}

function MedOnlineClaimProcessShowXMLComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimProcessShowXMLComplete, this);
    var responseText = Ext.util.Format.htmlDecode(response.responseText);
    ////var responseText = Ext.util.JSON.decode(response.responseText);
    //if (!responseText.success) {
    //    Ext.MessageBox.alert(login.modulename, responseText.Msg);
    //} else {

    this.MedOnlineClaimProcessShowXMLForm = new Ext.FormPanel({
        title: 'Claim File',
        labelAlign: 'left',
        labelWidth: 105,
        autoHeight: true,
        width: 950,
        buttonAlign: 'center',
        method: 'POST',
        frame: true,
        monitorValid: true,
        items: [new Ext.form.TextArea({
            fieldLabel: 'Claim File',
            name: 'ClaimFile',
            width: 800,
            height: 500,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: responseText,
            tabIndex: 2
        })]
    });

    this.MedOnlineClaimProcessShowXMLForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.MedOnlineClaimProcessShowXMLFormWindow.close();
        },
        scope: this,
        tabIndex: this.MedOnlineClaimProcessShowXMLForm.FormFieldsCount + 2
    });

    this.MedOnlineClaimProcessShowXMLFormWindow = new Ext.Window({
        id: 'ClaimSubmissionFle',
        title: 'Claim Submission Fle',
        width: 950,
        //height:150,
        autoHeight: true,
        plain: true,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        bodyStyle: 'padding:0px',
        closeTips: 'Close',
        modal: true,
        items: [this.MedOnlineClaimProcessShowXMLForm]
    });
    this.MedOnlineClaimProcessShowXMLFormWindow.show();

}

function MedOnlineClaimProcessRequest(record) {
    var Status = record.get('AuthorizedStatus');
    if (Status != 0) {
        Ext.MessageBox.alert(login.modulename, 'The record is Already Resubmitted or Submitted');
        return;
    }
    else {
        Ext.MessageBox.confirm('Information', 'Do you want to Make Prior Request for this Record?', function (button) {
            var selectIndex = record.get('ID');
            if (button == 'yes') {
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'MedOnlineClaimProcessRequest',
                        selectIndex: selectIndex,
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', MedOnlineClaimProcessRequestComplete, this);
            }
            else {
                return true;
            }
        }, this);
    }
}
function MedOnlineClaimProcessRequestComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimProcessRequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();
        store.reload();
    }

}

function MEOnlineClaimsProcessEdit(record) {


    if (record.get('StatusType') == 0 || record.get('StatusType') == 3) {
        var NewCase = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/MEOnlineApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'New Claim';
        NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
    }
    else {

        Ext.MessageBox.alert(login.modulename, 'This claim was Submitted.You can not allow to edit. !');
        return;
    }
}
function MEOnlineClaimsProcessView(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/MEOnlineApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'New Claim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

function ERXRequestMEOnlineClaimsProcessView(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/Network/PriorAuthorization/ERXRequestMEOnlineApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'New Claim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

function MEOnlineApprovedClaims(from, login) {

    if (!from.isView) {
        var pky = Ext.getCmp('MEOnlineApprovedClaims').selectedIndex;
        var Diagnosis = Ext.getCmp('MEOnlineApprovedClaims-Diagnosis');
        var Drugs = Ext.getCmp('MEOnlineApprovedClaims-Drugs');
        var Procedure = Ext.getCmp('MEOnlineApprovedClaims-Procedures');
        var ServiceList = Ext.getCmp('MEOnlineApprovedClaims-DubaiServiceList');
        var HCPCS = Ext.getCmp('MEOnlineApprovedClaims-HCPCS');
        var StatusTypeCode = Ext.getCmp('MEOnlineApprovedClaims-StatusTypeCode');
        var Source_Type = Ext.getCmp('MEOnlineApprovedClaims-Source_Type');
        var Emirateid = Ext.getCmp('MEOnlineApprovedClaims-Emirateid');
        var Dental = Ext.getCmp('MEOnlineApprovedClaims-Dental');
        var ID_Payer = Ext.getCmp('MEOnlineApprovedClaims-ID_Payer');
        Emirateid.setValue('111-1111-1111111-1');
        StatusTypeCode.setComboValue(0);
        StatusTypeCode.disable();
        Source_Type.setValue(DefaultClaimSourseType);

        if (DefaultClaimSourseType == 4)
            ID_Payer.disable();
        else
            ID_Payer.enable();

        var Provider_Code = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
        var ProviderName = Ext.getCmp('MEOnlineApprovedClaims-ProviderName');
        var PayerCode = Ext.getCmp('MEOnlineApprovedClaims-PayerCode');
        var EncounterStartDate = Ext.getCmp('MEOnlineApprovedClaims-EncounterStartDate');
        var EncounterEndDate = Ext.getCmp('MEOnlineApprovedClaims-EncounterEndDate');

        if (EncounterStartDate) EncounterStartDate.on('change', function (text1, oldval, newval) {
            EncounterEndDate.setValue(EncounterStartDate.getValue());
        }, this);

        if (from.selectedIndex == -1 && Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode') && Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode').getValue() > 0) {
            Provider_Code.setComboValue(Ext.getCmp('MEOnlineClaimSearch-ProviderIDCode').getValue());
            ProviderName.setValue(Ext.getCmp('MEOnlineClaimSearch-ProviderName').getValue());
        }

        if (Diagnosis) Diagnosis.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
            if (checked) Dental.setValue(false);
        }, this);

        if (Drugs) Drugs.on('check', function (checkBox, checked) {
            if (checked) Diagnosis.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
            if (checked) Dental.setValue(false);
        }, this);

        if (Procedure) Procedure.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Diagnosis.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
            if (checked) Dental.setValue(false);
        }, this);

        if (ServiceList) ServiceList.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) Diagnosis.setValue(false);
            if (checked) HCPCS.setValue(false);
            if (checked) Dental.setValue(false);
        }, this);

        if (HCPCS) HCPCS.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) Diagnosis.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) Dental.setValue(false);
        }, this);
        if (Dental) Dental.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) Diagnosis.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);
        if (Dental) Dental.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedure.setValue(false);
            if (checked) Diagnosis.setValue(false);
            if (checked) ServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);


        var MEOnlineClaimViewActivityList = Ext.getCmp('MEOnlineClaimViewActivityDtlList');
        MEOnlineClaimViewActivityList.getStore().on('load', function (store, record, options) {
            MEClaimActivityAmoutnCalculation();
        }, this);

        var Provider_Code = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code');
        var CDCode = Ext.getCmp('MEOnlineApprovedClaims-CDCode');
        var ClinicianName = Ext.getCmp('MEOnlineApprovedClaims-ClinicianName');
        Provider_Code.on('select', function (combo, record, index) {
            CDCode.clearValue();
            ClinicianName.setValue('');
        }, this);

        if (CDCode) CDCode.on('beforequery', function (evt) {
            var Provider_Code = Ext.getCmp('MEOnlineApprovedClaims-Provider_Code').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "CLI.PROVIDERCODE =" + Provider_Code + " ";
        }, this);

        if (Provider_Code) Provider_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " pro.ProviderCode in (select PROVIDERCODE from ME_DISTRIBUTE_PROVIDER Det join ME_DISTRIBUTE_CLAIM Mas on  Mas.DISTRIBUTE_CODE=Det.DISTRIBUTE_CODE and Mas.DOCTORCODE=" + login.UserCode + " ) ";
        }, this);

        var ClaimActivtiyColumnModule = Ext.getCmp('MEOnlineClaimViewActivityDtlList').getColumnModel();
        ClaimActivtiyColumnModule.getColumnById('ActivityTypeCode').editable = false;
        ClaimActivtiyColumnModule.getColumnById('DetailCode').editable = false;
        ClaimActivtiyColumnModule.getColumnById('CDCode').editable = false;

        var PayerCode = Ext.getCmp('MEOnlineApprovedClaims-PayerCode');
        var INS_PayerCode = Ext.getCmp('MEOnlineApprovedClaims-INS_PayerCode');

        //if (PayerCode) PayerCode.on('select', function (combo, record, index) {
        //    if (INS_PayerCode.editValue < 1)
        //        INS_PayerCode.setComboValue(PayerCode.editValue);
        //}, this);

        var CardId = Ext.getCmp('MEOnlineApprovedClaims-CardId');
        var GenderCode = Ext.getCmp('MEOnlineApprovedClaims-GenderCode');
        if (CardId) CardId.on('select', function (combo, record, index) {
            if (GenderCode.editValue < 1)
                GenderCode.setComboValue(record.data.GenderCode);
        }, this);

    }
}


function MEClaimActivityAmoutnCalculation(field) {
    var RequestAmount = Ext.getCmp('MEOnlineApprovedClaims-RequestAmount');
    var DeductableValue = Ext.getCmp('MEOnlineApprovedClaims-DeductableValue');
    var Co_Ins_Value = Ext.getCmp('MEOnlineApprovedClaims-Co_Ins_Value');
    var CoInsPercnt = Ext.getCmp('MEOnlineApprovedClaims-OrginalPatientShare');
    var NewAmount = Ext.getCmp('MEOnlineApprovedClaims-Total');

    var MEOnlineClaimViewActivityList = Ext.getCmp('MEOnlineClaimViewActivityDtlList');
    var TotReqAmt = 0, TotPSAmt = 0, TotNetAmt = 0, TotDedAmt = 0;
    for (var i = 0; i < MEOnlineClaimViewActivityList.store.getCount() ; i++) {
        var record = MEOnlineClaimViewActivityList.store.getAt(i);
        if (record.get('IsDeleted') == false) TotPSAmt += Number(record.get('PatientShare'));
        if (record.get('IsDeleted') == false) TotDedAmt += Number(record.get('Deductible_Amount'));
        if (record.get('IsDeleted') == false) TotReqAmt += Number(record.get('RequestAmount')) * Number(record.get('RequestQty'));
        if (record.get('IsDeleted') == false) TotNetAmt += Number(record.get('Total'));
    }

    RequestAmount.setValue(TotReqAmt); DeductableValue.setValue(TotDedAmt);
    Co_Ins_Value.setValue(TotPSAmt); NewAmount.setValue(TotNetAmt);
}


function MEOnlineClaimReqApprovalHistoryActivitsView(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewActivity', Url = '/forms/Medical/MEOnlineClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'Activity';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function MEOnlineClaimReqApprovalHistoryActivityEdit(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewActivity', Url = '/forms/Medical/MEOnlineClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'Activity';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function MEOnlineClaimReqApprovalHistoryDiagnosisView(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewDiagnosis', Url = '/forms/Medical/MEOnlineClaimViewDiagonis.xml', PKey = record.get('ID'), WidgetTitle = 'Diagnosis';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function MEOnlineClaimReqApprovalHistoryDiagnosisEdit(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineClaimViewDiagnosis', Url = '/forms/Medical/MEOnlineClaimViewDiagonis.xml', PKey = record.get('ID'), WidgetTitle = 'Diagnosis';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function MEOnlineClaimsSearchShowRA(form, login) {

    MEOnlineClaimsSearchHistry();

    var FilterQry = ClaimFilterQry;
    if (FilterQry == '')
        FilterQry += " CRH.STATUSTYPE=2 ";
    else
        FilterQry += " and CRH.STATUSTYPE=2";

    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100,
            }
        });
    }
}
function MEOnlineClaimsSearchShowResubmissionForm(form, login) {

    MEOnlineClaimsSearchHistry();

    var FilterQry = ClaimFilterQry;
    if (FilterQry == '')
        FilterQry += " CRH.STATUSTYPE=3 ";
    else
        FilterQry += " and CRH.STATUSTYPE=3";

    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.MEOnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100,
            }
        });
    }
}


function onRequestQtyValid(Field) {

    var RequestAmount = Ext.getCmp('MEOnlineClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEOnlineClaimViewActivity-RequestQty');
    var Total = Ext.getCmp('MEOnlineClaimViewActivity-Total');

    var Tot_Amounts = (RequestAmount.getValue() * Field.getValue());
    Total.setValue(Tot_Amounts);


}

function QuotationFollowUp(from, login) {
    if (!from.isView) {

        var QuotationCode = Ext.getCmp('QuotationFollowUp-QuotationCode');
        var Group_Code = Ext.getCmp('QuotationFollowUp-GroupCode');
        var PolicyTypeCode = Ext.getCmp('QuotationFollowUp-PolicyTypeCode');

        if (PolicyTypeCode)
            if (QuotationCode) QuotationCode.on('beforequery', function (evt) {
                var PolicyType = Ext.getCmp('QuotationFollowUp-PolicyTypeCode').editValue;
                if (PolicyType != '') {
                    evt.combo.lastQuery = '1=2';
                    evt.combo.store.baseParams.filter = "iq.POLICYTYPE=" + PolicyType;
                }
            }, this);

        if (Group_Code) {
            if (QuotationCode) QuotationCode.on('beforequery', function (evt) {
                var GroupCode = Ext.getCmp('QuotationFollowUp-GroupCode').editValue;
                if (GroupCode != 0) {
                    evt.combo.lastQuery = '1=2';
                    evt.combo.store.baseParams.filter = "IQ.GROUP_CODE=" + GroupCode;
                }
            }, this);


        }
    }
}
function QuotationCategoryReport(record) {
    //ReprotTemplatePrimKey = 0;
    ReportTemplateMenuID = 'ID_NGIQUOTATIONMASTER';
    ReprotTemplatePrimKey = record.get('ID');
    PrintTempButtonPopUp(null, null);

    // var ReprotTemplatePrimKey = record.get('ID');

    //var ReprotTemplatePrimKey = Ext.getCmp('NGIQuotationMaster').selectedIndex;
}


function MEProvider(form, login) {

    if (!form.isView) {

        //State filter based on Country 
        var ProLocationCode = Ext.getCmp('MEProvider-ProLocationCode');
        var CountryCode = Ext.getCmp('MEProvider-CountryCode');
        var CityCode = Ext.getCmp('MEProvider-CityCode');
        var ClaimQuoteTypeCode = Ext.getCmp('MEProvider-ClaimQuoteTypeCode');
        var ProviderPharmacyTariffDetails = Ext.getCmp('MEProviderPharmacyTariffDetailsList');

        if (login.CompanyCode = 26)
            CountryCode.setComboValue(100000000000000778);
        if (login.CompanyCode = 23)
            CountryCode.setComboValue(100000000000000775);

        ProviderPharmacyTariffDetails.disable();
        if (ClaimQuoteTypeCode) ClaimQuoteTypeCode.on('select', function (combo, record, index) {
            if (ClaimQuoteTypeCode.editValue == 1212) {
                // ProviderPharmacyTariffDetailsList
                ProviderPharmacyTariffDetails.enable();

            }
            else {
                ProviderPharmacyTariffDetails.disable();
                onBusinessTypeclear('MEProviderPharmacyTariffDetailsList');
            }
        }, this);

        var ProviderType = Ext.getCmp('MEProvider-ProviderTypeCode');
        var ClaimQuoteTypeCode = Ext.getCmp('MEProvider-ClaimQuoteTypeCode');
        if (form.selectedIndex == -1) {
            ProviderType.setComboValue(0);
            ClaimQuoteTypeCode.setComboValue(1);
        }

        var MEProviderLicenseDtlList = Ext.getCmp('MEProviderLicenseDtlList');
        MEProviderLicenseDtlList.on('beforeedit', function (evt) {

            if (Ext.getCmp('MEProviderLicenseDtl-CustomerCode') && Ext.getCmp('AP_MiscPaymentsDetails-ShipmentEntryCode')) {

                var ShipmentEntryCode = Ext.getCmp('AP_MiscPaymentsDetails-ShipmentEntryCode');
                var CustomerCode = evt.record.get('CustomerCode');

                ShipmentEntryCode.lastQuery = '1=2';
                ShipmentEntryCode.store.baseParams.filter = "SH.CUSTOMERCODE=" + CustomerCode + "";
            }

        }, this);


        var LicenceIDCode = Ext.getCmp('MEProviderLicenseDtl-LicenceIDCode');
        var ActivityTypeCode = Ext.getCmp('MEProvider-ActivityTypeCode');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=" + ActivityTypeCode.editValue + " and FILTERTYPE=1";
        }, this);

        var ProviderTypeCode = Ext.getCmp('MEProvider-ProviderTypeCode');
        ProviderTypeCode.constantFilter = '0,1,2,5,8,9';

        if (CityCode) CityCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('MEProvider-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        /*//City filtered based on State
        if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
            var CityCode = Ext.getCmp('NGIProvider-CityCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + CityCode + "";
        }, this);*/
        /*
           //location filtered based on city
           var ProLocationCode = Ext.getCmp('NGIProvider-ProLocationCode');
           if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
               var CityCode = Ext.getCmp('NGIProvider-CityCode').getValue();
               evt.combo.lastQuery = '1=2';
               evt.combo.store.baseParams.filter = "PLACECODE=" + CityCode + "";
           }, this);
           */
        CityCode.on('select', function (combo, record, index) {
            ProLocationCode.clearValue();
        }, this);

        CountryCode.on('select', function (combo, record, index) {
            CityCode.clearValue();
            //ProLocationCode.clearValue();
        }, this);

        /*  CityCode.on('select', function (combo, record, index) {
             ProLocationCode.clearValue();
          }, this);*/

        /*
        //State filter based on Country  for Billing Detail
        var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode');
        if (DtlStateCode) DtlStateCode.on('beforequery', function (evt) {
            var DtlCountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + DtlCountryCode + "";
        }, this);

        //City filtered based on State for Billing Detail

        var DtlCityCode = Ext.getCmp('NGIProviderBillingDetail-CityCode');
        if (DtlCityCode) DtlCityCode.on('beforequery', function (evt) {
            var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + DtlStateCode + "";
        }, this);
        */
        Ext.getCmp('MEProvider-ProviderStatusCode').setComboValue(0);
        Ext.getCmp('MEProvider-ProviderStatusCode').disable();
        //Ext.getCmp('NGIProvider-MaxMultiFactorHaad').setValue(login.providersetting.MaxMultiFactorHaad);
        //if (login.providersetting != 'undefined')
        //    Ext.getCmp('NGIProvider-MaxCPTtoAlert').setValue(login.providersetting.MaxCPTtoAlert);
        var ProviderTypeCode = Ext.getCmp('MEProvider-ProviderTypeCode');
        var GroupCode = Ext.getCmp('MEProvider-HeadOfficeCode');
        var Providername = Ext.getCmp('MEProvider-ProviderName');
        var ProviderAlternativeName = Ext.getCmp('MEProvider-ProviderAlternativeName');
        var ClaimQuoteTypeCode = Ext.getCmp('MEProvider-ClaimQuoteTypeCode');
        var CountryCode = Ext.getCmp('MEProvider-CountryCode');
        var StateCode = Ext.getCmp('MEProvider-StateCode');
        var CityCode = Ext.getCmp('MEProvider-CityCode');
        var MobileNo = Ext.getCmp('MEProvider-MobileNo');
        var EMail = Ext.getCmp('MEProvider-EMail');
        var ProviderGoogleAddress = Ext.getCmp('MEProvider-ProviderGoogleAddress');
        var WebSite = Ext.getCmp('MEProvider-WebSite');
        var ProviderMainPhone = Ext.getCmp('MEProvider-ProviderMainPhone');
        var FaxNumber = Ext.getCmp('MEProvider-FaxNumber');

        if (ProviderTypeCode) ProviderTypeCode.on('select', function (combo, record, index) {
            if (combo.getValue() == 6) {
                GroupCode.disable();
                GroupCode.clearValue();
            }
            else {
                GroupCode.enable();
            }
        }, this);

        if (form.selectedIndex != -1 && !form.isView) {

            if (ProviderTypeCode.editValue == 6) {
                GroupCode.disable();
            }
            else {
                GroupCode.enable();
            }
        }

        if (GroupCode) GroupCode.on('select', function (combo, record, index) {
            /*
            Providername.setValue(null);
            ProviderAlternativeName.setValue(null);
            ClaimQuoteTypeCode.clearValue();
            CountryCode.clearValue();
            StateCode.clearValue();
            CityCode.clearValue();
            MobileNo.setValue(null);
            EMail.setValue(null);
            ProviderGoogleAddress.setValue(null);
            WebSite.setValue(null);
            ProviderMainPhone.setValue(null);
            FaxNumber.setValue(null);
            */
        }, this);


        //var NGIProviderBillingDetailList = Ext.getCmp('NGIProviderBillingDetailList');

        //NGIProviderBillingDetailList.on('render', function (grid) {

        //    var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode');
        //    if (CountryCode) CountryCode.on('beforequery', function (evt) {
        //        var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
        //        evt.combo.lastQuery = '1=2';
        //        evt.combo.store.baseParams.filter = "1=1";
        //    }, this);

        //    //var cm = grid.getColumnModel();
        //    //cm.config[1].hidden=true;
        //}, this);

    }


}

function PriceComparison(from, login) {
}

function PriceListGenerate(from, login) {

    var FromProvider = Ext.getCmp('PriceComparison-FromProviderCode').editValue;
    var ToProvider = Ext.getCmp('PriceComparison-ToProviderCode').editValue;
    if (FromProvider == '' || FromProvider == 0 || ToProvider == 0 || ToProvider == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select From Provider and To Provider');
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'PriceListGenerateActivity',
                FromProvider: FromProvider,
                ToProvider: ToProvider
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', PriceListGenerateActivityComplete, this);
    }
}


function PriceListGenerateActivityComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PriceListGenerateActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function PriceListPrintReports(from, login) {
    var WidgetObj = Ext.getCmp('ID_NWPRICELISTCOMP').scope; //.immediatePrintClick(PKEy);

    var ReportType = 1;

    WidgetObj.immediatePrintClick(1);
}

function AddNewExistsPatientBtnhandler(form, login) {

    var PrimKey = Ext.getCmp('PatientRegistration').selectedIndex;

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewExistsPatient',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', AddNewExistsPatientBtncomplete, this);
}

function AddNewExistsPatientBtncomplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewExistsPatientBtncomplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    IsAddNewExistPatient = 1;

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        IsAddNewExistPatientArry = responseText.datum[cnt];
    }
    Ext.getCmp('ID_PATIENTSREGISTRATION_editform').un('beforeclose', Ext.getCmp('ID_PATIENTSREGISTRATION_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTSREGISTRATION_editform').scope);
    Ext.getCmp('ID_PATIENTSREGISTRATION_editform').close();
    var AddNewExistpatient = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.AddExistPatientRegistration', Url = '/forms/Medical/AddNewPatientRegistration.xml', PKey = "-1", WidgetTitle = 'Patient Registration';
    // AddNewExistpatient.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
    AddNewExistpatient.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, "Print Patient ID Card", "PrintPatientIdCardHandler");
    // bottumbuttons="LBLPRINTPATIENTID" botbuttonhandlers="PrintPatientIdCardHandler"
}function METypeVersionUploadCodeType(form, login) {

    var TypeCode = Ext.getCmp('METypeVersions-TypeCode').getValue();
    if (TypeCode == '' || TypeCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please select Type first !');
        return true;
    }
    else
        Type = TypeCode;

    var UploadCodeType = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.StandardCode.MEUploadCodeType';
    var Url = '/forms/Medical/StandardCode/MEUploadCodeType.xml';
    var PKey = -1;
    var WidgetTitle = 'Upload Code Type';
    UploadCodeType.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'CodeTypeImportData');
}

function MEUploadCodeType(form, login) {

    var UploadCode = Ext.getCmp('MEUploadCodeType-UploadCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADCODETYPE')";
    }, this);

    if (!form.isView) {
        var TypeCode = Ext.getCmp('MEUploadCodeType-TypeCode');
        if (Type != null || Type != '') {
            TypeCode.setComboValue(Type);
        }
        Type = '';
    }
}


function MEClincianProviderLink(form, login) {

    if (!form.isView) {
        var HasGovernmentLicense = Ext.getCmp('MEClincianProviderLink-HasGovernmentLicense');
        var LicenceIDCode = Ext.getCmp('MEClincianProviderLink-LicenceIDCode');
        var ProviderActivityType = Ext.getCmp('MEClincianProviderLink-ProviderActivityType');
        //if (HasGovernmentLicense.getValue()) {
        //    LicenceIDCode.enable(); LicenceTypeCode.enable();
        //}
        //else {
        //    LicenceIDCode.disable(); LicenceTypeCode.disable();
        //}
        var HasGovernmentLicense = Ext.getCmp('MEClincianProviderLink-HasGovernmentLicense');
        if (form.selectedIndex == -1)
            HasGovernmentLicense.setValue(1);
        HasGovernmentLicense.on('check', onMedicalHasGovernmentLicenseCheck, this);

        //if (LicenceTypeCode) LicenceTypeCode.on('select', function (combo, record, index) {
        //    LicenceIDCode.clearValue();
        //}, this);

        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            //evt.combo.store.baseParams.filter = " LICENSE_TYPE in (select constantname from genconstant where CATEGORY='NGILICENCETYPE' and LANGUAGECODE='en-US' and CONSTANTVALUE=" + ProviderActivityType.getValue() + ")";
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=" + ProviderActivityType.getValue() + " and FILTERTYPE=0";
        }, this);

        var ProviderCode = Ext.getCmp('MEClincianProviderLink-ProviderCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PRO.PROVIDERTYPE=0"; // Hospital Type Provider
        }, this);

    }
}

function onMedicalHasGovernmentLicenseCheck(checkBox, checked) {
    var LicenceIDCode = Ext.getCmp('MEClincianProviderLink-LicenceIDCode');
    var LicenceTypeCode = Ext.getCmp('MEClincianProviderLink-LicenceTypeCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}


//   Upload Claim Batch


function UploadClaimBatchDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('UploadClaimBatch-UploadTemplateCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', UploadClaimBatchDownloadTemplateComplete, this);

}

function UploadClaimBatchDownloadTemplateComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', UploadClaimBatchDownloadTemplateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function UploadClaimBatchVieworDownload(form, login) {

    var ClassName = 'SBS.Business.Objects.Medical.General.UploadClaimBatch';
    var Primary = Ext.getCmp('UploadClaimBatch').selectedIndex;

    var FileName = Ext.getCmp('UploadClaimBatch-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', UploadClaimBatchVieworDownloadComplete, this);
}

function UploadClaimBatchVieworDownloadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyMemberVieworDownloadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}







function PBMMEPlanMaster(form, login) {
    if (!form.isView) {
        var prkey = Ext.getCmp('PBMMEPlanMaster').selectedIndex;
        var OwnerType = Ext.getCmp('PBMMEPlanMaster-OwnerTypeCode');
        var CopyPlan = Ext.getCmp('PBMMEPlanMaster-CopyPlanCode');

        if (prkey == -1) {
            OwnerType.setComboValue(0);//Heath Net
        }
        if (CopyPlan) CopyPlan.on('beforequery', function (evt) {
            var OwnerType = Ext.getCmp('PBMMEPlanMaster-OwnerTypeCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "plan.OwnerCode=" + OwnerType + "";
        }, this);

    }

    //    for age Limit

    var CardTextArea = Ext.getCmp('PBMMEPlanMaster-CardTextArea');
    var PBMMEPlanAgeLimitList = Ext.getCmp('PBMMEPlanAgeLimitList');

    PBMMEPlanAgeLimitList.on('rowclick', function (grid, rowIndex, e) {
        PBMPlanAgeLimitList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);

        CardTextArea.setValue(Record.get('CardText'));
    }, this);

    PBMMEPlanAgeLimitList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        PBMMEPlanAgeLimitList.lastSelectedRecord = Record;
        CardTextArea.setValue(Record.get('CardText'));
    }, this);

    if (CardTextArea) CardTextArea.on('valid', function (text1, oldval, newval) {
        if (PBMMEPlanAgeLimitList.lastSelectedRecord) {
            PBMMEPlanAgeLimitList.lastSelectedRecord.set('CardText', CardTextArea.getValue());
        }
    }, this);

    // for Benefit Card 
    var CardText = Ext.getCmp('PBMMEPlanMaster-CardText');
    var PBMMEPlanBenefitDtlList = Ext.getCmp('PBMMEPlanBenefitDtlList');

    PBMMEPlanBenefitDtlList.on('rowclick', function (grid, rowIndex, e) {
        PBMMEPlanBenefitDtlList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);

        CardText.setValue(Record.get('CardText'));
    }, this);

    PBMMEPlanBenefitDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        PBMMEPlanBenefitDtlList.lastSelectedRecord = Record;
        CardText.setValue(Record.get('CardText'));
    }, this);

    if (CardText) CardText.on('valid', function (text1, oldval, newval) {
        if (PBMMEPlanBenefitDtlList.lastSelectedRecord) {
            PBMMEPlanBenefitDtlList.lastSelectedRecord.set('CardText', CardText.getValue());
        }
    }, this);
}
function MECopyBenefitButtonHandler(button, option) {

    var Plancode = Ext.getCmp('PBMMEPlanMaster-CopyPlanCode').editValue;
    if (Plancode == '' || Plancode == 0) {
        Ext.MessageBox.alert(login.modulename, "Plese Select Copy Plan !");
        return true;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/GeneralPBM.aspx',
        params: {
            action: 'MECopyBenefit',
            Plancode: Plancode
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MECopyBenefitComplete, this);
}

function MECopyBenefitComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MECopyBenefitComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {
        var total = 0;
        var PBMPlanBePBMMEPlanBenefitDtlListnefitDtlList = Ext.getCmp('PBMMEPlanBenefitDtlList');
        for (cnt = 0; cnt < responseText.benifitdatum.length; cnt++) { //Benefit Detail
            var BenefitRecord = responseText.benifitdatum[cnt];
            PBMMEPlanBenefitDtlList.storeId += 1;
            var newRecord = new PBMMEPlanBenefitDtlList.recordType({
                ID: PBMMEPlanBenefitDtlList.storeId,
                Serialno: PBMMEPlanBenefitDtlList.storeId,
                Plan_Code: 1, // FK
                BenefitIDCode: BenefitRecord.BenefitIDCode,
                BenefitIDName: BenefitRecord.BenefitIDName,
                BenefitName: BenefitRecord.BenefitName,
                DefaultPremium: BenefitRecord.DefaultPremium,
                BenefitTypeCode: BenefitRecord.BenefitTypeCode,
                BenefitTypeName: BenefitRecord.BenefitTypeName,
                StatusCode: BenefitRecord.StatusCode,
                StatusName: BenefitRecord.StatusName,
                Remarks: BenefitRecord.Remarks,
                LegalentityCode: BenefitRecord.LegalentityCode,
                CustomerCode: BenefitRecord.CustomerCode,
                ApplySettingPremium: BenefitRecord.ApplySettingPremium,
                ApplyFullPermiumRefund: BenefitRecord.ApplyFullPermiumRefund,
                CardText: BenefitRecord.CardText,
                ParentName: BenefitRecord.ParentName,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            total += BenefitRecord.DefaultPremium;
            PBMMEPlanBenefitDtlList.stopEditing();
            PBMMEPlanBenefitDtlList.store.add(newRecord);
            PBMMEPlanBenefitDtlList.store.totalLength = PBMMEPlanBenefitDtlList.store.getTotalCount() + 1;
            PBMMEPlanBenefitDtlList.pageBar.updateInfo();

        }

        var PBMMEPlanAreaDtlList = Ext.getCmp('PBMMEPlanAreaDtlList');
        for (cnt = 0; cnt < responseText.areadatum.length; cnt++) {  //age Detail
            var AreaRecord = responseText.areadatum[cnt];
            PBMMEPlanAreaDtlList.storeId += 1;
            var AreaNewRecord = new PBMMEPlanAreaDtlList.recordType({
                ID: PBMMEPlanAreaDtlList.storeId,
                Serialno: PBMMEPlanAreaDtlList.storeId,
                Plan_Code: 1,  // FK
                GeoGraphicCode: AreaRecord.GeoGraphicCode,
                GeoGraphicName: AreaRecord.GeoGraphicName,
                GAName: AreaRecord.GAName,
                StatusCode: AreaRecord.StatusCode,
                StatusName: AreaRecord.StatusName,
                LegalentityCode: AreaRecord.LegalentityCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                Remarks: AreaRecord.Remarks,
                CustomerCode: AreaRecord.CustomerCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            PBMMEPlanAreaDtlList.stopEditing();
            PBMMEPlanAreaDtlList.store.add(AreaNewRecord);
            PBMMEPlanAreaDtlList.store.totalLength = PBMMEPlanAreaDtlList.store.getTotalCount() + 1;
            PBMMEPlanAreaDtlList.pageBar.updateInfo();
        }

        var PBMMEPlanNetwokDtlList = Ext.getCmp('PBMMEPlanNetwokDtlList');
        for (cnt = 0; cnt < responseText.networkdatum.length; cnt++) {  //network Detail
            var NetworkRecord = responseText.networkdatum[cnt];
            PBMMEPlanNetwokDtlList.storeId += 1;
            var NetworkNewRecord = new PBMMEPlanNetwokDtlList.recordType({
                ID: PBMMEPlanNetwokDtlList.storeId,
                Serialno: PBMMEPlanNetwokDtlList.storeId,
                Plan_Code: 1,  // FK
                NetworkIDCode: NetworkRecord.NetworkIDCode,
                NetworkIDName: NetworkRecord.NetworkIDName,
                NetworkName: NetworkRecord.NetworkName,
                StatusCode: NetworkRecord.StatusCode,
                StatusName: NetworkRecord.StatusName,
                ApplicableForCode: NetworkRecord.ApplicableForCode,
                ApplicableForName: NetworkRecord.ApplicableForName,
                Remarks: NetworkRecord.Remarks,
                LegalentityCode: NetworkRecord.LegalentityCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CustomerCode: NetworkRecord.CustomerCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            PBMMEPlanNetwokDtlList.stopEditing();
            PBMMEPlanNetwokDtlList.store.add(NetworkNewRecord);
            PBMMEPlanNetwokDtlList.store.totalLength = PBMMEPlanNetwokDtlList.store.getTotalCount() + 1;
            PBMMEPlanNetwokDtlList.pageBar.updateInfo();
        }

        var PBMMEPlanProviderDtlList = Ext.getCmp('PBMMEPlanProviderDtlList');
        for (cnt = 0; cnt < responseText.providerdatum.length; cnt++) {  //provider Detail
            var ProviderRecord = responseText.providerdatum[cnt];
            PBMMEPlanProviderDtlList.storeId += 1;
            var ProviderNewRecord = new PBMMEPlanProviderDtlList.recordType({
                ID: PBMMEPlanProviderDtlList.storeId,
                Serialno: PBMMEPlanProviderDtlList.storeId,
                Plan_Code: 1,  // FK
                ProviderCode: ProviderRecord.ProviderCode,
                ProviderName: ProviderRecord.ProviderName,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CustomerCode: ProviderRecord.CustomerCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            PBMMEPlanProviderDtlList.stopEditing();
            PBMMEPlanProviderDtlList.store.add(ProviderNewRecord);
            PBMMEPlanProviderDtlList.store.totalLength = PBMMEPlanProviderDtlList.store.getTotalCount() + 1;
            PBMMEPlanProviderDtlList.pageBar.updateInfo();

        }

        var PBMMEPlanEmiratesDetList = Ext.getCmp('PBMMEPlanEmiratesDetList');
        for (cnt = 0; cnt < responseText.emiratedatum.length; cnt++) {  //emirates Detail
            var EmirateRecord = responseText.emiratedatum[cnt];
            PBMMEPlanEmiratesDetList.storeId += 1;
            var emirateNewRecord = new PBMMEPlanEmiratesDetList.recordType({
                ID: PBMMEPlanEmiratesDetList.storeId,
                Serialno: PBMMEPlanEmiratesDetList.storeId,
                Plan_Code: 1,  // FK
                EmirateCode: EmirateRecord.EmirateCode,
                EmirateName: EmirateRecord.EmirateName,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                MEPlanAgeLimitList: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            PBMMEPlanEmiratesDetList.stopEditing();
            PBMMEPlanEmiratesDetList.store.add(emirateNewRecord);
            PBMMEPlanEmiratesDetList.store.totalLength = PBMMEPlanEmiratesDetList.store.getTotalCount() + 1;
            PBMMEPlanEmiratesDetList.pageBar.updateInfo();

            var PBMMEPlanAgeLimitList = Ext.getCmp('PBMMEPlanAgeLimitList');
            for (var subsubcnt = 0; subsubcnt < responseText.subemiratedatum.length ; subsubcnt++) { //Subreport
                var SubDtlRecord = responseText.subemiratedatum[subsubcnt];
                PBMMEPlanAgeLimitList.storeId += 1;
                var SubServiceID = PBMMEPlanAgeLimitList.storeId;
                if (EmirateRecord.ID != SubDtlRecord.PlanEmirateCode) continue;
                var SubsubnewRecord = new PBMMEPlanAgeLimitList.recordType({

                    ID: SubServiceID,
                    Serialno: SubServiceID,
                    PlanEmirateCode: PBMPlanEmiratesDetList.storeId,
                    AgeFrom: SubDtlRecord.AgeFrom,
                    AgeTo: SubDtlRecord.AgeTo,
                    GenderCode: SubDtlRecord.GenderCode,
                    GenderName: SubDtlRecord.GenderName,
                    ApplicableForCode: SubDtlRecord.ApplicableForCode,
                    ApplicableForName: SubDtlRecord.ApplicableForName,
                    Premium: SubDtlRecord.Premium,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CardText: SubDtlRecord.CardText,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true

                });
                PBMMEPlanAgeLimitList.stopEditing();
                PBMMEPlanAgeLimitList.store.add(SubsubnewRecord);
                PBMMEPlanAgeLimitList.store.totalLength = PBMMEPlanAgeLimitList.store.getTotalCount() + 1;
                PBMMEPlanAgeLimitList.pageBar.updateInfo();
            }
        }
    }
}
//function PlanMasterBenefitSetting(record) {

//    PlanCode = Ext.getCmp('NGIPlanMaster').selectedIndex;
//    if (PlanCode == -1) {
//        Ext.MessageBox.alert(login.modulename, "You are not allow to make Benefit Setting. Please save the reocrd first !");
//        return true;
//    }

//    if (record.get('BenefitIDCode') == null) {
//        Ext.MessageBox.alert(login.modulename, "Please Select the Benefit ID!");
//        return true;
//    }
//    else BenefitRecord.push(record.data);

//    showMask();
//    Ext.Ajax.request({
//        url: 'tools/HumanResources/HRGeneralRequest.aspx',
//        params: {
//            action: 'LoadBenefitSetting',
//            PlanCode: PlanCode,
//            BenefitCode: record.get('BenefitIDCode')

//        },
//        method: 'POST',
//        failure: function (result, request) {
//            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//        },
//        timeout: 1200000,
//        scope: this
//    });
//    Ext.Ajax.on('requestcomplete', LoadBenefitSettingComplete, this);

//}
//function LoadBenefitSettingComplete(conn, response) {

//    hideMask();
//    Ext.Ajax.un('requestcomplete', LoadBenefitSettingComplete, this);
//    var responseText = Ext.util.JSON.decode(response.responseText);

//    if (responseText.success) {
//        var BenefitSetting = new Ext.biz.WidgetInfo();
//        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.BenefitsSetting';
//        var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/BenefitsSetting.xml';
//        var WidgetTitle = 'Benefit Setting';
//        BenefitSetting.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
//    }
//}
function PBMMEGroupMaster(form, login) {
    if (!form.isView) {
        var status = Ext.getCmp('PBMMEGroupMaster-StatusCode');
        status.setComboValue(0);

        var CountryCode = Ext.getCmp('PBMMEGroupBillingDetail-CountryCode');
        if (CountryCode) CountryCode.on('select', function (combo, record, index) {
            Ext.getCmp('PBMMEGroupBillingDetail-StateCode').enable();
        }, this);
        var StateCode = Ext.getCmp('PBMMEGroupBillingDetail-StateCode');
        if (StateCode) StateCode.on('select', function (combo, record, index) {
            Ext.getCmp('PBMMEGroupBillingDetail-CityCode').enable();
        }, this);
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('PBMMEGroupBillingDetail-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
        }, this);
        var CityCode = Ext.getCmp('PBMMEGroupBillingDetail-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('PBMMEGroupBillingDetail-StateCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
        }, this);
    }
}
function PBMMEGroupContact(form, login) {


    var M1 = Ext.getCmp('PBMMEGroupContact-Mobile');
    var M2 = Ext.getCmp('PBMMEGroupContact-Phone');
    var Em = Ext.getCmp('PBMMEGroupContact-Email');

    M1.clearInvalid();
    M1.allowBlank = true;
    M2.clearInvalid();
    M2.allowBlank = true;
    Em.clearInvalid();
    Em.allowBlank = true;


    var IncludeInNotifications = Ext.getCmp('PBMMEGroupContact-IncludeInNotfication');
    if (!form.isView) {
        IncludeInNotifications.on('check', onPBMMEGroupIncludeInNotificationsCheck, this);
    }
}


function onPBMMEGroupIncludeInNotificationsCheck(checkBox, checked) {
    var Mobile1 = Ext.getCmp('PBMMEGroupContact-Mobile');
    var Phone = Ext.getCmp('PBMMEGroupContact-Phone');
    var EMail = Ext.getCmp('PBMMEGroupContact-Email');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Phone.allowBlank = false;
        Phone.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Phone.allowBlank = true;
        Phone.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}
function PBMMEGroupCategories(form, login) {
    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var GroupCode = Ext.getCmp('PBMMEGroupCategories-GroupCode');
            GroupCode.setComboValue(isAdditinalInfoValue);
            GroupCode.disable();
        }
    }
}
function PBMMEGroupBillingDtl(form, login) {
    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var GroupCode = Ext.getCmp('PBMMEGroupBillingDtl-GroupCode');
            GroupCode.setComboValue(isAdditinalInfoValue);
            GroupCode.disable();
        }
    }
    if (form.selectedIndex == -1) {
        Ext.getCmp('PBMMEGroupBillingDtl-StateCode').disable();
        Ext.getCmp('PBMMEGroupBillingDtl-CityCode').disable();
    }
    var CountryCode = Ext.getCmp('PBMMEGroupBillingDtl-CountryCode');
    if (CountryCode) CountryCode.on('select', function (combo, record, index) {
        Ext.getCmp('PBMMEGroupBillingDtl-StateCode').enable();
    }, this);
    var StateCode = Ext.getCmp('PBMMEGroupBillingDtl-StateCode');
    if (StateCode) StateCode.on('select', function (combo, record, index) {
        Ext.getCmp('PBMMEGroupBillingDtl-CityCode').enable();
    }, this);
    if (StateCode) StateCode.on('beforequery', function (evt) {
        var CountryCode = Ext.getCmp('PBMMEGroupBillingDtl-CountryCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
    }, this);
    var CityCode = Ext.getCmp('PBMMEGroupBillingDtl-CityCode');
    if (CityCode) CityCode.on('beforequery', function (evt) {
        var StateCode = Ext.getCmp('PBMMEGroupBillingDtl-StateCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
    }, this);
}
function PBMMEExclusionGroupMaster(form, login) {

    if (form.selectedIndex != -1 && !form.isView) {
        //Ext.getCmp('PBMExclusionGroupMaster').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        //    Ext.getCmp('PBMExclusionGroupMaster-Description').setValue(Record.get('Description'));

        //}, this);
        Ext.getCmp('PBMMEExclusionGroupMaster').getSelectionModel().on('rowselect', onPBMMEExclusionDtlSelect, this);
        Ext.getCmp('PBMMEExclusionGroupMaster').on('rowclick', function (grid, rowIndex, e) {
            var Record = grid.store.getAt(rowIndex);
            Ext.getCmp('PBMMEExclusionGroupMaster-Description').setValue(Record.get('Description'));
        }, this);
    }

    if (!form.isView) {
        if (form.selectedIndex == -1) {
            Ext.getCmp('PBMMEExclusionGroupMaster-StatusCode').setComboValue(0);
            Ext.getCmp('PBMMEExclusionGroupMaster-StatusCode').disable();
        }


        var VersionCode = Ext.getCmp('PBMMEExclusionGroupMaster-VersionCode');
        var TypeCode = Ext.getCmp('PBMMEExclusionGroupMaster-TypeCode');
        var DetailCode = Ext.getCmp('PBMMEExclusionGroupMaster-DetailCode');

        if (VersionCode) VersionCode.on('beforequery', function (evt) {
            var TypeCode = Ext.getCmp('PBMMEExclusionGroupMaster-TypeCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "VERSIONCODE in (Select versioncode from AV_TYPE_VERSIONS where versioncode in(select  VERSIONCODE from AV_ACTIVITY_DETAILS where typecode=" + TypeCode + "))";
        }, this);



        if (DetailCode) DetailCode.on('beforequery', function (evt) {
            var VersionCod = Ext.getCmp('PBMMEExclusionGroupMaster-VersionCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "DETAILCODE in(select DETAILCODE from AV_VERSION_DETALIS where versioncode=" + VersionCod + ")";
        }, this);

    }

}
function onPBMMEExclusionDtlSelect(SelectionModel, rowIndex, Record) {
    Ext.getCmp('PBMMEExclusionGroupMaster-Description').setValue(Record.get('Description'));
}
function PBMMEMembers(form, login) {

    if (!form.isView) {

        var Parent = Ext.getCmp('PBMMEMembers-ParentMemberCode');
        Parent.disable();
        var Relation = Ext.getCmp('PBMMEMembers-RelationCode');
        var gendercode = Ext.getCmp('PBMMEMembers-GenderCode');
        var MemberTypeCode = Ext.getCmp('PBMMEMembers-Member_TypeCode');
        var StatusCode = Ext.getCmp('PBMMEMembers-StatusCode');
        var MemberType = Ext.getCmp('PBMMEMembers-Member_TypeCode').editValue;

        if (form.selectedIndex == -1) {
            Relation.setComboValue(15);
            Relation.disable();
            MemberTypeCode.setComboValue(1);
            StatusCode.setComboValue(0);
            StatusCode.disable();

        }
        var GroupCode = Ext.getCmp('PBMMEMembers-Group_Code');
        var CategoryCode = Ext.getCmp('PBMMEMembers-CategoryCode');

        if (GroupCode) GroupCode.on('select', function (combo, record, index) {
            CategoryCode.clearValue();
            var CategoryCount = Ext.getCmp('PBMMEMembers-CategoryCount').getValue();
            if (CategoryCount == 0 || CategoryCount == '') {
                Ext.MessageBox.alert(login.modulename, 'Category Does not Maped');
                return;
            }
        }, this);
        if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE in (select CATEGORY_CODE from AV_GROUP_CATEGORIES where Status=0 and  GROUP_CODE=" + GroupCode.editValue + ")";
        }, this);

        /*
        var DOB = Ext.getCmp('PBMMembers-Date_of_birth');
        if (DOB) DOB.on('valid', function (text1, oldval, newval) {

            var DOB1 = Ext.getCmp('PBMMembers-Date_of_birth').getValue();
            var CurDate = new Date();
            var Month = (CurDate.getMonth() - DOB1.getMonth()) + ((CurDate.getFullYear() - DOB1.getFullYear()) * 12);
            var age = Math.ceil(Month / 12);

            if (Math.ceil(Month / 12) > 65) {
                Ext.MessageBox.alert(login.modulename, 'Age Should not greater then 65!');
                DOB1.setValue('');
                //  gridRecord.set('Date_of_birth', '');
                return;
            }
        }, this);
        */
        var SubGroup = Ext.getCmp('PBMMEMembers-ParentGroupCode');
        if (SubGroup) SubGroup.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " IG.PARENT_GROUP=" + GroupCode.editValue + "";
        }, this);

        if (gendercode) gendercode.on('select', function (combo, record, index) {
            var MemberType = Ext.getCmp('PBMMEMembers-Member_TypeCode').editValue;
            if (MemberType == 0) {
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
            }
            if (MemberType == 0) {
                if (gendercode.editValue == 0) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE=' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 1) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE= ' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 2) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from AV_members where MEMBER_CODE= ' + Parent.editValue + ')';
                    }
                }
                var check = Ext.getCmp('PBMMEMembers-Member_TypeCode').getValue();
                if (check != '') {
                    Relation.enable();
                    Relation.clearValue();
                    Relation.allowBlank = false;
                    Relation.isValid();
                }

            }

        }, this);
        if (Relation) Relation.on('beforequery', function (evt) {

            if (gendercode.editValue == 0) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '10,11,15,1,2,3,4';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE=' + Parent.editValue;
                }
            }
            if (gendercode.editValue == 1) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '10,11,15,5,6,7,8';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE= ' + Parent.editValue;
                }
            }
            if (gendercode.editValue == 2) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                if (Parent.getValue() != 0 && Parent.getValue() != '') {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from AV_members where MEMBER_CODE= ' + Parent.editValue + ')';
                }
            }
            var check = Ext.getCmp('PBMMEMembers-Member_TypeCode').getValue();
            if (check != '') {
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
            }
        }, this);

        if (gendercode) gendercode.on('clear', function (e) {
            Relation.clearValue();
            Relation.allowBlank = false;
            Relation.isValid();

        }, this);


        if (Parent) Parent.on('select', function (combo, record, index) {
            var MemberType = Ext.getCmp('PBMMEMembers-Member_TypeCode').editValue;
            if (MemberType == 0) {
                if (gendercode.editValue == 0) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,1,2,3,4';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,1,2,3,4)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE=' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 1) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '10,11,15,5,6,7,8';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '10,11,15,5,6,7,8)  and constantValue not in(select Decode(GENDER,0,4,1,8) from AV_members where MEMBER_CODE= ' + Parent.editValue;
                    }
                }
                if (gendercode.editValue == 2) {
                    Relation.lastQuery = '1=2';
                    Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
                    if (Parent.getValue() != 0 && Parent.getValue() != '') {
                        Relation.lastQuery = '1=2';
                        Relation.constantFilter = '0,1,2,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20 ,(select Decode(GENDER,0,8,1,4) from AV_members where MEMBER_CODE= ' + Parent.editValue + ')';
                    }
                }
                var check = Ext.getCmp('PBMMEMembers-Member_TypeCode').getValue();
                if (check != '') {
                    Relation.enable();
                    Relation.clearValue();
                    Relation.allowBlank = false;
                    Relation.isValid();
                }
            }
        }, this);
        if (MemberTypeCode) MemberTypeCode.on('select', function (combo, record, index) {

            var MemberType = Ext.getCmp('PBMMEMembers-Member_TypeCode').editValue;

            if (MemberType == 0) {//Depent
                Relation.enable();
                Relation.clearValue();
                Relation.allowBlank = false;
                Relation.isValid();
                var Parent = Ext.getCmp('PBMMEMembers-ParentMemberCode');
                Parent.enable();
                Parent.allowBlank = false;
                Parent.isValid();
            }
            else {//self
                Relation.clearValue();
                //Relation.allowBlank = true;
                //Relation.isValid();
                Relation.setComboValue(15);
                Relation.disable();
                var Parent = Ext.getCmp('PBMMEMembers-ParentMemberCode');
                Parent.disable();
                Parent.allowBlank = true;
                Parent.isValid();
            }

        }, this);
        if (MemberTypeCode) MemberTypeCode.on('clear', function (e) {
            Relation.clearValue();
            Relation.allowBlank = true;
            Relation.isValid();
            Relation.disable();
        }, this);



        var ParentMemberCode = Ext.getCmp('PBMMEMembers-ParentMemberCode');
        if (ParentMemberCode) ParentMemberCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mem.MEMBER_TYPE=1 ";

        }, this);


    }

}
function PBMMEMemberBilling(form, login) {
    /*
    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var MemberIDCode = Ext.getCmp('PBMMemberBilling-MemberIDCode');
            var Member_Name = Ext.getCmp('PBMMemberBilling-Member_Name');
            MemberIDCode.setComboValue(isAdditinalInfoValue);
            Member_Name.setValue(isAdditinalInfoRecord.get('First_Name') + " " + isAdditinalInfoRecord.get('Last_Name'));
            MemberIDCode.disable();
        }
    }
    */
    if (form.selectedIndex == -1) {
        Ext.getCmp('PBMMEMemberBilling-StateCode').disable();
        Ext.getCmp('PBMMEMemberBilling-CityCode').disable();
    }
    var CountryCode = Ext.getCmp('PBMMEMemberBilling-CountryCode');
    if (CountryCode) CountryCode.on('select', function (combo, record, index) {
        Ext.getCmp('PBMMEMemberBilling-StateCode').enable();
    }, this);
    var StateCode = Ext.getCmp('PBMMEMemberBilling-StateCode');
    if (StateCode) StateCode.on('select', function (combo, record, index) {
        Ext.getCmp('PBMMEMemberBilling-CityCode').enable();
    }, this);
    if (StateCode) StateCode.on('beforequery', function (evt) {
        var CountryCode = Ext.getCmp('PBMMEMemberBilling-CountryCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
    }, this);
    var CityCode = Ext.getCmp('PBMMEMemberBilling-CityCode');
    if (CityCode) CityCode.on('beforequery', function (evt) {
        var StateCode = Ext.getCmp('PBMMEMemberBilling-StateCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
    }, this);
}
function PBMMEMembersExclusions(form, login) {

    var VersionCode = Ext.getCmp('PBMMEMembersExclusions-VersionCode');
    var TypeCode = Ext.getCmp('PBMMEMembersExclusions-TypeCode');
    var DetailCode = Ext.getCmp('PBMMEMembersExclusions-DetailCode');

    if (TypeCode) TypeCode.on('select', function (combo, record, index) {
        VersionCode.clearValue();
        DetailCode.clearValue();
    }, this);

    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        DetailCode.clearValue();
    }, this);


    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        var TypeCode = Ext.getCmp('PBMMEMembersExclusions-TypeCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " itv.VERSIONCODE in (select  VERSIONCODE from AV_ACTIVITY_DETAILS where typecode=" + TypeCode + ")";
    }, this);



    if (DetailCode) DetailCode.on('beforequery', function (evt) {
        var VersionCod = Ext.getCmp('PBMMEMembersExclusions-VersionCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "DETAILCODE in(select DETAILCODE from AV_VERSION_DETALIS where versioncode=" + VersionCod + ")";
    }, this);

}
function PBMMETypeVersions(form, login) {
}
//var Type = '';
//function TypeVersionUploadCodeType(form, login) {

//    var TypeCode = Ext.getCmp('PBMTypeVersions-TypeCode').getValue();
//    if (TypeCode == '' || TypeCode == null) {
//        Ext.MessageBox.alert(login.modulename, 'Please select Type first !');
//        return true;
//    }
//    else
//        Type = TypeCode;

//    var UploadCodeType = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.SetUp.UploadCodeType';
//    var Url = '/forms/HumanResources/NGI/SetUp/UploadCodeType.xml';
//    var PKey = -1;
//    var WidgetTitle = 'Upload Code Type';
//    UploadCodeType.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'CodeTypeImportData');
//}
function PBMMEStandardPackages(form, login) {

    if (!form.isView) {

        var active = Ext.getCmp('PBMMEStandardPackages-Active');
        active.on('check', PBMMEactiveCheck, this);

        var PBMMEStandardPackagesDtlList = Ext.getCmp('PBMMEStandardPackagesDtlList');

        if (PBMMEStandardPackagesDtlList) PBMMEStandardPackagesDtlList.on('beforeedit', onPBMMEStandardPackagesDtlbeforeedit, this);

        var VersionDescription = Ext.getCmp('PBMMEStandardPackages-VersionDescription');
        var PBMMEStandardPackagesDtlList = Ext.getCmp('PBMMEStandardPackagesDtlList');
        PBMMEStandardPackagesDtlList.on('rowclick', function (grid, rowIndex, Record) {
            VersionDescription.setValue(grid.store.getAt(rowIndex).get('VersionDetail'));
            PBMMEStandardPackagesDtlList.lastSelectedRecord = grid.store.getAt(Index);
        }, this);

        PBMMEStandardPackagesDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            VersionDescription.setValue(Record.get('VersionDetail'));
            PBMMEStandardPackagesDtlList.lastSelectedRecord = Record;
        }, this);

        VersionDescription.on('change', function (field, newval, oldval) {
            if (PBMMEStandardPackagesDtlList.lastSelectedRecord)
                PBMMEStandardPackagesDtlList.lastSelectedRecord.set('VersionDetail', field.getValue());
        }, this);

    }

}


function onPBMMEStandardPackagesDtlbeforeedit(e) {

    var cm = e.grid.getColumnModel();
    if (e.record.get('Validto') != '01-01-0001') {
        cm.getColumnById('Validfrom').editable = false;
    }
    else
        cm.getColumnById('Validfrom').editable = true;
}

function PBMMEactiveCheck(checkBox, checked) {

    if (checked) {
        var PBMMEStandardPackagesDtlList = Ext.getCmp('PBMMEStandardPackagesDtlList');
        for (var pcnt = 0; pcnt < PBMMEStandardPackagesDtlList.store.getCount() ; pcnt++) {
            var select = PBMMEStandardPackagesDtlList.store.getAt(pcnt);
            select.set('Active', true);
        }
    }
    else {
        var PBMMEStandardPackagesDtlList = Ext.getCmp('PBMMEStandardPackagesDtlList');
        for (var pcnt = 0; pcnt < PBMMEStandardPackagesDtlList.store.getCount() ; pcnt++) {
            var deselect = PBMMEStandardPackagesDtlList.store.getAt(pcnt);
            deselect.set('Active', false);
        }
    }
}
function PBMMEClinicians(form, login) {



    if (!form.isView) {

        //State filter based on Country 
        var StateCode = Ext.getCmp('PBMMEClinicianProvider-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('PBMMEClinicianProvider-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        //City filtered based on State

        var CityCode = Ext.getCmp('PBMMEClinicianProvider-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('PBMMEClinicianProvider-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        }, this);

        var PBMMEClinicianProviderList = Ext.getCmp('PBMMEClinicianProviderList');
        PBMMEClinicianProviderList.getColumnModel().setHidden(6, true);
    }
}


function PBMMEProvider(form, login) {

    if (!form.isView) {

        //State filter based on Country 
        var ProLocationCode = Ext.getCmp('PBMMEProvider-ProLocationCode');
        var CountryCode = Ext.getCmp('PBMMEProvider-CountryCode');
        var CityCode = Ext.getCmp('PBMMEProvider-CityCode');
        var ClaimQuoteTypeCode = Ext.getCmp('PBMMEProvider-ClaimQuoteTypeCode');
        var PBMMEProviderPharmacyTariffDetailsList = Ext.getCmp('PBMMEProviderPharmacyTariffDetailsList');

        PBMMEProviderPharmacyTariffDetailsList.disable();
        if (ClaimQuoteTypeCode) ClaimQuoteTypeCode.on('select', function (combo, record, index) {
            if (ClaimQuoteTypeCode.editValue == 1212) {
                PBMMEProviderPharmacyTariffDetailsList
                PBMMEProviderPharmacyTariffDetailsList.enable();

            }
            else {
                PBMMEProviderPharmacyTariffDetailsList.disable();
                onBusinessTypeclear('PBMMEProviderPharmacyTariffDetailsList');
            }
        }, this);

        var ProviderTypeCode = Ext.getCmp('PBMMEProvider-ProviderTypeCode');
        ProviderTypeCode.constantFilter = '0,1,2,5,8,9';

        if (CityCode) CityCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('PBMMEProvider-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        /*//City filtered based on State
        if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
            var CityCode = Ext.getCmp('PBMProvider-CityCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + CityCode + "";
        }, this);*/
        /*
           //location filtered based on city
           var ProLocationCode = Ext.getCmp('PBMProvider-ProLocationCode');
           if (ProLocationCode) ProLocationCode.on('beforequery', function (evt) {
               var CityCode = Ext.getCmp('PBMProvider-CityCode').getValue();
               evt.combo.lastQuery = '1=2';
               evt.combo.store.baseParams.filter = "PLACECODE=" + CityCode + "";
           }, this);
           */
        CityCode.on('select', function (combo, record, index) {
            ProLocationCode.clearValue();
        }, this);

        CountryCode.on('select', function (combo, record, index) {
            CityCode.clearValue();
            //ProLocationCode.clearValue();
        }, this);

        /*  CityCode.on('select', function (combo, record, index) {
             ProLocationCode.clearValue();
          }, this);*/

        /*
        //State filter based on Country  for Billing Detail
        var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode');
        if (DtlStateCode) DtlStateCode.on('beforequery', function (evt) {
            var DtlCountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + DtlCountryCode + "";
        }, this);

        //City filtered based on State for Billing Detail

        var DtlCityCode = Ext.getCmp('NGIProviderBillingDetail-CityCode');
        if (DtlCityCode) DtlCityCode.on('beforequery', function (evt) {
            var DtlStateCode = Ext.getCmp('NGIProviderBillingDetail-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PlaceCode=" + DtlStateCode + "";
        }, this);
        */
        Ext.getCmp('PBMMEProvider-ProviderStatusCode').setComboValue(0);
        Ext.getCmp('PBMMEProvider-ProviderStatusCode').disable();
        //Ext.getCmp('PBMProvider-MaxMultiFactorHaad').setValue(login.providersetting.MaxMultiFactorHaad);
        //Ext.getCmp('PBMProvider-MaxCPTtoAlert').setValue(login.providersetting.MaxCPTtoAlert);
        var ProviderTypeCode = Ext.getCmp('PBMMEProvider-ProviderTypeCode');
        var GroupCode = Ext.getCmp('PBMMEProvider-HeadOfficeCode');
        var Providername = Ext.getCmp('PBMMEProvider-ProviderName');
        var ProviderAlternativeName = Ext.getCmp('PBMMEProvider-ProviderAlternativeName');
        var ClaimQuoteTypeCode = Ext.getCmp('PBMMEProvider-ClaimQuoteTypeCode');
        var CountryCode = Ext.getCmp('PBMMEProvider-CountryCode');
        var StateCode = Ext.getCmp('PBMMEProvider-StateCode');
        var CityCode = Ext.getCmp('PBMMEProvider-CityCode');
        var MobileNo = Ext.getCmp('PBMMEProvider-MobileNo');
        var EMail = Ext.getCmp('PBMMEProvider-EMail');
        var ProviderGoogleAddress = Ext.getCmp('PBMMEProvider-ProviderGoogleAddress');
        var WebSite = Ext.getCmp('PBMMEProvider-WebSite');
        var ProviderMainPhone = Ext.getCmp('PBMMEProvider-ProviderMainPhone');
        var FaxNumber = Ext.getCmp('PBMMEProvider-FaxNumber');

        if (ProviderTypeCode) ProviderTypeCode.on('select', function (combo, record, index) {
            if (combo.getValue() == 6) {
                GroupCode.disable();
                GroupCode.clearValue();
            }
            else {
                GroupCode.enable();
            }
        }, this);

        if (form.selectedIndex != -1 && !form.isView) {

            if (ProviderTypeCode.editValue == 6) {
                GroupCode.disable();
            }
            else {
                GroupCode.enable();
            }
        }

        if (GroupCode) GroupCode.on('select', function (combo, record, index) {


            // Ext.getCmp('NGIProvider-ProviderName').setValue(null);
            //   Ext.getCmp('NGIProvider-ProviderName-ProviderAlternativeName').setv;
            Providername.setValue(null);
            ProviderAlternativeName.setValue(null);

            ClaimQuoteTypeCode.clearValue();
            CountryCode.clearValue();
            StateCode.clearValue();
            CityCode.clearValue();
            MobileNo.setValue(null);
            EMail.setValue(null);
            ProviderGoogleAddress.setValue(null);
            WebSite.setValue(null);
            ProviderMainPhone.setValue(null);
            FaxNumber.setValue(null);

        }, this);


        //var NGIProviderBillingDetailList = Ext.getCmp('NGIProviderBillingDetailList');

        //NGIProviderBillingDetailList.on('render', function (grid) {

        //    var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode');
        //    if (CountryCode) CountryCode.on('beforequery', function (evt) {
        //        var CountryCode = Ext.getCmp('NGIProviderBillingDetail-CountryCode').getValue();
        //        evt.combo.lastQuery = '1=2';
        //        evt.combo.store.baseParams.filter = "1=1";
        //    }, this);

        //    //var cm = grid.getColumnModel();
        //    //cm.config[1].hidden=true;
        //}, this);

    }


}
//checked
function PBMMEMarkHighPriorityProvider(form, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to add this provider as High Priority Provider?', function (button) {

        var PrimKey = Ext.getCmp('MEProvider').selectedIndex;
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PBMMEMarkHighPriorityProvider',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PBMMEMarkHighPriorityProviderComplete, this);

        }
        else
            return true;
    }, this);

}

function PBMMEMarkHighPriorityProviderComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', PBMMEMarkHighPriorityProviderComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        //Ext.getCmp('ID_NGIPROVIDER_editform').close();
    }

}

/*function PBMMarkBlackListProvider(form, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to add this provider into Black List?', function (button) {

        var PrimKey = Ext.getCmp('PBMProvider').selectedIndex;
        if (button == 'yes') {

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PBMMarkBlackListProvider',
                    PrimKey: PrimKey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PBMMarkBlackListProviderComplete, this);

        }
        else
            return true;
    }, this);
}

function PBMMarkBlackListProviderComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', PBMMarkBlackListProviderComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        //Ext.getCmp('ID_NGIPROVIDER_editform').close();
    }
}*/
//checked
function PBMMEProviderContact(form, login) {


    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('PBMMEProviderContact-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }

        var M1 = Ext.getCmp('PBMMEProviderContact-Mobile1');
        var M2 = Ext.getCmp('PBMMEProviderContact-Mobile2');
        var Em = Ext.getCmp('PBMMEProviderContact-EMail');

        var Name = Ext.getCmp('PBMMEProviderContact-Name');
        var AlternativeName = Ext.getCmp('PBMMEProviderContact-AlternativeName');


        if (Name) Name.on('change', function (field, newval, odlval) {
            AlternativeName.setValue(field.getValue());
        }, this);

        var IncludeInNotifications = Ext.getCmp('PBMMEProviderContact-IncludeInNotifications');
        if (!form.isView) {
            IncludeInNotifications.on('check', onPBMMEDIncludeInNotificationsCheck, this);
        }
    }
}
//checked
function onPBMMEDIncludeInNotificationsCheck(checkBox, checked) {
    var Mobile1 = Ext.getCmp('PBMMEProviderContact-Mobile1');
    var Mobile2 = Ext.getCmp('PBMMEProviderContact-Mobile2');
    var EMail = Ext.getCmp('PBMMEProviderContact-EMail');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Mobile2.allowBlank = false;
        Mobile2.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Mobile2.allowBlank = true;
        Mobile2.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}
//checked
function PBMMEProviderLicencesMapping(form, login) {

    if (!form.isView) {


        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('PBMMEProviderLicencesMapping-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
            Ext.getCmp('PBMMEProviderLicencesMapping-ProviderAlternativeName').setValue(isAdditinalInfoRecord.get('ProviderAlternativeName'));
            Ext.getCmp('PBMMEProviderLicencesMapping-ProviderTypeName').setValue(isAdditinalInfoRecord.get('ProviderTypeName'));
            Ext.getCmp('PBMMEProviderLicencesMapping-HeadOfficeName').setValue(isAdditinalInfoRecord.get('HeadOfficeName'));
            Ext.getCmp('PBMMEProviderLicencesMapping-IsFastTraceProvider').setValue(isAdditinalInfoRecord.get('IsFastTraceProvider'));
            Ext.getCmp('PBMMEProviderLicencesMapping-NOB').setValue(isAdditinalInfoRecord.get('NOB'));
            Ext.getCmp('PBMMEProviderLicencesMapping-ClaimQuoteTypeName').setValue(isAdditinalInfoRecord.get('ClaimQuoteTypeName'));
            Ext.getCmp('PBMMEProviderLicencesMapping-ProviderStatusName').setValue(isAdditinalInfoRecord.get('ProviderStatusName'));
        }

        if (form.selectedIndex == -1) {

            var ValidFrom = Ext.getCmp('PBMMEProviderLicencesMapping-ValidFrom');
            var ToDate = Ext.getCmp('PBMMEProviderLicencesMapping-ValidTo');
            ToDate.setValue((new Date()).add(Date.YEAR, 1).format(login.jsdateformat));

            ValidFrom.on('blur', function (field, newval, odlval) {
                ToDate.setValue((field.getValue()).add(Date.YEAR, 1).format(login.jsdateformat));
            }, this);
        }
        /*
        var HasGovernmentLicense = Ext.getCmp('PBMProviderLicencesMapping-HasGovernmentLicense');
        var LicenceIDCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceIDCode');
        var LicenceTypeCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceTypeCode');
        if (HasGovernmentLicense.getValue()) {
            LicenceIDCode.enable(); LicenceTypeCode.enable();
        }
        else {
            LicenceIDCode.disable(); LicenceTypeCode.disable();
        }

        var HasGovernmentLicense = Ext.getCmp('PBMProviderLicencesMapping-HasGovernmentLicense');
        HasGovernmentLicense.on('check', onPbmproviderHasGovernmentLicenseCheck, this);

        if (LicenceTypeCode) LicenceTypeCode.on('select', function (combo, record, index) {
            LicenceIDCode.clearValue();
        }, this);

        var LicenceIDCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceIDCode');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " LICENSE_TYPE in (select constantname from genconstant where CATEGORY='NGILICENCETYPE' and LANGUAGECODE='en-US' and CONSTANTVALUE=" + LicenceTypeCode.editValue + ")";
        }, this);
        */
    }
}

/*function onPbmproviderHasGovernmentLicenseCheck(checkBox, checked) {
    var LicenceIDCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceIDCode');
    var LicenceTypeCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceTypeCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}*/
//Checked
function PBMMEProviderBilling(form, login) {

    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('PBMMEProviderBilling-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
        //State filter based on Country 
        var StateCode = Ext.getCmp('PBMMEProviderBilling-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('PBMMEProviderBilling-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        //City filtered based on State

        var CityCode = Ext.getCmp('PBMMEProviderBilling-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('PBMMEProviderBilling-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        }, this);
    }

}
function PBMMEProviderSetting(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('PBMMEProviderSetting-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
    }
}


function PBMMEBenefitMaster(form, login) {

    if (!form.isView) {

        var StatusCode = Ext.getCmp('PBMMEBenefitMaster-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();

        var ApplicableCode = Ext.getCmp('PBMMEBenefitMaster-ApplicableCode');
        ApplicableCode.setComboValue(2);
    }

}
function PBMMEElementMaster(form, login) {

    if (!form.isView) {
        Ext.getCmp('PBMMEElementMaster-StatusCode').setComboValue(0);
    }
}



function MEUploadServiceType(form, login) {

    var UploadCode = Ext.getCmp('MEUploadServiceType-UploadCode');

    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_MCUPLOADSERVICETYPE')";
    }, this);


}

function MEDUploadServiceType(form, login) {

    var FileName = Ext.getCmp('MEUploadServiceType-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('MEUploadServiceType').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'MEUploadServiceTypeExcelColumns',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEDUploadServiceTypeComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}

function MEDUploadServiceTypeComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MEDUploadServiceTypeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PrimaryKey = Ext.getCmp('MEUploadServiceType').selectedIndex;
        var MenuID = 'ID_MCSERVICETYPE';
        var TemplateCode = Ext.getCmp('MEUploadServiceType-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEDUploadServiceTypeUploadPrcComplete, this);

    }

}
function MEDUploadServiceTypeUploadPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MEDUploadServiceTypeUploadPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('MEUploadServiceType').selectedIndex;
        var MenuID = 'ID_MCSERVICETYPE';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);

    }
}

function MEUploadServiceTypeDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('MEUploadServiceType-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderTraiffDownloadTemplatereqComplete, this);

}

function MEUploadServiceTypeVieworDownload(form, login) {
    var ClassName = 'SBS.Business.Objects.Medical.General.MEUploadServiceType';
    var Primary = Ext.getCmp('MEUploadServiceType').selectedIndex;

    var FileName = Ext.getCmp('MEUploadServiceType-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderTraiffVieworDownloadreqComplete, this);
}
function HRGradeRates(form, login) {
    if (!form.isView) {
        var HRGradeRatesDetailList = Ext.getCmp('HRGradeRatesDetailList');


        HRGradeRatesDetailList.getStore().on('update', function (store, Record, options) {
            if (Record.get('DiscountTypeCode') != 0) {// percentage
                if (Record.get('HrGradeValue') > 100) {
                    Ext.MessageBox.alert(login.modulename, 'Value should be less or equal to 100');
                    Record.set('HrGradeValue', 0);
                }
            }
        }, this);

        HRGradeRatesDetailList.on('rowclick', function (grid, rowIndex, Record) {
            var GradeRrd = grid.store.getAt(rowIndex);
            if (GradeRrd.get('DiscountTypeCode') != 0) {// percentage
                if (GradeRrd.get('HrGradeValue') > 100) {
                    Ext.MessageBox.alert(login.modulename, 'Value should be less or equal to 100');
                    GradeRrd.set('HrGradeValue', 0);
                }
            }
        }, this);

    }
}


function MonthlyAllowanceORdeductionsDtlLoad(form, login) {

    var PrimKey = Ext.getCmp('MonthlyAllowanceORdeductions').selectedIndex;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Save Record Before Load!");
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MonthlyAllowanceLoadButton',
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MonthlyAllowanceLoadComplete, this);
    }
}

function MonthlyAllowanceLoadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MonthlyAllowanceLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.MonthlyAllowanceForm = new Ext.form.FormPanel(responseText.MonthlyAllowanceCofig);


    this.MonthlyAllowanceForm.addButton({
        text: 'Select All',
        handler: function () {
            var MonthlyAllowanceEmpPopUpDtlList = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList');

            for (var cnt = 0; cnt < MonthlyAllowanceEmpPopUpDtlList.store.getCount() ; cnt++) {

                var PopupRecord = MonthlyAllowanceEmpPopUpDtlList.store.getAt(cnt);
                PopupRecord.set('Selectbutton', true);
            }
        },
        scope: this,
        tabIndex: this.MonthlyAllowanceForm.FormFieldsCount + 2
    });

    this.MonthlyAllowanceForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var MonthlyAllowanceEmpPopUpDtlList = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList');

            for (var cnt = 0; cnt < MonthlyAllowanceEmpPopUpDtlList.store.getCount() ; cnt++) {

                var PopupRecord = MonthlyAllowanceEmpPopUpDtlList.store.getAt(cnt);
                PopupRecord.set('Selectbutton', false);
            }
        },
        scope: this,
        tabIndex: this.MonthlyAllowanceForm.FormFieldsCount + 2
    });


    this.MonthlyAllowanceForm.addButton({
        text: 'Load',
        handler: function () {

            var MonthlyAllowanceORdeductionsDtlList = Ext.getCmp('MonthlyAllowanceORdeductionsDtlList');
            var selectcnt = 0;
            var EmployeePopUpDetList = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList');
            var count = EmployeePopUpDetList.store.getCount();
            var store = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList').getStore();
            var PKey = Ext.getCmp('MonthlyAllowanceORdeductions').selectedIndex;

            var DeductAmount = Ext.getCmp('MonthlyAllowanceEmpPopUp-Amount').getValue();

            for (var pcnt = 0; pcnt < EmployeePopUpDetList.store.getCount() ; pcnt++) {

                var PopupRecord = EmployeePopUpDetList.store.getAt(pcnt);

                if (!PopupRecord.get('Selectbutton')) continue;

                MonthlyAllowanceORdeductionsDtlList.storeId += 1;
                var ServiceID = MonthlyAllowanceORdeductionsDtlList.storeId;
                var newRecord = new MonthlyAllowanceORdeductionsDtlList.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    AllowanceDeductionsCode: (PKey == -1 ? 1 : PKey),
                    Employee_Code: PopupRecord.get('ID'),
                    Employee_Name: PopupRecord.get('Employee_Number'),
                    EmployeeName: PopupRecord.get('EmployeeFullName'),
                    EmployeeCode: PopupRecord.get('EmployeeCode'),
                    TypeCode: 1,
                    TypeName: 'Deductions',
                    Amount: DeductAmount,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MonthlyAllowanceORdeductionsDtlList.stopEditing();
                MonthlyAllowanceORdeductionsDtlList.store.add(newRecord);
                MonthlyAllowanceORdeductionsDtlList.store.totalLength = MonthlyAllowanceORdeductionsDtlList.store.getTotalCount() + 1;
                MonthlyAllowanceORdeductionsDtlList.pageBar.updateInfo();
            }
            this.MonthlyAllowanceFormWindow.close();
        },
        scope: this,
        formBind: true,
        tabIndex: this.MonthlyAllowanceForm.FormFieldsCount + 2
    });

    this.MonthlyAllowanceForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.MonthlyAllowanceFormWindow.close();
        },
        scope: this,
        tabIndex: this.MonthlyAllowanceForm.FormFieldsCount + 2
    });




    this.MonthlyAllowanceFormWindow = new Ext.Window({
        id: 'MonthlyAllowanceFormWindow',
        title: 'Monthly Allowance or Deductions',
        closable: true,
        minimizable: false,
        width: this.MonthlyAllowanceForm.width + 10,
        height: this.MonthlyAllowanceForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.MonthlyAllowanceForm]
    });
    this.MonthlyAllowanceForm.on('render', MonthlyAllowanceEmpPopUp, this);
    this.MonthlyAllowanceFormWindow.show();

}

function MonthlyAllowanceEmpPopUp(form, login) {
    /*
    FilterQry = "1=2";
    DetailStore = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.MonthlyAllowanceEmpPopUpDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
    */
}

function MonthlyAllowanceEmpPopUpSearch(button, options) {

    var OrgCode = Ext.getCmp('MonthlyAllowanceEmpPopUp-OrgCode');
    var LocationsCode = Ext.getCmp('MonthlyAllowanceEmpPopUp-LocationsCode');
    var GradeCode = Ext.getCmp('MonthlyAllowanceEmpPopUp-GradeCode');
    var DepartmentCode = Ext.getCmp('MonthlyAllowanceEmpPopUp-DepartmentCode');
    var Assignment_Set_Code = Ext.getCmp('MonthlyAllowanceEmpPopUp-Assignment_Set_Code');

    var FilterQry = '';

    if (OrgCode.getValue() !== '' && OrgCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " ORG.ORGANIZATIONS_CODE =" + OrgCode.editValue + "";
        else
            FilterQry += " and ORG.ORGANIZATIONS_CODE =" + OrgCode.editValue + "";
    }

    if (LocationsCode.getValue() !== '' && LocationsCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.HRLOCATION_CODE =" + LocationsCode.editValue + "";
        else
            FilterQry += " and gen.HRLOCATION_CODE =" + LocationsCode.editValue + "";
    }

    if (GradeCode.getValue() !== '' && GradeCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.GRADE_CODE =" + GradeCode.editValue + "";
        else
            FilterQry += " and gen.GRADE_CODE =" + GradeCode.editValue + "";
    }

    if (DepartmentCode.getValue() !== '' && DepartmentCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.DEPARTMENTCODE =" + DepartmentCode.editValue + "";
        else
            FilterQry += " and gen.DEPARTMENTCODE =" + DepartmentCode.editValue + "";
    }

    if (Assignment_Set_Code.getValue() !== '' && Assignment_Set_Code.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " py.ASSIGNMENT_SET_CODE =" + Assignment_Set_Code.editValue + "";
        else
            FilterQry += " and py.ASSIGNMENT_SET_CODE =" + Assignment_Set_Code.editValue + "";
    }

    DetailStore = Ext.getCmp('MonthlyAllowanceEmpPopUpDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.MonthlyAllowanceEmpPopUpDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }
}

/*
function MonthlyAllowancePosting(form, login) {

    var ElementCode = Ext.getCmp('MonthlyAllowanceORdeductions-ElementCode').editValue;
    var RefDate = Ext.getCmp('MonthlyAllowanceORdeductions-RefDate').getValue();
    var PrimKey = Ext.getCmp('MonthlyAllowanceORdeductions');
    if (PrimKey.selectedIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save Before Posting');
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ElementEntry',
                ElementCode: ElementCode,
                RefDate: RefDate,
                PrimKey: PrimKey.selectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ElementEntryComplete, this);
    }
}

function ElementEntryComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ElementEntryComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}

*/

function ServiceTypePriorRequest(form, login) {
    Ext.MessageBox.confirm('Information', 'Do you want to Make Prior Request for this Record?', function (button) {
        var selectIndex = Ext.getCmp('PatientService').selectedIndex;
        if (button == 'yes') {
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'ServiceTypePriorRequestPost',
                    selectIndex: selectIndex,
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', ServiceTypePriorRequestPostComplete, this);
        }
        else {
            return true;
        }
    }, this);
}

function ServiceTypePriorRequestPostComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ServiceTypePriorRequestPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }

}


function ServiceTypeViewLog(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ServiceTypeViewLogPost',
            Primary: selectIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ServiceTypeViewLogPostComplete, this);
}


function ServiceTypeViewLogPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ServiceTypeViewLogPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        this.ServiceTypeViewXmlForm = new Ext.FormPanel({
            title: 'Patient Service File',
            labelAlign: 'left',
            labelWidth: 105,
            autoHeight: true,
            width: 950,
            buttonAlign: 'center',
            method: 'POST',
            frame: true,
            monitorValid: true,
            items: [new Ext.form.TextArea({
                fieldLabel: 'Status Log',
                name: 'StatusLog',
                width: 800,
                height: 500,
                allowBlank: true,
                editable: false,
                readOnly: true,
                value: responseText.StatusLOG,
                tabIndex: 2
            })]
        });

        this.ServiceTypeViewXmlForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.ServiceTypeViewXmlFormWindow.close();
            },
            scope: this,
            tabIndex: this.ServiceTypeViewXmlForm.FormFieldsCount + 2
        });

        this.ServiceTypeViewXmlFormWindow = new Ext.Window({
            id: 'PatientServiceFile',
            title: 'Status Log',
            width: 950,
            //height:150,
            autoHeight: true,
            plain: true,
            animCollapse: true,
            constrainHeader: true,
            expandOnShow: true,
            bodyStyle: 'padding:0px',
            closeTips: 'Close',
            modal: true,
            items: [this.ServiceTypeViewXmlForm]
        });
        this.ServiceTypeViewXmlFormWindow.show();
    }
}

function ServiceTypeViewXml(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ServiceTypeViewXmlPost',
            Primary: selectIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ServiceTypeViewXmlPostComplete, this);
}

function ServiceTypeViewXmlPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ServiceTypeViewXmlPostComplete, this);
    var responseText = Ext.util.Format.htmlDecode(response.responseText);
    ////var responseText = Ext.util.JSON.decode(response.responseText);
    //if (!responseText.success) {
    //    Ext.MessageBox.alert(login.modulename, responseText.Msg);
    //} else {

    this.ServiceTypeViewXmlForm = new Ext.FormPanel({
        title: 'Patient Service File',
        labelAlign: 'left',
        labelWidth: 105,
        autoHeight: true,
        width: 950,
        buttonAlign: 'center',
        method: 'POST',
        frame: true,
        monitorValid: true,
        items: [new Ext.form.TextArea({
            fieldLabel: 'Patient Service File',
            name: 'PatientService',
            width: 800,
            height: 500,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: responseText,
            tabIndex: 2
        })]
    });

    this.ServiceTypeViewXmlForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ServiceTypeViewXmlFormWindow.close();
        },
        scope: this,
        tabIndex: this.ServiceTypeViewXmlForm.FormFieldsCount + 2
    });

    this.ServiceTypeViewXmlFormWindow = new Ext.Window({
        id: 'PatientServiceFile',
        title: 'Patient Service File',
        width: 950,
        //height:150,
        autoHeight: true,
        plain: true,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        bodyStyle: 'padding:0px',
        closeTips: 'Close',
        modal: true,
        items: [this.ServiceTypeViewXmlForm]
    });
    this.ServiceTypeViewXmlFormWindow.show();

}

function PatientNurseryPostCashier(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatientNurseryPostCashierReq',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientNurseryPostCashierReqComplete, this);
}

function PatientNurseryPostCashierReqComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PatientNurseryPostCashierReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}

function PatienClinicPostCashier(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatienClinicPostCashierReq',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatienClinicPostCashierReqComplete, this);
}

function PatienClinicPostCashierReqComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PatienClinicPostCashierReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}


function PatienLaboratryPostCashier(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatienLaboratryPostCashierReq',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatienLaboratryPostCashierReqComplete, this);
}

function PatienLaboratryPostCashierReqComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PatienLaboratryPostCashierReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}


function PatienServiceRequestPostCashier(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatienServiceRequestPostCashierReq',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatienServiceRequestPostCashierReqComplete, this);
}

function PatienServiceRequestPostCashierReqComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PatienServiceRequestPostCashierReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}


function PatienReceptionPostCashier(form, login) {
    var selectIndex = Ext.getCmp('PatientService').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatienReceptionPostCashierReq',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatienReceptionPostCashierReqComplete, this);
}

function PatienReceptionPostCashierReqComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PatienReceptionPostCashierReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}

function PostClinicToNursery(form, login) {


    var PrimKey = Ext.getCmp('PatientLoginClinic').selectedIndex;
    var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You Cant Post Before Save !');
        return;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostClinicToNursery',
            PrimKey: PrimKey,
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostClinicToLabComplete, this);
}

function PostClinicToLabComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostClinicToLabComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
    else {
        //Ext.MessageBox.alert(login.modulename, responseText.Msg);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').un('beforeclose', Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope.closeWindow, Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').on('close', Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope.afterCloseWind, Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').scope);
        Ext.getCmp('ID_PATIENTLOGINCCLINICS_editform').close();
    }
}

function ClinicianAppointment(form, login) {
    if (!form.isView) {
        var MecreatedBy = Ext.getCmp('ClinicianAppointment-MecreatedBy');
        var StatusCode = Ext.getCmp('ClinicianAppointment-StatusCode');
        var Appointmentdate = Ext.getCmp('ClinicianAppointment-Appointmentdate');
        StatusCode.disable();
        var SelectedIndex = Ext.getCmp('ClinicianAppointment').selectedIndex;
        if (SelectedIndex == -1) {
            MecreatedBy.setValue(login.UserName);
            StatusCode.setComboValue(3);
        }
        var CDCode = Ext.getCmp('ClinicianAppointment-CDCode');
        var ClinicianName = Ext.getCmp('ClinicianAppointment-ClinicianName');
        var Provider_Code = Ext.getCmp('ClinicianAppointment-Provider_Code');
        if (CDCode) CDCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Mcp.CDCODE in (select CDCODE from ME_PROVIDER_CLINICIAN_LINK where PROVIDERCODE = " + Provider_Code.editValue + ")";
        }, this);

        if (Provider_Code) Provider_Code.on('select', function (combo, record, index) {
            CDCode.clearValue();
            ClinicianName.setValue(null);
            onBusinessTypeclear('ClinicianAppointmentDtlList');
        }, this);


        if (Appointmentdate) Appointmentdate.on('valid', function (field) {
            ClinicianAppointmentDetailLoad();
        }, this);

        var TemplateCode = Ext.getCmp('ClinicianAppointment-TemplateCode');
        if (TemplateCode) TemplateCode.on('select', function (combo, record, index) {

            Ext.getCmp('ClinicianAppointment-Sms').setValue(record.data.SMSMessage);
            Ext.getCmp('ClinicianAppointment-Subjects').setValue(record.data.EMessageSubject);
            Ext.getCmp('ClinicianAppointment-Messge').setValue(Ext.util.Format.htmlDecode(record.data.EMessage));


        }, this);

        var Email = Ext.getCmp('ClinicianAppointment-Emailche');
        Email.on('check', onClinicianAppointmentEmailCheck, this);
        var Subject = Ext.getCmp('ClinicianAppointment-Subjects');
        var MessageTemplate = Ext.getCmp('ClinicianAppointment-Messge');
        if (Email.getValue() == true) {
            Subject.enable();
            Subject.allowBlank = false;
            Subject.isValid();
            MessageTemplate.enable();
            MessageTemplate.allowBlank = false;
            MessageTemplate.isValid();
        }



        else {
            Subject.disable();
            Subject.allowBlank = true;
            Subject.clearInvalid();
            MessageTemplate.disable();
            MessageTemplate.allowBlank = true;
            MessageTemplate.clearInvalid();
        }
        var Sms = Ext.getCmp('ClinicianAppointment-Sms');
        Sms.on('check', onClinicianAppointmentSmsCheck, this);
        var SMSMessage = Ext.getCmp('ClinicianAppointment-SMSMessage');
        if (Sms.getValue() == true) {
            SMSMessage.enable();
            SMSMessage.allowBlank = false;
            SMSMessage.isValid();
        }
        else {
            SMSMessage.disable();
            SMSMessage.allowBlank = true;
            SMSMessage.clearInvalid();
        }


        if (CDCode) CDCode.on('select', function (combo, record, index) {

            ClinicianAppointmentDetailLoad();

        }, this);

        if (form.selectedIndex == -1) {

            DetailStore = Ext.getCmp('ClinicianAppointmentDtlList').getStore();

            var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.ClinicianAppointmentDtl&filter=1=2";
            if (DetailStore) {
                DetailStore.proxy = new Ext.data.HttpProxy({
                    url: DetUrl
                });
                DetailStore.load({
                    params: {
                        start: 0,
                        limit: 20
                    }
                });
            }
        }

        else {
            ClinicianAppointmentDetailLoad();
        }

    }

    if (form.isView) {
        var CDCode = Ext.getCmp('ClinicianAppointment-ClinicianCode').getValue();
        var FilterQry = "CLINICIANCODE=" + CDCode;

        FilterQry = encodeURIComponent(FilterQry);
        DetailStore = Ext.getCmp('ClinicianAppointmentDtlList').getStore();

        var Appointmentdate = Ext.getCmp('ClinicianAppointment-Appointmentdate');
        if (Appointmentdate != null && Appointmentdate != '')
            FilterQry += "AND APPOINTMENTDATE=TO_DATE('" + Appointmentdate.getValue() + "','dd/mm/RR')";

        var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.ClinicianAppointmentDtl&filter=" + FilterQry;
        if (DetailStore) {
            DetailStore.proxy = new Ext.data.HttpProxy({
                url: DetUrl
            });
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }

    }
}

function onClinicianAppointmentEmailCheck(checkBox, checked) {
    var Subject = Ext.getCmp('ClinicianAppointment-Subjects');
    var MessageTemplate = Ext.getCmp('ClinicianAppointment-Messge');
    if (checked == true) {
        Subject.enable();
        Subject.allowBlank = false;
        Subject.isValid();
        MessageTemplate.enable();
        MessageTemplate.allowBlank = false;
        MessageTemplate.isValid();
    }
    else {
        Subject.disable();
        Subject.setValue(null);
        Subject.allowBlank = true;
        Subject.clearInvalid();
        MessageTemplate.disable();
        MessageTemplate.setValue(null);
        MessageTemplate.allowBlank = true;
        MessageTemplate.clearInvalid();
    }
}

function onClinicianAppointmentSmsCheck(checkBox, checked) {
    var SMSMessage = Ext.getCmp('ClinicianAppointment-SMSMessage');
    if (checked == true) {
        SMSMessage.enable();
        SMSMessage.allowBlank = false;
        SMSMessage.isValid();
    }
    else {
        SMSMessage.disable();
        SMSMessage.setValue(null);
        SMSMessage.allowBlank = true;
        SMSMessage.clearInvalid();
    }
}

function ClinicianAppointmentDetailLoad(form, login1) {

    var CDCode = Ext.getCmp('ClinicianAppointment-CDCode').editValue;
    var FilterQry = "CLINICIANCODE=" + CDCode;

    var Appointmentdate = Ext.getCmp('ClinicianAppointment-Appointmentdate');
    if (Appointmentdate != null && Appointmentdate != '')
        FilterQry += "AND APPOINTMENTDATE=TO_DATE('" + Appointmentdate.getValue().format('d-m-y') + "','dd/mm/RR')";

    FilterQry = encodeURIComponent(FilterQry);
    DetailStore = Ext.getCmp('ClinicianAppointmentDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.General.ClinicianAppointmentDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}


function ClinicianAppointmentPost(form, login) {
    var sms = Ext.getCmp('ClinicianAppointment-Sms');
    var Email = Ext.getCmp('ClinicianAppointment-Emailche');
    var PrimKey = Ext.getCmp('ClinicianAppointment').selectedIndex;
    var StatusCode = Ext.getCmp('ClinicianAppointment-StatusCode');

    if (StatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'Valid Record Can not Posted Agin');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ClinicianAppointmentSmsPost',
            PrimKey: PrimKey,
            sms: sms.getValue(),
            Email: Email.getValue(),
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicianAppointmentSmsPostComplete, this);
}
function ClinicianAppointmentSmsPostComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ClinicianAppointmentSmsPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').un('beforeclose', Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').scope.closeWindow, Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').scope);
        Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').on('close', Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').scope.afterCloseWind, Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').scope);
        Ext.getCmp('ID_CLINICIANAPPOINTMENTS_editform').close();
    }
}

function ErxReqeustBtHandler(button, options) {

    var Primkey = Ext.getCmp('PatientsLoginReception').selectedIndex;
    var ActivityType = Ext.getCmp('PatientsLoginReception-ActivityType');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }

    if (Ext.getCmp('MEDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }


    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ERXRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ERXRequestPostingPopupComplete, this);
}


function NurseryMakeErxReqeustBt(button, options) {

    var Primkey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }

    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please the record before Posting !');
        return;
    }

    if (Ext.getCmp('LoginNurseryDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ERXRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ERXRequestPostingPopupComplete, this);
}


function ERXRequestPostingPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ERXRequestPostingPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ErxRequestPopupForm = new Ext.form.FormPanel(responseText.ErxRequestPopupCofig);

    this.ErxRequestPopupForm.addButton({
        text: 'Select All',
        handler: function () {

            var PostToErxRequestPopupDetList = Ext.getCmp('PostToErxRequestPopupDetList');

            for (var pcnt = 0; pcnt < PostToErxRequestPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToErxRequestPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.ErxRequestPopupForm.FormFieldsCount + 2
    });

    this.ErxRequestPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var PostToErxRequestPopupDetList = Ext.getCmp('PostToErxRequestPopupDetList');

            for (var pcnt = 0; pcnt < PostToErxRequestPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToErxRequestPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', false);
            }
        },
        scope: this,
        tabIndex: this.ErxRequestPopupForm.FormFieldsCount + 2
    });

    this.ErxRequestPopupForm.addButton({
        text: 'Post',
        handler: function () {

            var PrimKey = '';
            var PostToErxRequestPopupDetList = Ext.getCmp('PostToErxRequestPopupDetList');
            var PostToErxRequestRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < PostToErxRequestPopupDetList.store.modified.length; Cnt++) {

                if (PostToErxRequestPopupDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    PostToErxRequestRecords.push(Ext.encode(PostToErxRequestPopupDetList.store.modified[Cnt].data));
                    PrimKey = PostToErxRequestPopupDetList.store.modified[Cnt].get('Pl_Reception_Code');
                    CheckCnt++;
                }
            }
            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Post');
                return;
            }
            var PostToErxRequestRecordsRow = '[' + PostToErxRequestRecords.join(',') + ']';

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'ERXRequestPosting',
                    Primkey: PrimKey,
                    PostToErxRequestRecordsRow: PostToErxRequestRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', ErxReqeustPostingComplete, this);
        },
        scope: this,
        tabIndex: this.ErxRequestPopupForm.FormFieldsCount + 2
    });


    this.ErxRequestPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ErxRequestPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.ErxRequestPopupForm.FormFieldsCount + 2
    });

    this.ErxRequestPopupFormWindow = new Ext.Window({
        id: 'ErxRequestPopupFormWindow',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.ErxRequestPopupForm.width + 10,
        height: this.ErxRequestPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ErxRequestPopupForm]
    });
    this.ErxRequestPopupFormWindow.show();
}


function ErxReqeustPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ErxReqeustPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        this.ErxRequestPopupFormWindow.close();

        if (Ext.getCmp('LoginNurseryDrugDtlList')) {//Nursey

            var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
            LoginNurseryDrugDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseryDrugDtlList.pageSize
                }
            });

        }

        if (Ext.getCmp('PatientLoginClinicDtlList')) {//Clinic
            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
            PatientLoginClinicDtlList.store.load({
                params: {
                    start: 0,
                    limit: PatientLoginClinicDtlList.pageSize
                }
            });
        }

        if (Ext.getCmp('LoginNursery-ERXRefNo')) {
            var ERXRefNo = Ext.getCmp('LoginNursery-ERXRefNo');
            if (responseText.ERXRefNo != null) {
                ERXRefNo.setValue(responseText.ERXRefNo);
            }
        }

        if (Ext.getCmp('PatientLoginClinic-ERXRefNo')) {
            var ERXRefNo = Ext.getCmp('PatientLoginClinic-ERXRefNo');
            if (responseText.ERXRefNo != null) {
                ERXRefNo.setValue(responseText.ERXRefNo);
            }
        }

        if (Ext.getCmp('LoginDiagnosticClinic-ERXRefNo')) {
            var ERXRefNo = Ext.getCmp('LoginDiagnosticClinic-ERXRefNo');
            if (responseText.ERXRefNo != null) {
                ERXRefNo.setValue(responseText.ERXRefNo);
            }
        }
    }
}

function PriorRequestBtHandler(button, options) {

    var Primkey = Ext.getCmp('PatientsLoginReception').selectedIndex;
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (Ext.getCmp('MEDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PriorRequestPostingPopupComplete, this);
}


function NurseryMakePriorRequestBt(button, options) {

    var Primkey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please the record before Posting !');
        return;
    }
    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }
    if (Ext.getCmp('LoginNurseryDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PriorRequestPostingPopupComplete, this);
}


function LaboratoryMakePriorRequestBt(button, options) {

    var Primkey = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please the record before Posting !');
        return;
    }
    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PriorRequestPostingPopupComplete, this);
}

function PriorRequestPostingPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PriorRequestPostingPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.PriorRequestPopupForm = new Ext.form.FormPanel(responseText.PriorRequestPopupCofig);

    this.PriorRequestPopupForm.addButton({
        text: 'Select All',
        handler: function () {

            var PostToPriorRequestPopupDetList = Ext.getCmp('PostToPriorRequestPopupDetList');

            for (var pcnt = 0; pcnt < PostToPriorRequestPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToPriorRequestPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.PriorRequestPopupForm.FormFieldsCount + 2
    });

    this.PriorRequestPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var PostToPriorRequestPopupDetList = Ext.getCmp('PostToPriorRequestPopupDetList');

            for (var pcnt = 0; pcnt < PostToPriorRequestPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToPriorRequestPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', false);
            }
        },
        scope: this,
        tabIndex: this.PriorRequestPopupForm.FormFieldsCount + 2
    });

    this.PriorRequestPopupForm.addButton({
        text: 'Post',
        handler: function () {

            var PrimKey = '';
            var PostToPriorRequestPopupDetList = Ext.getCmp('PostToPriorRequestPopupDetList');
            var PostToPriorRequestRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < PostToPriorRequestPopupDetList.store.modified.length; Cnt++) {

                if (PostToPriorRequestPopupDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    PostToPriorRequestRecords.push(Ext.encode(PostToPriorRequestPopupDetList.store.modified[Cnt].data));
                    PrimKey = PostToPriorRequestPopupDetList.store.modified[Cnt].get('Pl_Reception_Code');
                    CheckCnt++;
                }
            }
            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Post');
                return;
            }
            var PostToPriorRequestRecordsRow = '[' + PostToPriorRequestRecords.join(',') + ']';

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PriorRequestPosting',
                    PrimKey: PrimKey,
                    PostToPriorRequestRecordsRow: PostToPriorRequestRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PriorRequestPostingComplete, this);
        },
        scope: this,
        tabIndex: this.PriorRequestPopupForm.FormFieldsCount + 2
    });


    this.PriorRequestPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PriorRequestPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PriorRequestPopupForm.FormFieldsCount + 2
    });

    this.PriorRequestPopupFormWindow = new Ext.Window({
        id: 'PriorRequestPopupFormWindow',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.PriorRequestPopupForm.width + 10,
        height: this.PriorRequestPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PriorRequestPopupForm]
    });
    this.PriorRequestPopupFormWindow.show();
}


function PriorRequestPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PriorRequestPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        this.PriorRequestPopupFormWindow.close();

        if (Ext.getCmp('LoginNurseryServicedtlList')) {
            var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList');
            LoginNurseryServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseryServicedtlList.pageSize
                }
            });
            var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
            LoginNurseryDrugDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseryDrugDtlList.pageSize
                }
            });



            var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
            LoginNurseInjectionDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseInjectionDtlList.pageSize
                }
            });
        }
        //clinic
        if (Ext.getCmp('LoginClinicServicedtlList')) {
            var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');
            LoginClinicServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginClinicServicedtlList.pageSize
                }
            });
            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
            PatientLoginClinicDtlList.store.load({
                params: {
                    start: 0,
                    limit: PatientLoginClinicDtlList.pageSize
                }
            });



            var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');
            LoginClinicInjectionDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginClinicInjectionDtlList.pageSize
                }
            });
        }
        //Lab
        if (Ext.getCmp('LoginDiagnosticClinicServicedtlList')) {
            var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
            LoginDiagnosticClinicServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginDiagnosticClinicServicedtlList.pageSize
                }
            });
        }

        if (Ext.getCmp('LoginNursery-PriorApprovalNo')) {
            var PriorApprovalNo = Ext.getCmp('LoginNursery-PriorApprovalNo');
            if (responseText.PriorApprovalNo != null) {
                PriorApprovalNo.setValue(responseText.PriorApprovalNo);
            }
        }

        if (Ext.getCmp('PatientLoginClinic-PriorApprovalNo')) {
            var PriorApprovalNo = Ext.getCmp('PatientLoginClinic-PriorApprovalNo');
            if (responseText.PriorApprovalNo != null) {
                PriorApprovalNo.setValue(responseText.PriorApprovalNo);
            }
        }

        if (Ext.getCmp('LoginDiagnosticClinic-PriorApprovalNo')) {
            var PriorApprovalNo = Ext.getCmp('LoginDiagnosticClinic-PriorApprovalNo');
            if (responseText.PriorApprovalNo != null) {
                PriorApprovalNo.setValue(responseText.PriorApprovalNo);
            }
        }
    }
}

function ClinicErxReqeustBtHandler(button, options) {

    var Primkey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }

    if (Ext.getCmp('PatientLoginClinicDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ERXRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ERXRequestPostingPopupComplete, this);
}


function ClinicPriorRequestBtHandler(button, options) {

    var Primkey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (Ext.getCmp('PatientLoginClinicDiagnosisDtlList').store.getCount() < 1) {
        Ext.MessageBox.alert(login.modulename, 'Diagnosis Details should have atleast one record. !');
        return;
    }

    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorRequestPostingPopup',
            Primkey: Primkey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PriorRequestPostingPopupComplete, this);
}


function NewClinicAddNewDrugHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddNewDrugPopUp'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddNewDrugPopUpComplete, this);
}

function AddNewDrugPopUpComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewDrugPopUpComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewDrugTemplateForm = new Ext.form.FormPanel(responseText.AddNewDrugPopUpCofig);


    this.AddNewDrugTemplateForm.addButton({
        text: 'Save',
        handler: function () {

            var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
            var Drug_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Name');
            var DrugName = Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName');
            var UnitTypeName = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeName');
            var FrequencyTypeName = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeName');
            var Doze = Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze');
            var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
            var NoOfTimeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode');
            var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');
            var Times_Per_DayCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode');
            var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
            var Itm_Qtys = Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys');
            var Avg_Cost = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
            var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
            var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
            var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
            var IsDrugPrepaid = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid');
            var IsPosted = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted');
            var Isliquid = Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid');
            var ApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
            var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
            var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
            var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
            var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
            var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
            var FrequencyTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
            var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
            var Refills = Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills');
            var RouteOfAdminCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode');
            var Instructions = Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions');
            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
            var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').getValue();

            //if (Number(Drug_Total.getValue()) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Total Price should be greater than 0 !');
            //    return;
            //}

            var PKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

            PatientLoginClinicDtlList.storeId += 1;
            var StoreID = PatientLoginClinicDtlList.storeId;
            var newRecord = new PatientLoginClinicDtlList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                Drug_Code: Drug_Code.editValue,
                Drug_Name: (Drug_Code.editValue == 0 ? null : Drug_Code.lastSelectionText),
                DrugName: DrugName.getValue(),
                Doze: Doze.getValue(),
                No_of_days: No_of_days.getValue(),
                NoOfTimeCode: NoOfTimeCode.getValue(),
                NoOfTimeName: null,
                StatusCode: StatusCode.editValue,
                StatusName: (StatusCode.editValue == 0 ? 'Open' : StatusCode.lastSelectionText),
                Times_Per_DayCode: Times_Per_DayCode.getValue(),
                Times_Per_DayName: (Times_Per_DayCode.getValue() == 0 ? null : Times_Per_DayCode.lastSelectionText),
                Quantity: Quantity.getValue(),
                Itm_Qtys: Itm_Qtys.getValue(),
                Avg_Cost: Avg_Cost.getValue(),
                DiscountAmount: DiscountAmount.getValue(),
                Drug_Total: 1 * Drug_Total.getValue(),
                Drug_NetTotal: Drug_NetTotal.getValue(),
                IsDrugPrepaid: IsDrugPrepaid.getValue(),
                IsPosted: IsPosted.getValue(),
                ApprovalStatusCode: ApprovalStatusCode.editValue,
                ApprovalStatusName: (ApprovalStatusCode.editValue == 1 ? 'Pending' : ApprovalStatusCode.lastSelectionText),
                DenialReasonCode: DenialReasonCode.editValue,
                DenialReasonName: (DenialReasonCode.editValue == 0 ? null : DenialReasonCode.lastSelectionText),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                RequestNo: RequestNo.getValue(),
                Isliquid: Isliquid.getValue(),
                ApprovedAmount: 0,
                ErxApprovalCode: ErxApprovalCode.getValue(),
                Unit: Unit.getValue(),
                UnitTypeCode: UnitTypeCode.getValue(),
                UnitTypeName: (UnitTypeCode.getValue() == 0 ? null : UnitTypeCode.lastSelectionText),
                FrequencyTypeCode: FrequencyTypeCode.editValue,
                FrequencyTypeName: (FrequencyTypeCode.editValue == 0 ? null : FrequencyTypeCode.lastSelectionText),
                Frequency: Frequency.getValue(),
                Refills: Refills.getValue(),
                RouteofAdmin: '',
                Instructions: Instructions.getValue(),
                RouteOfAdminCode: RouteOfAdminCode.getValue(),
                RouteOfAdminName: (RouteOfAdminCode.getValue() == 0 ? null : RouteOfAdminCode.lastSelectionText),
                Service_Name: '',
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ErxStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                PaymentAmount: 0,
                Note: null,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicDtlList.stopEditing();
            PatientLoginClinicDtlList.store.add(newRecord);
            PatientLoginClinicDtlList.store.totalLength = PatientLoginClinicDtlList.store.getTotalCount() + 1;
            PatientLoginClinicDtlList.pageBar.updateInfo();

            this.AddNewDrugTemplateFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });



    this.AddNewDrugTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewDrugTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });

    this.AddNewDrugTemplateFormWindow = new Ext.Window({
        id: 'AddNewDrugTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewDrugTemplateForm.width + 10,
        height: this.AddNewDrugTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewDrugTemplateForm]
    });

    this.AddNewDrugTemplateForm.on('render', PatientLoginClinicDrugsPopUp, this);
    this.AddNewDrugTemplateFormWindow.show();

}

function AmountValidation(field) {
    var FrequencyType = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
    var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
    var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
    var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
    var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
    var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
    var UnitPrice = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance');
    var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType');

    var TotalQuantity = 0; var UnitValue = Unit.getValue(); var FrequencyValue = Frequency.getValue(); var Duration = No_of_days.getValue()
    TotalQuantity = UnitValue * FrequencyValue * Duration;
    Quantity.setValue(TotalQuantity);

    var Total = 0; var Nett = 0;
    var Tot = 0;
    Tot = Quantity.getValue() * UnitPrice.getValue();
    Drug_Total.setValue(Tot);
    Drug_NetTotal.setValue(Tot);

    var NetTotal = 0; var net = 0;
    var NetTot = 0;
    NetTot = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
    Drug_NetTotal.setValue(NetTot);

    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');
    var ApprovalStatus = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');

    if (Drug_NetTotal.getValue() != ApprovedAmount.getValue() && ApprovalStatus.editValue == 2)  // Approved
        ApprovedAmount.addClass('approve-editor');
    else
        ApprovedAmount.removeClass('approve-editor');

    DrugsAmuoutnCalculation();
}


function DrugsAmuoutnCalculation(field) {

    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance');
    var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');

    if (ServiceActivityType > 0) {
        Balance.setValue(Number(Drug_Total.getValue()));
        ApprovedAmount.setValue(Number(Drug_Total.getValue()));
    }
    else {
        Balance.setValue(Number(Drug_Total.getValue()) - Number(ApprovedAmount.getValue()));
    }

    var ApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
    if (DefaultPatientType != 4) {
        ApprovedAmount.disable();
    }
    else {
        if (ApprovalStatusCode.editValue == 2) {
            ApprovedAmount.enable();
        }
        else {
            ApprovedAmount.disable();
        }
    }
}

function NewNurseAddNewDrugHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            //action: 'AddNurseNewDrugPopUp'
            action: 'AddNewDrugPopUp'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddNurseNewDrugPopUpComplete, this);
}

function AddNurseNewDrugPopUpComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNurseNewDrugPopUpComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewDrugTemplateForm = new Ext.form.FormPanel(responseText.AddNewDrugPopUpCofig);


    this.AddNewDrugTemplateForm.addButton({
        text: 'Save',
        handler: function () {

            var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
            //var Drug_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Name');
            var DrugName = Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName');
            var Doze = Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze');
            var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
            var NoOfTimeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode');
            var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');
            var Times_Per_DayCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode');
            var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
            var Itm_Qtys = Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys');
            var Avg_Cost = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
            var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
            var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
            var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
            var IsDrugPrepaid = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid');
            var IsPosted = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted');
            var ApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
            var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
            var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
            var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
            var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
            var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
            var FrequencyTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
            var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
            var Refills = Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills');
            var RouteOfAdminCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode');
            var Instructions = Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions');
            //var UnitTypeName = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeName');
            //var FrequencyTypeName = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeName');
            var Isliquid = Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid');
            var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');

            //if (Number(Drug_Total.getValue()) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Total Price should be greater than 0 !');
            //    return;
            //}

            var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').getValue()
            var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType').getValue();

            var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
            var PKey = Ext.getCmp('LoginNursery').selectedIndex;

            LoginNurseryDrugDtlList.storeId += 1;
            var StoreID = LoginNurseryDrugDtlList.storeId;
            var newRecord = new LoginNurseryDrugDtlList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
                Drug_Code: Drug_Code.editValue,
                Drug_Name: (Drug_Code.editValue == 0 ? null : Drug_Code.lastSelectionText),
                DrugName: DrugName.getValue(),
                Doze: Doze.getValue(),
                No_of_days: No_of_days.getValue(),
                NoOfTimeCode: NoOfTimeCode.getValue(),
                NoOfTimeName: (NoOfTimeCode.getValue() == 0 ? null : NoOfTimeCode.lastSelectionText),
                StatusCode: StatusCode.editValue,
                StatusName: (StatusCode.editValue == 0 ? 'Open' : StatusCode.lastSelectionText),
                //Times_Per_DayCode: Times_Per_DayCode.editValue,
                //Times_Per_DayName: (Times_Per_DayCode.editValue == 0 ? null : Times_Per_DayCode.lastSelectionText),
                Times_Per_DayCode: 0,
                Times_Per_DayName: null,
                Quantity: Quantity.getValue(),
                Itm_Qtys: Itm_Qtys.getValue(),
                Avg_Cost: Avg_Cost.getValue(),
                DiscountAmount: DiscountAmount.getValue(),
                Drug_Total: 1 * Drug_Total.getValue(),
                Drug_NetTotal: Drug_NetTotal.getValue(),
                IsDrugPrepaid: IsDrugPrepaid.getValue(),
                IsPosted: IsPosted.getValue(),
                ApprovalStatusCode: ApprovalStatusCode.editValue,
                ApprovalStatusName: (ApprovalStatusCode.editValue == 1 ? 'Pending' : ApprovalStatusCode.lastSelectionText),
                DenialReasonCode: DenialReasonCode.editValue,
                DenialReasonName: (DenialReasonCode.editValue == 0 ? null : DenialReasonCode.lastSelectionText),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                RequestNo: RequestNo.getValue(),
                Isliquid: Isliquid.getValue(),
                ApprovedAmount: ApprovedAmount.getValue(),
                ErxApprovalCode: ErxApprovalCode.getValue(),
                Unit: Unit.getValue(),
                UnitTypeCode: UnitTypeCode.editValue,
                UnitTypeName: (UnitTypeCode.getValue() == 0 ? 'Capsule' : UnitTypeCode.lastSelectionText),
                FrequencyTypeCode: FrequencyTypeCode.editValue,
                FrequencyTypeName: (FrequencyTypeCode.editValue == 0 ? null : UnitTypeCode.lastSelectionText),
                Frequency: Frequency.getValue(),
                Refills: Refills.getValue(),
                RouteofAdmin: '',
                Instructions: Instructions.getValue(),
                RouteOfAdminCode: RouteOfAdminCode.editValue,
                RouteOfAdminName: (RouteOfAdminCode.editValue == 0 ? null : RouteOfAdminCode.lastSelectionText),
                Service_Name: '',
                Note: null,
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ErxStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                PaymentAmount: 0,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            LoginNurseryDrugDtlList.stopEditing();
            LoginNurseryDrugDtlList.store.add(newRecord);
            LoginNurseryDrugDtlList.store.totalLength = LoginNurseryDrugDtlList.store.getTotalCount() + 1;
            LoginNurseryDrugDtlList.pageBar.updateInfo();

            this.AddNewDrugTemplateFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });



    this.AddNewDrugTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewDrugTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });

    this.AddNewDrugTemplateFormWindow = new Ext.Window({
        id: 'AddNewDrugTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewDrugTemplateForm.width + 10,
        height: this.AddNewDrugTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewDrugTemplateForm]
    });
    this.AddNewDrugTemplateForm.on('render', PatientLoginClinicDrugsPopUp, this);
    this.AddNewDrugTemplateFormWindow.show();
}


function PatientLoginClinicDrugsPopUp(form, login1) {
    if (!form.isView) {
        var FrequencyType = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
        var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
        var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
        var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
        var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
        var ApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode')
        var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
        var UnitPrice = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
        var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
        var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
        var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
        var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
        var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');

        Unit.setValue(1); Quantity.setValue(1); No_of_days.setValue(1);
        ApprovalStatusCode.setComboValue(1); StatusCode.setComboValue(0);

        if (Unit) Unit.on('valid', AmountValidation, this);
        if (Frequency) Frequency.on('valid', AmountValidation, this);
        if (No_of_days) No_of_days.on('valid', AmountValidation, this);


        Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', function (field, newval, odlval) {  // Quantity
            var Tot = 0;
            Tot = Quantity.getValue() * UnitPrice.getValue();
            Drug_Total.setValue(Tot);
            Drug_NetTotal.setValue(Tot);
            DrugsAmuoutnCalculation();
        }, this);

        Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', function (field, newval, odlval) {  //  
            var Total = 0; var Nett = 0;
            Total = Quantity.getValue() * UnitPrice.getValue();
            Drug_Total.setValue(Total);
            Drug_NetTotal.setValue(Total);

            var NetTot = 0;
            NetTot = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
            Nett = NetTot - UnitPrice.getValue();
            Drug_NetTotal.setValue(NetTot);

            DrugsAmuoutnCalculation();

        }, this);


        Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', function (field, newval, odlval) {  // Discount
            var NetTotal = 0; var net = 0;

            NetTotal = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
            net = NetTotal - UnitPrice.getValue();
            Drug_NetTotal.setValue(NetTotal);
            DrugsAmuoutnCalculation();
        }, this);



        var ApprovalStatus = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
        var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
        var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
        var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
        var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');
        var Service_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name');
        var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
        var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');

        //Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal').on('valid', function (field, newval, odlval) {  //  
        //    if ((RequestNo.getValue() != Drug_NetTotal.getValue()) && ApprovalStatus.editValue == 2)
        //        RequestNo.addClass('approve-editor');
        //}, this);

        //Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo').on('valid', function (field, newval, odlval) {  //  
        //    if ((RequestNo.getValue() != Drug_NetTotal.getValue()) && ApprovalStatus.editValue == 2)
        //        RequestNo.addClass('approve-editor');
        //}, this);

        var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
        var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');

        if (ApprovedAmount) ApprovedAmount.on('valid', DrugsApprovedAmountValidation, this);
        if (Drug_NetTotal) Drug_NetTotal.on('valid', DrugsApprovedAmountValidation, this);
        if (Unit) Unit.on('valid', DrugsApprovedAmountValidation, this);
        if (Frequency) Frequency.on('valid', DrugsApprovedAmountValidation, this);
        if (No_of_days) No_of_days.on('valid', DrugsApprovedAmountValidation, this);
        Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', DrugsApprovedAmountValidation, this);
        Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', DrugsApprovedAmountValidation, this);
        Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', DrugsApprovedAmountValidation, this);

        var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType');
        if (DefaultPatientType != 4 || ServiceActivityType.getValue() > 0) {
            ApprovalStatus.setComboValue(2);
            ApprovalStatus.disable();
            ApprovedAmount.disable();
            DenialReasonCode.disable();
            RequestNo.disable();
            ErxApprovalCode.disable();
        }

        if (ApprovalStatus) ApprovalStatus.on('select', function (combo, record, index) {

            if (ApprovalStatus.editValue == 3) { // rejected 
                ErxApprovalCode.allowBlank = true;
                ErxApprovalCode.isValid();
                //RequestNo.allowBlank = true;
                //RequestNo.isValid();
                DenialReasonCode.enable();
                DenialReasonCode.allowBlank = false;
                DenialReasonCode.isValid();
                //DenialReasonCode.clearInvalid();
                ErxApprovalCode.disable();
                ErxApprovalCode.setValue(null);
                ErxApprovalCode.allowBlank = true;
                ErxApprovalCode.isValid();
                ApprovedAmount.setValue(null);
                ApprovedAmount.disable();
                ApprovedAmount.removeClass('approve-editor');
            }
            if (ApprovalStatus.editValue == 2) {  // Approved 

                //RequestNo.enable();
                ErxApprovalCode.enable();
                DenialReasonCode.clearValue();
                Service_Name.setValue(null);
                DenialReasonCode.disable();
                DenialReasonCode.allowBlank = true;
                DenialReasonCode.clearInvalid();
                ErxApprovalCode.allowBlank = false;
                ErxApprovalCode.isValid();
                ApprovedAmount.enable();
                ApprovedAmount.setValue(Drug_NetTotal.getValue());
                if (Drug_NetTotal.getValue() != ApprovedAmount.getValue())  // Approved
                    ApprovedAmount.addClass('approve-editor');
                else
                    ApprovedAmount.removeClass('approve-editor');
            }
            if (ApprovalStatus.editValue != 2 && ApprovalStatus.editValue != 3) { // pending
                DenialReasonCode.clearValue();
                Service_Name.setValue(null);
                DenialReasonCode.disable();
                ErxApprovalCode.disable();
                ErxApprovalCode.setValue(null);
                ErxApprovalCode.allowBlank = true;
                ErxApprovalCode.isValid();
                //RequestNo.disable();
                //RequestNo.setValue(null);
                //RequestNo.allowBlank = true;
                //RequestNo.isValid();
                DenialReasonCode.allowBlank = true;
                DenialReasonCode.clearInvalid();
                ApprovedAmount.setValue(null);
                ApprovedAmount.removeClass('approve-editor');
                ApprovedAmount.disable();

            }

        }, this);

        var ServiceTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
        if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services
            evt.combo.lastQuery = '1=2';
            if (DefaultPatientType == 4)
                evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 and  det. ActivityType=" + DefaultDHAType + ")";
            else
                evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 )";

        }, this);

        var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
        if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason
            evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";

        }, this);

        var RouteOfAdminCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode');
        if (RouteOfAdminCode) RouteOfAdminCode.on('beforequery', function (evt) {  // DenialReason
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " mst.ROUTEOFADMINNAME is not null";

        }, this);

        var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
        if (Drug_Code) Drug_Code.on('select', DrugServiceTypeSelected, this);

    }

}

function PatientLoginClinicedit(record) {

    if (record.get('Service_CashTypeCode') != 2) {

        if (record.get('ClaimStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Claim Submission.You can not allow to edit this record');
            return;
        }
        if (record.get('PriorStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Prior Request.You can not allow to edit this record');
            return;
        }
        if (record.get('ApprovalStatusCode') == 2) {
            Ext.MessageBox.alert(login.modulename, 'Approved record can not allow to edit');
            return;
        }
    }

    if (record.get('StatusCode') == 0) { // Open

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                //action: 'AddNewDrugPopUpEdit'
                action: 'AddNewDrugPopUp'
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', AddNewDrugPopUpEditComplete, this);
        CliamRequestActivityDummy = record;
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'You can not allow to edit this record. Open status record only allow to edit.');
        return;
    }
}

var MEDrug_Name = '', MEDrug_Code = '', MEDoze = '', MENo_of_days = '', MENoOfTimeName = '', MENoOfTimeCode = '', MEStatusCode = '', MEStatusName = '', METimes_Per_DayCode = '', MEQuantity = '', MEItm_Qtys = '', MEAvg_Cost = '', MEDiscountAmount = '', MEDrug_Total = '', MEDrug_NetTotal = '';
var MEIsDrugPrepaid = '', MEIsPosted = '', MEIsliquid = '', MEApprovalStatusName = '', MEApprovalStatusCode = '', MERequestNo = '', MEDenialReasonCode = '', MEErxApprovalCode = '', MEDrugName = '';
var MEUnit = '', MEUnitTypeCode = '', MEFrequencyTypeCode = '', MEFrequency = '', MERefills = '', MERouteofAdmin = '', MEInstructions = '', MEUnitTypeName = '', MEFrequencyTypeName = '', MEBalance = '', MEApprovedAmount = '';

function AddNewDrugPopUpEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewDrugPopUpEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.AddNewDrugPopUpCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            MEDrug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').editValue;
            MEDrug_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').lastSelectionText;
            MEDoze = Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze').getValue();
            MENo_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days').getValue();
            MENoOfTimeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode').getValue();
            MENoOfTimeName = MENoOfTimeCode == 0 ? 'Open' : Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode').lastSelectionText;
            MEStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').editValue;
            MEStatusName = MEStatusCode == 0 ? 'Open' : Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').lastSelectionText;
            METimes_Per_DayCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode').getValue();
            MEQuantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').getValue();
            MEItm_Qtys = Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys').getValue();
            MEAvg_Cost = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').getValue();
            MEDiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').getValue();
            MEDrug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total').getValue();
            MEDrug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal').getValue();
            MEIsDrugPrepaid = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid').getValue();
            MEIsPosted = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted').getValue();
            MEIsliquid = Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid').getValue();
            MEApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').getValue();
            MEApprovalStatusName = MEApprovalStatusCode == 0 ? 'Pending' : Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').lastSelectionText;
            MERequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo').getValue();
            MEDenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode').getValue();
            MEErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode').getValue();
            MEDrugName = Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName').getValue();
            MEBalance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').getValue();
            MEApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount').getValue();
            MEUnit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit').getValue();
            MEUnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode').getValue();
            MEFrequencyTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').getValue();
            MEFrequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency').getValue();
            MERefills = Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills').getValue();
            MERouteofAdmin = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode').getValue();
            MEInstructions = Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions').getValue();
            MEUnitTypeName = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeName').getValue();
            MEFrequencyTypeName = (MEFrequencyTypeCode == 0 ? null : Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeName').getValue());
            AddAddNewDrugPopUpEdit();
            this.AddClaimRequestActivityFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Drugs',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', AddNewDrugPopUpEditFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

function AddNewDrugPopUpEditFormRender(form, login1) {
    var record = CliamRequestActivityDummy;
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').setComboValueDisplay(record.data.Drug_Code, record.data.Drug_Name);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze').setValue(record.get('Doze'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days').setValue(record.get('No_of_days'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode').setValue(record.get('NoOfTimeCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').setComboValueDisplay(record.data.StatusCode, record.data.StatusName);
    //Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode').setComboValue(record.get('Times_Per_DayCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').setValue(record.get('Quantity'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys').setValue(record.get('Itm_Qtys'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').setValue(record.get('Avg_Cost'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').setValue(record.get('DiscountAmount'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total').setValue(record.get('Drug_Total'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal').setValue(record.get('Drug_NetTotal'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid').setValue(record.get('IsDrugPrepaid'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted').setValue(record.get('IsPosted'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid').setValue(record.get('Isliquid'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').setComboValueDisplay(record.data.ApprovalStatusCode, record.data.ApprovalStatusName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo').setValue(record.get('RequestNo'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode').setComboValueDisplay(record.data.DenialReasonCode, record.data.DenialReasonName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name').setValue(record.get('Service_Name'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode').setValue(record.get('ErxApprovalCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName').setValue(record.get('DrugName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit').setValue(record.get('Unit'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode').setComboValueDisplay(record.data.UnitTypeCode, record.data.UnitTypeName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').setComboValueDisplay(record.data.FrequencyTypeCode, record.data.FrequencyTypeName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency').setValue(record.get('Frequency'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills').setValue(record.get('Refills'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode').setComboValueDisplay(record.data.RouteOfAdminCode, record.data.RouteOfAdminName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions').setValue(record.get('Instructions'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeName').setValue(record.get('UnitTypeName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeName').setValue(record.get('FrequencyTypeName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').setValue(record.get('Balance'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount').setValue(record.get('ApprovedAmount'));
    var FrequencyType = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
    var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
    var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
    var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
    var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
    //Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').setComboValue(1);
    var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
    var UnitPrice = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');

    if (Unit) Unit.on('valid', AmountValidation, this);
    if (Frequency) Frequency.on('valid', AmountValidation, this);
    if (No_of_days) No_of_days.on('valid', AmountValidation, this);
    //if (Quantity) Quantity.on('valid', AmountValidation, this);
    //if (UnitPrice) UnitPrice.on('valid', AmountValidation, this);
    //if (Drug_Total) Drug_Total.on('valid', AmountValidation, this);
    //if (DiscountAmount) DiscountAmount.on('valid', AmountValidation, this);

    /*
    No_of_days.on('valid', function (field, newval, odlval) {
        var TotalQuantity = 0; var UnitValue = Unit.getValue(); var FrequencyValue = Frequency.getValue(); var Duration = No_of_days.getValue()
        TotalQuantity = UnitValue * FrequencyValue * Duration;
        Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').setValue(TotalQuantity);
    }, this);
    */
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', function (field, newval, odlval) {  // Quantity
        var Tot = 0;
        Tot = Quantity.getValue() * UnitPrice.getValue();
        Drug_Total.setValue(Tot);
        Drug_NetTotal.setValue(Tot); DrugsAmuoutnCalculation();
    }, this);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', DrugsApprovedAmountValidation, this);

    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', function (field, newval, odlval) {  //  
        var Total = 0; var Nett = 0;
        Total = Quantity.getValue() * UnitPrice.getValue();
        Drug_Total.setValue(Total);
        Drug_NetTotal.setValue(Total);

        var NetTot = 0;
        NetTot = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
        Nett = NetTot - UnitPrice.getValue();
        Drug_NetTotal.setValue(NetTot);
        DrugsAmuoutnCalculation();
    }, this);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', DrugsApprovedAmountValidation, this);

    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', function (field, newval, odlval) {  // Discount
        var NetTotal = 0; var net = 0;

        NetTotal = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
        net = NetTotal - UnitPrice.getValue();
        Drug_NetTotal.setValue(NetTotal);
        DrugsAmuoutnCalculation();
    }, this);

    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', DrugsApprovedAmountValidation, this);

    var ApprovalStatus = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
    var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
    var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
    var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');
    var Service_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name');
    var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');

    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');

    if (Drug_NetTotal) Drug_NetTotal.on('valid', DrugsApprovedAmountValidation, this);
    if (ApprovedAmount) ApprovedAmount.on('valid', DrugsApprovedAmountValidation, this);

    var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType');
    if (DefaultPatientType != 4 || ServiceActivityType.getValue() > 0) {
        ApprovalStatus.disable();
        ApprovedAmount.disable();
        DenialReasonCode.disable();
        RequestNo.disable();
        ErxApprovalCode.disable();
    }
    else {
        if (ApprovalStatus.editValue == 3) { // rejected 
            DenialReasonCode.enable();
        }
        else if (ApprovalStatus.editValue == 2) {
            ApprovedAmount.enable();
            DenialReasonCode.disable();
            RequestNo.enable();
            ErxApprovalCode.enable();
        }
        else {
            ApprovalStatus.enable();
        }
    }

    if (ApprovalStatus) ApprovalStatus.on('select', function (combo, record, index) {

        if (ApprovalStatus.editValue == 3) { // rejected 
            ErxApprovalCode.allowBlank = true;
            ErxApprovalCode.isValid();
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            //DenialReasonCode.clearInvalid();
            ErxApprovalCode.disable();
            ErxApprovalCode.setValue(null);
            ErxApprovalCode.allowBlank = true;
            ErxApprovalCode.isValid();
            ApprovedAmount.setValue(null);
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');
        }
        if (ApprovalStatus.editValue == 2) {  // Approved 

            RequestNo.enable();
            DenialReasonCode.clearValue();
            Service_Name.setValue(null);
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            ErxApprovalCode.allowBlank = false;
            ErxApprovalCode.isValid();
            ApprovedAmount.enable();
            ApprovedAmount.setValue(Drug_NetTotal.getValue());
            if (Drug_NetTotal.getValue() != ApprovedAmount.getValue())  // Approved
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');
        }
        if (ApprovalStatus.editValue != 2 && ApprovalStatus.editValue != 3) { // pending
            DenialReasonCode.clearValue();
            Service_Name.setValue(null);
            DenialReasonCode.disable();
            ErxApprovalCode.disable();
            ErxApprovalCode.setValue(null);
            ErxApprovalCode.allowBlank = true;
            ErxApprovalCode.isValid();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            ApprovedAmount.setValue(null);
            ApprovedAmount.removeClass('approve-editor');
            ApprovedAmount.disable();

        }

    }, this);

    var ServiceTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');

    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 )";

    }, this);

    var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";
    }, this);

    var RouteOfAdminCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode');
    if (RouteOfAdminCode) RouteOfAdminCode.on('beforequery', function (evt) {  // DenialReason
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " mst.ROUTEOFADMINNAME is not null";

    }, this);

    var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
    if (Drug_Code) Drug_Code.on('select', DrugServiceTypeSelected, this);

}

function AddAddNewDrugPopUpEdit(form, login) {

    record = CliamRequestActivityDummy;
    record.set('Doze', MEDoze);
    record.set('Drug_Code', MEDrug_Code);
    record.set('Drug_Name', MEDrug_Name);
    record.set('No_of_days', MENo_of_days);
    record.set('NoOfTimeCode', MENoOfTimeCode);
    record.set('NoOfTimeName', MENoOfTimeName);
    record.set('StatusCode', MEStatusCode);
    record.set('StatusName', MEStatusName);
    record.set('Times_Per_DayCode', METimes_Per_DayCode);
    record.set('Quantity', MEQuantity);
    record.set('Itm_Qtys', MEItm_Qtys);
    record.set('Avg_Cost', MEAvg_Cost);
    record.set('DiscountAmount', MEDiscountAmount);
    record.set('Drug_Total', MEDrug_Total);
    record.set('Drug_NetTotal', MEDrug_NetTotal);
    record.set('IsDrugPrepaid', MEIsDrugPrepaid);
    record.set('IsPosted', MEIsPosted);
    record.set('Isliquid', MEIsliquid);
    record.set('ApprovalStatusCode', MEApprovalStatusCode);
    record.set('ApprovalStatusName', MEApprovalStatusName);
    record.set('RequestNo', MERequestNo);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('ErxApprovalCode', MEErxApprovalCode);
    record.set('DrugName', MEDrugName);
    record.set('Unit', MEUnit);
    record.set('UnitTypeCode', MEUnitTypeCode);
    record.set('FrequencyTypeCode', MEFrequencyTypeCode);
    record.set('Frequency', MEFrequency);
    record.set('Refills', MERefills);
    record.set('RouteOfAdminCode', MERouteofAdmin);
    record.set('Instructions', MEInstructions);
    record.set('UnitTypeName', MEUnitTypeName);
    record.set('FrequencyTypeName', MEFrequencyTypeName);
    record.set('Balance', MEBalance);
    record.set('ApprovedAmount', MEApprovedAmount);
}


function PatientLoginNurseryEdit(record) {

    if (record.get('Service_CashTypeCode') != 2) {

        if (record.get('ClaimStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Claim Submission.You can not allow to edit this record');
            return;
        }
        if (record.get('PriorStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Prior Request.You can not allow to edit this record');
            return;
        }
        if (record.get('ApprovalStatusCode') == 2) {
            Ext.MessageBox.alert(login.modulename, 'Approved record can not allow to edit');
            return;
        }
    }

    if (record.get('PaymentAmount') == 0) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                //action: 'AddNewNurseryPopUpEdit'
                action: 'AddNewDrugPopUp'

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', AddNewNurseryPopUpEditComplete, this);
        AddNewNurseryDummy = record;
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'You can not allow to edit this record. Paid Amount should be 0');
        return;
    }
}

var MDrug_Name = '', MDrug_Code = '', MDoze = '', MNo_of_days = '', MNoOfTimeCode = '', MStatusName = '', MStatusCode = '', MTimes_Per_DayCode = '', MQuantity = '', MItm_Qtys = '', MAvg_Cost = '', MDiscountAmount = '', MDrug_Total = '', MDrug_NetTotal = '';
var MIsDrugPrepaid = '', MIsPosted = '', MIsliquid = '', MApprovalStatusName = '', MApprovalStatusCode = '', MRequestNo = '', MDenialReasonCode = '', MDenialReasonName = '', MErxApprovalCode = '', MDrugName = ''; MApprovedAmount = '';
var MUnit = '', MUnitTypeCode = '', MUnitTypeName = '', MFrequencyTypeCode = '', MFrequencyTypeName = '', MFrequency = '', MRefills = '', MRouteofAdmin = '', MInstructions = '', MUnitTypeName = '', MFrequencyTypeName = '', MBalance = '';

function AddNewNurseryPopUpEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewNurseryPopUpEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.AddNewDrugPopUpCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            MDrug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').editValue;
            MDrug_Name = MDrug_Code == 0 ? null : Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').lastSelectionText;
            MDoze = Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze').getValue();
            MNo_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days').getValue();
            MNoOfTimeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode').getValue();
            MStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').editValue;
            MStatusName = MStatusCode == 0 ? 'Open' : Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').lastSelectionText;
            MTimes_Per_DayCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode').getValue();
            MQuantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').getValue();
            MItm_Qtys = Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys').getValue();
            MAvg_Cost = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').getValue();
            MDiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').getValue();
            MDrug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total').getValue();
            MDrug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal').getValue();
            MIsDrugPrepaid = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid').getValue();
            MIsPosted = Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted').getValue();
            MEIsliquid = Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid').getValue();
            MApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').editValue;
            MApprovalStatusName = MApprovalStatusCode == 0 ? null : Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').lastSelectionText;
            MRequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo').getValue();
            MDenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode').editValue;
            MDenialReasonName = MDenialReasonCode == 0 ? null : Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode').lastSelectionText;
            MErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode').getValue();
            MDrugName = Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName').getValue();
            MApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount').getValue();
            MUnit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit').getValue();
            MUnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode').editValue;
            MUnitTypeName = MUnitTypeCode == 0 ? 'Capsule' : Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode').lastSelectionText;
            MFrequencyTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').editValue;
            MFrequencyTypeName = MFrequencyTypeCode == 0 ? 'per Hour' : Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').lastSelectionText;
            MFrequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency').getValue();
            MRefills = Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills').getValue();
            MRouteofAdmin = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode').editValue;
            MRouteofAdminName = MRouteofAdmin == 0 ? null : Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode').lastSelectionText;
            MInstructions = Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions').getValue();
            MBalance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').getValue();
            AddNewNurseryPopUpEdit();
            this.AddClaimRequestActivityFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Drugs',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', AddNewNurseryPopUpEditFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

function AddNewNurseryPopUpEditFormRender(form, login1) {
    var record = AddNewNurseryDummy;
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code').setComboValueDisplay(record.data.Drug_Code, record.data.Drug_Name);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Doze').setValue(record.get('Doze'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days').setValue(record.get('No_of_days'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-NoOfTimeCode').setValue(record.get('NoOfTimeCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode').setComboValueDisplay(record.data.StatusCode, record.data.StatusName);
    // Ext.getCmp('PatientLoginClinicDrugsPopUp-Times_Per_DayCode').setComboValue(record.get('Times_Per_DayCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').setValue(record.get('Quantity'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Itm_Qtys').setValue(record.get('Itm_Qtys'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').setValue(record.get('Avg_Cost'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').setValue(record.get('DiscountAmount'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total').setValue(record.get('Drug_Total'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal').setValue(record.get('Drug_NetTotal'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-IsDrugPrepaid').setValue(record.get('IsDrugPrepaid'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-IsPosted').setValue(record.get('IsPosted'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Isliquid').setValue(record.get('Isliquid'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').setComboValueDisplay(record.data.ApprovalStatusCode, record.data.ApprovalStatusName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo').setValue(record.get('RequestNo'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode').setComboValueDisplay(record.data.DenialReasonCode, record.data.DenialReasonName, record.data.Service_Name);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name').setValue(record.get('Service_Name'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode').setValue(record.get('ErxApprovalCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DrugName').setValue(record.get('DrugName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit').setValue(record.get('Unit'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode').setComboValueDisplay(record.data.UnitTypeCode, record.data.UnitTypeName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').setComboValueDisplay(record.get('FrequencyTypeCode'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode').setComboValueDisplay(record.data.FrequencyTypeCode, record.data.FrequencyTypeName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency').setValue(record.get('Frequency'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Refills').setValue(record.get('Refills'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode').setComboValueDisplay(record.data.RouteOfAdminCode, record.data.RouteOfAdminName);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Instructions').setValue(record.get('Instructions'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeName').setValue(record.get('UnitTypeName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeName').setValue(record.get('FrequencyTypeName'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount').setValue(record.get('ApprovedAmount'));
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance').setValue(record.get('Balance'));


    var FrequencyType = Ext.getCmp('PatientLoginClinicDrugsPopUp-FrequencyTypeCode');
    var Unit = Ext.getCmp('PatientLoginClinicDrugsPopUp-Unit');
    var Frequency = Ext.getCmp('PatientLoginClinicDrugsPopUp-Frequency');
    var UnitTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-UnitTypeCode');
    var No_of_days = Ext.getCmp('PatientLoginClinicDrugsPopUp-No_of_days');
    Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode').setComboValue(1);
    var Quantity = Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity');
    var UnitPrice = Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var DiscountAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount');
    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');

    if (Unit) Unit.on('valid', AmountValidation, this);
    if (Frequency) Frequency.on('valid', AmountValidation, this);
    if (No_of_days) No_of_days.on('valid', AmountValidation, this);
    //if (Quantity) Quantity.on('valid', AmountValidation, this);
    //if (UnitPrice) UnitPrice.on('valid', AmountValidation, this);
    //if (Drug_Total) Drug_Total.on('valid', AmountValidation, this);
    //if (DiscountAmount) DiscountAmount.on('valid', AmountValidation, this);

    /*
    No_of_days.on('valid', function (field, newval, odlval) {
        var TotalQuantity = 0; var UnitValue = Unit.getValue(); var FrequencyValue = Frequency.getValue(); var Duration = No_of_days.getValue()
        TotalQuantity = UnitValue * FrequencyValue * Duration;
        Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').setValue(TotalQuantity);
    }, this);
    */
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', function (field, newval, odlval) {  // Quantity
        var Tot = 0;
        Tot = Quantity.getValue() * UnitPrice.getValue();
        Drug_Total.setValue(Tot);
        Drug_NetTotal.setValue(Tot);
    }, this);

    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', function (field, newval, odlval) {  //  
        var Total = 0; var Nett = 0;
        Total = Quantity.getValue() * UnitPrice.getValue();
        Drug_Total.setValue(Total);
        Drug_NetTotal.setValue(Total);

        var NetTot = 0;
        NetTot = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
        Nett = NetTot - UnitPrice.getValue();
        Drug_NetTotal.setValue(NetTot);

    }, this);

    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', function (field, newval, odlval) {  // Discount
        var NetTotal = 0; var net = 0;

        NetTotal = (Drug_Total.getValue() - (Drug_Total.getValue() * DiscountAmount.getValue() / 100));
        net = NetTotal - UnitPrice.getValue();
        Drug_NetTotal.setValue(NetTotal);
    }, this);

    var ApprovalStatus = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
    var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
    var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
    var StatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-StatusCode');
    var Service_Name = Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name');
    var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');

    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');

    if (ApprovedAmount) ApprovedAmount.on('valid', DrugsApprovedAmountValidation, this);
    if (Drug_NetTotal) Drug_NetTotal.on('valid', DrugsApprovedAmountValidation, this);
    if (Unit) Unit.on('valid', DrugsApprovedAmountValidation, this);
    if (Frequency) Frequency.on('valid', DrugsApprovedAmountValidation, this);
    if (No_of_days) No_of_days.on('valid', DrugsApprovedAmountValidation, this);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').on('valid', DrugsApprovedAmountValidation, this);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Avg_Cost').on('valid', DrugsApprovedAmountValidation, this);
    Ext.getCmp('PatientLoginClinicDrugsPopUp-Quantity').on('valid', DrugsApprovedAmountValidation, this);

    DenialReasonCode.disable();
    RequestNo.disable();
    ErxApprovalCode.disable();
    StatusCode.setComboValue(0);
    StatusCode.disable();

    Drug_Code.allowBlank = false;
    Drug_Code.isValid();

    if (ApprovalStatus) ApprovalStatus.on('select', function (combo, record, index) {

        if (ApprovalStatus.editValue == 3) { // rejected 
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            //DenialReasonCode.clearInvalid();
            ErxApprovalCode.setValue(null);
            //RequestNo.setValue(null);
            //RequestNo.disable();
            ErxApprovalCode.disable();
            ErxApprovalCode.isValid();
            RequestNo.isValid();
            ApprovedAmount.setValue(null);
            ApprovedAmount.disable();
        }
        if (ApprovalStatus.editValue == 2) {  // Approved 

            //RequestNo.enable();
            ErxApprovalCode.enable();
            DenialReasonCode.clearValue();
            Service_Name.setValue(null);
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            ApprovedAmount.enable();
            ApprovedAmount.setValue(Drug_NetTotal.getValue());
            if (Drug_NetTotal.getValue() != ApprovedAmount.getValue())  // Approved
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');
        }
        if (ApprovalStatus.editValue == 1) { // pending
            DenialReasonCode.clearValue();
            Service_Name.setValue(null);
            ErxApprovalCode.setValue(null);
            //RequestNo.setValue(null);
            DenialReasonCode.disable();
            //RequestNo.disable();
            ErxApprovalCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            ApprovedAmount.setValue(null);
            ApprovedAmount.disable();
        }

    }, this);

    var ServiceTypeCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');

    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services
        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=5) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=5 )";

    }, this);

    var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";
    }, this);

    var RouteOfAdminCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-RouteOfAdminCode');
    if (RouteOfAdminCode) RouteOfAdminCode.on('beforequery', function (evt) {  // DenialReason
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " mst.ROUTEOFADMINNAME is not null";

    }, this);

}

function AddNewNurseryPopUpEdit(form, login) {

    record = AddNewNurseryDummy;
    record.set('Doze', MDoze);
    record.set('Drug_Code', MDrug_Code);
    record.set('Drug_Name', MDrug_Name);
    record.set('No_of_days', MNo_of_days);
    record.set('NoOfTimeCode', MNoOfTimeCode);
    record.set('StatusCode', MStatusCode);
    record.set('StatusName', MStatusName);
    record.set('Times_Per_DayCode', MTimes_Per_DayCode);
    record.set('Quantity', MQuantity);
    record.set('Itm_Qtys', MItm_Qtys);
    record.set('Avg_Cost', MAvg_Cost);
    record.set('DiscountAmount', MDiscountAmount);
    record.set('Drug_Total', MDrug_Total);
    record.set('Drug_NetTotal', MDrug_NetTotal);
    record.set('IsDrugPrepaid', MIsDrugPrepaid);
    record.set('IsPosted', MIsPosted);
    //record.set('Isliquid', MEIsliquid);
    record.set('ApprovalStatusCode', MApprovalStatusCode);
    record.set('ApprovalStatusName', MApprovalStatusName);
    record.set('RequestNo', MRequestNo);
    record.set('DenialReasonCode', MDenialReasonCode);
    record.set('DenialReasonName', MDenialReasonName);
    record.set('ErxApprovalCode', MErxApprovalCode);
    record.set('DrugName', MDrugName);
    record.set('Unit', MUnit);
    record.set('UnitTypeCode', MUnitTypeCode);
    record.set('UnitTypeName', MUnitTypeName);
    record.set('FrequencyTypeCode', MFrequencyTypeCode);
    record.set('FrequencyTypeName', MFrequencyTypeName);
    record.set('Frequency', MFrequency);
    record.set('Refills', MRefills);
    record.set('RouteOfAdminCode', MRouteofAdmin);
    record.set('RouteOfAdminName', MRouteofAdminName);
    record.set('Instructions', MInstructions);
    record.set('Balance', MBalance);


    record.set('ApprovedAmount', MApprovedAmount);
}

//------------------------------- Login Reception Service PopUp ---------------

function DigClinicAddNewServicePopup(form, login) {


    var Clinic_No_Code = Ext.getCmp('LoginDiagnosticClinic-ClinicCode').editValue;

    if (Clinic_No_Code < 1) {
        Ext.MessageBox.alert(login.modulename, 'Please select the Clinic . !');
        return;
    }

    var Pl_Reception_Code = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        //   url: 'tools/HumanResources/HRGeneralRequest.aspx',
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewServicePopUp',
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DigClinicAddNewServicePopupComplete, this);
}

function DigClinicAddNewServicePopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DigClinicAddNewServicePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    DefaultDeductable = responseText.Deductable;
    DefaultCoInsurer = responseText.CoInsuer;
    this.AddServicePopUpForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddServicePopUpForm.addButton({
        text: 'Save',
        handler: function () {

            var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
            var Physician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
            var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode');
            var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
            var Service_Name = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Name');
            var StatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode');
            var DeliveryDate = Ext.getCmp('PatientLoginReceptionDetailPopUp-DeliveryDate');
            var Service_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price');
            var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
            var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
            var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
            var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');
            var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
            var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance').getValue()
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue()


            var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
            var RequestQty = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty');
            var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
            var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
            var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
            var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');

            var LoginDiagnosticClinicServicGrid = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
            var PKey = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();;

            //if (Number(RequestAmount.getValue()) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Request Amount should be greater than 0 !');
            //    return;
            //}

            LoginDiagnosticClinicServicGrid.storeId += 1;
            var ServiceID = LoginDiagnosticClinicServicGrid.storeId;
            var newRecord = new LoginDiagnosticClinicServicGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Diagnostic_ClinicCode: Ext.getCmp('LoginDiagnosticClinic').selectedIndex,
                ServiceprovidertypeCode: ServiceprovidertypeCode.editValue,
                ServiceprovidertypeName: (ServiceprovidertypeCode.editValue == 0 ? '' : ServiceprovidertypeCode.lastSelectionText),
                Service_ProviderCode: Service_ProviderCode.editValue,
                Service_ProviderName: (Service_ProviderCode.editValue == 0 ? null : Service_ProviderCode.lastSelectionText),
                Service_NoCode: ServiceTypeCode.editValue,
                Service_NoName: (ServiceTypeCode.editValue == 0 ? null : ServiceTypeCode.lastSelectionText),
                Service_Name: Service_Name.getValue(),
                Service_Alternate_Name: Service_Name.getValue(),
                Service_Price: Service_Price.getValue(),
                StatusCode: StatusCode.editValue,
                StatusName: (StatusCode.editValue == 0 ? 'Open' : StatusCode.lastSelectionText),
                SampleTime: "00:00",
                ISProvider: 0,
                Physician_Code: Physician_Code.editValue,
                Physician_Name: (Physician_Code.editValue == 0 ? null : Physician_Code.lastSelectionText),
                DeliveryDate: new Date().format(login.jsdateformat),
                Revenue_Account: "",
                Amount: 0,
                IsCashier: 0,
                OldService: 0,
                Description: "",
                Discountpercentage: 0,
                Total: Total.getValue(),
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                Deductible_Amount: Deductible_Amount.getValue(),
                PatientShare: PatientShare.getValue(),
                PatientSharePercent: PatientSharePercent.getValue(),
                RequestNo: RequestNo.getValue(),
                ApprovalStatusCode: ApprovalStatusCode.editValue,
                ApprovalStatusName: (ApprovalStatusCode.editValue == 1 ? 'Pending' : ApprovalStatusCode.lastSelectionText),
                DenialReasonCode: DenialReasonCode.editValue,
                DenialReasonName: (DenialReasonCode.editValue == 0 ? '' : DenialReasonCode.lastSelectionText),
                DenialDesc: DenialDesc.getValue(),
                ApprovedAmount: ApprovedAmount.getValue(),
                PriorAuthCode: PriorAuthCode.getValue(),
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                Attribute1: '',
                Attribute2: '',
                Attribute3: '',
                Attribute4: '',
                Attribute5: '',
                Attribute6: '',
                Attribute7: '',
                Attribute8: '',
                Attribute9: '',
                Attribute10: '',
                Attribute11: '',
                Attribute12: '',
                Attribute13: '',
                Attribute14: '',
                Attribute15: '',
                Attribute16: '',
                Attribute17: '',
                Attribute18: '',
                Attribute19: '',
                Attribute20: '',
                Attribute21: '',
                Attribute22: '',
                Attribute23: '',
                Attribute24: '',
                Attribute25: '',
                Attribute26: '',
                Attribute27: '',
                Attribute28: '',
                Attribute29: '',
                Attribute30: '',
                PaymentAmount: '',
                TemplateText: null,
                SelectCheck: false,
                DiagnosticTemplateDtlList: null,
                PatientLoginClinicObservationList: null,
                PatientLoginRecpServRemarkList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            LoginDiagnosticClinicServicGrid.stopEditing();
            LoginDiagnosticClinicServicGrid.store.add(newRecord);
            LoginDiagnosticClinicServicGrid.store.totalLength = LoginDiagnosticClinicServicGrid.store.getTotalCount() + 1;
            LoginDiagnosticClinicServicGrid.pageBar.updateInfo();

            this.AddServicePopUpFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddServicePopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpFormWindow = new Ext.Window({
        id: 'AddServicePopUpForm',
        title: 'New Services',
        closable: true,
        minimizable: false,
        width: this.AddServicePopUpForm.width + 10,
        height: this.AddServicePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddServicePopUpForm]
    });
    DefaultScreenCode = 3;// Diagno
    this.AddServicePopUpForm.on('render', RenderAddServicePopUpForm, this);
    this.AddServicePopUpFormWindow.show();
}

//-------------------------------Login Nursery Service PopUp --------------------


function ClinicAddNewServicePopup(form, login) {

    var Clinic_No_Code = Ext.getCmp('PatientLoginClinic-ClinicCode').editValue;

    if (Clinic_No_Code < 1) {
        Ext.MessageBox.alert(login.modulename, 'Please select the Clinic. !');
        return;
    }

    if (Ext.getCmp('PatientLoginClinic-ApprovedRequired').getValue() == 1)
        DefaultApprovedRequired = true;
    else
        DefaultApprovedRequired = false;

    var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        //   url: 'tools/HumanResources/HRGeneralRequest.aspx',
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewServicePopUp',
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicAddNewServicePopupComplete, this);
}


function ClinicAddNewServicePopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ClinicAddNewServicePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    DefaultDeductable = responseText.Deductable;
    DefaultCoInsurer = responseText.CoInsuer;
    this.AddServicePopUpForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddServicePopUpForm.addButton({
        text: 'Save',
        handler: function () {

            var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
            var Physician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
            var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode');
            var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
            var Service_Name = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Name');
            var StatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode');
            var DeliveryDate = Ext.getCmp('PatientLoginReceptionDetailPopUp-DeliveryDate');
            var Service_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price');
            var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
            var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
            var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
            var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');
            var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
            var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');

            var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
            var RequestQty = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty');
            var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
            var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
            var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
            var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance').getValue()
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue()

            var LoginClinicServicedtlGrid = Ext.getCmp('LoginClinicServicedtlList');
            var PKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

            //if (Number(RequestAmount.getValue()) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Request Amount should be greater than 0 !');
            //    return;
            //}

            LoginClinicServicedtlGrid.storeId += 1;
            var ServiceID = LoginClinicServicedtlGrid.storeId;
            var newRecord = new LoginClinicServicedtlGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                ServiceprovidertypeCode: ServiceprovidertypeCode.editValue,
                ServiceprovidertypeName: (ServiceprovidertypeCode.editValue == 0 ? null : ServiceprovidertypeCode.lastSelectionText),
                Service_ProviderCode: Service_ProviderCode.editValue,
                Service_ProviderName: (Service_ProviderCode.editValue == 0 ? null : Service_ProviderCode.lastSelectionText),
                Service_NoCode: ServiceTypeCode.editValue,
                Service_NoName: (ServiceTypeCode.editValue == 0 ? null : ServiceTypeCode.lastSelectionText),
                Service_Name: Service_Name.getValue(),
                SubServiceCode: '',
                SubServiceName: '',
                Service_Alternate_Name: Service_Name.getValue(),
                Service_Price: Service_Price.getValue(),
                StatusCode: StatusCode.editValue,
                StatusName: (StatusCode.editValue == 0 ? 'Open' : StatusCode.lastSelectionText),
                SampleTime: "00:00",
                ISProvider: 0,
                Physician_Code: Physician_Code.editValue,
                Physician_Name: (Physician_Code.editValue == 0 ? null : Physician_Code.lastSelectionText),
                ClinicTemplateDtlList: null,
                DeliveryDate: new Date().format(login.jsdateformat),
                Revenue_Account: "",
                Amount: 0,
                RequestNo: RequestNo.getValue(),
                ApprovalStatusCode: ApprovalStatusCode.editValue,
                ApprovalStatusName: (ApprovalStatusCode.editValue == 1 ? 'Pending' : ApprovalStatusCode.lastSelectionText),
                DenialReasonCode: DenialReasonCode.editValue,
                DenialReasonName: (DenialReasonCode.editValue == 0 ? null : DenialReasonCode.lastSelectionText),
                DenialDesc: DenialDesc.getValue(),
                ApprovedAmount: ApprovedAmount.getValue(),
                PriorAuthCode: PriorAuthCode.getValue(),
                IsCashier: 0,
                OldService: 0,
                Description: "",
                Discountpercentage: 0,
                Total: Total.getValue(),
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                Deductible_Amount: Deductible_Amount.getValue(),
                PatientShare: PatientShare.getValue(),
                PatientSharePercent: PatientSharePercent.getValue(),
                PatientLoginClinicObservationList: null,
                PatientLoginRecpServRemarkList: null,
                TemplateText: null,
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                Attribute1: '',
                Attribute2: '',
                Attribute3: '',
                Attribute4: '',
                Attribute5: '',
                Attribute6: '',
                Attribute7: '',
                Attribute8: '',
                Attribute9: '',
                Attribute10: '',
                Attribute11: '',
                Attribute12: '',
                Attribute13: '',
                Attribute14: '',
                Attribute15: '',
                Attribute16: '',
                Attribute17: '',
                Attribute18: '',
                Attribute19: '',
                Attribute20: '',
                Attribute21: '',
                Attribute22: '',
                Attribute23: '',
                Attribute24: '',
                Attribute25: '',
                Attribute26: '',
                Attribute27: '',
                Attribute28: '',
                Attribute29: '',
                Attribute30: '',
                PaymentAmount: '',
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            LoginClinicServicedtlGrid.stopEditing();
            LoginClinicServicedtlGrid.store.add(newRecord);
            LoginClinicServicedtlGrid.store.totalLength = LoginClinicServicedtlGrid.store.getTotalCount() + 1;
            LoginClinicServicedtlGrid.pageBar.updateInfo();

            this.AddServicePopUpFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddServicePopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpFormWindow = new Ext.Window({
        id: 'AddServicePopUpForm',
        title: 'New Services',
        closable: true,
        minimizable: false,
        width: this.AddServicePopUpForm.width + 10,
        height: this.AddServicePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddServicePopUpForm]
    });
    DefaultScreenCode = 2; // Clinic
    this.AddServicePopUpForm.on('render', RenderAddServicePopUpForm, this);
    this.AddServicePopUpFormWindow.show();
}

function NurseAddNewServicePopup(form, login) {

    var Clinic_No_Code = Ext.getCmp('LoginNursery-Clinic_No_Code').editValue;

    if (Clinic_No_Code < 1) {
        Ext.MessageBox.alert(login.modulename, 'Please select the Clinic . !');
        return;
    }

    if (Ext.getCmp('LoginNursery-ApprovedRequired').getValue() == 1)
        DefaultApprovedRequired = true;
    else
        DefaultApprovedRequired = false;

    var Pl_Reception_Code = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        //   url: 'tools/HumanResources/HRGeneralRequest.aspx',
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewServicePopUp',
            Pl_Reception_Code: Pl_Reception_Code
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', NurseAddNewServicePopupComplete, this);
}
function NurseAddNewServicePopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', NurseAddNewServicePopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    DefaultDeductable = responseText.Deductable;
    DefaultCoInsurer = responseText.CoInsuer;
    this.AddServicePopUpForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddServicePopUpForm.addButton({
        text: 'Save',
        handler: function () {

            var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
            var Physician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
            var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode');
            var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
            var Service_Name = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Name');
            var StatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode');
            var DeliveryDate = Ext.getCmp('PatientLoginReceptionDetailPopUp-DeliveryDate');
            var Service_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price');
            var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
            var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
            var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
            var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');
            var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
            var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance').getValue()
            var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue()

            var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
            var RequestQty = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty');
            var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
            var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
            var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
            var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');

            //if (Number(RequestAmount.getValue()) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Request Amount should be greater than 0 !');
            //    return;
            //}

            var PatientLoginReceptionEntryDetGrid = Ext.getCmp('LoginNurseryServicedtlList');
            var PKey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();;

            PatientLoginReceptionEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginReceptionEntryDetGrid.storeId;
            var newRecord = new PatientLoginReceptionEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                ServiceprovidertypeCode: ServiceprovidertypeCode.editValue,
                ServiceprovidertypeName: (ServiceprovidertypeCode.editValue == 0 ? '' : ServiceprovidertypeCode.lastSelectionText),
                Service_ProviderCode: Service_ProviderCode.editValue,
                Service_ProviderName: (Service_ProviderCode.editValue == 0 ? null : Service_ProviderCode.lastSelectionText),
                Service_NoCode: ServiceTypeCode.editValue,
                Service_NoName: (ServiceTypeCode.editValue == 0 ? null : ServiceTypeCode.lastSelectionText),
                Service_Name: Service_Name.getValue(),
                Service_Alternate_Name: Service_Name.getValue(),
                Service_Price: Service_Price.getValue(),
                StatusCode: StatusCode.editValue,
                StatusName: (StatusCode.editValue == 0 ? 'Open' : StatusCode.lastSelectionText),
                SampleTime: "00:00",
                ISProvider: 0,
                Physician_Code: Physician_Code.editValue,
                Physician_Name: (Physician_Code.editValue == 0 ? null : Physician_Code.lastSelectionText),
                SubServiceCode: '',
                SubServiceName: '',
                LoginNurseryTemplateDtlList: null,
                PatientLoginClinicObservationList: null,
                PatientLoginRecpServRemarkList: null,
                DeliveryDate: new Date().format(login.jsdateformat),
                Revenue_Account: "",
                Emirates_ID_No: null,
                Amount: 0,
                IsCashier: 0,
                OldService: 0,
                Description: "",
                Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
                Discountpercentage: 0,
                Total: Total.getValue(),
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                Deductible_Amount: Deductible_Amount.getValue(),
                PatientShare: PatientShare.getValue(),
                PatientSharePercent: PatientSharePercent.getValue(),
                RequestNo: RequestNo.getValue(),
                ApprovalStatusCode: ApprovalStatusCode.editValue,
                ApprovalStatusName: (ApprovalStatusCode.editValue == 1 ? 'Pending' : ApprovalStatusCode.lastSelectionText),
                DenialReasonCode: DenialReasonCode.editValue,
                DenialReasonName: (DenialReasonCode.editValue == 0 ? null : DenialReasonCode.lastSelectionText),
                DenialDesc: DenialDesc.getValue(),
                ApprovedAmount: ApprovedAmount.getValue(),
                PriorAuthCode: PriorAuthCode.getValue(),
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                Attribute1: '',
                Attribute2: '',
                Attribute3: '',
                Attribute4: '',
                Attribute5: '',
                Attribute6: '',
                Attribute7: '',
                Attribute8: '',
                Attribute9: '',
                Attribute10: '',
                Attribute11: '',
                Attribute12: '',
                Attribute13: '',
                Attribute14: '',
                Attribute15: '',
                Attribute16: '',
                Attribute17: '',
                Attribute18: '',
                Attribute19: '',
                Attribute20: '',
                Attribute21: '',
                Attribute22: '',
                Attribute23: '',
                Attribute24: '',
                Attribute25: '',
                Attribute26: '',
                Attribute27: '',
                Attribute28: '',
                Attribute29: '',
                Attribute30: '',
                PaymentAmount: '',
                IsPrepaid: 0,
                TemplateText: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginReceptionEntryDetGrid.stopEditing();
            PatientLoginReceptionEntryDetGrid.store.add(newRecord);
            PatientLoginReceptionEntryDetGrid.store.totalLength = PatientLoginReceptionEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginReceptionEntryDetGrid.pageBar.updateInfo();

            this.AddServicePopUpFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddServicePopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpFormWindow = new Ext.Window({
        id: 'AddServicePopUpForm',
        title: 'New Services',
        closable: true,
        minimizable: false,
        width: this.AddServicePopUpForm.width + 10,
        height: this.AddServicePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddServicePopUpForm]
    });
    DefaultScreenCode = 1;// Nursery
    this.AddServicePopUpForm.on('render', RenderAddServicePopUpForm, this);
    this.AddServicePopUpFormWindow.show();
}

function RenderAddServicePopUpForm(form, login1) {

    var PhysicianCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
    if (DefaultScreenCode == 1) { // Nursery
        var Mc_PhysicianCode = Ext.getCmp('LoginNursery-Mc_PhysicianCode').editValue;
        if (Mc_PhysicianCode != null || Mc_PhysicianCode != '') {
            PhysicianCode.setComboValue(Mc_PhysicianCode);
        }
    }
    if (DefaultScreenCode == 2) { // Clinic
        var Mc_PhysicianCode = Ext.getCmp('PatientLoginClinic-Mc_PhysicianCode').editValue;
        if (Mc_PhysicianCode != null || Mc_PhysicianCode != '') {
            PhysicianCode.setComboValue(Mc_PhysicianCode);
        }
    }

    var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode');
    if (DefaultClinicCode > 0) Service_ProviderCode.setComboValue(DefaultClinicCode);
    var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
    ServiceprovidertypeCode.setComboValue(8);

    var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
    var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
    var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
    var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
    var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
    var Service_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType');
    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');

    Deductible_Amount.setValue(DefaultDeductable); PatientSharePercent.setValue(DefaultCoInsurer);

    if (RequestAmount) RequestAmount.on('valid', ServicePopupAmountCalculation, this);
    if (Deductible_Amount) Deductible_Amount.on('valid', ServicePopupAmountCalculation, this);

    if (Service_Price) Service_Price.on('valid', function (field) {
        RequestAmount.setValue(field.getValue());
        ServicePopupAmountCalculation();
    }, this);

    if (PatientSharePercent) PatientSharePercent.on('blur', function (field) {
        ServicePopupAmountCalculation();
    }, this);

    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    if (ApprovedAmount) ApprovedAmount.on('valid', ApprovedAmountValidation, this);

    var Physician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
    var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
    var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
    var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');
    if (ServiceTypeCode) ServiceTypeCode.on('select', ServiceTypeSelected, this);

    if (DefaultPatientType == 4) {
        Physician_Code.allowBlank = false;
        Physician_Code.clearInvalid();
    }
    else {
        ApprovalStatusCode.setComboValue(2);
        ApprovalStatusCode.disable();
        PatientShare.disable();
        PatientSharePercent.disable();
        Deductible_Amount.disable();
        RequestNo.disable();
        PriorAuthCode.disable();
    }

    if (Physician_Code) Physician_Code.on('beforequery', function (evt) {
        var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CLI.PROVIDERCODE=" + Service_ProviderCode;
        /*
        if (DefaultPatientType == 4)  // Insurrer
            evt.combo.store.baseParams.filter = " CLI.PROVIDERCODE=" + Service_ProviderCode;
        else {
            if (Ext.getCmp('PatientLoginClinic-ClinicCode'))
                evt.combo.store.baseParams.filter = " CLI.PROVIDERCODE=" + Ext.getCmp('PatientLoginClinic-ClinicCode').editValue;
            if (Ext.getCmp('LoginNursery-Clinic_No_Code'))
                evt.combo.store.baseParams.filter = " CLI.PROVIDERCODE=" + Ext.getCmp('LoginNursery-Clinic_No_Code').editValue;
            if (Ext.getCmp('LoginDiagnosticClinic-ClinicCode'))
                evt.combo.store.baseParams.filter = " CLI.PROVIDERCODE=" + Ext.getCmp('LoginDiagnosticClinic-ClinicCode').editValue;
        }
        */
    }, this);

    if (Physician_Code) Physician_Code.on('select', function (combo, record, index) {
        DefaultApprovedRequired = record.data.ApprovedRequired;
    }, this);

    var RequestQty = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty');
    RequestQty.setValue(1);
    RequestQty.disable();

    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
    var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');

    if (ApprovalStatusCode.editValue != 3) {
        DenialReasonCode.allowBlank = true;
        DenialReasonCode.isValid();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
        RequestNo.disable();
        PriorAuthCode.disable();
    }
    if (ApprovalStatusCode.editValue != 2) {
        RequestNo.disable();
        PriorAuthCode.disable();
        ApprovedAmount.disable();
    }

    if (ApprovalStatusCode) ApprovalStatusCode.on('select', function (combo, record, index) {
        if (ApprovalStatusCode.editValue == 3) {
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');
        }

        if (ApprovalStatusCode.editValue == 2) {

            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.enable();
            //RequestNo.enable();
            //RequestNo.allowBlank = false;
            //RequestNo.isValid();
            PriorAuthCode.enable();
            PriorAuthCode.allowBlank = false;
            PriorAuthCode.isValid();
            ApprovedAmount.setValue(Total.getValue());
            if (Total.getValue() != ApprovedAmount.getValue())
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue != 2 && ApprovalStatusCode.editValue != 3) {
            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.setValue(null);
            ApprovedAmount.disable();
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.removeClass('approve-editor');
        }
    }, this);

    var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
    var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=" + ServiceprovidertypeCode.editValue + ") OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=" + ServiceprovidertypeCode.editValue + " and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=" + ServiceprovidertypeCode.editValue + ") OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=" + ServiceprovidertypeCode.editValue + " )";
    }, this);

    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ") ";
    }, this);

    //--------------------  StandardCode Select Event to Fill Price  ------------------

}


function ServicePopupAmountCalculation(form, login1) {

    var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
    var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
    var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
    var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').getValue();
    var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance');
    var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
    var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');

    if (Number(RequestAmount.getValue()) > 0) {
        if (Number(Deductible_Amount.getValue()) > Number(RequestAmount.getValue())) {
            Ext.MessageBox.alert(login.modulename, 'Deductible Amount less than or eqaul to Request amount');
            Deductible_Amount.setValue(0);
            return;
        }

        var PS = (Number(RequestAmount.getValue()) * Number(PatientSharePercent.getValue())) / 100;
        PatientShare.setValue(PS);

        if (ServiceActivityType > 0) {
            Total.setValue(Number(RequestAmount.getValue()));
            Balance.setValue(Number(RequestAmount.getValue()) - Number(ApprovedAmount.getValue()));
        }
        else {
            Total.setValue(Number(RequestAmount.getValue()) - (Number(PatientShare.getValue()) + Number(Deductible_Amount.getValue())));
            Balance.setValue(Number(RequestAmount.getValue()) - Number(ApprovedAmount.getValue()));

            ApprovedAmountValidation();
        }

    }
    else {
        Total.setValue(0); Balance.setValue(0);
        ApprovedAmountValidation();
    }

}

var PatientLoginReceptionServiceRcrd = '';
function RecpAddNewServiceHandlerEdit(record) {

    if (record.get('Service_CashTypeCode') != 2) {

        if (record.get('ClaimStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Claim Submission.You can not allow to edit this record');
            return;
        }
        if (record.get('PriorStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Prior Request.You can not allow to edit this record');
            return;
        }
        if (record.get('ApprovalStatusCode') == 2) {
            Ext.MessageBox.alert(login.modulename, 'Approved record can not allow to edit');
            return;
        }
    }

    if (record.get('PaymentAmount') == 0) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'AddNewServicePopUpEdit'
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', AddNewServicePopUpEditComplete, this);
        PatientLoginReceptionServiceRcrd = record;
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'You can not allow to edit this record. Paid Amount should be 0');
        return;
    }

}
var MEBALANCE = ''; MEServiceprovidertypeCode = '', MEServiceprovidertypeName = '', MEPhysician_Code = '', MEPhysician_Name = '', MEService_ProviderCode = '', MEService_ProviderName = '', MEServiceTypeCode = '';
var MEService_Price = '', MEServiceTypeName = '', MEService_Name = '', MEStatusCode = '', MEStatusName = '', MEDeliveryDate = '', MERequestNo = '', MEApprovalStatusCode = '', MEApprovalStatusName = '', MEDenialReasonCode = '', MEDenialReasonName = '', MEDenialDesc = '', MEApprovedAmount = '', MEPriorAuthCode = '';
var MERequestAmount = '', MERequestQty = '', MEDeductible_Amount = '', MEPatientSharePercent = '', MEPatientShare = '', METotal = '';
function AddNewServicePopUpEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewServicePopUpEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddServicePopUpForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddServicePopUpForm.addButton({
        text: 'Save',
        handler: function () {

            MEServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode').editValue;
            MEServiceprovidertypeName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode').editValue == 0 ? null : Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode').lastSelectionText);
            MEPhysician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code').editValue;
            MEPhysician_Name = (Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code').editValue == 0 ? null : Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code').lastSelectionText);
            MEService_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').editValue;
            MEService_ProviderName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').editValue == 0 ? null : Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').lastSelectionText);
            MEServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode').editValue;
            MEServiceTypeName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode').editValue == 0 ? null : Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode').lastSelectionText);
            MEService_Name = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Name').getValue();
            MEStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode').editValue;
            MEStatusName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode').editValue == 0 ? 'Open' : Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode').lastSelectionText);
            MEDeliveryDate = Ext.getCmp('PatientLoginReceptionDetailPopUp-DeliveryDate').getValue();
            MEService_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price').getValue();
            METotal = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total').getValue();
            MERequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo').getValue();
            MEApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode').editValue;
            MEApprovalStatusName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode').editValue == 0 ? null : Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode').lastSelectionText);
            MEDenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode').editValue;
            MEDenialReasonName = (Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode').editValue == 0 ? '' : Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode').lastSelectionText);
            MEDenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc').getValue();
            MEApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount').getValue();
            MEPriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode').getValue();
            MERequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount').getValue();
            MERequestQty = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty').getValue();
            MEDeductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount').getValue();
            MEPatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent').getValue();
            MEPatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare').getValue();
            MEBALANCE = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance').getValue();


            PatientLoginReceptionDetailPopUpNewMode();
            this.AddServicePopUpFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddServicePopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpFormWindow = new Ext.Window({
        id: 'AddServicePopUpForm',
        title: 'Service',
        closable: true,
        minimizable: false,
        width: this.AddServicePopUpForm.width + 10,
        height: this.AddServicePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddServicePopUpForm]
    });
    this.AddServicePopUpForm.on('render', AddServicePopUpFormRender, this);
    this.AddServicePopUpFormWindow.show();
}

var record = '';
function PatientLoginReceptionDetailPopUpNewMode(form, login) {
    record = PatientLoginReceptionServiceRcrd;
    record.set('ServiceprovidertypeCode', MEServiceprovidertypeCode);
    record.set('ServiceprovidertypeName', MEServiceprovidertypeName);
    record.set('Physician_Code', MEPhysician_Code);
    record.set('Physician_Name', MEPhysician_Name);
    record.set('Service_ProviderCode', MEService_ProviderCode);
    record.set('Service_ProviderName', MEService_ProviderName);
    record.set('ServiceTypeCode', MEServiceTypeCode);
    record.set('ServiceTypeName', MEServiceTypeName);
    record.set('Service_Name', MEService_Name);
    record.set('StatusCode', MEStatusCode);
    record.set('StatusName', MEStatusName);
    record.set('DeliveryDate', MEDeliveryDate);
    record.set('RequestNo', MERequestNo);
    record.set('ApprovalStatusCode', MEApprovalStatusCode);
    record.set('ApprovalStatusName', MEApprovalStatusName);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('DenialReasonName', MEDenialReasonName);
    record.set('DenialDesc', MEDenialDesc);
    record.set('ApprovedAmount', MEApprovedAmount);
    record.set('PriorAuthCode', MEPriorAuthCode);
    record.set('Service_Price', MEService_Price);
    record.set('Total', METotal);
    record.set('Service_NoCode', MEServiceTypeCode);
    record.set('Service_NoName', MEServiceTypeName);
    record.set('RequestAmount', MERequestAmount);
    record.set('RequestQty', MERequestQty);
    record.set('Deductible_Amount', MEDeductible_Amount);
    record.set('PatientSharePercent', MEPatientSharePercent);
    record.set('PatientShare', MEPatientShare);
    record.set('Balance', MEBALANCE);
}
function AddServicePopUpFormRender(form, login1) {

    record = PatientLoginReceptionServiceRcrd;
    if (record.get('ServiceprovidertypeCode') == undefined)
        record.set('ServiceprovidertypeCode', 0)
    if (record.get('ServiceTypeCode') == undefined) {
        record.set('ServiceTypeCode', record.get('Service_NoCode'));
        record.set('ServiceTypeName', record.get('Service_NoName'))
    }
    Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode').setComboValueDisplay(record.data.ServiceprovidertypeCode, record.data.ServiceprovidertypeName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code').setComboValueDisplay(record.data.Physician_Code, record.data.Physician_Name);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').setComboValueDisplay(record.data.Service_ProviderCode, record.data.Service_ProviderName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode').setComboValueDisplay(record.data.ServiceTypeCode, record.data.ServiceTypeName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Name').setValue(record.get('Service_Name'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-StatusCode').setComboValueDisplay(record.data.StatusCode, record.data.StatusName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-DeliveryDate').setValue(record.get('DeliveryDate'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo').setValue(record.get('RequestNo'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode').setValue(record.get('PriorAuthCode'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount').setValue(record.get('ApprovedAmount'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode').setComboValueDisplay(record.data.DenialReasonCode, record.data.DenialReasonName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc').setValue(record.get('DenialDesc'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode').setComboValueDisplay(record.data.ApprovalStatusCode, record.data.ApprovalStatusName);
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price').setValue(record.get('Service_Price'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount').setValue(record.get('RequestAmount'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestQty').setValue(record.get('RequestQty'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount').setValue(record.get('Deductible_Amount'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent').setValue(record.get('PatientSharePercent'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare').setValue(record.get('PatientShare'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Total').setValue(record.get('Total'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance').setValue(record.get('Balance'));
    Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType').setValue(record.get('ServiceActivityType'));

    var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
    var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
    var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
    var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
    var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
    var Service_Price = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
    var ServiceActivityType = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceActivityType');
    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');

    if (RequestAmount) RequestAmount.on('valid', ServicePopupAmountCalculation, this);
    if (Deductible_Amount) Deductible_Amount.on('valid', ServicePopupAmountCalculation, this);

    if (Service_Price) Service_Price.on('valid', function (field) {
        RequestAmount.setValue(field.getValue());
        ServicePopupAmountCalculation();
    }, this);

    if (PatientSharePercent) PatientSharePercent.on('blur', function (field) {
        ServicePopupAmountCalculation();
    }, this);

    var Physician_Code = Ext.getCmp('PatientLoginReceptionDetailPopUp-Physician_Code');
    var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
    var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');

    if (DefaultPatientType == 4) {
        Physician_Code.allowBlank = false;
        Physician_Code.clearInvalid();
    }
    else {
        ApprovalStatusCode.disable();
        PatientShare.disable();
        PatientSharePercent.disable();
        Deductible_Amount.disable();
        PriorAuthCode.disable();
        RequestNo.disable();
    }

    if (ServiceActivityType.getValue() > 0) {
        Deductible_Amount.disable();
        PatientShare.disable();
        PatientSharePercent.disable();
        ApprovalStatusCode.disable();
        DenialReasonCode.disable();
        PriorAuthCode.disable();
        RequestNo.disable();
    }

    if (Physician_Code) Physician_Code.on('select', function (combo, record, options) {
        DefaultApprovedRequired = record.data.ApprovedRequired;
    }, this);

    if (Physician_Code) Physician_Code.on('beforequery', function (evt) {
        var Service_ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "CLI.PROVIDERCODE=" + Service_ProviderCode;
    }, this);

    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
    var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');
    var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
    var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');

    var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');

    if (ApprovedAmount) ApprovedAmount.on('valid', ApprovedAmountValidation, this);
    if (Total) Total.on('valid', ApprovedAmountValidation, this);

    if (ApprovalStatusCode.editValue != 3) {
        DenialReasonCode.allowBlank = true;
        DenialReasonCode.isValid();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
    }
    if (ApprovalStatusCode.editValue != 2) {
        RequestNo.disable();
        PriorAuthCode.disable();
        ApprovedAmount.disable();
    }
    if (ApprovalStatusCode.editValue == 2) {
        ApprovedAmount.enable();
        RequestNo.enable();
        PriorAuthCode.enable();
    }


    if (ApprovalStatusCode) ApprovalStatusCode.on('select', function (combo, record, index) {
        if (ApprovalStatusCode.editValue == 3) {
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.isValid();
            //RequestNo.allowBlank = true;
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');
        }

        if (ApprovalStatusCode.editValue == 2) {

            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.enable();
            //RequestNo.enable();
            //RequestNo.allowBlank = false;
            //RequestNo.isValid();
            PriorAuthCode.enable();
            PriorAuthCode.allowBlank = false;
            PriorAuthCode.isValid();
            ApprovedAmount.setValue(Total.getValue());
            if (Total.getValue() != ApprovedAmount.getValue())
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue != 2 && ApprovalStatusCode.editValue != 3) {
            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.setValue(null);
            ApprovedAmount.disable();
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.isValid();
            //RequestNo.allowBlank = true;
            ApprovedAmount.removeClass('approve-editor');
        }

    }, this);

    var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
    var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode');
    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType != 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=" + ServiceprovidertypeCode.editValue + ") OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=" + ServiceprovidertypeCode.editValue + " and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=" + ServiceprovidertypeCode.editValue + ") OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=" + ServiceprovidertypeCode.editValue + " )";

    }, this);

    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";
    }, this);

    var ServiceTypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceTypeCode');
    if (ServiceTypeCode) ServiceTypeCode.on('select', ServiceTypeSelected, this);

}


function LoginNurseInjectHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddLoginInjectionDrug',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoginNurseInjectComplete, this);
}

function LoginNurseInjectComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoginNurseInjectComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddLoginInjectionForm = new Ext.form.FormPanel(responseText.AddLoginInjectionCofig);

    this.AddLoginInjectionForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseInjectionDtlList');
            var LoginNurseInjectPopupList = Ext.getCmp('LoginNurseInjectPopupList');
            var selectcnt = 0;
            var PKey = Ext.getCmp('LoginNursery').selectedIndex;

            var ADrug_Code = Ext.getCmp('LoginNurseInjectPopup-Drug_Code').editValue;
            var ADrug_Name = (ADrug_Code == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-Drug_Code').lastSelectionText);
            var ADrugName = Ext.getCmp('LoginNurseInjectPopup-DrugName').getValue();
            var ADoze = Ext.getCmp('LoginNurseInjectPopup-Doze').getValue();
            var ANo_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days').getValue();
            var AStatusCode = Ext.getCmp('LoginNurseInjectPopup-StatusCode').editValue;
            var AStatusName = (AStatusCode == 0 ? 'Open' : Ext.getCmp('LoginNurseInjectPopup-StatusCode').lastSelectionText);
            var ATimes_Per_DayCode = Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').editValue;
            var ATimes_Per_DayName = (ATimes_Per_DayCode == 0 ? 'OD' : Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').lastSelectionText);
            var AQuantity = Ext.getCmp('LoginNurseInjectPopup-Quantity').getValue();
            var AAvg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').getValue();
            var ADrug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total').getValue();
            var ARequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo').getValue();
            var AApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').editValue;
            var AApprovalStatusName = (AApprovalStatusCode == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').lastSelectionText);
            var ADenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').editValue;
            var ADenialReasonName = (ADenialReasonCode == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').lastSelectionText);
            var ADenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc').getValue();
            var AApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').getValue();
            var APriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').getValue();
            var ServiceActivityType = Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance').getValue()
            var ServiceActivityType = Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType').getValue();

            //if (Number(ADrug_Total) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Total should be greater than 0 !');
            //    return;
            //}

            PatientLoginClinicEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
            var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
                Drug_Code: ADrug_Code,
                Drug_Name: ADrug_Name,
                DrugName: ADrugName,
                Doze: ADoze,
                No_of_days: ANo_of_days,
                StatusCode: AStatusCode,
                StatusName: AStatusName,
                Times_Per_DayCode: ATimes_Per_DayCode,
                Times_Per_DayName: ATimes_Per_DayName,
                Quantity: AQuantity,
                Itm_Qtys: null,
                Avg_Cost: AAvg_Cost,
                DiscountAmount: 0,
                Drug_Total: ADrug_Total,
                Drug_NetTotal: 0,
                IsDrugPrepaid: 0,
                IsPosted: 0,
                RequestNo: ARequestNo,
                ApprovalStatusCode: AApprovalStatusCode,
                ApprovalStatusName: AApprovalStatusName,
                DenialReasonCode: ADenialReasonCode,
                DenialReasonName: ADenialReasonName,
                DenialDesc: ADenialDesc,
                ApprovedAmount: AApprovedAmount,
                PriorAuthCode: APriorAuthCode,
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                Isliquid: 1,
                PaymentAmount: 0,
                // Note: null,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicEntryDetGrid.stopEditing();
            PatientLoginClinicEntryDetGrid.store.add(newRecord);
            PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginClinicEntryDetGrid.pageBar.updateInfo();

            this.AddLoginInjectionFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddLoginInjectionForm.FormFieldsCount + 2
    });



    this.AddLoginInjectionForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddLoginInjectionFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddLoginInjectionForm.FormFieldsCount + 2
    });

    this.AddLoginInjectionFormWindow = new Ext.Window({
        id: 'AddLoginInjectionForm',
        title: 'Add Injection',
        closable: true,
        minimizable: false,
        width: this.AddLoginInjectionForm.width + 10,
        height: this.AddLoginInjectionForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddLoginInjectionForm]
    });
    this.AddLoginInjectionForm.on('render', LoginNurseInjectPopupRendeer, this);
    this.AddLoginInjectionFormWindow.show();

}


function InjectAmoutnCalculation(form, login1) {

    var Doze = Ext.getCmp('LoginNurseInjectPopup-Doze');
    var No_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days');
    var Quantity = Ext.getCmp('LoginNurseInjectPopup-Quantity');
    var Avg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');
    var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance');

    Drug_Total.setValue(Number(Quantity.getValue()) * Number(Avg_Cost.getValue()));

    if (DefaultPatientType != 4) {
        ApprovedAmount.setValue(Number(Drug_Total.getValue()));
        Balance.setValue(Number(Drug_Total.getValue()));
    }
    else {
        Balance.setValue(Number(Drug_Total.getValue()) - Number(ApprovedAmount.getValue()));
        InjectionApprovedAmountValidation();
    }

}
function LoginNurseInjectPopupRendeer(form, login1) {

    var Doze = Ext.getCmp('LoginNurseInjectPopup-Doze');
    var No_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days');
    var Quantity = Ext.getCmp('LoginNurseInjectPopup-Quantity');
    var Avg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');

    Quantity.setValue(1);
    No_of_days.setValue(1);

    if (Doze) Doze.on('valid', function (field) {
        Quantity.setValue(Number(No_of_days.getValue()) * Number(Doze.getValue()));
        InjectAmoutnCalculation();
    }, this);

    if (No_of_days) No_of_days.on('valid', function (field) {
        Quantity.setValue(Number(No_of_days.getValue()) * Number(Doze.getValue()));
        InjectAmoutnCalculation();
    }, this);

    if (Avg_Cost) Avg_Cost.on('valid', InjectAmoutnCalculation, this);
    if (Quantity) Quantity.on('valid', InjectAmoutnCalculation, this);

    if (Drug_Total) Drug_Total.on('vaild', InjectAmoutnCalculation, this);
    if (ApprovedAmount) ApprovedAmount.on('valid', InjectAmoutnCalculation, this);


    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode');
    var DenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc');
    var RequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo');
    var PriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode');


    if (ApprovalStatusCode.editValue != 3) {
        DenialReasonCode.allowBlank = true;
        DenialReasonCode.isValid();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
    }
    if (ApprovalStatusCode.editValue != 2) {
        RequestNo.disable();
        PriorAuthCode.disable();
        ApprovedAmount.disable();
    }

    var PriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode');
    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');

    if (DefaultPatientType != 4) {
        ApprovalStatusCode.setComboValue(2);
        ApprovalStatusCode.disable();
        RequestNo.disable();
        PriorAuthCode.disable();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
    }

    if (ApprovalStatusCode) ApprovalStatusCode.on('select', function (combo, record, index) {
        if (ApprovalStatusCode.editValue == 3) { // rejected 
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            ApprovedAmount.setValue(null);
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue == 2) { // Approved 

            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.enable();
            PriorAuthCode.enable();
            PriorAuthCode.allowBlank = false;
            PriorAuthCode.isValid();
            ApprovedAmount.setValue(Drug_Total.getValue());
            if (Drug_Total.getValue() != ApprovedAmount.getValue())  // Approved
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue != 3 && ApprovalStatusCode.editValue != 2) {
            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.setValue(null);
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');
        }

    }, this);



    //------------------- SErviceCode Filterstion Based on Activity Type ---------------------

    var ServiceTypeCode = Ext.getCmp('LoginNurseInjectPopup-Drug_Code');

    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=4) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=4 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=4) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=4 )";

    }, this);

    //------------------- SErviceCode Filterstion Based on Filter Setting ---------------------

    var DenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";
    }, this);


    var DrugCode = Ext.getCmp('LoginNurseInjectPopup-Drug_Code');
    if (DrugCode) DrugCode.on('select', InjectionServiceTypeSelected, this);

}
var PatientLoginNurseInjectionRcrd = '';
function LoginNurseInjectHandlerEdit(record) {

    if (record.get('Service_CashTypeCode') != 2) {

        if (record.get('ClaimStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Claim Submission.You can not allow to edit this record');
            return;
        }
        if (record.get('PriorStatus') == 1) {
            Ext.MessageBox.alert(login.modulename, 'Record Posted into Prior Request.You can not allow to edit this record');
            return;
        }
        if (record.get('ApprovalStatusCode') == 2) {
            Ext.MessageBox.alert(login.modulename, 'Approved record can not allow to edit');
            return;
        }
    }

    if (record.get('PaymentAmount') == 0) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'AddLoginInjectionDrugEdit'
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', LoginNurseInjectEditComplete, this);
        PatientLoginNurseInjectionRcrd = record;
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'You can not allow to edit this record. Paid Amount should be 0');
        return;
    }
}

var MEDrug_Code = '', MEDrugName = '', MEDrugName = '', MEDoze = '', MENo_of_days = '', MEStatusCode = '', MEStatusName = '';
var METimes_Per_DayCode = '', METimes_Per_DayName = '', MEQuantity = '', MEDrug_Total = '';
var MERequestNo = '', MEApprovalStatusCode = '', MEApprovalStatusName = '', MEDenialReasonCode = '', MEDenialReasonName = '', MEApprovedAmount = '', MEPriorAuthCode = '';
var MEDenialDesc = '', MEBalance = '';
function LoginNurseInjectEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoginNurseInjectEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddServicePopUpForm = new Ext.form.FormPanel(responseText.AddLoginInjectionDrugEditCofig);
    this.AddServicePopUpForm.addButton({
        text: 'Load',
        handler: function () {

            MEDrug_Code = Ext.getCmp('LoginNurseInjectPopup-Drug_Code').editValue;
            MEDrug_Name = (Ext.getCmp('LoginNurseInjectPopup-Drug_Code').editValue == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-Drug_Code').lastSelectionText);
            MEDrugName = Ext.getCmp('LoginNurseInjectPopup-DrugName').getValue();
            MEDoze = Ext.getCmp('LoginNurseInjectPopup-Doze').getValue();
            MENo_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days').getValue();
            MEStatusCode = Ext.getCmp('LoginNurseInjectPopup-StatusCode').editValue;
            MEStatusName = (Ext.getCmp('LoginNurseInjectPopup-StatusCode').editValue == 0 ? 'Open' : Ext.getCmp('LoginNurseInjectPopup-StatusCode').lastSelectionText);
            METimes_Per_DayCode = Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').editValue;
            METimes_Per_DayName = (Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').editValue == 0 ? 'OD' : Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').lastSelectionText);
            MEQuantity = Ext.getCmp('LoginNurseInjectPopup-Quantity').getValue();
            MEAvg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').getValue();
            MEDrug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total').getValue();
            MERequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo').getValue();
            MEApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').editValue;
            MEApprovalStatusName = (Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').editValue == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').lastSelectionText);
            MEDenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').editValue;
            MEDenialReasonName = (Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').editValue == 0 ? null : Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').lastSelectionText);
            MEDenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc').getValue();
            MEApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').getValue();
            MEPriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').getValue();
            MEBalance = Ext.getCmp('LoginNurseInjectPopup-Balance').getValue();

            PatientLoginNurseInjectionEditMode();
            this.AddServicePopUpFormWindow.close();
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddServicePopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddServicePopUpForm.FormFieldsCount + 2
    });
    this.AddServicePopUpFormWindow = new Ext.Window({
        id: 'AddServicePopUpForm',
        title: 'Injection',
        closable: true,
        minimizable: false,
        width: this.AddServicePopUpForm.width + 10,
        height: this.AddServicePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddServicePopUpForm]
    });
    this.AddServicePopUpForm.on('render', LoginNurseInjectPopupEditRendeer, this);
    this.AddServicePopUpFormWindow.show();
}

var record = '';
function PatientLoginNurseInjectionEditMode(form, login) {
    record = PatientLoginNurseInjectionRcrd;
    record.set('Drug_Code', MEDrug_Code);
    record.set('Drug_Name', MEDrug_Name);
    record.set('DrugName', MEDrugName);
    record.set('Doze', MEDoze);
    record.set('No_of_days', MENo_of_days);
    record.set('StatusCode', MEStatusCode);
    record.set('StatusName', MEStatusName);
    record.set('Times_Per_DayCode', METimes_Per_DayCode);
    record.set('Times_Per_DayName', METimes_Per_DayName);
    record.set('Quantity', MEQuantity);
    record.set('Avg_Cost', MEAvg_Cost);
    record.set('Drug_Total', MEDrug_Total);
    record.set('RequestNo', MERequestNo);
    record.set('ApprovalStatusCode', MEApprovalStatusCode);
    record.set('ApprovalStatusName', MEApprovalStatusName);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('DenialReasonName', MEDenialReasonName);
    record.set('DenialDesc', MEDenialDesc);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('DenialReasonName', MEDenialReasonName);
    record.set('ApprovedAmount', MEApprovedAmount);
    record.set('PriorAuthCode', MEPriorAuthCode);
    record.set('Balance', MEBalance);


}
function LoginNurseInjectPopupEditRendeer(form, login1) {
    record = PatientLoginNurseInjectionRcrd;

    Ext.getCmp('LoginNurseInjectPopup-Drug_Code').setComboValue(record.get('Drug_Code'));
    Ext.getCmp('LoginNurseInjectPopup-DrugName').setValue(record.get('DrugName'));
    Ext.getCmp('LoginNurseInjectPopup-Doze').setValue(record.get('Doze'));
    Ext.getCmp('LoginNurseInjectPopup-No_of_days').setValue(record.get('No_of_days'));
    Ext.getCmp('LoginNurseInjectPopup-StatusCode').setComboValue(record.get('StatusCode'));
    Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').setComboValue(record.get('Times_Per_DayCode'));
    Ext.getCmp('LoginNurseInjectPopup-Quantity').setValue(record.get('Quantity'));
    Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').setValue(record.get('Avg_Cost'));
    Ext.getCmp('LoginNurseInjectPopup-Drug_Total').setValue(record.get('Drug_Total'));
    Ext.getCmp('LoginNurseInjectPopup-RequestNo').setValue(record.get('RequestNo'));
    Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').setComboValue(record.get('ApprovalStatusCode'));
    Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').setComboValue(record.get('DenialReasonCode'));
    Ext.getCmp('LoginNurseInjectPopup-DenialDesc').setValue(record.get('DenialDesc'));
    Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').setValue(record.get('ApprovedAmount'));
    Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').setValue(record.get('PriorAuthCode'));
    Ext.getCmp('LoginNurseInjectPopup-Balance').setValue(record.get('Balance'));
    Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType').setValue(record.get('ServiceActivityType'));
    Ext.getCmp('LoginNurseInjectPopup-Balance').setValue(record.get('Balance'));

    var Doze = Ext.getCmp('LoginNurseInjectPopup-Doze');
    var No_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days');
    var Quantity = Ext.getCmp('LoginNurseInjectPopup-Quantity');
    var Avg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');

    if (Doze) Doze.on('valid', function (field) {
        Quantity.setValue(Number(No_of_days.getValue()) * Number(Doze.getValue()));
        InjectAmoutnCalculation();
    }, this);

    if (No_of_days) No_of_days.on('valid', function (field) {
        Quantity.setValue(Number(No_of_days.getValue()) * Number(Doze.getValue()));
        InjectAmoutnCalculation();
    }, this);


    if (Avg_Cost) Avg_Cost.on('valid', InjectAmoutnCalculation, this);
    if (Quantity) Quantity.on('valid', InjectAmoutnCalculation, this);

    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode');
    var DenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc');
    var RequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo');
    var PriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');
    var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance');

    if (ApprovedAmount) ApprovedAmount.on('valid', function (field) {
        Balance.setValue(Number(Drug_Total.getValue()) - Number(field.getValue()));
        InjectionApprovedAmountValidation();
    }, this);

    if (ApprovalStatusCode.editValue != 3) {
        DenialReasonCode.allowBlank = true;
        DenialReasonCode.isValid();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
    }
    if (ApprovalStatusCode.editValue != 2) {
        RequestNo.disable();
        PriorAuthCode.disable();
        ApprovedAmount.disable();
    }
    if (ApprovalStatusCode.editValue == 2) {
        RequestNo.enable();
        PriorAuthCode.enable();
        ApprovedAmount.enable();
    }

    var ServiceActivityType = Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType');
    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');

    if (ServiceActivityType.getValue() > 0 || DefaultPatientType != 4) {
        ApprovalStatusCode.disable();
        RequestNo.disable();
        PriorAuthCode.disable();
        DenialReasonCode.disable();
        ApprovedAmount.disable();
    }

    if (ApprovalStatusCode) ApprovalStatusCode.on('select', function (combo, record, index) {
        if (ApprovalStatusCode.editValue == 3) { // rejected 
            DenialReasonCode.enable();
            DenialReasonCode.allowBlank = false;
            DenialReasonCode.isValid();
            ApprovedAmount.setValue(null);
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue == 2) { // Approved 

            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.enable();
            PriorAuthCode.enable();
            PriorAuthCode.allowBlank = false;
            PriorAuthCode.isValid();
            ApprovedAmount.setValue(Drug_Total.getValue());
            if (Drug_Total.getValue() != ApprovedAmount.getValue())  // Approved
                ApprovedAmount.addClass('approve-editor');
            else
                ApprovedAmount.removeClass('approve-editor');

        }
        if (ApprovalStatusCode.editValue != 3 && ApprovalStatusCode.editValue != 2) {
            DenialReasonCode.clearValue();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.isValid();
            DenialReasonCode.disable();
            DenialDesc.setValue(null);
            ApprovedAmount.setValue(null);
            PriorAuthCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            //RequestNo.disable();
            //RequestNo.setValue(null);
            //RequestNo.allowBlank = true;
            //RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.removeClass('approve-editor');
        }

    }, this);

    var ServiceTypeCode = Ext.getCmp('LoginNurseInjectPopup-Drug_Code');

    if (ServiceTypeCode) ServiceTypeCode.on('beforequery', function (evt) {  // Services
        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=4) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=4 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " (COMPANYCODE=" + login.CompanyCode + "  and SERVICETYPE=4) OR VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=4 )";

    }, this);

    var DenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode');

    if (DenialReasonCode) DenialReasonCode.on('beforequery', function (evt) {  // DenialReason
        evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSION_CODE from ME_VERSION_FILTER join ME_VERSION_FILTER_TYPE det on ME_VERSION_FILTER.FILTER_CODE=det.FILTER_CODE and  FILTER_ID=2 and   SourceProvider=" + DefaultDHAType + ")";
    }, this);

    var DrugCode = Ext.getCmp('LoginNurseInjectPopup-Drug_Code');
    if (DrugCode) DrugCode.on('select', InjectionServiceTypeSelected, this);

}

function AddClinicInjcetionBtnHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ClinicInjectionDrug',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddClinicInjcetionComplete, this);
}

function AddClinicInjcetionComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddClinicInjcetionComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewinjectionTemplateForm = new Ext.form.FormPanel(responseText.ClinicInjectionDrugCofig);

    this.AddNewinjectionTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginClinicInjectionDtlList');


            var PKey = Ext.getCmp('PatientLoginClinic').selectedIndex;

            var ADrug_Code = Ext.getCmp('LoginNurseInjectPopup-Drug_Code').editValue;
            var ADrug_Name = ADrug_Code > 0 ? Ext.getCmp('LoginNurseInjectPopup-Drug_Code').lastSelectionText : null;
            var ADrugName = Ext.getCmp('LoginNurseInjectPopup-DrugName').getValue();
            var ADoze = Ext.getCmp('LoginNurseInjectPopup-Doze').getValue();
            var ANo_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days').getValue();
            var AStatusCode = Ext.getCmp('LoginNurseInjectPopup-StatusCode').editValue;
            var AStatusName = AStatusCode == 0 ? 'Open' : Ext.getCmp('LoginNurseInjectPopup-StatusCode').lastSelectionText;
            var ATimes_Per_DayCode = Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').editValue;
            var ATimes_Per_DayName = ATimes_Per_DayCode == 0 ? 'OD' : Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').lastSelectionText;
            var AQuantity = Ext.getCmp('LoginNurseInjectPopup-Quantity').getValue();
            var AAvg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').getValue();
            var ADrug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total').getValue();
            var ARequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo').getValue();
            var AApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').editValue;
            var AApprovalStatusName = AApprovalStatusCode > 0 ? Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').lastSelectionText : null;
            var ADenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').editValue;
            var ADenialReasonName = ADenialReasonCode > 0 ? Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').lastSelectionText : null;
            var ADenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc').getValue();
            var AApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').getValue();
            var APriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').getValue();
            var ServiceActivityType = Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType').getValue();
            var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance').getValue();

            //if (Number(ADrug_Total) == 0) {
            //    Ext.MessageBox.alert(login.modulename, 'Total should be greater than 0 !');
            //    return;
            //}

            PatientLoginClinicEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
            var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                Drug_Code: ADrug_Code,
                Drug_Name: ADrug_Name,
                DrugName: ADrugName,
                Doze: ADoze,
                No_of_days: ANo_of_days,
                StatusCode: AStatusCode,
                StatusName: AStatusName,
                Times_Per_DayCode: ATimes_Per_DayCode,
                Times_Per_DayName: ATimes_Per_DayName,
                Quantity: AQuantity,
                Itm_Qtys: null,
                Avg_Cost: AAvg_Cost,
                DiscountAmount: 0,
                Drug_Total: ADrug_Total,
                Drug_NetTotal: 0,
                IsDrugPrepaid: 0,
                IsPosted: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                Isliquid: 1,
                RequestNo: ARequestNo,
                ApprovalStatusCode: AApprovalStatusCode,
                ApprovalStatusName: AApprovalStatusName,
                DenialReasonCode: ADenialReasonCode,
                DenialReasonName: ADenialReasonName,
                DenialDesc: ADenialDesc,
                ApprovedAmount: AApprovedAmount,
                PriorAuthCode: APriorAuthCode,
                Service_CashTypeCode: ServiceActivityType > 0 ? 2 : 1,
                Service_CashTypeName: ServiceActivityType > 0 ? 'Cash' : 'Insurance',
                Balance: Balance,
                ClaimStatus: false,
                PriorStatus: false,
                ClaimStatusName: 'New',
                ServiceActivityType: ServiceActivityType,
                RAAmount: 0,
                PaymentAmount: 0,
                // Note: null,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicEntryDetGrid.stopEditing();
            PatientLoginClinicEntryDetGrid.store.add(newRecord);
            PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginClinicEntryDetGrid.pageBar.updateInfo();

            this.AddNewinjectionTemplateFormWindow.close();
            AddNewDrugSelectedRecord = [];
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
    });



    this.AddNewinjectionTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewinjectionTemplateFormWindow.close();
            AddNewInjectionSelectedRecord = [];
        },
        scope: this,
        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
    });

    this.AddNewinjectionTemplateFormWindow = new Ext.Window({
        id: 'AddNewinjectionTemplateForm',
        title: 'Add Injection',
        closable: true,
        minimizable: false,
        width: this.AddNewinjectionTemplateForm.width + 10,
        height: this.AddNewinjectionTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewinjectionTemplateForm]
    });
    //this.AddNewinjectionTemplateForm.on('render', LoginClinicInjectPopupRendeer, this);
    this.AddNewinjectionTemplateForm.on('render', LoginNurseInjectPopupRendeer, this);
    this.AddNewinjectionTemplateFormWindow.show();

}

function LoginClinicInjectPopupRendeer(form, login) {

    var Quantity = Ext.getCmp('LoginNurseInjectPopup-Quantity');
    var Avg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    Quantity.setValue(1);


    if (Quantity) Quantity.on('valid', function (field) {
        var tot = ((1 * Quantity.getValue()) * (1 * Avg_Cost.getValue()));
        Drug_Total.setValue(tot);
    }, this);

    if (Avg_Cost) Avg_Cost.on('valid', function (field) {
        var tot = ((1 * Quantity.getValue()) * (1 * Avg_Cost.getValue()));
        Drug_Total.setValue(tot);
    }, this);

}

var ClinicInjectionDrugRcrd = '';
function AddClinicInjcetionEditHandler(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ClinicInjectionDrugEdit'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddClinicInjcetionEditComplete, this);
    ClinicInjectionDrugRcrd = record;
}

var MEDrug_Code = '', MEDrugName = '', MEDrugName = '', MEDoze = '', MENo_of_days = '', MEStatusCode = '', MEStatusName = '';
var METimes_Per_DayCode = '', METimes_Per_DayName = '', MEQuantity = '', MEDrug_Total = '';
var MERequestNo = '', MEApprovalStatusCode = '', MEApprovalStatusName = '', MEDenialReasonCode = '', MEDenialReasonName = '', MEApprovedAmount = '', MEPriorAuthCode = '';

function AddClinicInjcetionEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddClinicInjcetionEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddClinicPopUpForm = new Ext.form.FormPanel(responseText.ClinicInjectionDrugEditCofig);
    this.AddClinicPopUpForm.addButton({
        text: 'Load',
        handler: function () {

            MEDrug_Code = Ext.getCmp('LoginNurseInjectPopup-Drug_Code').editValue;
            MEDrug_Name = Ext.getCmp('LoginNurseInjectPopup-Drug_Code').lastSelectionText;
            MEDrugName = Ext.getCmp('LoginNurseInjectPopup-DrugName').getValue();
            MEDoze = Ext.getCmp('LoginNurseInjectPopup-Doze').getValue();
            MENo_of_days = Ext.getCmp('LoginNurseInjectPopup-No_of_days').getValue();
            MEStatusCode = Ext.getCmp('LoginNurseInjectPopup-StatusCode').editValue;
            MEStatusName = Ext.getCmp('LoginNurseInjectPopup-StatusCode').lastSelectionText;
            METimes_Per_DayCode = Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').editValue;
            METimes_Per_DayName = Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').lastSelectionText;
            MEQuantity = Ext.getCmp('LoginNurseInjectPopup-Quantity').getValue();
            MEAvg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').getValue();
            MEDrug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total').getValue();
            MERequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo').getValue();
            MEApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').editValue;
            MEApprovalStatusName = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').lastSelectionText;
            MEDenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').editValue;
            MEDenialReasonName = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').lastSelectionText;
            MEApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').getValue();
            MEPriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').getValue();

            PatientLoginInjectionEditMode();
            this.AddClinicPopUpFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddClinicPopUpForm.FormFieldsCount + 2
    });
    this.AddClinicPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClinicPopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClinicPopUpForm.FormFieldsCount + 2
    });
    this.AddClinicPopUpFormWindow = new Ext.Window({
        id: 'AddClinicPopUpForm',
        title: 'Injection',
        closable: true,
        minimizable: false,
        width: this.AddClinicPopUpForm.width + 10,
        height: this.AddClinicPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClinicPopUpForm]
    });
    this.AddClinicPopUpForm.on('render', LoginClinicInjectPopupEditRendeer, this);
    this.AddClinicPopUpFormWindow.show();
}
var record = '';
function PatientLoginInjectionEditMode(form, login) {
    record = ClinicInjectionDrugRcrd;
    record.set('Drug_Code', MEDrug_Code);
    record.set('Drug_Name', MEDrug_Name);
    record.set('DrugName', MEDrugName);
    record.set('Doze', MEDoze);
    record.set('No_of_days', MENo_of_days);
    record.set('StatusCode', MEStatusCode);
    record.set('StatusName', MEStatusName);
    record.set('Times_Per_DayCode', METimes_Per_DayCode);
    record.set('Times_Per_DayName', METimes_Per_DayName);
    record.set('Quantity', MEQuantity);
    record.set('Avg_Cost', MEAvg_Cost);
    record.set('Drug_Total', MEDrug_Total);
    record.set('RequestNo', MERequestNo);
    record.set('ApprovalStatusCode', MEApprovalStatusCode);
    record.set('ApprovalStatusName', MEApprovalStatusName);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('DenialReasonName', MEDenialReasonName);
    record.set('DenialReasonCode', MEDenialReasonCode);
    record.set('DenialReasonName', MEDenialReasonName);
    record.set('ApprovedAmount', MEApprovedAmount);
    record.set('PriorAuthCode', MEPriorAuthCode);


}
function LoginClinicInjectPopupEditRendeer(form, login) {
    record = ClinicInjectionDrugRcrd;

    Ext.getCmp('LoginNurseInjectPopup-Drug_Code').setComboValue(record.get('Drug_Code'));
    Ext.getCmp('LoginNurseInjectPopup-DrugName').setValue(record.get('DrugName'));
    Ext.getCmp('LoginNurseInjectPopup-Doze').setValue(record.get('Doze'));
    Ext.getCmp('LoginNurseInjectPopup-No_of_days').setValue(record.get('No_of_days'));
    Ext.getCmp('LoginNurseInjectPopup-StatusCode').setComboValue(record.get('StatusCode'));
    Ext.getCmp('LoginNurseInjectPopup-Times_Per_DayCode').setComboValue(record.get('Times_Per_DayCode'));
    Ext.getCmp('LoginNurseInjectPopup-Quantity').setValue(record.get('Quantity'));
    Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').setValue(record.get('Avg_Cost'));
    Ext.getCmp('LoginNurseInjectPopup-Drug_Total').setValue(record.get('Drug_Total'));
    Ext.getCmp('LoginNurseInjectPopup-RequestNo').setValue(record.get('RequestNo'));
    Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode').setComboValue(record.get('ApprovalStatusCode'));
    Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode').setComboValue(record.get('DenialReasonCode'));
    Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount').setValue(record.get('ApprovedAmount'));
    Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode').setValue(record.get('PriorAuthCode'));


    var Quantity = Ext.getCmp('LoginNurseInjectPopup-Quantity');
    var Avg_Cost = Ext.getCmp('LoginNurseInjectPopup-Avg_Cost');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');

    if (Quantity) Quantity.on('valid', function (field) {
        var tot = ((1 * Quantity.getValue()) * (1 * Avg_Cost.getValue()));
        Drug_Total.setValue(tot);
    }, this);

    if (Avg_Cost) Avg_Cost.on('valid', function (field) {
        var tot = ((1 * Quantity.getValue()) * (1 * Avg_Cost.getValue()));
        Drug_Total.setValue(tot);
    }, this);

}


function MEActivityType(form, login) {
    var ActivityType = Ext.getCmp('MEActivityType-ActivityTypeCode');

    if (ActivityType) ActivityType.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "category='UTN' and languagecode='en-US'";
    }, this);
}


function ApprovedAmountValidation(form, login1) {

    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
    var Total = Ext.getCmp('PatientLoginReceptionDetailPopUp-Total');
    var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');

    if (ApprovalStatusCode.editValue == 2 && Number(ApprovedAmount.getValue()) > Number(Total.getValue())) {
        Ext.MessageBox.alert(login.modulename, 'Approved Amount less than or eqaul to Total amount');
        ApprovedAmount.setValue(0);
        return;
    }
    if (Total.getValue() != ApprovedAmount.getValue() && ApprovalStatusCode.editValue == 2)  // Approved
        ApprovedAmount.addClass('approve-editor');
    else
        ApprovedAmount.removeClass('approve-editor');

    Balance.setValue(Number(RequestAmount.getValue()) - Number(ApprovedAmount.getValue()))
}

function DrugsApprovedAmountValidation(form, login1) {

    var Drug_NetTotal = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_NetTotal');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');
    var ApprovalStatus = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance');

    if (ApprovalStatus.editValue == 2 && Number(ApprovedAmount.getValue()) > Number(Drug_NetTotal.getValue())) {
        Ext.MessageBox.alert(login.modulename, 'Approved Amount less than or eqaul to Net Total ');
        ApprovedAmount.setValue(0);
        return;
    }

    if (Drug_NetTotal.getValue() != ApprovedAmount.getValue() && ApprovalStatus.editValue == 2)  // Approved
        ApprovedAmount.addClass('approve-editor');
    else
        ApprovedAmount.removeClass('approve-editor');

    Balance.setValue(Number(Drug_Total.getValue()) - Number(ApprovedAmount.getValue()))
}

function InjectionApprovedAmountValidation(form, login1) {


    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');
    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');
    var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance');

    if (ApprovalStatusCode.editValue == 2 && Number(ApprovedAmount.getValue()) > Number(Drug_Total.getValue())) {
        Ext.MessageBox.alert(login.modulename, 'Approved Amount less than or eqaul to Total ');
        ApprovedAmount.setValue(0);
        return;
    }

    if (Drug_Total.getValue() != ApprovedAmount.getValue() && ApprovalStatusCode.editValue == 2)  // Approved
        ApprovedAmount.addClass('approve-editor');
    else
        ApprovedAmount.removeClass('approve-editor');

    Balance.setValue(Number(Drug_Total.getValue()) - Number(ApprovedAmount.getValue()));
}


function RecDiagnosisBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ReceptionDiagnosisPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionDiagnosisPopupComplete, this);
}

function ReceptionDiagnosisPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionDiagnosisPopupComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ReceptionDiagnosisPopupTemplateForm = new Ext.form.FormPanel(responseText.ReceptionDiaCofig);


    this.ReceptionDiagnosisPopupTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('MEDiagnosisDtlList');
            //var selectcnt = 0;
            var MEDiagnosisPopupList = Ext.getCmp('MEDiagnosisPopupList');
            var MEDiagnosisDtlList = Ext.getCmp('MEDiagnosisDtlList');
            //var count = MEDiagnosisDtlList.store.getCount();
            var store = Ext.getCmp('MEDiagnosisDtlList').getStore();

            var TypeCode = Ext.getCmp('MEDiagnosisPopup-TypeCode');
            var DetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode');
            var Description = Ext.getCmp('MEDiagnosisPopup-Description');

            Primary = Ext.getCmp('PatientsLoginReception').selectedIndex;


            PatientLoginClinicEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
            var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Pl_Reception_Code: Primary == -1 ? 1 : Primary,
                StandardCode: DetailCode.getValue(),
                StandardName: (DetailCode.getValue() == 0 ? null : DetailCode.lastSelectionText),
                ShortDesc: Description.getValue(),
                StatusCode: 0,
                StatusName: 'Process',
                TypeCode: TypeCode.getValue(),
                TypeName: (TypeCode.getValue() == 0 ? null : TypeCode.lastSelectionText),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicEntryDetGrid.stopEditing();
            PatientLoginClinicEntryDetGrid.store.add(newRecord);
            PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginClinicEntryDetGrid.pageBar.updateInfo();

            this.ReceptionDiagnosisPopupTemplateFormWindow.close();
            //DiagnosisDtlPopUpList = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.ReceptionDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });



    this.ReceptionDiagnosisPopupTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceptionDiagnosisPopupTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceptionDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });

    this.ReceptionDiagnosisPopupTemplateFormWindow = new Ext.Window({
        id: 'ReceptionDiagnosisPopupTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.ReceptionDiagnosisPopupTemplateForm.width + 10,
        height: this.ReceptionDiagnosisPopupTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceptionDiagnosisPopupTemplateForm]
    });
    this.ReceptionDiagnosisPopupTemplateForm.on('render', MEDiagnosisPopup, this);
    this.ReceptionDiagnosisPopupTemplateFormWindow.show();

}

function MEDiagnosisPopup(form, login1) {

    var DetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode');
    if (DetailCode) DetailCode.on('beforequery', function (evt) {  // Diagnosis

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=-1 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=-1 )";

    }, this);
}


var MEDiagnosisPopuprcd = '';
function RecDiagnosisHandlerEdit(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'RecDiagnosisPopUpEdit'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', RecDiagnosisPopUpEditComplete, this);
    MEDiagnosisPopuprcd = record;
}
var MEDTypeCode = '', MEDTypeName = '', MEDDetailCode = '', MEDDetailName = '', MEDDescription = '';
function RecDiagnosisPopUpEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', RecDiagnosisPopUpEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.RecDiagnosisPopUpForm = new Ext.form.FormPanel(responseText.RecDiagnosisPopUpEditCofig);
    this.RecDiagnosisPopUpForm.addButton({
        text: 'Save',
        handler: function () {

            MEDTypeCode = Ext.getCmp('MEDiagnosisPopup-TypeCode').getValue();
            MEDTypeName = Ext.getCmp('MEDiagnosisPopup-TypeCode').lastSelectionText;
            MEDDetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode').getValue();
            MEDDetailName = Ext.getCmp('MEDiagnosisPopup-DetailCode').lastSelectionText;
            MEDDescription = Ext.getCmp('MEDiagnosisPopup-Description').getValue();


            MEDiagnosisPopupNewMode();
            this.RecDiagnosisPopUpFormWindow.close();
        },

        scope: this,
        tabIndex: this.RecDiagnosisPopUpForm.FormFieldsCount + 2
    });
    this.RecDiagnosisPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.RecDiagnosisPopUpFormWindow.close();

        },
        scope: this,
        tabIndex: this.RecDiagnosisPopUpForm.FormFieldsCount + 2
    });
    this.RecDiagnosisPopUpFormWindow = new Ext.Window({
        id: 'RecDiagnosisPopUpForm',
        title: 'Service',
        closable: true,
        minimizable: false,
        width: this.RecDiagnosisPopUpForm.width + 10,
        height: this.RecDiagnosisPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.RecDiagnosisPopUpForm]
    });
    this.RecDiagnosisPopUpForm.on('render', RecDiagnosisPopUpFormRender, this);
    this.RecDiagnosisPopUpFormWindow.show();
}


function RecDiagnosisPopUpFormRender(form, login1) {
    record = MEDiagnosisPopuprcd;
    Ext.getCmp('MEDiagnosisPopup-TypeCode').setComboValue(record.get('TypeCode'));
    Ext.getCmp('MEDiagnosisPopup-DetailCode').setComboValue(record.get('StandardCode'));
    Ext.getCmp('MEDiagnosisPopup-Description').setValue(record.get('ShortDesc'));

    var DetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode');
    if (DetailCode) DetailCode.on('beforequery', function (evt) {  // Diagnosis

        evt.combo.lastQuery = '1=2';
        if (DefaultPatientType == 4)
            evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=-1 and  det. ActivityType=" + DefaultDHAType + ")";
        else
            evt.combo.store.baseParams.filter = " VERSIONCODE in ( select  det.VERSIONCODE from ME_ACTIVITY_TYPES TYP join ME_ACTIVITY_DETAILS det on TYP.TYPECODE=det.TYPECODE and  TYP.VALUE=-1 )";

    }, this);

}

var record = '';
function MEDiagnosisPopupNewMode(form, login) {
    record = MEDiagnosisPopuprcd;
    record.set('TypeCode', MEDTypeCode);
    record.set('TypeName', MEDTypeName);
    record.set('StandardCode', MEDDetailCode);
    record.set('StandardName', MEDDetailName);
    record.set('ShortDesc', MEDDescription);

}

function ServiceTypeSelected(combo, record, index) { // Service 

    Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount').setValue(record.data.Service_Price);
    var PatientSharePercent = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientSharePercent');
    var Deductible_Amount = Ext.getCmp('PatientLoginReceptionDetailPopUp-Deductible_Amount');
    var PatientShare = Ext.getCmp('PatientLoginReceptionDetailPopUp-PatientShare');
    var ApprovalStatusCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovalStatusCode');
    var ApprovedAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-ApprovedAmount');
    var RequestAmount = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount');
    var PriorAuthCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-PriorAuthCode');
    var RequestNo = Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestNo');
    var Balance = Ext.getCmp('PatientLoginReceptionDetailPopUp-Balance');
    var DenialReasonCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialReasonCode');
    var DenialDesc = Ext.getCmp('PatientLoginReceptionDetailPopUp-DenialDesc');

    if (DefaultPatientType != 4) {
        DenialReasonCode.disable();
        PatientSharePercent.disable();
        Deductible_Amount.disable();
        PatientShare.disable();
        ApprovalStatusCode.disable();
        ApprovedAmount.disable();
    }
    else {
        if (record.data.ServiceActivityType > 0) {
            Deductible_Amount.setValue(null);
            Deductible_Amount.disable();
            PatientShare.setValue(null);
            PatientShare.disable();
            PatientSharePercent.setValue(null);
            PatientSharePercent.disable();
            ApprovalStatusCode.setComboValueDisplay(2, 'Approved');
            ApprovalStatusCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = false;
            PriorAuthCode.isValid();
            RequestNo.setValue(null);
            RequestNo.allowBlank = true;
            RequestNo.isValid();
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            DenialDesc.setValue(null);
        }
        else {

            Deductible_Amount.enable();
            PatientShare.enable();
            PatientSharePercent.enable();
            ApprovalStatusCode.setComboValueDisplay(1, 'Pending');
            //ApprovalStatusCode.setComboValue(1);
            ApprovalStatusCode.enable();
            ApprovedAmount.setValue(0);
            ApprovedAmount.disable();
            PriorAuthCode.disable();
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.setValue(null);
            PriorAuthCode.isValid();
            RequestNo.setValue(null);
            RequestNo.disable();
            RequestNo.allowBlank = true;
            RequestNo.isValid();
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
        }
    }

    if (DefaultPatientType == 4 && record.data.ServiceActivityType < 1 && DefaultApprovedRequired) {
        ApprovalStatusCode.setComboValueDisplay(2, 'Approved');
        PriorAuthCode.enable();
        ApprovedAmount.enable();
        PriorAuthCode.setValue(null);
        PriorAuthCode.allowBlank = false;
        PriorAuthCode.isValid();
        DenialReasonCode.disable();
        DenialReasonCode.allowBlank = true;
        DenialReasonCode.clearInvalid();
        DenialDesc.setValue(null);
        Deductible_Amount.disable();
        Deductible_Amount.enable();
        PatientShare.enable();
        PatientSharePercent.enable();
    }


    ServicePopupAmountCalculation();

    var ProviderCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_ProviderCode').editValue;
    var ServiceprovidertypeCode = Ext.getCmp('PatientLoginReceptionDetailPopUp-ServiceprovidertypeCode').editValue;

    if (DefaultPatientType == 4 && record.data.ServiceActivityType == 0)//insurer
    {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ServiceTypeCodeSelect',
                StandardCode: combo.getValue(),
                ReceptionCode: DefaultReceptionCode,
                ProviderCode: ProviderCode,
                Type: ServiceprovidertypeCode

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ServiceTypeCodeSelectComplete, this);
    }
}


function ServiceTypeCodeSelectComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ServiceTypeCodeSelectComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
    } else {
        if (Number(responseText.Price) != 0) {
            Ext.getCmp('PatientLoginReceptionDetailPopUp-Service_Price').setValue(responseText.Price);
            Ext.getCmp('PatientLoginReceptionDetailPopUp-RequestAmount').setValue(responseText.Price);
        }
    }
}

function DrugServiceTypeSelected(combo, record, index) {

    var ApprovalStatusCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovalStatusCode');
    var DenialReasonCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-DenialReasonCode');
    var DenialDesc = Ext.getCmp('PatientLoginClinicDrugsPopUp-Service_Name');
    var RequestNo = Ext.getCmp('PatientLoginClinicDrugsPopUp-RequestNo');
    var ErxApprovalCode = Ext.getCmp('PatientLoginClinicDrugsPopUp-ErxApprovalCode');
    var Drug_Code = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Code');
    var Drug_Total = Ext.getCmp('PatientLoginClinicDrugsPopUp-Drug_Total');
    var ApprovedAmount = Ext.getCmp('PatientLoginClinicDrugsPopUp-ApprovedAmount');
    var ServiceActivityType = Ext.getCmp('PatientLoginClinicDrugsPopUp-ServiceActivityType');
    var Balance = Ext.getCmp('PatientLoginClinicDrugsPopUp-Balance');

    if (DefaultPatientType != 4) {
        ApprovalStatusCode.disable();
        ApprovedAmount.disable();
    }
    else {
        if (record.data.ServiceActivityType > 0) {
            ApprovalStatusCode.setComboValueDisplay(2, 'Approved');
            ApprovalStatusCode.disable();
            ErxApprovalCode.setValue(null);
            ErxApprovalCode.allowBlank = true;
            ErxApprovalCode.isValid();
            RequestNo.setValue(null);
            RequestNo.allowBlank = true;
            RequestNo.isValid();
            ApprovedAmount.disable();
            ApprovedAmount.setValue(0);
            Drug_Total.setValue(record.data.Avg_Cost);
            Balance.setValue(record.data.Avg_Cost);
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            DenialDesc.setValue(null);
        }
        else {
            ApprovalStatusCode.setComboValueDisplay(1, 'Pending');
            //ApprovalStatusCode.setComboValue(1);
            ApprovalStatusCode.enable();
            ApprovedAmount.disable();
            ApprovedAmount.setValue(0);
            Drug_Total.setValue(record.data.Avg_Cost);
            Balance.setValue(record.data.Avg_Cost);
            ErxApprovalCode.disable();
            ErxApprovalCode.setValue(null);
            ErxApprovalCode.allowBlank = true;
            ErxApprovalCode.isValid();
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            DenialDesc.setValue(null);
        }
    }

    AmountValidation();

    if (DefaultPatientType == 4 && record.data.ServiceActivityType == 0)//insurer
    {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ServiceTypeCodeSelect',
                StandardCode: combo.getValue(),
                ReceptionCode: DefaultReceptionCode,
                ProviderCode: DefaultClinicCode,
                Type: 5//Drugs

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', DrugServiceTypeCodeSelectComplete, this);
    }
}

function DrugServiceTypeCodeSelectComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DrugServiceTypeCodeSelectComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.getCmp('PatientLoginClinicDrugsPopUp-DiscountAmount').setValue(responseText.Price);
    }
}

function InjectionServiceTypeSelected(combo, record, index) { // Injection  

    var ServiceActivityType = Ext.getCmp('LoginNurseInjectPopup-ServiceActivityType');
    var ApprovalStatusCode = Ext.getCmp('LoginNurseInjectPopup-ApprovalStatusCode');
    var RequestNo = Ext.getCmp('LoginNurseInjectPopup-RequestNo');
    var PriorAuthCode = Ext.getCmp('LoginNurseInjectPopup-PriorAuthCode');
    var DenialReasonCode = Ext.getCmp('LoginNurseInjectPopup-DenialReasonCode');
    var DenialDesc = Ext.getCmp('LoginNurseInjectPopup-DenialDesc');
    var ApprovedAmount = Ext.getCmp('LoginNurseInjectPopup-ApprovedAmount');
    var Balance = Ext.getCmp('LoginNurseInjectPopup-Balance');
    var Doze = Ext.getCmp('LoginNurseInjectPopup-Doze');
    var Drug_Total = Ext.getCmp('LoginNurseInjectPopup-Drug_Total');

    if (DefaultPatientType != 4) {
        DenialReasonCode.disable();
        ApprovalStatusCode.disable();
        ApprovedAmount.disable();
    }
    else {
        if (record.data.ServiceActivityType > 0) {
            ApprovalStatusCode.setComboValueDisplay(2, 'Approved');
            ApprovalStatusCode.disable();
            PriorAuthCode.setValue(null);
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            RequestNo.setValue(null);
            RequestNo.allowBlank = true;
            RequestNo.isValid();
            Doze.setValue(1);
            ApprovedAmount.setValue(0);
            Drug_Total.setValue(record.data.Avg_Cost);
            Balance.setValue(record.data.Avg_Cost);
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            DenialDesc.setValue(null);
        }
        else {
            ApprovalStatusCode.setComboValueDisplay(1, 'Pending');
            //ApprovalStatusCode.setComboValue(1);
            ApprovalStatusCode.enable();
            Doze.setValue(1);
            ApprovedAmount.setValue(0);
            Drug_Total.setValue(record.data.Avg_Cost);
            Balance.setValue(record.data.Avg_Cost);
            PriorAuthCode.setValue(null);
            PriorAuthCode.disable();
            PriorAuthCode.allowBlank = true;
            PriorAuthCode.isValid();
            RequestNo.setValue(null);
            RequestNo.disable();
            RequestNo.allowBlank = true;
            RequestNo.isValid();
            DenialReasonCode.clearValue();
            DenialReasonCode.disable();
            DenialReasonCode.allowBlank = true;
            DenialReasonCode.clearInvalid();
            DenialDesc.setValue(null);
        }
    }

    InjectAmoutnCalculation();

    var Code = record.data.ID;
    var Description = record.data.DrugName;

    if (record.data.ServiceActivityType == 0 && DefaultPatientType == 4)//insurer
    {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ServiceTypeCodeSelect',
                StandardCode: combo.getValue(),
                ReceptionCode: DefaultReceptionCode,
                ProviderCode: DefaultClinicCode,
                Type: 4 // HCPCS

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', InjectionTypeCodeSelectComplete, this);
    }
}

function InjectionTypeCodeSelectComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', InjectionTypeCodeSelectComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        if (Number(responseText.Price) != 0) {
            Ext.getCmp('LoginNurseInjectPopup-Avg_Cost').setValue(responseText.Price);
        }
    }
}

function UploadElementEntries(form, login) {
    if (!form.isView) {

        var UploadCode = Ext.getCmp('UploadElementEntries-UploadCode');

        if (UploadCode) UploadCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADELEMENT_ENTRY')";
        }, this);
    }
}


function ElementEntriesDataDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('UploadElementEntries-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'UploadViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ElementEntriesDataDownloadTemplatereqComplete, this);

}

function ElementEntriesDataDownloadTemplatereqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ElementEntriesDataDownloadTemplatereqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}


function ElementEntriesVieworDownload(form, login) {
    var ClassName = 'SBS.Business.Objects.HumanResource.HR.UploadElementEntries';
    var Primary = Ext.getCmp('UploadElementEntries').selectedIndex;

    var FileName = Ext.getCmp('UploadElementEntries-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'UploadViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ElementEntriesVieworDownloadreqComplete, this);
}

function ElementEntriesVieworDownloadreqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ElementEntriesVieworDownloadreqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}


function ElementEntryUploadExcel(form, login) {


    var FileName = Ext.getCmp('UploadElementEntries-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('UploadElementEntries').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'HRElementEntryUploadLoadExcel',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ElementEntryUploadComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}


function ElementEntryUploadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ElementEntryUploadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PrimaryKey = Ext.getCmp('UploadElementEntries').selectedIndex;
        var MenuID = 'ID_HRELEMENTENTRIES';
        var TemplateCode = Ext.getCmp('UploadElementEntries-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ElementEntryUploadPrcComplete, this);

    }

}

function ElementEntryUploadPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', ElementEntryUploadPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('UploadElementEntries').selectedIndex;
        var MenuID = 'ID_HRELEMENTENTRIES';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);
    }
}

function ProviderMappingLoad(form, login) {

    var PrimKey = Ext.getCmp('Network').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the Record !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ProviderMappingLoadPopUp',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderMappingLoadComplete, this);

}

function ProviderMappingLoadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ProviderMappingLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.ProviderMappingForm = new Ext.form.FormPanel(responseText.ProviderMappingLoadPopUpCofig);

    this.ProviderMappingForm.addButton({
        text: 'Select All',
        handler: function () {
            var ProviderMappingPopUpDtlList = Ext.getCmp('ProviderMappingPopUpDtlList');

            for (var pcnt = 0; pcnt < ProviderMappingPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = ProviderMappingPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.ProviderMappingForm.FormFieldsCount + 2
    });

    this.ProviderMappingForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var ProviderMappingPopUpDtlList = Ext.getCmp('ProviderMappingPopUpDtlList');

            for (var pcnt = 0; pcnt < ProviderMappingPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = ProviderMappingPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.ProviderMappingForm.FormFieldsCount + 2
    });

    this.ProviderMappingForm.addButton({
        text: 'Load',
        handler: function () {



            var PrimKey = '';
            var ProviderMappingPopUpDtlList = Ext.getCmp('ProviderMappingPopUpDtlList');
            var LoadProviderRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < ProviderMappingPopUpDtlList.store.modified.length; Cnt++) {

                if (ProviderMappingPopUpDtlList.store.modified[Cnt].get('Selectcheck') == true) {
                    LoadProviderRecords.push(Ext.encode(ProviderMappingPopUpDtlList.store.modified[Cnt].data));
                    PrimKey = ProviderMappingPopUpDtlList.store.modified[Cnt].get('ProviderCode');
                    CheckCnt++;
                }
            }
            if (CheckCnt == 0) {
                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Load');
                return;
            }
            var LoadProviderRecordsRow = '[' + LoadProviderRecords.join(',') + ']';
            var EffectiveFrom = Ext.getCmp('ProviderMappingPopUp-EffectiveFrom').getValue();
            var EffectiveTo = Ext.getCmp('ProviderMappingPopUp-EffectiveTo').getValue();
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'ProviderMappingLoading',
                    LoadProviderRecordsRow: LoadProviderRecordsRow,
                    PrimKey: Ext.getCmp('Network').selectedIndex,
                    EffectiveFrom: EffectiveFrom,
                    EffectiveTo: EffectiveTo
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', ProviderMappingLoadingCompleted, this);
        },
        scope: this,
        formBind: true,
        tabIndex: this.ProviderMappingForm.FormFieldsCount + 2
    });

    this.ProviderMappingForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ProviderMappingFormWindow.close();
        },
        scope: this,
        tabIndex: this.ProviderMappingForm.FormFieldsCount + 2
    });

    this.ProviderMappingFormWindow = new Ext.Window({
        id: 'ProviderMappingFormWindow',
        title: 'Provider Details',
        closable: true,
        minimizable: false,
        width: this.ProviderMappingForm.width + 10,
        height: this.ProviderMappingForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ProviderMappingForm]
    });
    //this.ProviderMappingForm.on('render', DelCancelMemberPopUp.createDelegate(this.form, [login], true), this);
    this.ProviderMappingFormWindow.show();

}

function ProviderMappingLoadingCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ProviderMappingLoadingCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        this.ProviderMappingFormWindow.close();
        var NetworkProviderDetList = Ext.getCmp('NetworkProviderDetList');
        NetworkProviderDetList.store.load({
            params: {
                start: 0,
                limit: NetworkProviderDetList.pageSize
            }
        });


    }
}


function NetworkMappingLoad(form, login) {

    var PrimKey = Ext.getCmp('NGIProvider').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the Record !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'NetworkMappingLoadPopUp',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', NetworkMappingLoadComplete, this);

}

function NetworkMappingLoadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', NetworkMappingLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.NetworkMappingForm = new Ext.form.FormPanel(responseText.NetworkMappingLoadPopUpCofig);

    this.NetworkMappingForm.addButton({
        text: 'Select All',
        handler: function () {
            var NetworkMappingPopUpDtlList = Ext.getCmp('NetworkMappingPopUpDtlList');

            for (var pcnt = 0; pcnt < NetworkMappingPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = NetworkMappingPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.NetworkMappingForm.FormFieldsCount + 2
    });

    this.NetworkMappingForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var NetworkMappingPopUpDtlList = Ext.getCmp('NetworkMappingPopUpDtlList');

            for (var pcnt = 0; pcnt < NetworkMappingPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = NetworkMappingPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.NetworkMappingForm.FormFieldsCount + 2
    });

    this.NetworkMappingForm.addButton({
        text: 'Load',
        handler: function () {


            var PrimKey = '';
            var NetworkMappingPopUpDtlList = Ext.getCmp('NetworkMappingPopUpDtlList');
            var LoadNetworkRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < NetworkMappingPopUpDtlList.store.modified.length; Cnt++) {

                if (NetworkMappingPopUpDtlList.store.modified[Cnt].get('Selectcheck') == true) {
                    LoadNetworkRecords.push(Ext.encode(NetworkMappingPopUpDtlList.store.modified[Cnt].data));
                    PrimKey = NetworkMappingPopUpDtlList.store.modified[Cnt].get('ProviderCode');
                    CheckCnt++;
                }
            }
            if (CheckCnt == 0) {
                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Load');
                return;
            }
            var LoadNetworkRecordsRow = '[' + LoadNetworkRecords.join(',') + ']';
            var EffectiveFrom = Ext.getCmp('NetworkMappingPopUp-EffectiveFrom').getValue();
            var EffectiveTo = Ext.getCmp('NetworkMappingPopUp-EffectiveTo').getValue();
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'NetworkMappingLoading',
                    LoadNetworkRecordsRow: LoadNetworkRecordsRow,
                    PrimKey: Ext.getCmp('NGIProvider').selectedIndex,
                    EffectiveFrom: EffectiveFrom,
                    EffectiveTo: EffectiveTo
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', NetworkMappingLoadingCompleted, this);
        },
        scope: this,
        formBind: true,
        tabIndex: this.NetworkMappingForm.FormFieldsCount + 2
    });

    this.NetworkMappingForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.NetworkMappingFormWindow.close();
        },
        scope: this,
        tabIndex: this.NetworkMappingForm.FormFieldsCount + 2
    });

    this.NetworkMappingFormWindow = new Ext.Window({
        id: 'NetworkMappingFormWindow',
        title: 'Network Details',
        closable: true,
        minimizable: false,
        width: this.NetworkMappingForm.width + 10,
        height: this.NetworkMappingForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.NetworkMappingForm]
    });
    //this.ProviderMappingForm.on('render', DelCancelMemberPopUp.createDelegate(this.form, [login], true), this);
    this.NetworkMappingFormWindow.show();

}

function NetworkMappingLoadingCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', NetworkMappingLoadingCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        this.NetworkMappingFormWindow.close();
        var ProviderNetworkDtlList = Ext.getCmp('ProviderNetworkDtlList');
        ProviderNetworkDtlList.store.load({
            params: {
                start: 0,
                limit: ProviderNetworkDtlList.pageSize
            }
        });


    }
}

var ClaimRAID = '';
function MedPriorAuthorizationProcessSubmissionNew(record) {

    var Status = record.get('AuthorizedStatus');
    if (Status == 8) {
        Ext.MessageBox.alert(login.modulename, 'Approved record can not allow to Re Submission. !');
        return;
    }
    else {
        var selectIndex = record.get('ID');
        ClaimRAID = selectIndex;

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MedProcessReSubmissionPopup',
                Primkey: selectIndex,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MedProcessReSubmissionPopupComplete, this);
    }
}


function MedProcessReSubmissionPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedProcessReSubmissionPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.RAClaimSubPopupForm = new Ext.form.FormPanel(responseText.RAClaimSubPopupCofig);

    this.RAClaimSubPopupForm.addButton({
        text: 'Select All',
        handler: function () {

            var RAClaimReSubmissionPopupDetList = Ext.getCmp('RAClaimReSubmissionPopupDetList');

            for (var pcnt = 0; pcnt < RAClaimReSubmissionPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = RAClaimReSubmissionPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.RAClaimSubPopupForm.FormFieldsCount + 2
    });

    this.RAClaimSubPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var RAClaimReSubmissionPopupDetList = Ext.getCmp('RAClaimReSubmissionPopupDetList');

            for (var pcnt = 0; pcnt < RAClaimReSubmissionPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = RAClaimReSubmissionPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', false);
            }
        },
        scope: this,
        tabIndex: this.RAClaimSubPopupForm.FormFieldsCount + 2
    });

    this.RAClaimSubPopupForm.addButton({
        text: 'Post',
        handler: function () {

            var RAClaimReSubmissionPopupDetList = Ext.getCmp('RAClaimReSubmissionPopupDetList');
            var RAClaimMissingActivityDetList = Ext.getCmp('RAClaimMissingActivityDetList');
            var RAClaimReSubmissionRecords = [];
            var RAClaimMissingActivityRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < RAClaimReSubmissionPopupDetList.store.modified.length; Cnt++) {

                if (RAClaimReSubmissionPopupDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    RAClaimReSubmissionRecords.push(Ext.encode(RAClaimReSubmissionPopupDetList.store.modified[Cnt].data));
                    CheckCnt++;
                }
            }

            for (Cnt = 0; Cnt < RAClaimMissingActivityDetList.store.modified.length; Cnt++) {

                if (RAClaimMissingActivityDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    RAClaimMissingActivityRecords.push(Ext.encode(RAClaimMissingActivityDetList.store.modified[Cnt].data));
                    CheckCnt++;
                }
            }

            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Post');
                return;
            }
            var RAClaimReSubmissionRecordsRow = '[' + RAClaimReSubmissionRecords.join(',') + ']';
            var RAClaimMissingActivityRecordsRow = '[' + RAClaimMissingActivityRecords.join(',') + ']';

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MedProcessReSubmission',
                    selectIndex: ClaimRAID,
                    RAClaimReSubmissionRecordsRow: RAClaimReSubmissionRecordsRow,
                    RAClaimMissingActivityRecordsRow: RAClaimMissingActivityRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MedProcessReSubmissionComplete, this);
        },
        scope: this,
        tabIndex: this.RAClaimSubPopupForm.FormFieldsCount + 2
    });


    this.RAClaimSubPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.RAClaimSubPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.RAClaimSubPopupForm.FormFieldsCount + 2
    });

    this.RAClaimSubPopupFormWindow = new Ext.Window({
        id: 'RAClaimSubPopupFormWindow',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.RAClaimSubPopupForm.width + 10,
        height: this.RAClaimSubPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.RAClaimSubPopupForm]
    });
    this.RAClaimSubPopupFormWindow.show();
}


function MedProcessReSubmissionComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedProcessReSubmissionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        this.RAClaimSubPopupFormWindow.close();

        if (Ext.getCmp('PriorAuthApprovalHistoryDtlList')) {
            var PriorAuthApprovalHistoryDtlList = Ext.getCmp('PriorAuthApprovalHistoryDtlList');
            PriorAuthApprovalHistoryDtlList.store.load({
                params: {
                    start: 0,
                    limit: PriorAuthApprovalHistoryDtlList.pageSize
                }
            });

        }

        if (Ext.getCmp('PriorViewActivityList')) {
            var PriorViewActivityList = Ext.getCmp('PriorViewActivityList');
            PriorViewActivityList.store.load({
                params: {
                    start: 0,
                    limit: PriorViewActivityList.pageSize
                }
            });

        }
    }
}


function UploadClaimBatch(form, login) {

    var UploadCode = Ext.getCmp('UploadClaimBatch-UploadTemplateCode');
    var TypeCode = Ext.getCmp('UploadClaimBatch-UploadtypeCode');
    var ClaimSourceTypeCode = Ext.getCmp('UploadClaimBatch-Claim_Source_Type_Code');

    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPOADCLAIMBATCH')";
    }, this);

    if (DefaultClaimSourseType != null || DefaultClaimSourseType != '') {  // Source Type
        ClaimSourceTypeCode.setComboValue(DefaultClaimSourseType);
        ClaimSourceTypeCode.disable();
    }
    else {
        ClaimSourceTypeCode.enable();
    }
}

function ViewPriorAuthorization(form, login) {

    if (MeOnlineClaimSelectedRecordRow == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the History Detail to View !');
        return;
    }

    if (MeOnlineClaimSelectedRecordRow.get('Id_Payer') == '' || MeOnlineClaimSelectedRecordRow.get('Id_Payer') == null) {
        Ext.MessageBox.alert(login.modulename, 'Record Not Found !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewPriorAuthorization',
            ViewPriorAuthorizationPayerCode: MeOnlineClaimSelectedRecordRow.get('Id_Payer'),
            ClaimRefNo: MeOnlineClaimSelectedRecordRow.get('Claimref_No')
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewPriorAuthorizationComplete, this);

}

function ViewPriorAuthorizationComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ViewPriorAuthorizationComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (responseText.success) {

        this.ViewPriorAuthorizationForm = new Ext.form.FormPanel(responseText.ViewPriorAuthorizationCofig);

        this.ViewPriorAuthorizationForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.ViewPriorAuthorizationFormWindow.close();
            },
            scope: this,
            tabIndex: this.ViewPriorAuthorizationForm.FormFieldsCount + 2

        });
        this.ViewPriorAuthorizationFormWindow = new Ext.Window({
            id: 'ViewPriorAuthorizationFormWindow',
            title: 'View Prior Authorization',
            closable: true,
            minimizable: false,
            width: this.ViewPriorAuthorizationForm.width + 10,
            height: this.ViewPriorAuthorizationForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.ViewPriorAuthorizationForm]
        });

        //this.GeneratePayrollRunForm.on('render', GeneratePayrollRunFormRender, this);
        this.ViewPriorAuthorizationFormWindow.show();

    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
}

function ViewRemittanceAdvice(from, login) {

    if (MeOnlineClaimSelectedRecordRow == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the History Detail to View !');
        return;
    }

    if (MeOnlineClaimSelectedRecordRow.get('Id_Payer') == '' || MeOnlineClaimSelectedRecordRow.get('Id_Payer') == null) {
        Ext.MessageBox.alert(login.modulename, 'Record Not Found !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewRemittanceAdvice',
            ViewPriorAuthorizationPayerCode: MeOnlineClaimSelectedRecordRow.get('Id_Payer'),
            ClaimRefNo: MeOnlineClaimSelectedRecordRow.get('Claimref_No')
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewRemittanceAdviceComplete, this);
}

function ViewRemittanceAdviceComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', ViewRemittanceAdviceComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (responseText.success) {

        this.ViewRemittanceAdviceForm = new Ext.form.FormPanel(responseText.ViewRemittanceAdviceCofig);

        this.ViewRemittanceAdviceForm.addButton({
            text: 'Cancel',
            handler: function () {
                this.ViewRemittanceAdviceFormWindow.close();
            },
            scope: this,
            tabIndex: this.ViewRemittanceAdviceForm.FormFieldsCount + 2

        });
        this.ViewRemittanceAdviceFormWindow = new Ext.Window({
            id: 'ViewRemittanceAdviceFormWindow',
            title: 'View Remittance Advice',
            closable: true,
            minimizable: false,
            width: this.ViewRemittanceAdviceForm.width + 10,
            height: this.ViewRemittanceAdviceForm.height + 10,
            plain: true,
            layout: 'fit',
            resizable: false,
            bodyStyle: 'padding:5px',
            modal: true,
            items: [this.ViewRemittanceAdviceForm]
        });

        //this.GeneratePayrollRunForm.on('render', GeneratePayrollRunFormRender, this);
        this.ViewRemittanceAdviceFormWindow.show();
    }
    else {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    }
}


function MedOnlineClaimApprovedUpdate(from, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to Approve the selected record?', function (button) {
        if (MeOnlineClaimSelectedRecordRow.get('AuthorizedStatus') == 0) {
            Ext.MessageBox.alert(login.modulename, 'Pending record can not allow to Approve');
            return;
        }

        if (button == 'yes') {
            if (MeOnlineClaimSelectedRecordRow == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Select the History Detail to Update !');
                return;
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MedOnlineClaimApprovedUpdate',
                    selectIndex: MeOnlineClaimSelectedRecordRow.get('ID'),
                    ScreenSourceType: DefaultClaimSourseType
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MedOnlineClaimApprovedUpdateComplete, this);
        }
    }, this)
}


function MedOnlineClaimApprovedUpdateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimApprovedUpdateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }

}


function MedOnlineClaimCopy(from, login) {

    Ext.MessageBox.confirm('Information', 'Do you want to Copy the selected record?', function (button) {
        if (button == 'yes') {
            if (MeOnlineClaimSelectedRecordRow == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Select the History Detail to Copy !');
                return;
            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MedOnlineClaimCopyPopup',
                    selectIndex: MeOnlineClaimSelectedRecordRow.get('ID')
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MedOnlineClaimCopyPopupComplete, this);
        }
    }, this)
}


function MedOnlineClaimCopyPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimCopyPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ClaimSubCopyPopupForm = new Ext.form.FormPanel(responseText.ClaimSubPopupCofig);

    this.ClaimSubCopyPopupForm.addButton({
        text: 'Select All',
        handler: function () {

            var ClaimSubmissionCopyPopupDetList = Ext.getCmp('ClaimSubmissionCopyPopupDetList');

            for (var pcnt = 0; pcnt < ClaimSubmissionCopyPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = ClaimSubmissionCopyPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.ClaimSubCopyPopupForm.FormFieldsCount + 2
    });

    this.ClaimSubCopyPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var ClaimSubmissionCopyPopupDetList = Ext.getCmp('ClaimSubmissionCopyPopupDetList');

            for (var pcnt = 0; pcnt < ClaimSubmissionCopyPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = ClaimSubmissionCopyPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', false);
            }
        },
        scope: this,
        tabIndex: this.ClaimSubCopyPopupForm.FormFieldsCount + 2
    });

    this.ClaimSubCopyPopupForm.addButton({
        text: 'Post',
        handler: function () {

            var ClaimSubmissionCopyPopupDetList = Ext.getCmp('ClaimSubmissionCopyPopupDetList');
            var ClaimSubmissionRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < ClaimSubmissionCopyPopupDetList.store.modified.length; Cnt++) {

                if (ClaimSubmissionCopyPopupDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    ClaimSubmissionRecords.push(Ext.encode(ClaimSubmissionCopyPopupDetList.store.modified[Cnt].data));
                    CheckCnt++;
                }
            }

            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Post');
                return;
            }
            var ClaimSubmissionRecordsRow = '[' + ClaimSubmissionRecords.join(',') + ']';
            var selectIndex =
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MedOnlineClaimCopy',
                    selectIndex: MeOnlineClaimSelectedRecordRow.get('ID'),
                    ClaimSubmissionRecordsRow: ClaimSubmissionRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MedOnlineClaimCopyComplete, this);
        },
        scope: this,
        tabIndex: this.ClaimSubCopyPopupForm.FormFieldsCount + 2
    });


    this.ClaimSubCopyPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ClaimSubCopyPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.ClaimSubCopyPopupForm.FormFieldsCount + 2
    });

    this.ClaimSubCopyPopupFormWindow = new Ext.Window({
        id: 'ClaimSubCopyPopupFormWindow',
        title: 'Claim Submission',
        closable: true,
        minimizable: false,
        width: this.ClaimSubCopyPopupForm.width + 10,
        height: this.ClaimSubCopyPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ClaimSubCopyPopupForm]
    });
    this.ClaimSubCopyPopupForm.on('render', ClaimSubmissionCopyPopup, this);
    this.ClaimSubCopyPopupFormWindow.show();
}

function ClaimSubmissionCopyPopup(from, login) {

    var ClaimSubmissionCopyPopupDetList = Ext.getCmp('ClaimSubmissionCopyPopupDetList').getStore();

    ClaimSubmissionCopyPopupDetList.on('load', function (store, records, options) {
        for (Cnt = 0; Cnt < ClaimSubmissionCopyPopupDetList.getCount() ; Cnt++) {
            ClaimSubmissionCopyPopupDetList.getAt(Cnt).set('SelectCheck', true);
        }
    }, this);

}

function MedOnlineClaimCopyComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimCopyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        this.ClaimSubCopyPopupFormWindow.close();
        if (Number(responseText.ClaimCode) > 0) {
            var PriorReSubmitted = new Ext.biz.WidgetInfo();
            var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims';
            var Url = '/forms/Medical/MEOnlineApprovedClaims.xml';
            var PKey = responseText.ClaimCode;
            var WidgetTitle = 'New Claim Request';
            PriorReSubmitted.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, '', '');
        }
        else {
            Ext.MessageBox.show({
                title: login.modulename,
                msg: responseText.Msg,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.INFO
            });
        }

        var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
        MEOnlineClaimReqApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: MEOnlineClaimReqApprovalHistoryDtlList.pageSize
            }
        });
    }

}




//----------------------------------------------------E-Referral Script ------------------------------------------------------------------------------------

function EReferralDownloadhandler(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralDownload',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralDownloadComplete, this);
}

function EReferralDownloadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralDownloadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralUploadBtHandler(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralUpload',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralUploadComplete, this);
}

function EReferralUploadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralUploadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralModifyBtHandler(form, lgoin) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralModify',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralModifyComplete, this);
}

function EReferralModifyComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralModifyComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralCancelBtHandler(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralCancel',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralCancelComplete, this);
}

function EReferralCancelComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralCancelComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralLockBtHandler(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralLock',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralLockComplete, this);
}

function EReferralLockComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralLockComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralForwardBtHandler(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) { // Insurrer 
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) { // HAAD
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralForward',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralForwardComplete, this);
}

function EReferralForwardComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralForwardComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function EReferralDischargeBtHandler(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();
    var Pkey = Ext.getCmp('PatientLoginClinic').selectIndex;
    if (Pkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the record before Posting !');
        return;
    }

    if (DefaultPatientType != 4) {
        Ext.MessageBox.alert(login.modulename, 'Only Insurer Patient Type allow to make claim');
        return;
    }

    if (DefaultDHAType == 0) {
        Ext.MessageBox.alert(login.modulename, 'Only DHA Type of Provider allow to post ERX Request. !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EReferralDischarge',
            selectIndex: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EReferralDischargeComplete, this);
}

function EReferralDischargeComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EReferralDischargeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}