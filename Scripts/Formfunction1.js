

var KCardPrintDetailLoad = '';
var KCardRePrintDetailLoad = '';
var CollectionsSearchSelectID = '';

if (login.GlobalVariables) {
    var codepos = login.GlobalVariables.indexOf('MAXCARDREPRINT');
    var CardRePrintMaxCount = login.GlobalValues[codepos];
}
var AddNewInjectionSelectedRecord = [];

function TimeAtttendanceFindButtonHandler(form, login) {
    var r = 12;
    alert('Find Button handler call !');
}

//function Loans_and_Advances(form, login) {FPOLICYFINANCE
//    if (form.selectedIndex == -1) {
//        if (isAdditinalInfoValue != 0) {
//            Ext.getCmp('Loans_and_Advances-EmployeeCode').setComboValue(isAdditinalInfoValue);
//            Ext.getCmp('Loans_and_Advances-EmployeeCode').disable();
//        }
//    }
//}

function Aid_Request_Income(form, login) {

    //var col = document.getElementById('ABCCOL');
    // var col = document.getElementById('1ABCCOL');
    //var Col = form.form.getEl('ABCCOL');
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Aid_Request_Income-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Aid_Request_Income-Case_Code').disable();
            Ext.getCmp('Aid_Request_Income-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Aid_Request_Income-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
            //col.setVisible(false);
        }
    }
}


function orphans(form, login) {

    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('orphans-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('orphans-Case_Code').disable();
            Ext.getCmp('orphans-CaseCode').setValue(isAdditinalInfoRecord.get('CaseCode'));
            //            Ext.getCmp('Aid_Request_Income-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
            //            //col.setVisible(false);
        }
    }
}

function Detail_Request_study(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Detail_Request_study-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Detail_Request_study-Case_Code').disable();
            Ext.getCmp('Detail_Request_study-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Detail_Request_study-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}

function Aid_Request_Papers(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Aid_Request_Papers-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Aid_Request_Papers-Case_Code').disable();
            Ext.getCmp('Aid_Request_Papers-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Aid_Request_Papers-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}

function Giving_Societies(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Giving_Societies-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Giving_Societies-Case_Code').disable();
            Ext.getCmp('Giving_Societies-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Giving_Societies-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}

function Cars_Details(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Cars_Details-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Cars_Details-Case_Code').disable();
            Ext.getCmp('Cars_Details-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Cars_Details-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}

function RequestRelatives(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('RequestRelatives-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('RequestRelatives-Case_Code').disable();
            Ext.getCmp('RequestRelatives-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('RequestRelatives-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}

function Aid_Request_Duties(form, login) {
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('Aid_Request_Duties-Case_Code').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('Aid_Request_Duties-Case_Code').disable();
            Ext.getCmp('Aid_Request_Duties-Name').setValue(isAdditinalInfoRecord.get('ENName'));
            Ext.getCmp('Aid_Request_Duties-NameAR').setValue(isAdditinalInfoRecord.get('ARName'));
        }
    }
}


function PYAssignmentSet(form, login) {


    var Person_Code = Ext.getCmp('PYAssignmenSetDetails-Person_Code');
    Ext.getCmp('PYAssignmentSet-Payroll_Code').on('select', function (combo, record, index) {
        //to clear  the grid
        var PYAssignmenSetDetails = Ext.getCmp('PYAssignmenSetDetailsList');
        PYAssignmenSetDetails.store.pruneModifiedRecords = true;
        PYAssignmenSetDetails.store.added = [];
        PYAssignmenSetDetails.store.modified = [];
        PYAssignmenSetDetails.store.removeAll();
        PYAssignmenSetDetails.store.pruneModifiedRecords = false;
        //end
    }, this);
    if (Person_Code) Person_Code.on('beforequery', function (evt) {
        var payrollCode = Ext.getCmp('PYAssignmentSet-Payroll_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.PERSON_CODE in (Select hrper.PERSON_CODE from gen_contacts hrper where hrper.PAYROLL_CODE=" + payrollCode + ")";
    }, this);

    Ext.getCmp('PYAssignmentSet-OrganizatioinCode').on('select', function (combo, record, index) {
        //to clear  the grid
        var PYAssignmenSetDetails = Ext.getCmp('PYAssignmenSetDetailsList');
        PYAssignmenSetDetails.store.pruneModifiedRecords = true;
        PYAssignmenSetDetails.store.added = [];
        PYAssignmenSetDetails.store.modified = [];
        PYAssignmenSetDetails.store.removeAll();
        PYAssignmenSetDetails.store.pruneModifiedRecords = false;
        //end
    }, this);

    if (Person_Code) Person_Code.on('beforequery', function (evt) {
        var OrganizatioinCode = Ext.getCmp('PYAssignmentSet-OrganizatioinCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.PERSON_CODE in (Select hrper.PERSON_CODE from gen_contacts hrper where hrper.ORGANIZATION_CODE=" + OrganizatioinCode + ")";
    }, this);

    var AssWorkHrs = Ext.getCmp('PYAssignmenWorkDtlList').getStore();

    AssWorkHrs.on('update', function (store, record, options) {


        var total = 0;
        var ExtraHoursSum = 0;
        var AmountSum = 0;

        var totalhours = 0;
        var totalhours1 = 0;
        var totalhours2 = 0;
        var totalhours3 = 0;
        var totalhours4 = 0;
        var From = record.get('From');
        var To = record.get('To');


        var BreakFrom = record.get('BreakFrom');
        var BreakTo = record.get('BreakTo');




        var TotalWorkingHours = record.get('TotalWorkingHours');



        var IIn1 = (new Date("01/01/2007 " + From).getHours() * 60) + new Date("01/01/2007 " + From).getMinutes();
        //var startMins1 = new Date("01/01/2007 " + in1).getMinutes();
        var OOut1 = (new Date("01/01/2007 " + BreakFrom).getHours() * 60) + new Date("01/01/2007 " + BreakFrom).getMinutes();
        //var startoutMins1 = new Date("01/01/2007 " + out1).getMinutes();

        var IIn2 = (new Date("01/01/2007 " + BreakTo).getHours() * 60) + new Date("01/01/2007 " + BreakTo).getMinutes();
        //var startMins1 = new Date("01/01/2007 " + in1).getMinutes();
        var OOut2 = (new Date("01/01/2007 " + To).getHours() * 60) + new Date("01/01/2007 " + To).getMinutes();
        //var startoutMins1 = new Date("01/01/2007 " + out1).getMinutes();

        if (IIn1 >= OOut2) {
            Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "To" Time !');
            return;
        }
        if (OOut1 <= IIn1) {
            Ext.MessageBox.alert(login.modulename, '"From" Time should be lesser than the "BreakFrom" Time !');
            return;
        }

        if (IIn2 <= OOut1) {
            Ext.MessageBox.alert(login.modulename, '"BreakFrom" Time should be lesser than the "BreakTo" Time !');
            return;
        }


        if (IIn2 >= OOut2) {
            Ext.MessageBox.alert(login.modulename, '"Break To" Time should be lesser than the "To" Time !');
            return;
        }

        var MorWorkHrs = 0;
        var EveWorkHrs = 0;

        if (OOut1 > IIn1) {
            MorWorkHrs = (OOut1 - IIn1);
        }

        if (OOut2 > IIn2 && IIn2 > OOut1) {
            EveWorkHrs = (OOut2 - IIn2);
        }

        var TotWorkHrs = (MorWorkHrs + EveWorkHrs);//Math.floor((MorWorkHrs + EveWorkHrs) / 60) + (((MorWorkHrs + EveWorkHrs) % 60) / 100);


        record.set('TotalWorkingHours', Math.floor(TotWorkHrs / 60) + ((TotWorkHrs % 60) / 100));



    }, this);
}

function EmployeeBalances(form, login) {

    var PayrollCode = Ext.getCmp('EmployeeBalances-PayRollCode');
    var PeriodCode = Ext.getCmp('EmployeeBalances-PeriodCode');
    var EmployeeCode = Ext.getCmp('EmployeeBalances-EmployeeCode');


    if (PayrollCode) PayrollCode.on('select', function (combo, record, index) {
        PeriodCode.clearValue(); EmployeeCode.clearValue();
    }, this);

    //    if (PayrollCode) PayrollCode.on('clear', function (e) {
    //        PeriodCode.clearValue(); EmployeeCode.clearValue();
    //    }, this);

    if (PeriodCode) PeriodCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('EmployeeBalances-PayRollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PERIOD_CODE in (select PY.PERIOD_CODE from PY_Payroll_Periods PY where PY.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var Payroll_Code = Ext.getCmp('EmployeeBalances-PayRollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " PERSON_CODE in (select hper.PERSON_CODE from GEN_CONTACTS hper where hper.PAYROLL_CODE=" + Payroll_Code + ")";
    }, this);

}

function EmployeeBalancesFindButtonHandler(form, login) {
    var FilterQry = '';
    var PayrollCode = Ext.getCmp('EmployeeBalances-PayRollCode');
    var PeriodCode = Ext.getCmp('EmployeeBalances-PeriodCode');
    var EmployeeCode = Ext.getCmp('EmployeeBalances-EmployeeCode');

    if (PayrollCode.getValue() != 0 && PayrollCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " EmpBal.PAYROLL_ID=" + PayrollCode.getValue();
        else
            FilterQry += " and EmpBal.PAYROLL_ID=" + PayrollCode.getValue();
    }

    if (PeriodCode.getValue() != 0 && PeriodCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " EmpBal.PERIOD_ID=" + PeriodCode.getValue();
        else
            FilterQry += " and EmpBal.PERIOD_ID=" + PeriodCode.getValue();
    }

    if (EmployeeCode.getValue() != 0 && EmployeeCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " EmpBal.PERSON_ID=" + EmployeeCode.getValue();
        else
            FilterQry += " and EmpBal.PERSON_ID=" + EmployeeCode.getValue();
    }

    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('EmployeeBalancesDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.EmployeeBalancesDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}

function ContractPosting(form, login) {
    var PrimKey = Ext.getCmp('HRContract').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HRContractPosting',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRContractPostingComplete, this);
}

function HRContractPostingComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', HRContractPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        //            Ext.getCmp('HRContract-StatusCode').setComboValue(1);
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_HRCONTRACTS_editform').close();
    }
}

function HRContract(form, login) {
    if (!form.isView) {
        Ext.getCmp('HRContract-StatusCode').setComboValue(0);
        Ext.getCmp('HRContract-StatusCode').disable();
    }
}

function SCProductiveFamilies(form, login) {
    var support = Ext.getCmp('SCProductiveFamilies-Support_TypeCode');
    var PayType = Ext.getCmp('SCProductiveFamilies-PaymentMethodCode');
    if (form.selectedIndex == -1) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('SCProductiveFamilies-Family_IDCode').setValue(isAdditinalInfoRecord.get('CaseNoCode'));
            Ext.getCmp('SCProductiveFamilies-Family_IDCode').disable();
        }
        if (!form.isView) {
            support.on('select', function fnd(combo, record, index) {
                var type = combo.getValue();
                if (type == 0) {

                    PayType.enable();
                    PayType.allowBlank = false;
                }
                else {

                    PayType.disable()
                    PayType.clearValue();
                    PayType.allowBlank = true;
                }
            }, this);
        }
    }
}

function HR_ExtraOverTime(form, login) {

    if (!form.isView) {
        Ext.getCmp('HR_ExtraOverTime-StatusCode').setComboValue(0);
        Ext.getCmp('HR_ExtraOverTime-StatusCode').disable();
    }

    if (form.selectedIndex != -1 && !form.isView) {
        Ext.getCmp('HR_ExtraOverTime-PayrollCode').disable();
        Ext.getCmp('HR_ExtraOverTime-PeriodCode').disable();
        Ext.getCmp('HR_ExtraOverTime-Buttontxt').disable();
    }

    var PeriodCode = Ext.getCmp('HR_ExtraOverTime-PeriodCode');
    Ext.getCmp('HR_ExtraOverTime-PayrollCode').on('select', function (combo, record, index) {
        if (PeriodCode) PeriodCode.clearValue();

        var grdFunctionality = Ext.getCmp('OverTime_DetailsList');
        if (grdFunctionality.store.getCount() > 0) {
            grdFunctionality.store.pruneModifiedRecords = true;
            grdFunctionality.store.added = [];
            grdFunctionality.store.modified = [];
            grdFunctionality.store.removeAll();
            grdFunctionality.store.pruneModifiedRecords = false;
            grdFunctionality.store.totalLength = 0;
            grdFunctionality.pageBar.updateInfo();
        }
    }, this);
    if (PeriodCode) PeriodCode.on('beforequery', function (evt) {
        var payrollCode = Ext.getCmp('HR_ExtraOverTime-PayrollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Period_Code in (Select P.PERIOD_CODE from PY_PAYROLL_PERIODS P where P.PAYROLL_CODE=" + payrollCode + ")";
    }, this);


    var EmployeeCode = Ext.getCmp('OverTime_Details-EmployeeCode');

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var payrollCode = Ext.getCmp('HR_ExtraOverTime-PayrollCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = ("PAYROLL_CODE=" + payrollCode);
    }, this);


    var grdhour = Ext.getCmp('OverTime_DetailsList');
    var total = Ext.getCmp('HR_ExtraOverTime-Total');
    var totalamount = Ext.getCmp('HR_ExtraOverTime-TotalAmount');

    grdhour.on('afteredit', function (e) {
        var ExtraHoursSum = 0;
        var AmountSum = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            ExtraHoursSum += (1 * e.grid.store.getAt(i).get('ExtraHours'));
            AmountSum += (1 * e.grid.store.getAt(i).get('Amount'));
        }
        total.setValue(ExtraHoursSum);
        totalamount.setValue(AmountSum);

    }, this);


    var totalamountload = Ext.getCmp('OverTime_DetailsList').getStore();
    totalamountload.on('load', function (store, record, options) {
        var TotalHrs = 0;
        var TotalAmnt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalHrs += (1 * record.get('ExtraHours'));
            if (record.get('IsDeleted') == false) TotalAmnt += (1 * record.get('Amount'));
        }
        total.setValue(TotalHrs);
        totalamount.setValue(TotalAmnt);

    }, this);

}


function SalaryChangeFindButtonHandler(form, login) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'getSalaryChangesForm'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', getFindFormReqComplete, this);

}

function getFindFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', getFindFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.GenerateFindForm = new Ext.form.FormPanel(responseText.SalaryCofig);
    this.GenerateFindForm.addButton({
        text: 'Find',
        handler: function () { // Getting the Values of the Pop window and Passing the Values
            var Organization = Ext.getCmp('FindEmployees-OrganizationCode').getValue();
            var job = Ext.getCmp('FindEmployees-JobCode').getValue();
            var Position = Ext.getCmp('FindEmployees-PositionsCode').getValue();
            var Location = Ext.getCmp('FindEmployees-LocationCode').getValue();
            var Supervisor = Ext.getCmp('FindEmployees-SupervisorCode').getValue();
            var Payrollcode = Ext.getCmp('FindEmployees-PayrollCode').getValue();
            var Grade = Ext.getCmp('FindEmployees-GradeCode').getValue();
            var EmployeeCode = Ext.getCmp('FindEmployees-EmployeeCode').getValue();

            if (Organization == '' && job == '' && Position == '' && Location == '' && Supervisor == '' && Payrollcode == '' && Grade == '' && EmployeeCode == '') {
                Ext.MessageBox.alert(login.modulename, 'Please Select any one Criteria');
                return;
            }


            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'GenerateFind',
                    Organization: (Organization == '' ? 0 : Organization),
                    job: (job == '' ? 0 : job),
                    Position: (Position == '' ? 0 : Position),
                    Location: (Location == '' ? 0 : Location),
                    Supervisor: (Supervisor == '' ? 0 : Supervisor),
                    Payrollcode: (Payrollcode == '' ? 0 : Payrollcode),
                    Grade: (Grade == '' ? 0 : Grade),
                    EmployeeCode: (EmployeeCode == '' ? 0 : EmployeeCode)
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', GenerateFindComplete, this);

        },
        scope: this,
        tabIndex: this.GenerateFindForm.FormFieldsCount + 2
    });
    this.GenerateFindForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.GenerateFindWindow.close();
        },
        scope: this,
        tabIndex: this.GenerateFindForm.FormFieldsCount + 2
    });
    this.GenerateFindWindow = new Ext.Window({
        id: 'GenerateFindFormWindow',
        title: 'Find Employees',
        closable: true,
        minimizable: false,
        width: this.GenerateFindForm.width + 10,
        height: this.GenerateFindForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.GenerateFindForm]
    });

    this.GenerateFindForm.on('render', GenerateFindFormRender, this);
    this.GenerateFindWindow.show();


}

function GenerateFindFormRender(form, login) {

    var Organization = Ext.getCmp('FindEmployees-OrganizationCode');
    var job = Ext.getCmp('FindEmployees-JobCode');
    var Position = Ext.getCmp('FindEmployees-PositionsCode');
    var Location = Ext.getCmp('FindEmployees-LocationCode');
    var Supervisor = Ext.getCmp('FindEmployees-SupervisorCode');
    var PayrollCode = Ext.getCmp('FindEmployees-PayrollCode');
    var Grade = Ext.getCmp('FindEmployees-GradeCode');
    var EmployeeCode = Ext.getCmp('FindEmployees-EmployeeCode');


    Organization.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);


    job.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    Position.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    Location.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    Supervisor.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    PayrollCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    Grade.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {

        var FilterQry = '';
        var Organization = Ext.getCmp('FindEmployees-OrganizationCode').editValue;
        if (Organization != '' && Organization != null && Organization != 0) {
            if (FilterQry == '')
                FilterQry += " H.ORGANIZATION_CODE=" + Organization;
            else
                FilterQry += " and H.ORGANIZATION_CODE=" + Organization;
        }

        var job = Ext.getCmp('FindEmployees-JobCode').editValue;
        if (job != '' && job != null && job != 0) {
            if (FilterQry == '')
                FilterQry += " H.JOB_CODE=" + job;
            else
                FilterQry += "  and H.JOB_CODE=" + job;
        }

        var Position = Ext.getCmp('FindEmployees-PositionsCode').editValue;
        if (Position != '' && Position != null && Position != 0) {
            if (FilterQry == '')
                FilterQry += " H.POSITION_CODE=" + Position;
            else
                FilterQry += "  and H.POSITION_CODE=" + Position;
        }

        var Supervisor = Ext.getCmp('FindEmployees-SupervisorCode').editValue;
        if (Supervisor != '' && Supervisor != null && Supervisor != 0) {
            if (FilterQry == '')
                FilterQry += " H.MANAGER_ID=" + Supervisor;
            else
                FilterQry += "  and H.MANAGER_ID=" + Supervisor;
        }

        var Location = Ext.getCmp('FindEmployees-LocationCode').editValue;
        if (Location != '' && Location != null && Location != 0) {
            if (FilterQry == '')
                FilterQry += " H.LOCATIONCODE=" + Location;
            else
                FilterQry += "  and H.LOCATIONCODE=" + Location;
        }

        var Grade = Ext.getCmp('FindEmployees-GradeCode').editValue;
        if (Grade != '' && Grade != null && Grade != 0) {
            if (FilterQry == '')
                FilterQry += " H.GRADE_CODE=" + Grade;
            else
                FilterQry += "  and H.GRADE_CODE=" + Grade;
        }

        var PayrollCode = Ext.getCmp('FindEmployees-PayrollCode').editValue;
        if (PayrollCode != '' && PayrollCode != null && PayrollCode != 0) {
            if (FilterQry == '')
                FilterQry += " H.PAYROLL_CODE=" + PayrollCode;
            else
                FilterQry += "  and H.PAYROLL_CODE=" + PayrollCode;
        }

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = FilterQry;

    }, this);
}

function GenerateFindComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', GenerateFindComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {
        var MasTransaction_Code = Ext.getCmp('HRSalaryChange').selectedIndex;
        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'Details not found for the selected criteria !');
            return;
        }
        //to clear  the grid
        var grdFunctionality = Ext.getCmp('HRSalaryChangeDetailList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end


        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            EmpRecord = responseText.datum[cnt];

            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                TimeAttendancesSerialno: cnt + 1,
                EmployeeCode: EmpRecord.ID,
                EmployeeName: EmpRecord.Employee_number,
                EmployeeFullName: EmpRecord.FullName,
                Transaction_Code: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                HRSalaryChangeSubDetailList: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        }

        Ext.getCmp('GenerateFindFormWindow').close();
    }
}

function HRExtraOvertimeLoadButtonHandler(form, login) {
    var HRExtraOverTime = Ext.getCmp('OverTime_DetailsList');
    var PrimKey = Ext.getCmp('HR_ExtraOverTime').selectedIndex;
    var Payroll = Ext.getCmp('HR_ExtraOverTime-PayrollCode').getValue();
    //var Period = Ext.getCmp('HR_ExtraOverTime-PeriodCode').getValue();
    if (Payroll == 0) {
        Ext.MessageBox.alert(login.modulename, 'Select the Payroll Code!');
        return;
    }

    //    if (Period == 0) {
    //        Ext.MessageBox.alert(login.modulename, 'Select the Period Code!');
    //        return;
    //    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HROverTimeLoad',
            Primkey: PrimKey,
            Payroll: Payroll
            //Period: Period           
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRExtraOverTimeLoadComplete, this);
}

function HRExtraOverTimeLoadComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', HRExtraOverTimeLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {
        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'Employees not found for this selected criteria !');
            return;
        }
        //to clear  the grid
        var grdFunctionality = Ext.getCmp('OverTime_DetailsList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end
        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            EmpRecord = responseText.datum[cnt];

            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                OverTimeSerialno: cnt + 1,
                EmployeeCode: EmpRecord.ID,
                EmployeeName: EmpRecord.FullName,
                Extra_Overtime_Code: 1,
                LastName: '',
                FirstName: '',
                MiddleName: '',
                ExtraHours: 0,
                Amount: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        }

    }
}
function SBSUpdate(form, login) {
    var Updated = Ext.getCmp('SBSUpdate-Updated');
    var UpdateOn = Ext.getCmp('SBSUpdate-Update_On');

    if (!form.isView && form.selectedIndex == -1) {
        Ext.getCmp('SBSUpdate-User_Name').setValue(login.UserName);
        Ext.getCmp('SBSUpdate-Generated_By').setValue(login.UserName);
    }

    if (!form.isView && Updated && UpdateOn) {
        UpdateOn.disable();
        Updated.on('check', onUpdateCheck, this);

        if (Updated.getValue()) {
            UpdateOn.disable();
        }
        else {
            UpdateOn.enable();
        }
    }

}

function onUpdateCheck(checkBox, checked) {
    var UpdateOn = Ext.getCmp('SBSUpdate-Update_On');
    if (!checked) {
        UpdateOn.setValue(null);
        UpdateOn.disable();
    }
    else {
        UpdateOn.enable();
    }
}


//SQL Update Search Button Handlers


function SQLUpdateSearch(form, login) {

}

function CheckAvailableButtonHandler(form, login) {


}

function ExportButtonHandler(form, login) {

}

function CloseButtonHandler(form, login) {


}

function SQLUpdateSearchHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewSQLUpdateSearch'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ViewSQLUpdateSearchComplete, this);
}

function ViewSQLUpdateSearchComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ViewSQLUpdateSearchComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ViewSQLUpdateSearchForm = new Ext.form.FormPanel(responseText.SQLSearchCofig);

    this.ViewSQLUpdateSearchForm.addButton({
        text: 'CHECK AVAILABLITY',
        handler: function () {
            var UserName = Ext.getCmp('SQLUpdateSearch-UserName').getValue();
            var GeneratedBy = Ext.getCmp('SQLUpdateSearch-GeneratedBy').getValue();
            var GeneratedStartDate = Ext.getCmp('SQLUpdateSearch-GeneratedStartDate').getValue();
            var GeneratedEndDate = Ext.getCmp('SQLUpdateSearch-GeneratedEndDate').getValue();
            var UpdatedStartDate = Ext.getCmp('SQLUpdateSearch-UpdatedStartDate').getValue();
            var UpdatedEndDate = Ext.getCmp('SQLUpdateSearch-UpdatedEndDate').getValue();
            var Comments = Ext.getCmp('SQLUpdateSearch-Comment').getValue();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'CheckAvailability',
                    UserName: (UserName == '' ? '0' : UserName),
                    GeneratedBy: (GeneratedBy == '' ? '0' : GeneratedBy),
                    GeneratedStartDate: (GeneratedStartDate == '' ? '0' : GeneratedStartDate.format(login.jsdateformat)),
                    GeneratedEndDate: (GeneratedEndDate == '' ? '0' : GeneratedEndDate.format(login.jsdateformat)),
                    UpdatedStartDate: (UpdatedStartDate == '' ? '0' : UpdatedStartDate.format(login.jsdateformat)),
                    UpdatedEndDate: (UpdatedEndDate == '' ? '0' : UpdatedEndDate.format(login.jsdateformat)),
                    Comments: Comments
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', CheckAvailabilityComplete, this);
        },
        scope: this,
        tabIndex: this.ViewSQLUpdateSearchForm.FormFieldsCount + 2
    });

    this.ViewSQLUpdateSearchForm.addButton({
        text: 'EXPORT',
        handler: function () {

        },

        scope: this,
        tabIndex: this.ViewSQLUpdateSearchForm.FormFieldsCount + 2
    });

    this.ViewSQLUpdateSearchForm.addButton({
        text: 'CLOSE',
        handler: function () {
            Ext.MessageBox.confirm(login.modulename, 'Are You sure to close the window?', function (button) {
                if (button == 'yes') {
                    this.ViewSQLUpdateSearchFormWindow.close();
                }
            }, this);
        },

        scope: this,
        tabIndex: this.ViewSQLUpdateSearchForm.FormFieldsCount + 2
    });

    this.ViewSQLUpdateSearchFormWindow = new Ext.Window({
        id: 'ViewSQLUpdateSearchFormWindow',
        title: 'View SQL Upadate Search',
        closable: true,
        minimizable: false,
        width: this.ViewSQLUpdateSearchForm.width + 10,
        height: this.ViewSQLUpdateSearchForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ViewSQLUpdateSearchForm]
    });

    this.ViewSQLUpdateSearchFormWindow.show();
}

function CheckAvailabilityComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CheckAvailabilityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}



function NotificationItemDetail(form, login) {

}

/*
function GenManagement(form, login) {

    var ModuleCode = Ext.getCmp('GenManagement-ModuleCode');
    var MenuidCode = Ext.getCmp('GenManagement-MenuidCode')

    if (MenuidCode) MenuidCode.on('beforequery', function (evt) {
        var ModuleCode = Ext.getCmp('GenManagement-ModuleCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "MENUID in (select rpt.MENUID from genreport rpt where rpt.MODULECODE=" + ModuleCode + ")";
    }, this);
}
*/

function ErrorMessageUpdation(form, login) {
    var ConstraintCode = Ext.getCmp('ErrorMessageUpdation-ConstraintCode');

    ConstraintCode.on('select', function (combo, record, options) {
        Ext.getCmp('ErrorMessageUpdation-ConstraintName').setValue(record.get('ConstraintName'));
    }, this);


    var ConstraintCode = Ext.getCmp('ErrorMessageUpdation-ConstraintCode')

    Ext.getCmp('ErrorMessageUpdation-TableCode').on('select', function (combo, record, index) {
        ConstraintCode.clearValue();
        //ConstraintCode.lastQuery = '1=2';
        //ConstraintCode.store.baseParams.filter = "TABLE_NAME ='" + record.get('TableName') + "'";
    }, this);

    ConstraintCode.on('beforequery', function (evt) {
        var TableCode = Ext.getCmp('ErrorMessageUpdation-TableCode');
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TABLE_NAME ='" + TableCode.lastSelectionText + "'";
    }, this);

}

//        function Insert_Ticket1(form, login) {

//            var PrimKey = Ext.getCmp('HRTicket').selectedIndex;
//            var Employee = Ext.getCmp('HRTicket-EmployeeCode').getValue();
//            var Status = Ext.getCmp('HRTicket-StatusCode').getValue();
//            if (Status == 1) {
//                Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
//                return;
//            }
//            if (PrimKey == -1) {
//                Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
//                return;
//            }

//            Ext.Ajax.request({
//                url: 'tools/HumanResources/HRPosting.aspx',
//                params: {
//                    action: 'Insert_Ticket1',
//                    PrimKey: PrimKey,
//                    Employee: Employee

//                },
//                method: 'POST',
//                failure: function (result, request) {
//                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//                },
//                timeout: 1200000,
//                scope: this
//            });

//            Ext.Ajax.on('requestcomplete', InsertTicket1, this);
//        }



//        function InsertTicket1(conn, response) {
//            Ext.Ajax.un('requestcomplete', InsertTicket, this);
//            var responseText = Ext.util.JSON.decode(response.responseText);
//            if (!responseText.success) {
//                Ext.MessageBox.show({
//                    title: login.modulename,
//                    msg: responseText.Msg,
//                    buttons: Ext.MessageBox.OK,
//                    icon: Ext.MessageBox.INFO
//                });

//            } else {
//                var Status = Ext.getCmp('HRTicket-StatusCode').getValue();
//                {
//                    Ext.getCmp('HRTicket-StatusCode').setComboValue(1);
//                }
//                Ext.MessageBox.show({
//                    title: login.modulename,
//                    msg: responseText.Msg,
//                    buttons: Ext.MessageBox.OK,
//                    icon: Ext.MessageBox.INFO
//                });
//            }
//        }

function PMRentRevisions(form, login) {

}

function PMRentSearchHandler(form, login) {
    var FilterQry = '';
    var RevisionNo = Ext.getCmp('PMRentRevisions-RevisionNo');
    var FromDate = Ext.getCmp('PMRentRevisions-FromDate');
    var ToDate = Ext.getCmp('PMRentRevisions-ToDate');
    var StatusCode = Ext.getCmp('PMRentRevisions-StatusCode').getValue();
    var Property_TypeCode = Ext.getCmp('PMRentRevisions-Property_TypeCode');

    FilterQry = encodeURIComponent(FilterQry);

    if (RevisionNo.getValue() != '' && RevisionNo.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("renthdr.REVISION_NUMBER like ('%" + RevisionNo.getValue() + "%')");
        else
            FilterQry += ("and renthdr.REVISION_NUMBER like ('%" + RevisionNo.getValue() + " %')");
    }

    if (StatusCode !== '') {
        if (FilterQry == '')
            FilterQry += " renthdr.STATUS=" + StatusCode;
        else
            FilterQry += " and renthdr.STATUS=" + StatusCode;
    }

    if (Property_TypeCode.getValue() != '' && Property_TypeCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " renthdr.PM_ID=" + Property_TypeCode.getValue();
        else
            FilterQry += " and renthdr.PM_ID=" + Property_TypeCode.getValue();
    }

    if (FromDate.getValue() != '' && FromDate.getValue() != null && ToDate.getValue() != '' && ToDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " renthdr.REVISION_DATE between TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and renthdr.REVISION_DATE between TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }
    else {
        if (FromDate.getValue() != '' && FromDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += " renthdr.REVISION_DATE>=TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and renthdr.REVISION_DATE>=TO_DATE('" + FromDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
        if (ToDate.getValue() != '' && ToDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += " renthdr.REVISION_DATE<=TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and renthdr.REVISION_DATE<=TO_DATE('" + ToDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
    }

    DetailStore = Ext.getCmp('PMRentRevisionDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.PropertyManagement.CompanyMaster.PMRentRevisionDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PMRentClearHandler(form, login) {
    var RevisionNo = Ext.getCmp('PMRentRevisions-RevisionNo').setValue(null);
    var FromDate = Ext.getCmp('PMRentRevisions-FromDate').setValue(null);
    var ToDate = Ext.getCmp('PMRentRevisions-ToDate').setValue(null);
    var StatusCode = Ext.getCmp('PMRentRevisions-StatusCode').clearValue();
    var Property_TypeCode = Ext.getCmp('PMRentRevisions-Property_TypeCode').clearValue();
}

function PMRentNewBtnHandler(form, login) {

}

function PMRentOpenBtnHandler(form, login) {

}


function PMPropertyTypeSOB(form, login) {

    //    var PMFundTransferMappingList = Ext.getCmp('PMFundTransferMappingList').getStore();
    //    Ext.getCmp('PMFundTransferMappingList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
    //       Ext.getCmp('PMPropertyTypeSOB-FromAccountName').setValue(Record.get('From_AccountDisplay'));
    //       Ext.getCmp('PMPropertyTypeSOB-ToAccountName').setValue(Record.get('To_AccountDisplay'));
    //    }, this);

    //    PMFundTransferMappingList.on('rowclick', function (grid, rowIndex, e) {
    //        var Record = grid.store.getAt(rowIndex);
    //       Ext.getCmp('PMPropertyTypeSOB-FromAccountName').setValue(Record.get('From_AccountDisplay'));
    //      Ext.getCmp('PMPropertyTypeSOB-ToAccountName').setValue(Record.get('To_AccountDisplay'));
    //    }, this);
    var Code = Ext.getCmp('PMPropertyTypeSOB-Code');
    var Property_TypeCode = Ext.getCmp('PMPropertyTypeSOB-Property_TypeCode');
    if (form.SelectedIndex != 1 && !form.isView) {

        if (Property_TypeCode) Property_TypeCode.on('select', function (combo, record, index) {
            Code.setValue(Property_TypeCode.editValue);
        }, this);

        if (Property_TypeCode) Property_TypeCode.on('change', function (combo, record, index) {
            Code.setValue(Property_TypeCode.editValue);
        }, this);

        if (Property_TypeCode) Property_TypeCode.on('clear', function (combo, record, index) {
            Code.clearValue();
        }, this);
    }
}
//function Permission(form, login) {
//    var AppliedStartTime = Ext.getCmp('Permission-AppliedStartTime');
//    var AppliedEndTime = Ext.getCmp('Permission-AppliedEndTime');
//    var ApprovedStartTime = Ext.getCmp('Permission-ApprovedStartTime');
//    var ApprovedEndTime = Ext.getCmp('Permission-ApprovedEndTime');
//    var AppliedTotalMinutes = Ext.getCmp('Permission-AppliedTotalMinutes');
//    var ApprovedTotalMinutes = Ext.getCmp('Permission-ApprovedTotalMinutes');

//    AppliedTotalMinutes.on('valid', function (field) {
//        // AppliedTotalMinutes = setValue(AppliedStartTime.getValue().getTime() - AppliedEndTime.getValue().getTime());
//        var bal = (AppliedStartTime.getValue() - AppliedEndTime.getValue());
//        AppliedTotalMinutes = setValue(bal);
//    }, this)
//}

function HRInterview(form, login) {

    if (!form.isView) {

        Ext.getCmp('HRInterview-StatusCode').setComboValue(0);
        Ext.getCmp('HRInterview-StatusCode').disable();

        var SourceCode = Ext.getCmp('HRInterview-SourceCode');
        var IntScheduleCode = Ext.getCmp('HRInterview-IntScheduleCode');
        var ResumeCollectionCode = Ext.getCmp('HRInterview-ResumeCollectionCode');
        var CandidateName = Ext.getCmp('HRInterview-CandidateName');
        var PassportNo = Ext.getCmp('HRInterview-PassportNo');
        var Qualification = Ext.getCmp('HRInterview-Qualification');
        var Experience = Ext.getCmp('HRInterview-Experience');
        var DOB = Ext.getCmp('HRInterview-DOB');
        var EmailID = Ext.getCmp('HRInterview-EmailID');
        var MobileNo = Ext.getCmp('HRInterview-MobileNo');
        var TotalExperience = Ext.getCmp('HRInterview-TotalExperience');
        var CurrentExpectedSalary = Ext.getCmp('HRInterview-CurrentExpectedSalary');

        if (SourceCode) SourceCode.on('select', function (combo, record, index) {
            if (SourceCode.getValue() == 0) {
                ResumeCollectionCode.clearValue();
                ResumeCollectionCode.disable();
                IntScheduleCode.enable();
                CandidateName.setValue(null);
                PassportNo.setValue(null);
                Qualification.setValue(null);
                Experience.setValue(null);
                DOB.setValue(null);
                EmailID.setValue(null);
                MobileNo.setValue(null);
                TotalExperience.setValue(null);
                CurrentExpectedSalary.setValue(null);
            }
            if (SourceCode.getValue() == 1) {
                IntScheduleCode.clearValue();
                IntScheduleCode.disable();
                ResumeCollectionCode.enable();
                CandidateName.setValue(null);
                PassportNo.setValue(null);
                Qualification.setValue(null);
                Experience.setValue(null);
                DOB.setValue(null);
                EmailID.setValue(null);
                MobileNo.setValue(null);
                TotalExperience.setValue(null);
                CurrentExpectedSalary.setValue(null);
            }
        }, this);
    }

}

function HRM_Attendance(form, login) {

}

function PopulateBtn(button, options) {

    var Primkey = Ext.getCmp('HRM_Attendance').selectedIndex;
    var AttendanceEntryList = Ext.getCmp('AttendanceEntryList');
    var Batch = Ext.getCmp('HRM_Attendance-EmpBatchCode').getValue();
    var Shift = Ext.getCmp('HRM_Attendance-EmpShiftTypeCode').getValue();
    var Session = Ext.getCmp('HRM_Attendance-EmpSessionTypeCode').getValue();

    if (Batch == '' && Shift == '' && Session == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select any one Criteria');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AttendancePopulate',
            Batch: (Batch == '' ? '0' : Batch),
            Shift: (Shift == '' ? '0' : Shift),
            Session: (Session == '' ? '0' : Session)
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AttendancePopulateComplete, this);
}

function AttendancePopulateComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', AttendancePopulateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {

        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'Employees not found for this selected Criteria !');
            return;
        }

        //to clear  the grid
        var grdFunctionality = Ext.getCmp('AttendanceEntryList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end

        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            EmpRecord = responseText.datum[cnt];
            var Primkey = Ext.getCmp('HRM_Attendance').selectedIndex;
            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                AttendanceSerialNo: cnt + 1,
                EmployeeCode: EmpRecord.EmployeeCode,
                EmployeeName: EmpRecord.EmployeeName,
                FullName: EmpRecord.FullName,
                HR_Session_Attendance_Code: 1, // Foregin Key From Master
                InTime: 0,
                OutTime: 0,
                LateMin: 0,
                OtMin: 0,
                Remarks: null,
                DayType: 0,
                WorksiteCode: 0,
                YearCode: 0,
                BatchCode: 0,
                ShiftTypeCode: 0,
                SessionTypeCode: 0,
                AttendanceDate: null,
                FilterCompany: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        }
    }
}

function PYEmployeeLeaveEntry(form, login) {
    if (!form.isView) {
        Ext.getCmp('PYEmployeeLeaveEntry-StatusCode').setComboValue(0);
        Ext.getCmp('PYEmployeeLeaveEntry-StatusCode').disable();


        if (form.selectedIndex != -1 && !form.isView) {
            Ext.getCmp('PYEmployeeLeaveEntry-Popupbtn').disable();
        }
    }
}


function Employee_LeavePost(Button, options) {
    var PrimKey = Ext.getCmp('PYEmployeeLeaveEntry').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'EmployeeLeaveEntry',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EmployeeLeaveEntryComplete, this);
}

function EmployeeLeaveEntryComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', EmployeeLeaveEntryComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_EMPLOYEELEAVE_editform').close();
    }
}

function EmployeePopulatebuttonhandler(Button, Options) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EmployeeLeavePopup'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EmployeeLeavePopupReqComplete, this);
}

function EmployeeLeavePopupReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EmployeeLeavePopupReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EmployeeLeaveForm = new Ext.form.FormPanel(responseText.LeaveFormCofig);
    this.EmployeeLeaveForm.selectedIndex = 1;
    this.EmployeeLeaveForm.addButton({
        text: 'OK',
        handler: function () {
            var PYEmployeeLeaveEntryGrid = Ext.getCmp('AttEmployeeLeaveEntryDtlList');
            var selectcnt = 0;
            var EmployeeCode = new Array();
            var EmployeeName = new Array();
            var EmployeeFullName = new Array();
            var Start_Date = new Array();
            var End_Date = new Array();
            var DeductSalary = new Array();
            var PYEmployeeLeaveList = Ext.getCmp('PYEmployeeLeavePopUpDetailList');
            var AttEmployeeLeaveEntryDtlList = Ext.getCmp('AttEmployeeLeaveEntryDtlList');
            var count = AttEmployeeLeaveEntryDtlList.store.getCount();
            var store = Ext.getCmp('PYEmployeeLeavePopUpDetailList').getStore();
            for (var cnt = 0; cnt < store.getCount() ; cnt++) {

                var record = PYEmployeeLeaveList.store.getAt(cnt);
                if (record.get('selec') == true) {

                    var isavailable = false;
                    for (var count = 0; count < AttEmployeeLeaveEntryDtlList.getStore().getCount() ; count++) {
                        if (record.get('ID') == AttEmployeeLeaveEntryDtlList.getStore().getAt(count).get('EmployeeCode')) {
                            record.set('selec', true);
                            isavailable = true;
                            break;
                        }
                    }
                    if (isavailable) continue;

                    selectcnt = selectcnt + 1;
                    EmployeeCode[selectcnt] = record.get('ID');
                    EmployeeName[selectcnt] = record.get('EmployeeNumber');
                    EmployeeFullName[selectcnt] = record.get('FullName');
                    Start_Date[selectcnt] = record.get('Start_Date');
                    End_Date[selectcnt] = record.get('End_Date');
                    DeductSalary[selectcnt] = record.get('DeductSalary');
                }
            }
            var PYEmployeeLeaveEntryGrid = Ext.getCmp('AttEmployeeLeaveEntryDtlList');

            for (var count = 1; count <= selectcnt; count++) {
                PYEmployeeLeaveEntryGrid.storeId += 1;
                var LEAVECODEID = PYEmployeeLeaveEntryGrid.storeId;
                var newRecord = new PYEmployeeLeaveEntryGrid.recordType({
                    ID: LEAVECODEID,
                    Employee_Leave_Code: 1,
                    SerialNo: LEAVECODEID,
                    EmployeeCode: EmployeeCode[count],
                    EmployeeName: EmployeeName[count],
                    EmployeeFullName: EmployeeFullName[count],
                    Start_Date: Start_Date[count],
                    End_Date: End_Date[count],
                    Days: 1,
                    ExcludeHoliday: true,
                    DeductSalary: DeductSalary[count],

                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PYEmployeeLeaveEntryGrid.stopEditing();
                PYEmployeeLeaveEntryGrid.store.add(newRecord);
                PYEmployeeLeaveEntryGrid.store.totalLength = PYEmployeeLeaveEntryGrid.store.getTotalCount() + 1;
                PYEmployeeLeaveEntryGrid.pageBar.updateInfo();
            }

            this.EmployeeLeaveFormWindow.close();
            var AttEmployeeLeaveEntryDtlList = Ext.getCmp('AttEmployeeLeaveEntryDtlList');
            AttEmployeeLeaveEntryDtlList.store.load({
                params: {
                    start: 0,
                    limit: AttEmployeeLeaveEntryDtlList.pageSize
                }
            });
        },
        scope: this,
        tabIndex: this.EmployeeLeaveForm.FormFieldsCount + 2
    });
    this.EmployeeLeaveForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EmployeeLeaveFormWindow.close();
        },
        scope: this,
        tabIndex: this.EmployeeLeaveForm.FormFieldsCount + 2

    });
    this.EmployeeLeaveFormWindow = new Ext.Window({
        id: 'GenerateRollBackFormWindow',
        title: 'Employee Leave Entry',
        closable: true,
        minimizable: false,
        width: this.EmployeeLeaveForm.width + 10,
        height: this.EmployeeLeaveForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EmployeeLeaveForm]
    });
    this.EmployeeLeaveForm.on('render', EmployeeLeaveFormRender, this);
    this.EmployeeLeaveFormWindow.show();
}

function EmployeeLeavePopupReqComplete_OLD(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EmployeeLeavePopupReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EmployeeLeaveForm = new Ext.form.FormPanel(responseText.LeaveFormCofig);
    this.EmployeeLeaveForm.selectedIndex = 1;
    this.EmployeeLeaveForm.addButton({
        text: 'OK',
        handler: function () {
            var PYEmployeeLeaveEntryGrid = Ext.getCmp('PYEmployeeLeaveEntryDtlList');
            var selectcnt = 0;
            var EmployeeCode = new Array();
            var EmployeeName = new Array();
            var EmployeeFullName = new Array();
            var Start_Date = new Array();
            var End_Date = new Array();
            var DeductSalary = new Array();
            var PYEmployeeLeaveList = Ext.getCmp('PYEmployeeLeavePopUpDetailList');
            var PYEmployeeLeaveEntryDtlList = Ext.getCmp('PYEmployeeLeaveEntryDtlList');
            var count = PYEmployeeLeaveEntryDtlList.store.getCount();
            var store = Ext.getCmp('PYEmployeeLeavePopUpDetailList').getStore();
            for (var cnt = 0; cnt < store.getCount() ; cnt++) {

                var record = PYEmployeeLeaveList.store.getAt(cnt);
                if (record.get('selec') == true) {

                    var isavailable = false;
                    for (var count = 0; count < PYEmployeeLeaveEntryDtlList.getStore().getCount() ; count++) {
                        if (record.get('ID') == PYEmployeeLeaveEntryDtlList.getStore().getAt(count).get('EmployeeCode')) {
                            record.set('selec', true);
                            isavailable = true;
                            break;
                        }
                    }
                    if (isavailable) continue;

                    selectcnt = selectcnt + 1;
                    EmployeeCode[selectcnt] = record.get('ID');
                    EmployeeName[selectcnt] = record.get('EmployeeNumber');
                    EmployeeFullName[selectcnt] = record.get('FullName');
                    Start_Date[selectcnt] = record.get('Start_Date');
                    End_Date[selectcnt] = record.get('End_Date');
                    DeductSalary[selectcnt] = record.get('DeductSalary');
                }
            }
            var PYEmployeeLeaveEntryGrid = Ext.getCmp('PYEmployeeLeaveEntryDtlList');

            for (var count = 1; count <= selectcnt; count++) {
                PYEmployeeLeaveEntryGrid.storeId += 1;
                var LEAVECODEID = PYEmployeeLeaveEntryGrid.storeId;
                var newRecord = new PYEmployeeLeaveEntryGrid.recordType({
                    ID: LEAVECODEID,
                    Employee_Leave_Code: 1,
                    SerialNo: LEAVECODEID,
                    EmployeeCode: EmployeeCode[count],
                    EmployeeName: EmployeeName[count],
                    EmployeeFullName: EmployeeFullName[count],
                    Start_Date: Start_Date[count],
                    End_Date: End_Date[count],
                    Days: '',
                    DeductSalary: DeductSalary[count],

                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PYEmployeeLeaveEntryGrid.stopEditing();
                PYEmployeeLeaveEntryGrid.store.add(newRecord);
                PYEmployeeLeaveEntryGrid.store.totalLength = PYEmployeeLeaveEntryGrid.store.getTotalCount() + 1;
                PYEmployeeLeaveEntryGrid.pageBar.updateInfo();
            }

            this.EmployeeLeaveFormWindow.close();
            var PYEmployeeLeaveEntryDtlList = Ext.getCmp('PYEmployeeLeaveEntryDtlList');
            PYEmployeeLeaveEntryDtlList.store.load({
                params: {
                    start: 0,
                    limit: PYEmployeeLeaveEntryDtlList.pageSize
                }
            });
        },
        scope: this,
        tabIndex: this.EmployeeLeaveForm.FormFieldsCount + 2
    });
    this.EmployeeLeaveForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EmployeeLeaveFormWindow.close();
        },
        scope: this,
        tabIndex: this.EmployeeLeaveForm.FormFieldsCount + 2

    });
    this.EmployeeLeaveFormWindow = new Ext.Window({
        id: 'GenerateRollBackFormWindow',
        title: 'Employee Leave Entry',
        closable: true,
        minimizable: false,
        width: this.EmployeeLeaveForm.width + 10,
        height: this.EmployeeLeaveForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EmployeeLeaveForm]
    });
    this.EmployeeLeaveForm.on('render', EmployeeLeaveFormRender, this);
    this.EmployeeLeaveFormWindow.show();
}

function EmployeeLeaveFormRender(form, login) {
}

function SeearButtonPopupwindowhandler(form, login) {
    var FilterQry = '';
    var PayrollCode = Ext.getCmp('PYEmployeeLeavePopUp-PayrollCode');
    var OrganizationCode = Ext.getCmp('PYEmployeeLeavePopUp-OrganizationCode');
    var DepartmentCode = Ext.getCmp('PYEmployeeLeavePopUp-DepartmentCode');
    var Assignment_setCode = Ext.getCmp('PYEmployeeLeavePopUp-Assignment_setCode');

    if (PayrollCode.getValue() != 0 && PayrollCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " PYEPD.PERSON_CODE in (select gen1.PERSON_CODE  from gen_contacts gen1 where gen1.PAYROLL_CODE=" + PayrollCode.getValue() + ")";
        else
            FilterQry += " and PYEPD.PERSON_CODE in (select gen1.PERSON_CODE  from gen_contacts gen1 where gen1.PAYROLL_CODE=" + PayrollCode.getValue() + ")";
    }

    if (OrganizationCode.getValue() != 0 && OrganizationCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " PYEPD.PERSON_CODE in (select gen3.PERSON_CODE  from gen_contacts gen3 where gen3.ORGANIZATION_CODE=" + OrganizationCode.getValue() + ")";
        else
            FilterQry += " and PYEPD.PERSON_CODE in (select gen3.PERSON_CODE  from gen_contacts gen3 where gen3.ORGANIZATION_CODE=" + OrganizationCode.getValue() + ")";
    }

    if (DepartmentCode.getValue() != 0 && DepartmentCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " PYEPD.PERSON_CODE in (select gen5.PERSON_CODE  from gen_contacts gen5 where gen5.DEPARTMENTCODE=" + DepartmentCode.getValue() + " )";
        else
            FilterQry += "and  PYEPD.PERSON_CODE in (select gen5.PERSON_CODE  from gen_contacts gen5 where gen5.DEPARTMENTCODE=" + DepartmentCode.getValue() + " )";
    }

    if (Assignment_setCode.getValue() != 0 && Assignment_setCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " PYEPD.PERSON_CODE in(select geocn.PERSON_CODE from gen_contacts geocn where geocn.PAYROLL_CODE in(select pyas.PAYROLL_CODE from PY_ASSIGNMENTS_SET_HEADER pyas where pyas.ASSIGNMENT_SET_CODE=" + Assignment_setCode.getValue() + "))";
        else
            FilterQry += "and PYEPD.PERSON_CODE in(select geocn.PERSON_CODE from gen_contacts geocn where geocn.PAYROLL_CODE in(select pyas.PAYROLL_CODE from PY_ASSIGNMENTS_SET_HEADER pyas where pyas.ASSIGNMENT_SET_CODE=" + Assignment_setCode.getValue() + "))";
    }

    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('PYEmployeeLeavePopUpDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYEmployeeLeavePopUpDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}


//Charity Box Receive

function TMCharityBoxReceive(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCharityBoxReceive-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBoxReceive-StatusCode').disable();
    }

    ////var FromAsset_Code = Ext.getCmp('TMCharityBoxReceive-FromAsset_Code');
    ////var From_No_Code = Ext.getCmp('TMCharityBoxReceive-From_No_Code');
    ////var To_Asset_Code = Ext.getCmp('TMCharityBoxReceive-To_Asset_Code');
    ////var To_No_Code = Ext.getCmp('TMCharityBoxReceive-To_No_Code');
    //var Sub_LocationCode = Ext.getCmp('TMCharityBoxReceive-Sub_LocationCode');
    var EmployeeCode = Ext.getCmp('TMCharityBoxReceive-EmployeeCode');
    //var From_Asset_Name = Ext.getCmp('TMCharityBoxReceive-From_Asset_Name');    
    //var LocationCode = Ext.getCmp('TMCharityBoxReceive-LocationsCode');
    var FullName = Ext.getCmp('TMCharityBoxReceive-FullName');
    //var No_of_Charity = Ext.getCmp('TMCharityBoxReceive-No_of_Charity');
    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode');


    ////To_No_Code.on('select', function (combo, record, index) {
    ////    var FromNo = From_No_Code.lastSelectionText;
    ////    var frNo = FromNo.substr(0, FromNo.indexOf('/'));
    ////    var ToNum = To_No_Code.lastSelectionText;
    ////    var ToNo = ToNum.substr(0, ToNum.indexOf('/'));

    ////    var Charity = frNo - ToNo;
    ////    No_of_Charity.setValue(Charity);
    ////}, this);


    ////if (FromAsset_Code) FromAsset_Code.on('beforequery', function (evt) {
    ////    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode').editValue;
    ////    evt.combo.lastQuery = '1=2';
    ////    evt.combo.store.baseParams.filter = "ASSET_CODE in (SELECT ASSET_NO from TM_CHARITY_BOXES where CHARITY_BOX_TYPE="+Charity_Box_TypeCode+")";
    ////}, this);

    ////if (FromAsset_Code) FromAsset_Code.on('select', function (combo,record,index) {
    ////    var To_Asset_Code = Ext.getCmp('TMCharityBoxReceive-To_Asset_Code');
    ////    To_Asset_Code.clearValue();
    ////    From_No_Code.clearValue();
    ////    To_No_Code.clearValue();
    ////}, this);

    ////if (FromAsset_Code) FromAsset_Code.on('clear', function (evt) {
    ////    var To_Asset_Code = Ext.getCmp('TMCharityBoxReceive-To_Asset_Code');
    ////    To_Asset_Code.clearValue();
    ////    From_No_Code.clearValue();
    ////    To_No_Code.clearValue();
    ////}, this);

    ////if (To_Asset_Code) To_Asset_Code.on('beforequery', function (evt) {
    ////    var FromAsset_CodeVal = Ext.getCmp('TMCharityBoxReceive-FromAsset_Code').editValue;
    ////    evt.combo.lastQuery = '1=2';
    ////    evt.combo.store.baseParams.filter = "ASSET_CODE  not in (" + FromAsset_CodeVal + ") ";
    ////}, this);

    //if (To_Asset_Code) To_Asset_Code.on('beforequery', function (evt) {
    //    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "ASSET_CODE in (SELECT ASSET_NO from TM_CHARITY_BOXES where CHARITY_BOX_TYPE=" + Charity_Box_TypeCode + ")";
    //}, this);


    ////if (From_No_Code) From_No_Code.on('beforequery', function (evt) {
    ////    var FromAssetCode = Ext.getCmp('TMCharityBoxReceive-FromAsset_Code').editValue;
    ////    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode').editValue;
    ////    evt.combo.lastQuery = '1=2';
    ////    evt.combo.store.baseParams.filter = "CHB.CHARITY_BOX_CODE in(SELECT CHARITY_BOX_CODE from TM_CHARITY_BOXES  where CHARITY_BOX_TYPE = " + Charity_Box_TypeCode + " and ASSET_NO=" + FromAssetCode + ")";
    ////}, this);

    ////if (To_No_Code) To_No_Code.on('beforequery', function (evt) {
    ////    var FromAssetCode = Ext.getCmp('TMCharityBoxReceive-FromAsset_Code').editValue;
    ////    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode').editValue;
    ////    var From_No_Code = Ext.getCmp('TMCharityBoxReceive-From_No_Code').editValue;
    ////    evt.combo.lastQuery = '1=2';
    ////    evt.combo.store.baseParams.filter = "CHB.CHARITY_BOX_CODE in(SELECT CHARITY_BOX_CODE from TM_CHARITY_BOXES  where CHARITY_BOX_TYPE = " + Charity_Box_TypeCode + " and ASSET_NO=" + FromAssetCode + ")  ";
    ////}, this);

    //if (To_No_Code) To_No_Code.on('beforequery', function (evt) {
    //    //var FromAssetCode = Ext.getCmp('TMCharityBoxReceive-FromAsset_Code').editValue;
    //    //var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode').editValue;
    //    //var From_No_Code = Ext.getCmp('TMCharityBoxReceive-From_No_Code').editValue;
    //    var From_No_Code = Ext.getCmp('TMCharityBoxReceive-From_No_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "CHB.Charity_Box_Code not in (Select CHARITY_BOX_CODE from TM_CHARITY_BOXES where From_No_Code= " + From_No_Code.editValue + ") ";
    //}, this);



    //if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
    //    var LocationCode = Ext.getCmp('TMCharityBoxReceive-LocationsCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    //}, this);

    //if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
    //    var Sub_LocationCode = Ext.getCmp('TMCharityBoxReceive-Sub_LocationCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    //}, this);

    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReceive-Charity_Box_TypeCode');

    //Charity_Box_TypeCode.on('select', function (combo, record, index) { 
    //    FromAsset_Code.clearValue();
    //    From_Asset_Name.setValue(null);
    //    From_No_Code.clearValue();
    //}, this);


    //LocationCode.on('select', function (combo, record, index) {
    //    Sub_LocationCode.clearValue();
    //    //EmployeeCode.clearValue();
    //    //FullName.setValue(null);
    //}, this);

    //Sub_LocationCode.on('select', function (combo, record, index) {
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //}, this);

}


function TMCharityBoxPost(form, login) {

    var PrimKey = Ext.getCmp('TMCharityBoxReceive').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Box_Rec',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCharityBoxReceiveComplete, this);
}

function TMCharityBoxReceiveComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCharityBoxReceiveComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXRECEIVE_editform').close();
    }
}

//Charity Box Transfer

function TMCharityBoxTransfer(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCharityBoxTransfer-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBoxTransfer-StatusCode').disable();
    }


    var Sub_LocationCode = Ext.getCmp('TMCharityBoxTransfer-Sub_Location_Code');
    var EmployeeCode = Ext.getCmp('TMCharityBoxTransfer-EmployeeCode');
    var LocationCode = Ext.getCmp('TMCharityBoxTransfer-Location_Code');
    var FullName = Ext.getCmp('TMCharityBoxTransfer-FullName');
    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxTransfer-Charity_Box_TypeCode');

    LocationCode.on('select', function (combo, record, index) {
        Sub_LocationCode.clearValue();
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    Sub_LocationCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
        var LocationCode = Ext.getCmp('TMCharityBoxTransfer-Location_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    }, this);

    //if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
    //    var Sub_LocationCode = Ext.getCmp('TMCharityBoxTransfer-Sub_Location_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    //}, this);

    if (Charity_Box_TypeCode) Charity_Box_TypeCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "  CHB.Status in (1,2,3)";
    }, this);


    var New_Location_Code = Ext.getCmp('TMCharityBoxTransfer-New_Location_Code');
    var New_Sublocation_Code = Ext.getCmp('TMCharityBoxTransfer-New_Sub_Location_Code');
    var New_EmployeeCode = Ext.getCmp('TMCharityBoxTransfer-New_EmployeeCode');
    var New_FullName = Ext.getCmp('TMCharityBoxTransfer-New_FullName');
    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxTransfer-Charity_Box_TypeCode');

    //New_Location_Code.on('select', function (combo, record, index) {
    //    New_Sublocation_Code.clearValue();
    //    New_EmployeeCode.clearValue();
    //    New_FullName.setValue(null);
    //    Charity_Box_TypeCode.clearValue();
    //}, this);

    //New_Sublocation_Code.on('select', function (combo, record, index) {
    //    New_EmployeeCode.clearValue();
    //    New_FullName.setValue(null);
    //    Charity_Box_TypeCode.clearValue();
    //}, this);

    //if (New_Sublocation_Code) New_Sublocation_Code.on('beforequery', function (evt) {
    //    var New_Location_Code = Ext.getCmp('TMCharityBoxTransfer-New_Location_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + New_Location_Code + ")";
    //}, this);

    //if (New_EmployeeCode) New_EmployeeCode.on('beforequery', function (evt) {
    //    var New_Sub_Location_Code = Ext.getCmp('TMCharityBoxTransfer-New_Sub_Location_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + New_Sub_Location_Code + "))";
    //}, this);

    //if (Charity_Box_TypeCode) Charity_Box_TypeCode.on('beforequery', function (evt) {
    //    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxTransfer-Charity_Box_TypeCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "CHB.SUB_LOCATION_NAME=" + Sub_LocationCode.editValue + " and tsl.TM_Location_Code =  " + LocationCode.editValue + " and CHB.SUPERVISOR_NO= " + EmployeeCode.editValue;
    //}, this);


}

function CharityBoxTransferPost(form, login) {

    var PrimKey = Ext.getCmp('TMCharityBoxTransfer').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Box_Transfer',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCharityBoxTransferComplete, this);
}

function TMCharityBoxTransferComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCharityBoxTransferComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXTRANSFER_editform').close();
    }
}

//Charity Box Recovery

function TMCharityBoxRecovery(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCharityBoxRecovery-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBoxRecovery-StatusCode').disable();
    }

    var Sub_LocationCode = Ext.getCmp('TMCharityBoxRecovery-Sub_Location_Code');
    var EmployeeCode = Ext.getCmp('TMCharityBoxRecovery-EmployeeCode');
    //var LocationCode = Ext.getCmp('TMCharityBoxRecovery-Location_Code');
    var FullName = Ext.getCmp('TMCharityBoxRecovery-FullName');
    var Charity_Box_NoCode = Ext.getCmp('TMCharityBoxRecovery-Charity_Box_NoCode');

    //LocationCode.on('select', function (combo, record, index) {
    //    Sub_LocationCode.clearValue();
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //}, this);

    //Sub_LocationCode.on('select', function (combo, record, index) {
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //}, this);

    //if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
    //    var LocationCode = Ext.getCmp('TMCharityBoxRecovery-Location_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    //}, this);

    //if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
    //    var Sub_LocationCode = Ext.getCmp('TMCharityBoxRecovery-Sub_Location_Code').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    //}, this);

    if (Charity_Box_NoCode) Charity_Box_NoCode.on('beforequery', function (evt) {
        var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxRecovery-Charity_Box_NoCode').editValue;
        evt.combo.lastQuery = '1=2';
        //evt.combo.store.baseParams.filter = " CHB.SUPERVISOR_NO= " + EmployeeCode.editValue + " and CHB.status=0";
        evt.combo.store.baseParams.filter = "  CHB.status=0";
    }, this);


}

function CharityBoxRecoveryPost(form, login) {

    var PrimKey = Ext.getCmp('TMCharityBoxRecovery').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Box_Recovery',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCharityBoxRecoveryComplete, this);
}

function TMCharityBoxRecoveryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCharityBoxRecoveryComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXRECOVERY_editform').close();
    }
}


//Charity Box Replacement

function TMCharityBoxReplacement(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCharityBoxReplacement-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBoxReplacement-StatusCode').disable();
    }

    var Sub_LocationCode = Ext.getCmp('TMCharityBoxReplacement-Sub_LocationCode');
    var EmployeeCode = Ext.getCmp('TMCharityBoxReplacement-EmployeeCode');
    var LocationCode = Ext.getCmp('TMCharityBoxReplacement-LocationsCode');
    var FullName = Ext.getCmp('TMCharityBoxReplacement-FullName');
    var OldCharity_Box_TypeCode = Ext.getCmp('TMCharityBoxReplacement-OldCharity_Box_TypeCode');
    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxReplacement-Charity_Box_TypeCode');

    //LocationCode.on('select', function (combo, record, index) {
    //    Sub_LocationCode.clearValue();
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //    OldCharity_Box_TypeCode.clearValue();
    //    Charity_Box_TypeCode.clearValue();
    //}, this);

    //Sub_LocationCode.on('select', function (combo, record, index) {
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //    OldCharity_Box_TypeCode.clearValue();
    //    Charity_Box_TypeCode.clearValue();
    //}, this);


    //if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
    //    var LocationCode = Ext.getCmp('TMCharityBoxReplacement-LocationsCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    //}, this);

    //if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
    //    var Sub_LocationCode = Ext.getCmp('TMCharityBoxReplacement-Sub_LocationCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    //}, this);

    if (OldCharity_Box_TypeCode) OldCharity_Box_TypeCode.on('beforequery', function (evt) {
        var OldCharity_Box_TypeCode = Ext.getCmp('TMCharityBoxReplacement-OldCharity_Box_TypeCode').editValue;
        evt.combo.lastQuery = '1=2';
        //evt.combo.store.baseParams.filter = "  CHB.SUPERVISOR_NO= " + EmployeeCode.editValue + " and CHB.status=0";
        evt.combo.store.baseParams.filter = "  CHB.status=0";
    }, this);

    if (Charity_Box_TypeCode) Charity_Box_TypeCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "  CHB.Status in (1,2,3)";
    }, this);
}

function CharityBoxReplacementPost(form, login) {

    var PrimKey = Ext.getCmp('TMCharityBoxReplacement').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Box_Replacement',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCharityBoxReplacementComplete, this);
}

function TMCharityBoxReplacementComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCharityBoxReplacementComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXREPLACEMENT_editform').close();
    }
}

//Charity Box Cancellation

function TMCharityBoxCancellation(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCharityBoxCancellation-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBoxCancellation-StatusCode').disable();
    }

    //var Sub_LocationCode = Ext.getCmp('TMCharityBoxCancellation-Sub_LocationCode');
    //var EmployeeCode = Ext.getCmp('TMCharityBoxCancellation-EmployeeCode');
    //var LocationCode = Ext.getCmp('TMCharityBoxCancellation-LocationsCode');
    //var FullName = Ext.getCmp('TMCharityBoxCancellation-FullName');
    var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxCancellation-Charity_Box_TypeCode');

    //LocationCode.on('select', function (combo, record, index) {
    //    Sub_LocationCode.clearValue();
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //    Charity_Box_TypeCode.clearValue();
    //}, this);

    //Sub_LocationCode.on('select', function (combo, record, index) {
    //    EmployeeCode.clearValue();
    //    FullName.setValue(null);
    //    Charity_Box_TypeCode.clearValue();
    //}, this);

    //if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
    //    var LocationCode = Ext.getCmp('TMCharityBoxCancellation-LocationsCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    //}, this);

    //if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
    //    var Sub_LocationCode = Ext.getCmp('TMCharityBoxCancellation-Sub_LocationCode').editValue;
    //    evt.combo.lastQuery = '1=2';
    //    evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    //}, this);

    if (Charity_Box_TypeCode) Charity_Box_TypeCode.on('beforequery', function (evt) {
        var Charity_Box_TypeCode = Ext.getCmp('TMCharityBoxCancellation-Charity_Box_TypeCode').editValue;
        evt.combo.lastQuery = '1=2';
        //evt.combo.store.baseParams.filter = "CHB.SUB_LOCATION_NAME=" + Sub_LocationCode.editValue + " and tsl.TM_Location_Code =  " + LocationCode.editValue + " and CHB.SUPERVISOR_NO= " + EmployeeCode.editValue+" and status=0";
        evt.combo.store.baseParams.filter = "  CHB.status=0";
    }, this);

}

function CharityBoxCancellationPost(form, login) {

    var PrimKey = Ext.getCmp('TMCharityBoxCancellation').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Box_Cancellation',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCharityBoxCancellationComplete, this);
}

function TMCharityBoxCancellationComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCharityBoxCancellationComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXCANCELLATION_editform').close();
    }
}


function TMCharityBoxWarehouseHdr(form, login) {

}

function TMStatusHandler(button, options) {

}

function TMOutWarehouseHandler(button, options) {

}

function TMCharityBoxWarehouseOut(form, login) {

}

function TMWHStatusHandler(button, options) {

}

function TMWHOutWarehouseHandler(button, options) {

}

function TMCouponReceiptHdr(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCouponReceiptHdr-StatusCode').setComboValue(0);
        Ext.getCmp('TMCouponReceiptHdr-StatusCode').disable();
    }

    var TMCouponReceiptDtlList = Ext.getCmp('TMCouponReceiptDtlList');
    var Total = Ext.getCmp('TMCouponReceiptHdr-Amount');
    var Coupon_TypeCode = Ext.getCmp("TMCouponReceiptDtl-Coupon_TypeCode");
    var Coupon_CategoryCode = Ext.getCmp("TMCouponReceiptDtl-Coupon_CategoryCode");
    var DelegateCode = Ext.getCmp("TMCouponReceiptHdr-DelegateCode");
    var Sub_LocationCode = Ext.getCmp("TMCouponReceiptHdr-Sub_LocationCode");
    var Coupon_Code = Ext.getCmp("TMCouponReceiptDtl-Coupon_Code");

    if (Coupon_Code) Coupon_Code.on('beforequery', function (evt) {
        var Coupon_TypeCode = TMCouponReceiptDtlList.SelectedRecord.get('Coupon_TypeCode');
        var Coupon_CategoryCode = TMCouponReceiptDtlList.SelectedRecord.get('Coupon_CategoryCode');
        //var DelegateCode = Ext.getCmp("TMCouponReceiptHdr-DelegateCode");
        //var Sub_LocationCode = Ext.getCmp("TMCouponReceiptHdr-Sub_LocationCode");
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TMC.COUPON_TYPE= " + Coupon_TypeCode + " and TMC.COUPON_CATEGORY=" + Coupon_CategoryCode + " and TMC.Status= 0";
    }, this);


    TMCouponReceiptDtlList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        TMCouponReceiptDtlList.SelectedRecord = record;
    }, this);

    TMCouponReceiptDtlList.on('beforeedit', function (e) {
        var record = e.record;
        TMCouponReceiptDtlList.SelectedRecord = record;
    }, this);

    TMCouponReceiptDtlList.getStore().on('update', function (store, record, operation) {

        var TotalAmnt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmnt += (1 * record.get('Amount'));
        }
        Total.setValue(TotalAmnt);

    }, this);

    //TMCouponReceiptDtlList.on('afteredit', function (e) {
    //    var AmountSum = 0;
    //    for (var i = 0; i < e.grid.store.getCount() ; i++) {
    //        AmountSum += (1 * e.grid.store.getAt(i).get('Amount'));
    //    }
    //    Total.setValue(AmountSum);

    //}, this);


    var TMCouponReceiptDtlLoad = Ext.getCmp('TMCouponReceiptDtlList').getStore();
    TMCouponReceiptDtlLoad.on('load', function (store, record, options) {
        var TotalAmnt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmnt += (1 * record.get('Amount'));
        }
        Total.setValue(TotalAmnt);

    }, this);

    Ext.getCmp('TMCouponReceiptHdr-Comments1').on('blur', function (field, newval, odlval) {
        updateCouponRecord('Comments1', field.getValue());
    }, this);
    var TMCouponReceiptDtlList = Ext.getCmp('TMCouponReceiptDtlList');
    if (TMCouponReceiptDtlList) {
        TMCouponReceiptDtlList.on('rowclick', OnCouponrowClick, this);
        TMCouponReceiptDtlList.getStore().on('update', onCouponupdate, this);
    }

    var Coupon_Category = Ext.getCmp('TMCouponReceiptDtl-Coupon_CategoryCode');
    Coupon_Category.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CATEGORY_TYPE=2";
    }, this);

}

function OnCouponrowClick(Grid, rowIndex, e) {
    updateTMCouponReField(Grid.getStore().getAt(rowIndex));
    this.SelectedRecord = Grid.getStore().getAt(rowIndex);
}

function onCouponupdate(Store, record, operation) {
    this.SelectedRecord = record;
    updateTMCouponReField(record);
}

function updateCouponRecord(Cmp, Value) {
    if (Ext.getCmp('TMCouponReceiptHdr').SelectedRecord) {
        Ext.getCmp('TMCouponReceiptHdr').SelectedRecord.set(Cmp, Value);
        var TMCouponReceiptDetailList = Ext.getCmp('TMCouponReceiptDtlList');
        TMCouponReceiptDetailList.makeMasterDirty();
        Ext.getCmp('TMCouponReceiptHdr').SelectedRecord.set('IsDirty', true); //.dirty = true; 
        Ext.getCmp('TMCouponReceiptHdr').SelectedRecord.set('IsSavable', true); //.dirty = true; 
    }
}

function updateTMCouponReField(record) {

    Ext.getCmp('TMCouponReceiptHdr-Comments1').setValue(record.get('Comments1'));
}


function CouponReceiptPost(button, options) {

    var PrimKey = Ext.getCmp('TMCouponReceiptHdr').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TMCoupon_Receipt',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CouponReceiptPostComplete, this);
}

function CouponReceiptPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CouponReceiptPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_TMRECEIPTCOUPON_editform').close();
    }
}

function TMCouponReturnsHdr(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCouponReturnsHdr-StatusCode').setComboValue(0);
        Ext.getCmp('TMCouponReturnsHdr-StatusCode').disable();
    }

    var TempToNumber = '';
    var TempFromNumber = '';

    var TMCouponReturnsDtlList = Ext.getCmp('TMCouponReturnsDtlList');
    var Total = Ext.getCmp('TMCouponReturnsHdr-Amount');
    var Current_No = Ext.getCmp('TMCouponReturnsDtl-Current_Number');
    var To_No = Ext.getCmp('TMCouponReturnsDtl-To_Number');
    var From_Num = '';
    var To_Num = '';
    //var Delegate = Ext.getCmp('TMCouponReturnsHdr-DelegateCode');


    //var Coupon = Ext.getCmp('TMCouponReturnsDtl-Coupon_Code');

    //Coupon.on('beforequery', function (evt) {
    //    var type = Delegate.getValue();

    //        if (form.selectedIndex != -1 && !form.isView) {
    //            type = Delegate.editValue;
    //        }
    //        evt.combo.lastQuery = '1=2';
    //        evt.combo.store.baseParams.filter = " tmc.delegate_code=" + type;

    //}, this);

    //Delegate.on('select', function fnd(combo, record, index) {
    //    for (var i = 0; i < TMCouponReturnsDtl.store.getCount() ; i++) {
    //        var Record = TMCouponReturnsDtl.store.getAt(i);
    //        record.set('Coupon_Code', null);
    //        record.set('Coupon_Name', '');
    //        record.set('Current_Number', null);
    //    }

    //}, this);

    //TMCouponReturnsDtlList.on('afteredit', function (e) {
    //    var AmountSum = 0;
    //    for (var i = 0; i < e.grid.store.getCount() ; i++) {
    //        AmountSum += (1 * e.grid.store.getAt(i).get('Amount'));
    //    }
    //    Total.setValue(AmountSum);

    //}, this);
    TMCouponReturnsDtlList.getStore().on('update', function (store, record, operation) {

        var TotalAmnt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmnt += (1 * record.get('Amount'));
        }
        Total.setValue(TotalAmnt);
        From_Num = record.get('From_Num');
        To_Num = record.get('To_Num');
    }, this);

    var Coupon_Category = Ext.getCmp('TMCouponReturnsDtl-Coupon_CategoryCode');
    Coupon_Category.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CATEGORY_TYPE=2";
    }, this);

    var TMCouponReturnsDtlLoad = Ext.getCmp('TMCouponReturnsDtlList').getStore();
    TMCouponReturnsDtlLoad.on('load', function (store, record, options) {
        var TotalAmnt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalAmnt += (1 * record.get('Amount'));
        }
        Total.setValue(TotalAmnt);

    }, this);

    Ext.getCmp('TMCouponReturnsHdr-Comments1').on('blur', function (field, newval, odlval) {
        updateCouponReturnRecord('Comments1', field.getValue());
    }, this);
    var TMCouponReturnsDtlList = Ext.getCmp('TMCouponReturnsDtlList');
    if (TMCouponReturnsDtlList) {
        TMCouponReturnsDtlList.on('rowclick', OnCouponReturnrowClick, this);
        TMCouponReturnsDtlList.getStore().on('update', onCouponReturnupdate, this);
    }

    var Coupon_Code = Ext.getCmp("TMCouponReturnsDtl-Coupon_Code");

    if (Coupon_Code) Coupon_Code.on('beforequery', function (evt) {
        var Coupon_TypeCode = TMCouponReturnsDtlList.SelectedRecord.get('Coupon_TypeCode');
        var Coupon_CategoryCode = TMCouponReturnsDtlList.SelectedRecord.get('Coupon_CategoryCode');
        var DelegateCode = Ext.getCmp("TMCouponReturnsHdr-DelegateCode");
        //var Sub_LocationCode = Ext.getCmp("TMCouponReturnsHdr-Sub_LocationCode");
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TMC.COUPON_TYPE= " + Coupon_TypeCode + " and TMC.COUPON_CATEGORY=" + Coupon_CategoryCode + " and TMC.DELEGATE_CODE =" + DelegateCode.editValue + " and TMC.Status= 4";
    }, this);

    Coupon_Code.on('select', function (combo, record, index) {
        TempFromNumber = record.data.Current_Number;
        TempToNumber = record.data.To_Number;
    }, this);

    Current_No.on('blur', function (field) {

        if (TempFromNumber == '' || TempFromNumber == null) {
            TempFromNumber = From_Num;
        }

        if (Current_No.getValue() < TempFromNumber) {
            TempFromNumber = From_Num; Ext.MessageBox.alert(login.modulename, 'Current Coupon Number Should be Equal to ' + TempFromNumber + ' or Greater than ' + TempFromNumber);
            Current_No.setValue(TempFromNumber);
            return;
        }
    }, this);

    To_No.on('blur', function (field) {


        if (TempToNumber == '' || TempToNumber == null) {
            TempToNumber = To_Num;
        }
        if (To_No.getValue() > TempToNumber) {
            TempToNumber = To_Num;
            Ext.MessageBox.alert(login.modulename, 'To Coupon Number Should be Equal to ' + TempToNumber + ' or less than ' + TempToNumber);
            To_No.setValue(TempToNumber);
            return;
        }
    }, this);

    TMCouponReturnsDtlList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        TMCouponReturnsDtlList.SelectedRecord = record;
        From_num = record.get('From_Num');
        To_Num = record.get('To_Num');
    }, this);

    TMCouponReturnsDtlList.on('beforeedit', function (e) {
        var record = e.record;
        TMCouponReturnsDtlList.SelectedRecord = record;
        From_num = record.get('From_Num');
        To_Num = record.get('To_Num');
    }, this);
}

function OnCouponReturnrowClick(Grid, rowIndex, e) {
    updateTMCouponReturnField(Grid.getStore().getAt(rowIndex));
    this.SelectedRecord = Grid.getStore().getAt(rowIndex);
}

function onCouponReturnupdate(Store, record, operation) {
    this.SelectedRecord = record;
    updateTMCouponReturnField(record);
}

function updateCouponReturnRecord(Cmp, Value) {
    if (Ext.getCmp('TMCouponReturnsHdr').SelectedRecord) {
        Ext.getCmp('TMCouponReturnsHdr').SelectedRecord.set(Cmp, Value);
        var TMCouponReturnsDetailList = Ext.getCmp('TMCouponReturnsDtlList');
        TMCouponReturnsDetailList.makeMasterDirty();
        Ext.getCmp('TMCouponReturnsHdr').SelectedRecord.set('IsDirty', true); //.dirty = true; 
        Ext.getCmp('TMCouponReturnsHdr').SelectedRecord.set('IsSavable', true); //.dirty = true; 
    }
}

function updateTMCouponReturnField(record) {

    Ext.getCmp('TMCouponReturnsHdr-Comments1').setValue(record.get('Comments1'));
}


function TMCouponReturnsSearch(button, options) {

}

function TMCouponReturnsPost(button, options) {

    var PrimKey = Ext.getCmp('TMCouponReturnsHdr').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TMCoupon_Returns',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCouponReturnsPostComplete, this);

}

function TMCouponReturnsPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCouponReturnsPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_TMRETURNSCOUPONS_editform').close();
    }
}


function TMCouponReceive(form, login) {

    if (!form.isView) {
        Ext.getCmp('TMCouponReceive-StatusCode').setComboValue(0);
        Ext.getCmp('TMCouponReceive-StatusCode').disable();
    }

    var From_Book_Number = Ext.getCmp('TMCouponReceive-From_Book_Number')
    var To_Book_Number = Ext.getCmp('TMCouponReceive-To_Book_Number');
    var Coupons_Count = Ext.getCmp('TMCouponReceive-Coupons_Count');
    var StatusCode = Ext.getCmp('TMCouponReceive-StatusCode');

    var Coupon_Category = Ext.getCmp('TMCouponReceive-Coupon_CategoryCode');
    Coupon_Category.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CATEGORY_TYPE=2";
    }, this);


    if (To_Book_Number) {

        To_Book_Number.on('valid', function (field, newval, odlval) {
            var count = To_Book_Number.getValue();
            var count1 = From_Book_Number.getValue();
            var count2 = count - count1;
            Coupons_Count.setValue((count2 * 1) + 1);
        }, this);

    }

}



function CouponsReceivePost(button, options) {


    var PrimKey = Ext.getCmp('TMCouponReceive').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TMCoupons_Receive',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TMCouponReceiveComplete, this);

}

function TMCouponReceiveComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TMCouponReceiveComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_TMCOUPONSRECEIVE_editform').close();
    }
}

function TMLocations(form, login) {

    Ext.getCmp('TMLocations-CountryCode').on('select', function (combo, record, index) {
        updateTMLocationsRecord('CountryCode', combo.getValue());
        updateTMLocationsRecord('CountryName', record.get(combo.displayField));
    }, this);

    Ext.getCmp('TMLocations-Loc_CityCode').on('select', function (combo, record, index) {
        updateTMLocationsRecord('Loc_CityCode', combo.getValue());
        updateTMLocationsRecord('Loc_CityName', record.get(combo.displayField));
    }, this);

    Ext.getCmp('TMLocations-Address1').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Address1', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Coordinator').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Coordinator', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Home_Tel').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Home_Tel', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Work_Tel').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Work_Tel', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Mobile').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Mobile', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Fax').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Fax', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Post_Box').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Post_Box', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Email').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Email', field.getValue());
    }, this);

    Ext.getCmp('TMLocations-Sub_Comments').on('blur', function (field, newval, odlval) {
        updateTMLocationsRecord('Sub_Comments', field.getValue());
    }, this);

    var TMSubLocationsList = Ext.getCmp('TMSubLocationsList');
    if (TMSubLocationsList) {
        TMSubLocationsList.on('rowclick', OnTMLocationrowClick, this);
        TMSubLocationsList.getStore().on('update', onTMLocationupdate, this);
    }

    TMSubLocationsList.on('addrecord', function (evt) {
        evt.record.set('Sub_Location_Number', TMSubLocationsList.store.totalLength);
    }, this);

}


function OnTMLocationrowClick(Grid, rowIndex, e) {
    updateTMLocationField(Grid.getStore().getAt(rowIndex));
    this.SelectedRecord = Grid.getStore().getAt(rowIndex);
}

function onTMLocationupdate(Store, record, operation) {
    this.SelectedRecord = record;
    updateTMLocationField(record);
}

function updateTMLocationsRecord(Cmp, Value) {
    if (Ext.getCmp('TMLocations').SelectedRecord) {
        Ext.getCmp('TMLocations').SelectedRecord.set(Cmp, Value);
        var TMSubLocList = Ext.getCmp('TMSubLocationsList');
        TMSubLocList.makeMasterDirty();
        Ext.getCmp('TMLocations').SelectedRecord.set('IsDirty', true); //.dirty = true; 
        Ext.getCmp('TMLocations').SelectedRecord.set('IsSavable', true); //.dirty = true; 
    }
}

function updateTMLocationField(record) {

    if (record.get('CountryCode')) {
        if (!Ext.getCmp('TMLocations').isView) Ext.getCmp('TMLocations-CountryCode').setComboValue(record.get('CountryCode'));
        else Ext.getCmp('TMLocations-CountryCode').setValue(record.get('CountryName'));
    } else Ext.getCmp('TMLocations-CountryCode').clearValue();

    if (record.get('Loc_CityCode')) {
        if (!Ext.getCmp('TMLocations').isView) Ext.getCmp('TMLocations-Loc_CityCode').setComboValue(record.get('Loc_CityCode'));
        else Ext.getCmp('TMLocations-Loc_CityCode').setValue(record.get('Loc_CityName'));
    } else Ext.getCmp('TMLocations-Loc_CityCode').clearValue();

    Ext.getCmp('TMLocations-Address1').setValue(record.get('Address1'));
    Ext.getCmp('TMLocations-Coordinator').setValue(record.get('Coordinator'));
    Ext.getCmp('TMLocations-Home_Tel').setValue(record.get('Home_Tel'));
    Ext.getCmp('TMLocations-Work_Tel').setValue(record.get('Work_Tel'));
    Ext.getCmp('TMLocations-Mobile').setValue(record.get('Mobile'));
    Ext.getCmp('TMLocations-Fax').setValue(record.get('Fax'));
    Ext.getCmp('TMLocations-Post_Box').setValue(record.get('Post_Box'));
    Ext.getCmp('TMLocations-Email').setValue(record.get('Email'));
    Ext.getCmp('TMLocations-Sub_Comments').setValue(record.get('Sub_Comments'));
}
function TmCouponsCancellation(form, login) {

    var TmCouponsCancellationDetailList = Ext.getCmp('TmCouponsCancellationDetailList');
    var TotalAmount1 = Ext.getCmp('TmCouponsCancellation-Amount1')
    var Comments1 = Ext.getCmp('TmCouponsCancellation-Comments1')

    var TempToNumber = '';
    var TempFromNumber = '';

    var Current_No = Ext.getCmp('TmCouponsCancellationDetail-Current_Number');
    var To_No = Ext.getCmp('TmCouponsCancellationDetail-To_Number');
    var From_Num = '';
    var To_Num = '';

    if (!form.isView) {
        Ext.getCmp('TmCouponsCancellation-StatusCode').setComboValue(0);
        Ext.getCmp('TmCouponsCancellation-StatusCode').disable();
    }

    TmCouponsCancellationDetailList.on('afteredit', function (e) {
        var Amount = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {

            Amount += (1 * e.grid.store.getAt(i).get('Amount'));
        }
        TotalAmount1.setValue(Amount);
    }, this);

    var DetailList = Ext.getCmp('TmCouponsCancellationDetailList').getStore();

    DetailList.on('load', function (store, record, options) {
        var TotAmount = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotAmount += (1 * record.get('Amount'));
        }
        TotalAmount1.setValue(TotAmount);
    }, this);

    TmCouponsCancellationDetailList.getSelectionModel().on('rowselect', function (SelectionModel, Index, Record) {
        TmCouponsCancellationDetailRowSelect(Record);
    }, this);

    TmCouponsCancellationDetailList.on('rowclick', function (grid, Index, e) {
        var Record = grid.store.getAt(Index);
        TmCouponsCancellationDetailRowSelect(Record);
        From_num = Record.get('From_Num');
        To_Num = Record.get('To_Num');
    }, this);
    var Coupon_Code = Ext.getCmp("TmCouponsCancellationDetail-CouponCode");
    Coupon_Code.on('select', function (combo, record, index) {
        TempFromNumber = record.data.Current_Number;
        TempToNumber = record.data.To_Number;
    }, this);
    Ext.getCmp('TmCouponsCancellationDetailList').getStore().on('update', function (store, record, options) {
        From_Num = record.get('From_Num');
        To_Num = record.get('To_Num');
    }, this);
    Current_No.on('blur', function (field) {

        if (TempFromNumber == '' || TempFromNumber == null) {
            TempFromNumber = From_Num;
        }
        if (Current_No.getValue() < TempFromNumber) {

            Ext.MessageBox.alert(login.modulename, 'Current Coupon Number Should be Equal to ' + TempFromNumber + ' or Greater than ' + TempFromNumber);
            Current_No.setValue(TempFromNumber);
            return;
        }

    }, this);

    To_No.on('blur', function (field) {

        if (TempToNumber == '' || TempToNumber == null) {
            TempFromNumber = To_Num;
        }
        if (To_No.getValue() > TempToNumber) {
            Ext.MessageBox.alert(login.modulename, 'To Coupon Number Should be Equal to ' + TempToNumber + ' or less than ' + TempToNumber);
            To_No.setValue(TempToNumber);
            return;
        }
    }, this);

    Comments1.on('valid', function (field) {
        if (TmCouponsCancellationDetailList.lastSelectedRecord) TmCouponsCancellationDetailList.lastSelectedRecord.set('Comments1', Comments1.getValue());
    }, this);


    var Coupon_Category = Ext.getCmp('TmCouponsCancellationDetail-Coupon_CategoryCode');
    Coupon_Category.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CATEGORY_TYPE=2";
    }, this);


}

function TmCouponsCancellationDetailRowSelect(Record) {
    var TmCouponsCancellationDetailList = Ext.getCmp('TmCouponsCancellationDetailList');
    TmCouponsCancellationDetailList.lastSelectedRecord = Record;
    var Comments1 = Ext.getCmp('TmCouponsCancellation-Comments1')
    Comments1.setValue(Record.get('Comments1'));

    var CouponCode = Ext.getCmp("TmCouponsCancellationDetail-CouponCode");

    if (CouponCode) CouponCode.on('beforequery', function (evt) {
        var Coupon_TypeCode = TmCouponsCancellationDetailList.SelectedRecord.get('Coupon_TypeCode');
        var Coupon_CategoryCode = TmCouponsCancellationDetailList.SelectedRecord.get('Coupon_CategoryCode');
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TMC.COUPON_TYPE= " + Coupon_TypeCode + " and TMC.COUPON_CATEGORY=" + Coupon_CategoryCode + " and TMC.status=0";
    }, this);


    TmCouponsCancellationDetailList.on('rowclick', function (Grid, rowIndex, e) {
        var record = Grid.store.getAt(rowIndex);
        TmCouponsCancellationDetailList.SelectedRecord = record;
    }, this);

    TmCouponsCancellationDetailList.on('beforeedit', function (e) {
        var record = e.record;
        TmCouponsCancellationDetailList.SelectedRecord = record;
        From_num = Record.get('From_Num');
        To_Num = Record.get('To_Num');
    }, this);


}

function CouponCancellationPost(button, options) {


    var PrimKey = Ext.getCmp('TmCouponsCancellation').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TMCoupon_Cancellation',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CouponCancellationPostComplete, this);

}

function CouponCancellationPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CouponCancellationPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_COUPONCANCELLATION_editform').close();
    }
}




function TMCharityBox(form, login) {

    var Sub_LocationCode = Ext.getCmp('TMCharityBox-Sub_LocationCode');
    var LocationsCode = Ext.getCmp('TMCharityBox-LocationsCode');
    var EmployeeCode = Ext.getCmp('TMCharityBox-EmployeeCode');
    var FullName = Ext.getCmp('TMCharityBox-FullName');

    if (!form.isView) {
        Ext.getCmp('TMCharityBox-StatusCode').setComboValue(0);
        Ext.getCmp('TMCharityBox-StatusCode').disable();
    }

    LocationsCode.on('select', function (combo, record, index) {
        Sub_LocationCode.clearValue();
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    Sub_LocationCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);


    if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
        var LocationCode = Ext.getCmp('TMCharityBox-LocationsCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var Sub_LocationCode = Ext.getCmp('TMCharityBox-Sub_LocationCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    }, this);

}

function TMCoupons(form, login) {

    if (form.selectedIndex == -1 && !form.isView) {
        Ext.getCmp('TMCoupons-StatusCode').setComboValue(0);
        Ext.getCmp('TMCoupons-StatusCode').disable();
    }
    var Sub_LocationCode = Ext.getCmp('TMCoupons-Sub_LocationCode');
    var LocationsCode = Ext.getCmp('TMCoupons-Main_Location_Code');

    LocationsCode.on('select', function (combo, record, index) {
        Sub_LocationCode.clearValue();
    }, this);

    if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
        var LocationCode = Ext.getCmp('TMCoupons-Main_Location_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    }, this);

    if (LocationsCode) LocationsCode.on('clear', function (evt) {
        Sub_LocationCode.clearValue();
    }, this);

}

function CouponsCollectionAuto(form, login) {


    if (!form.isView) {
        Ext.getCmp('CouponsCollectionAuto-StatusCode').setComboValue(0);
        Ext.getCmp('CouponsCollectionAuto-StatusCode').disable();
    }

    var Sub_LocationCode = Ext.getCmp('CouponsCollectionAuto-Sub_LocationCode');
    var LocationsCode = Ext.getCmp('CouponsCollectionAuto-Location_Code');
    var EmployeeCode = Ext.getCmp('CouponsCollectionAuto-EmployeeCode');
    var FullName = Ext.getCmp('CouponsCollectionAuto-FullName');

    LocationsCode.on('select', function (combo, record, index) {
        Sub_LocationCode.clearValue();
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    Sub_LocationCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);


    if (Sub_LocationCode) Sub_LocationCode.on('beforequery', function (evt) {
        var LocationCode = Ext.getCmp('CouponsCollectionAuto-Location_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TM_SUB_LOCATION_CODE in (select TM_SUB_LOCATION_CODE from Tm_Sub_Locations where TM_LOCATION_CODE =" + LocationCode + ")";
    }, this);

    if (EmployeeCode) EmployeeCode.on('beforequery', function (evt) {
        var Sub_LocationCode = Ext.getCmp('CouponsCollectionAuto-Sub_LocationCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE in(select SUPERVISORS_CODE from TM_SUPERVISORS where SUPERVISORS_CODE in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    }, this);



    //var CouponsCollectionAutoDtlList = Ext.getCmp('CouponsCollectionAutoDtlList');
    //var Total_Amount = Ext.getCmp('CouponsCollectionAuto-Total_Amount');
    //var Deficit_Amount = Ext.getCmp('CouponsCollectionAuto-Total_Deficit_Amount');
    //var Tot_Net_Amount = Ext.getCmp('CouponsCollectionAuto-Net_Amount');

    //CouponsCollectionAutoDtlList.on('afteredit', function (e) {

    //    var Net_Amount = e.record.get('Net_Amount');       

    //    var Total_Amount1 = 0;
    //    var Deficit_Amount1 = 0;
    //    var Tot_Net_Amount1 = 0;

    //    for (var i = 0; i < e.grid.store.getCount() ; i++) {

    //        Total_Amount1 += (1 * e.grid.store.getAt(i).get('Amount'));
    //        Deficit_Amount1 += (1 * e.grid.store.getAt(i).get('Deficit_Amount'));
    //        Tot_Net_Amount1 += (1 * e.grid.store.getAt(i).get('Net_Amount'));

    //    }
    //    Total_Amount.setValue(Total_Amount1);
    //    Deficit_Amount.setValue(Deficit_Amount1);
    //    Tot_Net_Amount.setValue(Tot_Net_Amount1);
    //}, this);

    //var DetailList = Ext.getCmp('CouponsCollectionAutoDtlList').getStore();

    //DetailList.on('load', function (store, record, options) {

    //    var Total_Amount11 = 0;
    //    var Deficit_Amount11 = 0;
    //    var Tot_Net_Amount11 = 0;

    //    for (var i = 0; i < store.getCount() ; i++) {
    //        var record = store.getAt(i);
    //        if (record.get('IsDeleted') == false) Total_Amount11 += (1 * record.get('Amount'));
    //        if (record.get('IsDeleted') == false) Deficit_Amount11 += (1 * record.get('Deficit_Amount'));
    //        if (record.get('IsDeleted') == false) Tot_Net_Amount11 += (1 * record.get('Net_Amount'));
    //    }
    //    Total_Amount.setValue(Total_Amount11);
    //    Deficit_Amount.setValue(Deficit_Amount11);
    //    Tot_Net_Amount.setValue(Tot_Net_Amount11);
    //}, this);

}

function CouponCollection_AutoPost(button, options) {

    var PrimKey = Ext.getCmp('CouponsCollectionAuto').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Coupon_CollectionAuto',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CouponCollection_AutoPostComplete, this);

}

function CouponCollection_AutoPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CouponCollection_AutoPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_COUPONCOLLECTIONAUTO_editform').close();
    }
}


function CharityBoxesCollection(form, login) {

    //var Transaction_TypeCode = Ext.getCmp('CharityBoxesCollection-Transaction_TypeCode');
    //var Charity_Box_Code = Ext.getCmp('CharityBoxesCollection-Charity_Box_Code');
    //var CharityBoxType = Ext.getCmp('CharityBoxesCollection-CharityBoxType');
    //Charity_Box_Code.disable();
    var Collection_TypeCode = Ext.getCmp('CharityBoxesCollection-Collection_TypeCode');
    if (!form.isView) {
        Ext.getCmp('CharityBoxesCollection-StatusCode').setComboValue(0);



        Ext.getCmp('CharityBoxesCollection-StatusCode').disable();
    }



    var CharityBoxesCollectionDtlList = Ext.getCmp('CharityBoxesCollectionDtlList');
    //var Coins = Ext.getCmp('CharityBoxesCollection-Coins');
    //var Paper = Ext.getCmp('CharityBoxesCollection-Paper_Money');
    var Total_Amount = Ext.getCmp('CharityBoxesCollection-Total_Amount');
    var Paper_Total = Ext.getCmp('CharityBoxesCollection-Paper_Total');
    var Coin_Total = Ext.getCmp('CharityBoxesCollection-Coin_Total');
    var Foreign_Total = Ext.getCmp('CharityBoxesCollection-ForeignAmt');

    var CollectionDtl = Ext.getCmp('CharityBoxesCollectionDtlList');
    CollectionDtl.store.on('update', function (store, record, option) {
        var Paper = record.get('Paper_Total_Amount');
        var Coins = record.get('Coins_Total_Amount');
        var Foreign = record.get('Foreign_Paper_Amount');
        var Total = Ext.getCmp('CharityBoxesCollectionDtl-Total_Amount');

        record.set('Total_Amount', (1 * Paper) + (1 * Coins) + (1 * Foreign));

    }, this);



    var DelegateDtl = Ext.getCmp('CharityBoxesCollection_DelgatesList');
    DelegateDtl.store.on('update', function (store, record, option) {
        var Value_5dh = record.get('Value_5dh');
        var Value_10dh = record.get('Value_10dh');
        var Value_20dh = record.get('Value_20dh');
        var Value_50dh = record.get('Value_50dh');
        var Value_100dh = record.get('Value_100dh');
        var Value_200dh = record.get('Value_200dh');
        var Value_500dh = record.get('Value_500dh');
        var Value_1000dh = record.get('Value_1000dh');
        var Coins_Total_Amount = record.get('Coins_Total_Amount');
        var Foreign_Paper_Amount = record.get('Foreign_Paper_Amount');
        var Total = Ext.getCmp('CharityBoxesCollection_Delgates-Total_Amount');

        record.set('Total_Amount', (5 * Value_5dh) + (10 * Value_10dh) + (20 * Value_20dh) + (50 * Value_50dh) + (100 * Value_100dh) + (200 * Value_200dh) + (500 * Value_500dh) + (1000 * Value_1000dh) + (1 * Coins_Total_Amount) + (1 * Foreign_Paper_Amount));

    }, this);


    //var MonyCat = Ext.getCmp('CharityBoxesCollectionDtl-Money_CategoryCode');

    //MonyCat.on('clear',function())



    CharityBoxesCollectionDtlList.on('afteredit', function (e) {

        var Total_Amount1 = 0;
        var Coinstot = 0;
        var Papertot = 0;
        var ForeginAmt1 = 0;

        for (var i = 0; i < e.grid.store.getCount() ; i++) {


            Papertot += (1 * e.grid.store.getAt(i).get('Paper_Total_Amount'));
            Coinstot += (1 * e.grid.store.getAt(i).get('Coins_Total_Amount'));
            ForeginAmt1 += (1 * e.grid.store.getAt(i).get('Foreign_Paper_Amount'));
            Total_Amount1 += (1 * e.grid.store.getAt(i).get('Total_Amount'));
        }
        //Paper.setValue(Papertot);
        //Coins.setValue(Coinstot);
        Total_Amount.setValue(Total_Amount1);
        Foreign_Total.setValue(ForeginAmt1);
        Paper_Total.setValue(Papertot);
        Coin_Total.setValue(Coinstot);
    }, this);

    var DetailList = Ext.getCmp('CharityBoxesCollectionDtlList').getStore();

    DetailList.on('load', function (store, record, options) {
        var Total_Amount11 = 0;
        var Coinstot1 = 0;
        var Papertot1 = 0;
        var ForeignAmt1 = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            record.set('Total_Amount', (1 * record.get('Paper_Total_Amount')) + (1 * record.get('Coins_Total_Amount')) + (1 * record.get('Foreign_Paper_Amount')));
            if (record.get('IsDeleted') == false) Coinstot1 += (1 * record.get('Coins_Total_Amount'));
            if (record.get('IsDeleted') == false) Papertot1 += (1 * record.get('Paper_Total_Amount'));
            if (record.get('IsDeleted') == false) ForeignAmt1 += (1 * record.get('Foreign_Paper_Amount'));
            if (record.get('IsDeleted') == false) Total_Amount11 += (1 * record.get('Total_Amount'));
        }
        Total_Amount.setValue(Total_Amount11);
        Coin_Total.setValue(Coinstot1);
        Paper_Total.setValue(Papertot1);
        Foreign_Total.setValue(ForeignAmt1);
        //Coins.setValue(Coinstot1);

    }, this);

    //else {

    var DelDetailList = Ext.getCmp('CharityBoxesCollection_DelgatesList').getStore();

    DelDetailList.on('load', function (store, record, options) {
        var Total_Amount11 = 0;
        var Total = Ext.getCmp('CharityBoxesCollection-SupervisorTotal');
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            Total_Amount11 += (1 * record.get('Total_Amount'));
        }
        Total.setValue(Total_Amount11);

    }, this);


    Ext.getCmp('CharityBoxesCollection_DelgatesList').on('afteredit', function (e) {

        var Total_Amount2 = 0;
        var Total = Ext.getCmp('CharityBoxesCollection-SupervisorTotal');

        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            Total_Amount2 += (1 * e.grid.store.getAt(i).get('Total_Amount'));
        }
        Total.setValue(Total_Amount2);
    }, this);
    //Paper.setValue(Papertot);
    //Coins.setValue(Coinstot);
    //    //    Total_Amount.setValue(Total_Amount2);
    //    //    Paper_Total.setValue(Papertot);
    //    //    Coin_Total.setValue(Coinstot);
    //    //}, this);

    //    var DelgateList = Ext.getCmp('CharityBoxesCollection_DelgatesList').getStore();

    //    DelgateList.on('load', function (store, record, options) {
    //        var Total_Amount3 = 0;
    //        var Coinstot3 = 0;
    //        var Papertot3 = 0;

    //        for (var i = 0; i < store.getCount() ; i++) {
    //            var record = store.getAt(i);
    //            if (record.get('IsDeleted') == false) Coinstot3 += (1 * record.get('Coins_Total_Amount'));
    //            if (record.get('IsDeleted') == false) Papertot3 += (1 * record.get('Paper_Total_Amount'));
    //            if (record.get('IsDeleted') == false) Total_Amount11 += (1 * record.get('Foreign_Paper_Amount'));
    //        }
    //        Total_Amount.setValue(Total_Amount11);
    //        Coin_Total.setValue(Coinstot1);
    //        Paper_Total.setValue(Papertot1);
    //        //Paper.setValue(Papertot1);
    //        //Coins.setValue(Coinstot1);

    //    }, this);

    //}


    Collection_TypeCode.on('select', function (combo, record, option) {
        if (combo.getValue() == 0) {
            Ext.getCmp('CharityBoxesCollection-SupervisorTotal').setValue(0);
            var Count = Ext.getCmp('CharityBoxesCollection_DelgatesList').store.getCount();
            for (var cnt = 0; cnt < Count; cnt++) {
                var record = Ext.getCmp('CharityBoxesCollection_DelgatesList').store.getAt(cnt);
                record.set('Value_5dh', 0);
                record.set('Value_10dh', 0);
                record.set('Value_20dh', 0);
                record.set('Value_50dh', 0);
                record.set('Value_100dh', 0);
                record.set('Value_200dh', 0);
                record.set('Value_500dh', 0);
                record.set('Value_1000dh', 0);
                record.set('Coins_Total_Amount', 0);
                record.set('Foreign_Paper_Amount', 0);
            }

        }
        else if (combo.getValue() == 1) {
            Foreign_Total.setValue(0);
            Coin_Total.setValue(0);
            Paper_Total.setValue(0);
            Total_Amount.setValue(0);
            var Count = Ext.getCmp('CharityBoxesCollectionDtlList').store.getCount();
            for (var cnt = 0; cnt < Count; cnt++) {
                var record = Ext.getCmp('CharityBoxesCollectionDtlList').store.getAt(cnt);
                record.set('Paper_Total_Amount', 0);
                record.set('Coins_Total_Amount', 0);
                record.set('Foreign_Paper_Amount', 0);
                record.set('Total_Amount', 0);
            }
        }
    }, this);


}

function CharityBox_CollectionPost(button, options) {

    var PrimKey = Ext.getCmp('CharityBoxesCollection').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Charity_Collection',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', CharityBox_CollectionPostComplete, this);
}

function CharityBox_CollectionPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CharityBox_CollectionPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CHARITYBOXCOLLECTION_editform').close();
    }
}



function TmCouponsCollection(form, login) {

    if (!form.isView) {
        Ext.getCmp('TmCouponsCollection-StatusCode').setComboValue(0);
        Ext.getCmp('TmCouponsCollection-StatusCode').disable();
    }

    var MoneyValue = '';
    var TmCouponsCollectionDetailsList = Ext.getCmp('TmCouponsCollectionDetailsList');
    var Total_Amount = Ext.getCmp('TmCouponsCollection-Total_Amount');
    var Deficit_Amount = Ext.getCmp('TmCouponsCollection-Deficit_Amount');
    var Tot_Net_Amount = Ext.getCmp('TmCouponsCollection-Net_Amount');
    var From_Number = Ext.getCmp('TmCouponsCollectionDetails-Current_Number');
    var To_Number = Ext.getCmp('TmCouponsCollectionDetails-To_Number_Code');
    var Coupon_Category = Ext.getCmp('TmCouponsCollectionDetails-Coupon_CategoryCode');
    Coupon_Category.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " CATEGORY_TYPE=2";
    }, this);

    TmCouponsCollectionDetailsList.on('afteredit', function (e) {

        var Net_Amount = e.record.get('Net_Amount');
        var TotalAmt = (e.record.get('Amount') - e.record.get('Deficit_Amount'));
        e.record.set('Net_Amount', TotalAmt);

        var Total_Amount1 = 0;
        var Deficit_Amount1 = 0;
        var Tot_Net_Amount1 = 0;

        for (var i = 0; i < e.grid.store.getCount() ; i++) {

            Total_Amount1 += (1 * e.grid.store.getAt(i).get('Amount'));
            Deficit_Amount1 += (1 * e.grid.store.getAt(i).get('Deficit_Amount'));
            Tot_Net_Amount1 += (1 * e.grid.store.getAt(i).get('Net_Amount'));
        }
        Total_Amount.setValue(Total_Amount1);
        Deficit_Amount.setValue(Deficit_Amount1);
        Tot_Net_Amount.setValue(Tot_Net_Amount1);
    }, this);

    var DetailList = Ext.getCmp('TmCouponsCollectionDetailsList').getStore();

    DetailList.on('load', function (store, record, options) {
        var Total_Amount11 = 0;
        var Deficit_Amount11 = 0;
        var Tot_Net_Amount11 = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) Total_Amount11 += (1 * record.get('Amount'));
            if (record.get('IsDeleted') == false) Deficit_Amount11 += (1 * record.get('Deficit_Amount'));
            if (record.get('IsDeleted') == false) Tot_Net_Amount11 += (1 * record.get('Net_Amount'));
        }
        Total_Amount.setValue(Total_Amount11);
        Deficit_Amount.setValue(Deficit_Amount11);
        Tot_Net_Amount.setValue(Tot_Net_Amount11);
    }, this);

    var Sub_LocationCode = Ext.getCmp('TmCouponsCollection-Sub_LocationCode');
    var LocationsCode = Ext.getCmp('TmCouponsCollection-LocationsCode');
    var EmployeeCode = Ext.getCmp('TmCouponsCollection-EmployeeCode');
    var FullName = Ext.getCmp('TmCouponsCollection-FullName');

    LocationsCode.on('select', function (combo, record, index) {
        Sub_LocationCode.clearValue();
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    Sub_LocationCode.on('select', function (combo, record, index) {
        EmployeeCode.clearValue();
        FullName.setValue(null);
    }, this);

    Sub_LocationCode.on('beforequery', function (evt) {
        var LocationCode = Ext.getCmp('TmCouponsCollection-LocationsCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "slo.TM_LOCATION_CODE=" + LocationCode;
    }, this);

    EmployeeCode.on('beforequery', function (evt) {
        var Sub_LocationCode = Ext.getCmp('TmCouponsCollection-Sub_LocationCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.SUPERVISORS_CODE  in (SELECT PERSON_NO from TM_SUB_LOCATIONS where TM_SUB_LOCATION_CODE=" + Sub_LocationCode + "))";
    }, this);



    var DelegateCode = Ext.getCmp('TmCouponsCollection-DelegateCode');
    var TmCouponsCollectionDetails = Ext.getCmp('TmCouponsCollectionDetailsList');
    var Coupon_Code = Ext.getCmp('TmCouponsCollectionDetails-Coupon_Code');
    var Coupon_TypeCode = Ext.getCmp('TmCouponsCollectionDetails-Coupon_TypeCode');
    var Coupon_CategoryCode = Ext.getCmp('TmCouponsCollectionDetails-Coupon_CategoryCode');
    /*  Coupon_TypeCode.on('beforequery', function (evt) {
          var type = DelegateCode.getValue();
              evt.combo.lastQuery = '1=2';
              evt.combo.store.baseParams.filter = " tc.DELEGATE_CODE=" + type;
      }, this);*/
    Coupon_CategoryCode.on('select', function (combo, record, option) {
        MoneyValue = record.data.Amount;
    }, this);

    DelegateCode.on('select', function fnd(combo, record, index) {
        for (var i = 0; i < TmCouponsCollectionDetails.store.getCount() ; i++) {
            var Record = TmCouponsCollectionDetails.store.getAt(i);
            record.set('Coupon_Code', null);
            record.set('Coupon_Name', '');
            record.set('Coupon_CategoryCode', null);
            record.set('Coupon_TypeCode', null);
            record.set('Coupon_CategoryName', '');
            record.set('Coupon_TypeName', '');
            record.set('Current_Number', null);
            record.set('To_Number_Code', null);
            record.set('No_of_Coupons', null);
            record.set('Amount', null);
            record.set('Deficit_Amount', null);
            record.set('Net_Amount', null);
            record.set('Comments', '');
        }

    }, this);


    var CollectionDtl = Ext.getCmp('TmCouponsCollectionDetailsList');
    CollectionDtl.store.on('update', function (store, record, option) {
        var From = record.get('Current_Number');
        var To = record.get('To_Number_Code');
        var CoupCount = Ext.getCmp('TmCouponsCollectionDetails-No_of_Coupons');
        var Amount = Ext.getCmp('TmCouponsCollectionDetails-Amount');
        var value = record.get('Category_Value');
        if (record.get('Current_Number') != null && record.get('To_Number_Code') != null) {
            record.set('No_of_Coupons', 1 * To - 1 * From + 1);
            var Count = record.get('No_of_Coupons')
            var Value = record.get('Coupon_Amount')
            record.set('Amount', 1 * Count * Value);
        }
    }, this);

    /* if (From_Number) From_Number.on('blur', function(field){
         showMask();
         var CouponNumber = field.getValue();
         var CategoryCode = Coupon_Category.getValue();
         var CouponType = Coupon_TypeCode.getValue();
         Ext.Ajax.request({
             url: 'tools/HumanResources/HRPosting.aspx',
             params: {
                 action: 'TMCheckCouponNumber',
                 CouponNumber: CouponNumber,
                 CouponType: CouponType,
                 CategoryCode: CategoryCode
             },
             method: 'POST',
             failure: function (result, request) {
                 Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
             },
             timeout: 1200000,
             scope: this
         });
         Ext.Ajax.on('requestcomplete', CheckCouponNumberComplete, this);
     }, this);
     if (To_Number) To_Number.on('blur', CheckCouponNumber, this);*/
}

function CouponsCollectionPost(button, options) {

    var PrimKey = Ext.getCmp('TmCouponsCollection').selectedIndex;

    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'يجب الحفظ أولا');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'TmCoupons_Collection',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', TmCouponCollectionComplete, this);

}

function TmCouponCollectionComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', TmCouponCollectionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_TMCOUPONSCOL_editform').close();
    }
}

function SalaryChangePost(button, options) {

    var PrimKey = Ext.getCmp('HRSalaryChange').selectedIndex;
    var StatusCode = Ext.getCmp('HRSalaryChange-StatusCode');
    if (StatusCode == 1) {
        Ext.MessageBox("Record Already Posted");
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HRSalaryChangeAction',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', SalaryChangePostComplete, this);

}

function SalaryChangePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', SalaryChangePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_SALARYCHANGE1_editform').close();
    }
}



function PatientsLoginReceptionPost_OLD(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;

    if (form.selectedIndex != -1 && !form.isView) {

        var Status = Ext.getCmp('PatientsLoginReception-StatusCode');
        if (Status.editValue == 1) {
            Ext.MessageBox.alert(login.modulename, 'Data Already Posted !');
            return;
        }
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PatientsLogin_Reception',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientsLogin_ReceptionComplete, this);

}

function PatientsLogin_ReceptionComplete_OLD(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PatientsLogin_ReceptionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_PLRECEPTION_editform').un('beforeclose', Ext.getCmp('ID_PLRECEPTION_editform').scope.closeWindow, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').on('close', Ext.getCmp('ID_PLRECEPTION_editform').scope.afterCloseWind, Ext.getCmp('ID_PLRECEPTION_editform').scope);
        Ext.getCmp('ID_PLRECEPTION_editform').close();
    }
}




function OverTime_ApproveHandler(form, login) {

    var PrimKey = Ext.getCmp('OverTime').selectedIndex;
    var Status = Ext.getCmp('OverTime-StatusCode');


    if (PrimKey == -1) {

        Ext.MessageBox.alert(login.modulename, 'You Must Save the Record first !');
        return;
    }

    var OverTimeDetail = Ext.getCmp('OverTimeDetailList');
    var Overtimedetailcode = '';

    var count = OverTimeDetail.store.getCount();
    for (var cnt = 0; cnt < count; cnt++) {
        var record = OverTimeDetail.store.getAt(cnt);
        if (!record.data.Approve) continue;
        if (record.data.Approve == true)
            Overtimedetailcode += (record.get('ID') + ',');
    }

    if (Overtimedetailcode == '' || Overtimedetailcode == null) {

        Ext.MessageBox.alert(login.modulename, 'One or More Record should be Selected before for Approval and Rejection !');
        return;
    }
    if (Overtimedetailcode != '') Overtimedetailcode = Overtimedetailcode.substring(0, Overtimedetailcode.length - 1);

    showMask();
    Ext.Ajax.request({
        url: 'tools/HRTimeAttendance/FRMSelfService.aspx',
        params: {
            action: 'OverTime_Approval',
            PrimKey: PrimKey,
            Overtimedetailcode: Overtimedetailcode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OverTime_ApprovalReqComplete, this);
}

function OverTime_RejectHandler(form, login) {
}

function OverTime_ApprovalReqComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', OverTime_ApprovalReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        //        Ext.getCmp('Loans_and_Advances-StatusCode').enable();
        //        Ext.getCmp('Loans_and_Advances-StatusCode').setComboValue(1);
        //        Ext.getCmp('Loans_and_Advances-StatusCode').disable();
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


    }
}

function MCLabs(form, login) {

    var DOCTOR = Ext.getCmp('Doctordtl-Doctor_Code');
    var NURSE = Ext.getCmp('Nursedtl-Nurse_Code');

    if (DOCTOR) DOCTOR.on('beforequery', function (evt) {
        //  var Doctor_Code = ext.getCmp('Doctordtl-DOCTOR_CODE').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=0";
    }, this);

    if (NURSE) NURSE.on('beforequery', function (evt) {
        //  var Doctor_Code = ext.getCmp('Doctordtl-DOCTOR_CODE').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=1";
    }, this);

}

function SampleDelegates(form, login) {

    if (!form.isView) {
        Ext.getCmp('SampleDelegates-Status_Code').setComboValue(0);
        Ext.getCmp('SampleDelegates-Status_Code').disable();
    }

    var Employee_Code = Ext.getCmp('SampleDelegates-Employee_Code');
    var Country_Code = Ext.getCmp('SampleDelegates-Country_Code');
    var City_Code = Ext.getCmp('SampleDelegates-City_Code');
    var Work_Tel = Ext.getCmp('SampleDelegates-Mobile');
    var Email = Ext.getCmp('SampleDelegates-Email');

    Employee_Code.on('select', function (combo, record, index) {
        Country_Code.clearValue();
        City_Code.clearValue();
        Work_Tel.setValue(null);
        Email.setValue(null);
    }, this);

    Employee_Code.on('clear', function (evt) {
        Country_Code.clearValue();
        City_Code.clearValue();
        Work_Tel.setValue(null);
        Email.setValue(null);
    }, this);
}

function TestLocations(form, login) {

    if (!form.isView) {
        Ext.getCmp('TestLocations-Status_Code').setComboValue(0);
        Ext.getCmp('TestLocations-Status_Code').disable();
    }

    Ext.getCmp('TestLocations-Comments1').on('blur', function (field, newval, odlval) {
        updateTestLocationsRecord('Comments1', field.getValue());
    }, this);

    var TestSubLocationsList = Ext.getCmp('TestSubLocationsList');
    if (TestSubLocationsList) {
        TestSubLocationsList.on('rowclick', OnTestLocationsrowClick, this);
        TestSubLocationsList.getStore().on('update', onTestLocationsupdate, this);
    }
}

function OnTestLocationsrowClick(Grid, rowIndex, e) {
    updateTestLocationsField(Grid.getStore().getAt(rowIndex));
    this.SelectedRecord = Grid.getStore().getAt(rowIndex);
}

function onTestLocationsupdate(Store, record, operation) {
    this.SelectedRecord = record;
    updateTestLocationsField(record);
}

function updateTestLocationsRecord(Cmp, Value) {
    if (Ext.getCmp('TestLocations').SelectedRecord) {
        Ext.getCmp('TestLocations').SelectedRecord.set(Cmp, Value);
        var TestSubLocationsList = Ext.getCmp('TestSubLocationsList');
        TestSubLocationsList.makeMasterDirty();
        Ext.getCmp('TestLocations').SelectedRecord.set('IsDirty', true); //.dirty = true; 
        Ext.getCmp('TestLocations').SelectedRecord.set('IsSavable', true); //.dirty = true; 
    }
}

function updateTestLocationsField(record) {

    Ext.getCmp('TestLocations-Comments1').setValue(record.get('Comments1'));
}


function ServiceType(form, login) {

    if (!form.isView) {
        var Service_TypeCode = Ext.getCmp('ServiceType-Service_TypeCode').getValue();

        var Service_ProviderCode = Ext.getCmp('ServiceType-Service_ProviderCode');
        if (Service_ProviderCode) Service_ProviderCode.on('beforequery', function (evt) {
            var Service_TypeCode = Ext.getCmp('ServiceType-Service_TypeCode').getValue();
            evt.combo.lastQuery = '1=2';
            if (Service_TypeCode == 0)
                evt.combo.store.baseParams.filter = "MCL.ISProvider=0";
            else
                evt.combo.store.baseParams.filter = "MCL.ISProvider=1";
        }, this);

        var ServiceTypeCode = Ext.getCmp('ServiceType-Service_TypeCode');
        if (ServiceTypeCode) ServiceTypeCode.on('clear', function (evt) {
            var Service_ProviderCode = Ext.getCmp('ServiceType-Service_ProviderCode').setValue(null);
        }, this);

        if (ServiceTypeCode) ServiceTypeCode.on('select', function (combo, record, index) {
            var Service_ProviderCode = Ext.getCmp('ServiceType-Service_ProviderCode').setValue(null);
        }, this);
        var InsurerPriceList = Ext.getCmp('InsurerPriceList');
        var Total1 = Ext.getCmp('ServiceType-Total');

        InsurerPriceList.on('afteredit', function (e) {
            var TotalNet = 0;
            var Total = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var record = e.grid.store.getAt(i);
                TotalNet = (1 * record.get('GrossPrice'));
                if (record.get('DiscountTypeCode') == 0) {  //  Amount
                    TotalNet = ((record.get('GrossPrice') - (1 * record.get('Discount'))));
                }
                else if (record.get('DiscountTypeCode') == 1) {
                    TotalNet = (record.get('GrossPrice') - ((record.get('GrossPrice')) * (record.get('Discount')) / 100));
                }
                Total += TotalNet;
                record.set('NetAmount', TotalNet);
            }
            Total1.setValue(Total);
        }, this);

        var InsurerPriceList = Ext.getCmp('InsurerPriceList').getStore();
        InsurerPriceList.on('load', function (store, record, options) {
            var Total = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Total += (1 * record.get('NetAmount'));
            }
            Total1.setValue(Total);
        }, this);
    }
}


function MC_Labs(form, login) {

    if (!form.isView) {
        var DOCTOR = Ext.getCmp('Doctordtl-Doctor_Code');
        var NURSE = Ext.getCmp('Nursedtl-Nurse_Code');
        var ServiceCode = Ext.getCmp('LabServiceProviderDtl-ServiceCode');

        if (DOCTOR) DOCTOR.on('beforequery', function (evt) {
            //  var Doctor_Code = ext.getCmp('Doctordtl-DOCTOR_CODE').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=0";
        }, this);

        if (NURSE) NURSE.on('beforequery', function (evt) {
            //  var Doctor_Code = ext.getCmp('Doctordtl-DOCTOR_CODE').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "MCP.PHYSICIAN_TYPE=1";
        }, this);

        if (ServiceCode) ServiceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "st.Service_Type=1";
        }, this);

        var ProviderType = Ext.getCmp('MC_Labs-ProviderTypeCode');
        var HeadOfficeCode = Ext.getCmp('MC_Labs-HeadOfficeCode');

        if (form.selectedIndex == -1)
            ProviderType.setComboValue(5);

        if (HeadOfficeCode) HeadOfficeCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PRO.PROVIDERTYPE=0";
        }, this);

        var CityCode = Ext.getCmp('MC_Labs-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('MC_Labs-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);
    }

}



function GenerateCouponsBtnHandler(fild, option) {

    var Delegate = Ext.getCmp('CouponsCollectionAuto-DelegateCode').getValue();


    if (Delegate == '') {
        Ext.MessageBox.alert(login.modulename, ' يجب أختيار المندوب اولاً !');
        return;
    }



    showMask();
    Ext.Ajax.request({
        url: 'tools/SC/SCGeneralRequest.aspx',
        params: {
            action: 'Generate_Coupons',
            Delegate: Delegate
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GenerateCouponsReqComplete, this);
}

function GenerateCouponsReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', GenerateCouponsReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {
        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'لايوجد كوبونات غير محصلة مع المندوب المختار!');
            return;
        }



        var Totals = 0;

        //to clear  the grid
        var grdFunctionality = Ext.getCmp('CouponsCollectionAutoDtlList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end
        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            CouponRecord = responseText.datum[cnt];
            //Totals += (CaseRecord.Amount * 1);
            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                SerialNo: cnt + 1,
                Coupons_Clct_Auto_Code: 1,
                Coupons_Collection_Code: CouponRecord.ID,
                Receipt_Number: CouponRecord.Receipt_Number,
                Receipt_Date: CouponRecord.Receipt_Date,
                Net_Amount: CouponRecord.Dtl_Amount,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();
            //if (FromChkNo <= (ToCheckNo * 1)) FromChkNo++;
        }

    }
}

function CheckCouponNumber(field) {

}


function EmployeeOpeningBalance(form, login) {

    if (!form.isView) {
        var PeriodCode = Ext.getCmp('EmployeeOpeningBalance-Payroll_PeriodCode');
        var PayrollCode = Ext.getCmp('EmployeeOpeningBalance-PayRollCode');
        var StatusCode = Ext.getCmp('EmployeeOpeningBalance-StatusCode');
        var Pkey = Ext.getCmp('EmployeeOpeningBalance').selectedIndex;
        if (Pkey == -1) {
            StatusCode.setComboValue(0);//New
        }
        StatusCode.disable();
        if (form.selectedIndex == -1)
            PeriodCode.disable();
        if (PeriodCode) PayrollCode.on('select', function (combo, record, index) {
            PeriodCode.enable();
            PeriodCode.clearValue();
            PeriodCode.allowBlank = false;
            PeriodCode.isValid();
        }, this);

        if (PayrollCode) PayrollCode.on('clear', function (e) {
            PeriodCode.disable();
            PeriodCode.clearValue();
            PeriodCode.allowBlank = true;
        }, this);

        if (PeriodCode) PeriodCode.on('beforequery', function (evt) {
            var PayrollCode = Ext.getCmp('EmployeeOpeningBalance-PayRollCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PERIOD_CODE in (select PY.PERIOD_CODE from PY_Payroll_Periods PY where PY.PAYROLL_CODE=" + PayrollCode + ")";
        }, this);
    }
}
function EmployeeOpeningBalancePost(form, login) {

    var PrimKey = Ext.getCmp('EmployeeOpeningBalance').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save Before Posting');
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'EmpOpeningBalanceUpdate',
                PrimKey: PrimKey
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', EmpOpeningBalanceUpdateComplete, this);
    }
}

function EmpOpeningBalanceUpdateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', EmpOpeningBalanceUpdateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_EMPOPENINGBALANCE_editform').close();
    }

}

function CmsTeacherLessionVideo(form, login) {

    var SubjectCode = Ext.getCmp('CmsTeacherLessionVideo-SubjectCode');
    var TeacherCode = Ext.getCmp('CmsTeacherLessionVideo-TeacherCode');

    if (SubjectCode) SubjectCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "sub.CMS_SUBJECT_CODE  in (select SUBJECTCODE from cms_teachersubjectdtl  where CMS_TEACHER_CODE=" + TeacherCode.getValue() + ")";
    }, this);
}

function CmsStudentSubjectRegistration(form, login) {


    var SubjectCode = Ext.getCmp('CmsStudentSubjectRegistration-SubjectCode');
    var TeacherCode = Ext.getCmp('CmsStudentSubjectRegistration-TeacherCode');

    if (TeacherCode) TeacherCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "CMT.CMS_TEACHER_CODE in (select CMS_TEACHER_CODE from CMS_TEACHERSUBJECTDTL where SUBJECTCODE=" + SubjectCode.getValue() + ")";
    }, this);

}

function FNDGlobal(form, login) {

    var Code = Ext.getCmp('FNDGlobal-Code');

    var GlobalVariableCode = Ext.getCmp('FNDGlobal-GlobalVariableCode');
    if (!form.isView) {

        if (GlobalVariableCode) GlobalVariableCode.on('select', function (combo, record, index) {
            Code.setValue(record.get('ConstantName'));
        }, this);
    }
}

function CrmCustomerFollowUp(form, login) {

    if (!form.isView) {
        Ext.getCmp('CrmCustomerFollowUp-StatusCode').setComboValue(0);
        Ext.getCmp('CrmCustomerFollowUp-StatusCode').disable();

        Ext.getCmp('CrmCustomerFollowUp-CustomerStatus_Code').setComboValue(0);

        if (login.moduletype == 3) {
            Ext.getCmp('CrmCustomerFollowUp-StaffCode').setComboValue(login.EmployeeCode);
            Ext.getCmp('CrmCustomerFollowUp-EmpFullName').setValue(login.EmployeeFullName);
        }

    }

    Ext.getCmp('CrmCustomerFollowUp-StaffCode').on('beforequery', function (evt) {

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Emp.PERSON_CODE in(select STAFFCODE from CRMLEADASSIGNMENTDETAIL)";

    }, this);

    var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode');

    if (CustomerEntryCode) CustomerEntryCode.on('beforequery', function (evt) {
        var StaffCode = Ext.getCmp('CrmCustomerFollowUp-StaffCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "CR.Status =1 and CR.RECEPTIONENTRYCODE in (select CUSTOMERENTRYCODE from CRMLEADASSIGNMENT where LEADASSIGNMENTCODE in (select LEADASSIGNMENTCODE from CRMLEADASSIGNMENTDETAIL where STAFFCODE =" + StaffCode + "))";

    }, this);
    var StaffCode = Ext.getCmp('CrmCustomerFollowUp-StaffCode')

    if (StaffCode) StaffCode.on('clear', function (evt) {
        var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode').clearValue();
        var Customer_Name = Ext.getCmp('CrmCustomerFollowUp-Customer_Name').setValue(null);
        var Customer_TypeName = Ext.getCmp('CrmCustomerFollowUp-Customer_TypeName').setValue(null);
        var CustomerGroup_Name = Ext.getCmp('CrmCustomerFollowUp-CustomerGroup_Name').setValue(null);
    }, this);

    if (StaffCode) StaffCode.on('select', function (store, record, options) {
        var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode').clearValue();
        var Customer_Name = Ext.getCmp('CrmCustomerFollowUp-Customer_Name').setValue(null);
        var Customer_TypeName = Ext.getCmp('CrmCustomerFollowUp-Customer_TypeName').setValue(null);
        var CustomerGroup_Name = Ext.getCmp('CrmCustomerFollowUp-CustomerGroup_Name').setValue(null);
    }, this);


    CustomerEntryCode.on('select', ReqServiceHistryGridLoad, this);
    CustomerEntryCode.on('select', ReqServiceLoad, this);
    var CrmFollowUpServiceReqDtl = Ext.getCmp('CrmFollowUpServiceReqDtlList')

    var CustomerEntryCodeClear = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode');
    CustomerEntryCodeClear.on('clear', function (evt) {
        onBusinessTypeclear('CrmFollowUpServiceHistoryDtlList');
        onBusinessTypeclear('CrmServiceHistoryDtlList');
    }, this);

    var ServicetItemCode = Ext.getCmp('CrmFollowUpServiceReqDtl-ServicetItemCode');

    if (ServicetItemCode) ServicetItemCode.on('beforequery', function (evt) {
        var Service_Package_Code = Ext.getCmp('CrmCustomerFollowUp-Service_Package_Code').getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Det.Service_Package_Code= " + Service_Package_Code;
    }, this);

    var ServiceitemDetail_Code = Ext.getCmp('CrmFollowUpServiceDropDtl-ServiceitemDetail_Code');

    if (ServiceitemDetail_Code) ServiceitemDetail_Code.on('beforequery', function (evt) {
        var Service_Package_Code = Ext.getCmp('CrmCustomerFollowUp-Service_Package_Code').getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Det.Service_Package_Code= " + Service_Package_Code;
    }, this);

    // Total Amount
    var CrmFollowUpServiceReqDtl = Ext.getCmp('CrmFollowUpServiceReqDtlList')
    var Tot_Amount = Ext.getCmp('CrmCustomerFollowUp-Tot_Amount');
    var Tot_Final_Amount = Ext.getCmp('CrmCustomerFollowUp-Tot_Final_Amount');

    CrmFollowUpServiceReqDtl.on('afteredit', function (e) {

        var Tot_Amountsum = 0;
        var Tot_Final_Amountsum = 0;

        for (var i = 0; i < e.grid.store.getCount() ; i++) {

            Tot_Amountsum += (1 * e.grid.store.getAt(i).get('Amount'));
            Tot_Final_Amountsum += (1 * e.grid.store.getAt(i).get('FinalAmount'));
        }
        Tot_Amount.setValue(Tot_Amountsum);
        Tot_Final_Amount.setValue(Tot_Final_Amountsum);

    }, this);

    var CrmFollowUpServiceReqDtlList = Ext.getCmp('CrmFollowUpServiceReqDtlList').getStore();
    CrmFollowUpServiceReqDtlList.on('load', function (store, record, options) {
        var Tot_Amountdel = 0;
        var Tot_Final_Amountdel = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) Tot_Amountdel += (1 * record.get('Amount'));
            if (record.get('IsDeleted') == false) Tot_Final_Amountdel += (1 * record.get('FinalAmount'));
        }
        Tot_Amount.setValue(Tot_Amountdel);
        Tot_Final_Amount.setValue(Tot_Final_Amountdel);
    }, this);

    //Set the Remarks and Description

    var CrmFollowUpServiceHistoryDtlList = Ext.getCmp('CrmFollowUpServiceHistoryDtlList');
    var History_Remarks = Ext.getCmp('CrmCustomerFollowUp-History_Remarks');
    var History_Description = Ext.getCmp('CrmCustomerFollowUp-History_Description');
    var CrmFollowUpServiceHistoryDtl = Ext.getCmp('CrmFollowUpServiceHistoryDtlList').getStore();
    //CrmFollowUpServiceHistoryDtl.on('load', ReqServiceHistryList, this);

    CrmFollowUpServiceHistoryDtlList.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        History_Remarks.setValue(Record.get('Remarks'));
        History_Description.setValue(Record.get('Description'));

    }, this);

    Ext.getCmp('CrmFollowUpServiceHistoryDtlList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        History_Remarks.setValue(Record.get('Remarks'));
        History_Description.setValue(Record.get('Description'));
    }, this);

    var MsgTemplateCode = Ext.getCmp('CrmCustomerFollowUp-MsgTemplateCode');
    if (MsgTemplateCode) MsgTemplateCode.on('select', function (combo, record, index) {

        Ext.getCmp('CrmCustomerFollowUp-SmsMessage').setValue(record.data.SmsMessage);
        Ext.getCmp('CrmCustomerFollowUp-MessageSubject').setValue(record.data.MessageSubject);
        Ext.getCmp('CrmCustomerFollowUp-Message').setValue(Ext.util.Format.htmlDecode(record.data.Message));


    }, this);

    var Email = Ext.getCmp('CrmCustomerFollowUp-Email');
    Email.on('check', onCrmFollowEmailCheck, this);
    var MessageSubject = Ext.getCmp('CrmCustomerFollowUp-MessageSubject');
    var Message = Ext.getCmp('CrmCustomerFollowUp-Message');
    if (Email.getValue() == true) {
        MessageSubject.enable();
        MessageSubject.allowBlank = false;
        MessageSubject.isValid();
        Message.enable();
        Message.allowBlank = false;
        Message.isValid();
    }



    else {
        MessageSubject.disable();
        MessageSubject.allowBlank = true;
        MessageSubject.clearInvalid();
        Message.disable();
        Message.allowBlank = true;
        Message.clearInvalid();
    }
    var Sms = Ext.getCmp('CrmCustomerFollowUp-Sms');
    Sms.on('check', onCrmFollowSmsCheck, this);
    var SMSMessage = Ext.getCmp('CrmCustomerFollowUp-SmsMessage');
    if (Sms.getValue() == true) {
        SMSMessage.enable();
        SMSMessage.allowBlank = false;
        SMSMessage.isValid();
    }
    else {
        SMSMessage.disable();
        SMSMessage.allowBlank = true;
        SMSMessage.clearInvalid();
    }
}


function onCrmFollowEmailCheck(checkBox, checked) {
    var MessageSubject = Ext.getCmp('CrmCustomerFollowUp-MessageSubject');
    var Message = Ext.getCmp('CrmCustomerFollowUp-Message');
    if (checked == true) {
        MessageSubject.enable();
        MessageSubject.allowBlank = false;
        MessageSubject.isValid();
        Message.enable();
        Message.allowBlank = false;
        Message.isValid();
    }
    else {
        MessageSubject.disable();
        MessageSubject.setValue(null);
        MessageSubject.allowBlank = true;
        MessageSubject.clearInvalid();
        Message.disable();
        Message.setValue(null);
        Message.allowBlank = true;
        Message.clearInvalid();
    }
}

function onCrmFollowSmsCheck(checkBox, checked) {
    var SMSMessage = Ext.getCmp('CrmCustomerFollowUp-SmsMessage');
    if (checked == true) {
        SMSMessage.enable();
        SMSMessage.allowBlank = false;
        SMSMessage.isValid();
    }
    else {
        SMSMessage.disable();
        SMSMessage.setValue(null);
        SMSMessage.allowBlank = true;
        SMSMessage.clearInvalid();
    }
}
//function ReqServiceHistryList(store, record, options) {

//    var CrmFollowUpServiceHistoryDtlList = Ext.getCmp('CrmFollowUpServiceHistoryDtlList');
//    var CrmFollowUpServiceHistoryDtlStore = CrmFollowUpServiceHistoryDtlList.getStore();
//    var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode').getValue();

//    onBusinessTypeclear('CrmFollowUpServiceHistoryDtlList');

//    var Filter = 'ccf.CUSTOMERENTRYCODE=' + CustomerEntryCode;

//    var url = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.MeetingSchedule.CrmFollowUpServiceHistoryDtl&filter=" + Filter;
//    url = url + '&key=' + CrmFollowUpServiceHistoryDtlList.referenceColumn;
//    url = url + '&keyvalue=' + CrmFollowUpServiceHistoryDtlList.referenceData;
//    CrmFollowUpServiceHistoryDtlStore.proxy = new Ext.data.HttpProxy({
//        url: url
//    });
//    CrmFollowUpServiceHistoryDtlStore.load({
//        params: {
//            start: 0,
//            limit: 100
//        }
//    });
//}


function ReqServiceHistryGridLoad(combo, record, opt) {

    var CrmFollowUpServiceHistoryDtlList = Ext.getCmp('CrmFollowUpServiceHistoryDtlList');
    var CrmFollowUpServiceHistoryDtlStore = CrmFollowUpServiceHistoryDtlList.getStore();
    var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode').getValue();

    onBusinessTypeclear('CrmFollowUpServiceHistoryDtlList');

    var Filter = 'ccf.CUSTOMERENTRYCODE=' + CustomerEntryCode;

    var url = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.MeetingSchedule.CrmFollowUpServiceHistoryDtl&filter=" + Filter;
    url = url + '&key=' + CrmFollowUpServiceHistoryDtlList.referenceColumn;
    url = url + '&keyvalue=' + CrmFollowUpServiceHistoryDtlList.referenceData;
    CrmFollowUpServiceHistoryDtlStore.proxy = new Ext.data.HttpProxy({
        url: url
    });
    CrmFollowUpServiceHistoryDtlStore.load({
        params: {
            start: 0,
            limit: 100
        }
    });
}

function ReqServiceLoad(combo, record, opt) {
    var CrmServiceHistoryDtlList = Ext.getCmp('CrmServiceHistoryDtlList');
    var CrmServiceReqDtlStore = CrmServiceHistoryDtlList.getStore();
    var CustomerEntryCode = Ext.getCmp('CrmCustomerFollowUp-CustomerEntryCode').editValue;

    onBusinessTypeclear('CrmServiceHistoryDtlList');

    var Filter = 'his.CUSTOMER_FOLLOWUP_CODE in (select CUSTOMER_FOLLOWUP_CODE from CRM_CUSTOMER_FOLLOWUP where CUSTOMERENTRYCODE=' + CustomerEntryCode + ')';
    var url = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.MeetingSchedule.CrmServiceHistoryDtl&filter=" + Filter;
    // url = url + '&key=' + CrmFollowUpServiceReqDtlList.referenceColumn;
    // url = url + '&keyvalue=' + CrmFollowUpServiceReqDtlList.referenceData;
    CrmServiceReqDtlStore.proxy = new Ext.data.HttpProxy({
        url: url
    });
    CrmServiceReqDtlStore.load({
        params: {
            start: 0,
            limit: 100
        }
    });
}


function CustomerFollowupPost(form, login) {

    var PrimKey = Ext.getCmp('CrmCustomerFollowUp').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'Customer_FollowupPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CustomerFollowupPostComplete, this);
}

function CustomerFollowupPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CustomerFollowupPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CRMCUSTOMERFOLLOWUP_editform').close();
    }
}



function CrmCustomerServiceAssign(form, login) {

    if (!form.isView) {

        Ext.getCmp('CrmCustomerServiceAssign-AssignmentStatus_Code').setComboValue(0);
        Ext.getCmp('CrmCustomerServiceAssign-AssignmentStatus_Code').disable();
        //Ext.getCmp('CrmCustomerServiceAssign-Customer_Code').disable();
        Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode').disable();
        var FinalAmount = form.findById('CrmReceptionEntryDetList').getColumnModel().getColumnById('FinalAmount');
        var Description = form.findById('CrmReceptionEntryDetList').getColumnModel().getColumnById('Description');
        FinalAmount.editable = false;
        Description.editable = false;
        // Total Amount
        var CrmReceptionEntryDet = Ext.getCmp('CrmReceptionEntryDetList');
        var Tot_Amount = Ext.getCmp('CrmCustomerServiceAssign-Total');
        var Tot_Final_Amount = Ext.getCmp('CrmCustomerServiceAssign-NetTotal');

        var CustomerEntryCode = Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode');
        if (CustomerEntryCode) CustomerEntryCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "rec.RECEPTIONENTRYCODE  in (select RECEPTIONENTRYCODE from CRM_REC_ENTRY_SERVICE where  status=0)";
        }, this);

      var Service = Ext.getCmp('CrmCustomerServiceAssign-ServiceSource_Code');
        Service.on('select', function (cbo, record, index) {
            var Reception_CustomerCode = Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode');
            Reception_CustomerCode.on('select', ReceptionEntryDetLoad, this);

           /* var Customer_Code = Ext.getCmp('CrmCustomerServiceAssign-Customer_Code');
            var CustomerName = Ext.getCmp('CrmCustomerServiceAssign-CustomerName');
            var CustomerTypeName = Ext.getCmp('CrmCustomerServiceAssign-CustomerTypeName');
            var CustomerGroupName = Ext.getCmp('CrmCustomerServiceAssign-CustomerGroupName');*/

            if (cbo.getValue() == 0) {
                Reception_CustomerCode.enable();
                /*Customer_Code.clearValue();
                Customer_Code.disable();
                CustomerName.setValue(null);
                CustomerTypeName.setValue(null);
                CustomerGroupName.setValue(null);*/
            }
            else if (cbo.getValue() == 1) {
                Reception_CustomerCode.disable();
                Reception_CustomerCode.clearValue();
              /*  Customer_Code.enable();
                CustomerName.enable();
                CustomerTypeName.enable();
                CustomerGroupName.enable();
                CustomerName.setValue(null);
                CustomerTypeName.setValue(null);
                CustomerGroupName.setValue(null);*/
            }

        }, this);

        Service.on('clear', function () {
            var Reception_CustomerCode = Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode').clearValue();
            var Customer_Code = Ext.getCmp('CrmCustomerServiceAssign-Customer_Code').clearValue();
            var CustomerName = Ext.getCmp('CrmCustomerServiceAssign-CustomerName').setValue(null);
            var CustomerTypeName = Ext.getCmp('CrmCustomerServiceAssign-CustomerTypeName').setValue(null);
            var CustomerGroupName = Ext.getCmp('CrmCustomerServiceAssign-CustomerGroupName').setValue(null);

        }, this);
        
        var StaffCode = Ext.getCmp('CrmServiceAssignStaffDtl-StaffCode');

        if (StaffCode) StaffCode.on('beforequery', function (evt) {

            if (login.moduletype == 3) {

                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "Emp.PERSON_CODE= " + login.EmployeeCode;

            }
        }, this);

        CrmReceptionEntryDet.on('afteredit', function (e) {

            var Tot_Amountsum = 0;
            var Tot_Final_Amountsum = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                Tot_Amountsum += (1 * e.grid.store.getAt(i).get('Amount'));
                Tot_Final_Amountsum += (1 * e.grid.store.getAt(i).get('FinalAmount'));
            }
            Tot_Amount.setValue(Tot_Amountsum);
            Tot_Final_Amount.setValue(Tot_Final_Amountsum);

        }, this);

        var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList').getStore();
        CrmReceptionEntryDetList.on('load', function (store, record, options) {
            var Tot_Amountdel = 0;
            var Tot_Final_Amountdel = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Tot_Amountdel += (1 * record.get('Amount'));
                if (record.get('IsDeleted') == false) Tot_Final_Amountdel += (1 * record.get('FinalAmount'));
            }
            Tot_Amount.setValue(Tot_Amountdel);
            Tot_Final_Amount.setValue(Tot_Final_Amountdel);
        }, this);

        var MsgTemplateCode = Ext.getCmp('CrmCustomerServiceAssign-MsgTemplateCode');
        if (MsgTemplateCode) MsgTemplateCode.on('select', function (combo, record, index) {

            Ext.getCmp('CrmCustomerServiceAssign-SmsMessage').setValue(record.data.SmsMessage);
            Ext.getCmp('CrmCustomerServiceAssign-MessageSubject').setValue(record.data.MessageSubject);
            Ext.getCmp('CrmCustomerServiceAssign-Message').setValue(Ext.util.Format.htmlDecode(record.data.Message));


        }, this);

        var Email = Ext.getCmp('CrmCustomerServiceAssign-Email');
        Email.on('check', onCrmCustomerServiceAssignEmailCheck, this);
        var MessageSubject = Ext.getCmp('CrmCustomerServiceAssign-MessageSubject');
        var Message = Ext.getCmp('CrmCustomerServiceAssign-Message');
        if (Email.getValue() == true) {
            MessageSubject.enable();
            MessageSubject.allowBlank = false;
            MessageSubject.isValid();
            Message.enable();
            Message.allowBlank = false;
            Message.isValid();
        }



        else {
            MessageSubject.disable();
            MessageSubject.allowBlank = true;
            MessageSubject.clearInvalid();
            Message.disable();
            Message.allowBlank = true;
            Message.clearInvalid();
        }
        var Sms = Ext.getCmp('CrmCustomerServiceAssign-Sms');
        Sms.on('check', onCrmCustomerServiceAssignSmsCheck, this);
        var SMSMessage = Ext.getCmp('CrmCustomerServiceAssign-SmsMessage');
        if (Sms.getValue() == true) {
            SMSMessage.enable();
            SMSMessage.allowBlank = false;
            SMSMessage.isValid();
        }
        else {
            SMSMessage.disable();
            SMSMessage.allowBlank = true;
            SMSMessage.clearInvalid();
        }


     

       

        var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList');
        var CrmReceptionEntryDetStore = CrmReceptionEntryDetList.getStore();
        var CustomerEntryCode = Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode').editValue;

        onBusinessTypeclear('CrmReceptionEntryDetList');

        var Filter = 'det.ReceptionEntryCode=' + CustomerEntryCode;

        var url = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.Transaction.CrmReceptionEntryDet&filter=" + Filter;
        url = url + '&key=' + CrmReceptionEntryDetList.referenceColumn;
        url = url + '&keyvalue=' + CrmReceptionEntryDetList.referenceData;
        CrmReceptionEntryDetStore.proxy = new Ext.data.HttpProxy({
            url: url
        });
        CrmReceptionEntryDetStore.load({
            params: {
                start: 0,
                limit: 100
            }
        });
    }
}

function onCrmCustomerServiceAssignEmailCheck(checkBox, checked) {
    var MessageSubject = Ext.getCmp('CrmCustomerServiceAssign-MessageSubject');
    var Message = Ext.getCmp('CrmCustomerServiceAssign-Message');
    if (checked == true) {
        MessageSubject.enable();
        MessageSubject.allowBlank = false;
        MessageSubject.isValid();
        Message.enable();
        Message.allowBlank = false;
        Message.isValid();
    }
    else {
        MessageSubject.disable();
        MessageSubject.setValue(null);
        MessageSubject.allowBlank = true;
        MessageSubject.clearInvalid();
        Message.disable();
        Message.setValue(null);
        Message.allowBlank = true;
        Message.clearInvalid();
    }
}
function onCrmCustomerServiceAssignSmsCheck(checkBox, checked) {
    var SMSMessage = Ext.getCmp('CrmCustomerServiceAssign-SmsMessage');
    if (checked == true) {
        SMSMessage.enable();
        SMSMessage.allowBlank = false;
        SMSMessage.isValid();
    }
    else {
        SMSMessage.disable();
        SMSMessage.setValue(null);
        SMSMessage.allowBlank = true;
        SMSMessage.clearInvalid();
    }
}
function ReceptionEntryDetLoad(combo, record, opt) {

    var CrmReceptionEntryDetList = Ext.getCmp('CrmReceptionEntryDetList');
    var CrmReceptionEntryDetStore = CrmReceptionEntryDetList.getStore();
    var CustomerEntryCode = Ext.getCmp('CrmCustomerServiceAssign-Reception_CustomerCode').getValue();

    onBusinessTypeclear('CrmReceptionEntryDetList');

    var Filter = 'det.status=0 and det.ReceptionEntryCode=' + CustomerEntryCode;

    var url = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.Transaction.CrmReceptionEntryDet&filter=" + Filter;
    url = url + '&key=' + CrmReceptionEntryDetList.referenceColumn;
    url = url + '&keyvalue=' + CrmReceptionEntryDetList.referenceData;
    CrmReceptionEntryDetStore.proxy = new Ext.data.HttpProxy({
        url: url
    });
    CrmReceptionEntryDetStore.load({
        params: {
            start: 0,
            limit: 100
        }
    });
}

function CustomerServiceAssignPost(form, login) {

    var PrimKey = Ext.getCmp('CrmCustomerServiceAssign').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CustomerServiceAssignment_Post',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CustomerServiceAssignPostComplete, this);
}

function CustomerServiceAssignPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CustomerServiceAssignPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CUSTOMERSERVICEASSIGNMENT_editform').close();
    }
}



function CrmServicePackage(form, login) {

    var CrmServiceItemDtlList = Ext.getCmp('CrmServiceItemDtlList');
    var Amount = Ext.getCmp('CrmServiceItemDtlList-Amount');
    var Discount = Ext.getCmp('CrmServiceItemDtlList-Discount');
    var FinalAmount = Ext.getCmp('CrmServiceItemDtlList-FinalAmount');
    var ServiceItemType_Code = Ext.getCmp('CrmServiceItemDtlList-ServiceItemType_Code');

    CrmServiceItemDtlList.on('afteredit', CustomerServiceItemAfterEdit, this);

    function CustomerServiceItemAfterEdit(e) {

        //discount Amount

        if (e.record.get('ServiceItemType_Code') == 1) {
            var Amount = 0;
            var Discount = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                var Amount = e.record.get('Amount');
                var Discount = e.record.get('Discount');
                e.record.set('FinalAmount', (e.record.get('Amount') - e.record.get('Discount')));
            }
        }

            //discount Percentage

        else {

            var Amount = 0;
            var Discount = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                var Amount = e.record.get('Amount');
                var Discount = e.record.get('Discount');
                e.record.set('FinalAmount', ((e.record.get('Amount')) - ((e.record.get('Amount')) * ((e.record.get('Discount')) / 100))));
            }
        }

    }

    //CrmServiceItemDtlList.store.on('load', function (store, record, options) {
    //    var Amount = 0;
    //    var Discount = 0;

    //    for (var i = 0; i < store.getCount() ; i++) {
    //        var record = store.getAt(i);
    //        record.set('FinalAmount', (record.get('Amount') - record.get('Discount')));
    //    }
    //    }, this);

}

function CrmCustomerMessage(form, login) {

}

function CustomerMsgSearchHandler(Button, Option) {

    var FilterQry = '';

    var Customer_Number = Ext.getCmp('CrmCustomerMessage-Customer_Number');

    if (Customer_Number.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "ccm.Customer_Number ='" + Customer_Number.getValue() + "' ";
        else
            FilterQry += " and ccm.Customer_Number ='" + Customer_Number.getValue() + "' ";
    }

    var Customer_Name = Ext.getCmp('CrmCustomerMessage-Customer_Name');

    if (Customer_Name.getValue() != '' && Customer_Name.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(ccm.Customer_Name) like upper ('%" + Customer_Name.getValue() + "%')");
        else
            FilterQry += (" and upper(ccm.Customer_Name) like upper ('%" + Customer_Name.getValue() + "%')");
    }

    var CustomerTypeCode = Ext.getCmp('CrmCustomerMessage-CustomerTypeCode');

    if (CustomerTypeCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " Cust.CUSTOMER_TYPE_CODE =" + CustomerTypeCode.getValue();
        else
            FilterQry += " and  Cust.CUSTOMER_TYPE_CODE=" + CustomerTypeCode.getValue();
    }

    var CustomerGroupCode = Ext.getCmp('CrmCustomerMessage-CustomerGroupCode');

    if (CustomerGroupCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " CusGrop.CUSTOMERGROUP_CODE =" + CustomerGroupCode.getValue();
        else
            FilterQry += " and  CusGrop.CUSTOMERGROUP_CODE=" + CustomerGroupCode.getValue();
    }

    var PaymentTermsCode = Ext.getCmp('CrmCustomerMessage-PaymentTermsCode');

    if (PaymentTermsCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " PAYT.LOOKUPDETAILCODE =" + PaymentTermsCode.getValue();
        else
            FilterQry += " and  PAYT.LOOKUPDETAILCODE =" + PaymentTermsCode.getValue();
    }

    var PersonIdCode = Ext.getCmp('CrmCustomerMessage-PersonIdCode');

    if (PersonIdCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " emp.PERSON_CODE =" + PersonIdCode.getValue();
        else
            FilterQry += " and  emp.PERSON_CODE =" + PersonIdCode.getValue();
    }


    DetailStore = Ext.getCmp('CrmCustomerMessageDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.Transaction.CrmCustomerMessageDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function CustomerMsgClearHandler(Button, Option) {

    var CustomerTypeCode = Ext.getCmp('CrmCustomerMessage-CustomerTypeCode').clearValue();
    var CustomerGroupCode = Ext.getCmp('CrmCustomerMessage-CustomerGroupCode').clearValue();
    var PaymentTermsCode = Ext.getCmp('CrmCustomerMessage-PaymentTermsCode').clearValue();
    var PersonIdCode = Ext.getCmp('CrmCustomerMessage-PersonIdCode').clearValue();
    var Customer_Name = Ext.getCmp('CrmCustomerMessage-Customer_Name').setValue(null);
    var Customer_Number = Ext.getCmp('CrmCustomerMessage-Customer_Number').setValue(null);

    var FilterQry1 = '';

    DetailStore = Ext.getCmp('CrmCustomerMessageDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.Transaction.CrmCustomerMessageDtl&filter=" + FilterQry1;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function CustomerMsgSendHandler(form, login) {

    var CrmCustomerMessageDtlList = Ext.getCmp('CrmCustomerMessageDtlList');
    var Email = Ext.getCmp('CrmCustomerMessage-Email').getValue();
    var Sms = Ext.getCmp('CrmCustomerMessage-Sms').getValue();
    var StudentMessage = Ext.getCmp('CrmCustomerMessage-EMessage').getValue();
    var Subject = Ext.getCmp('CrmCustomerMessage-Subject').getValue();

    var CustomerDetailsRecords = [];


    for (Cnt = 0; Cnt < CrmCustomerMessageDtlList.store.modified.length; Cnt++) {

        if (CrmCustomerMessageDtlList.store.modified[Cnt].get('Selectcheck') == true) {
            CustomerDetailsRecords.push(Ext.encode(CrmCustomerMessageDtlList.store.modified[Cnt].data));
        }
    }
    var CustomerMessageDetRecordsRow = '[' + CustomerDetailsRecords.join(',') + ']';


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CustomerMessageSend',
            CustomerMessageDetRecordsRow: CustomerMessageDetRecordsRow,
            Email: Email,
            Sms: Sms,
            StudentMessage: StudentMessage,
            Subject: Subject,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CustomerMessageSendRequestComplete, this);

}

function CustomerMessageSendRequestComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CustomerMessageSendRequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }

}

function CustomerMsgCloseHandler(Button, Option) {

    Ext.getCmp('ID_CUSTOMERMESSAGE').close();
}



function ReceptionEntry(form, login) {
    var Service_Package_Code = Ext.getCmp('ReceptionEntry-Service_Package_Code');
    Service_Package_Code.disable();

    var StatusCode = Ext.getCmp('ReceptionEntry-StatusCode');


    StatusCode.on('select', function (combo, record, index) {

        var StatusCode = Ext.getCmp('ReceptionEntry-StatusCode').getValue();
        if (StatusCode == 0) {
            Service_Package_Code.enable();
        }
        else {
            Service_Package_Code.disable();
            Service_Package_Code.clearValue();

        }

    }, this);

    Service_Package_Code.on('select', function (combo, record, index) {

        var ReceptionEntryNo = Ext.getCmp('ReceptionEntry-ReceptionEntryNo');
        ReceptionEntryNo.setValue(null);

    }, this);

    var ServiceItem_Code = Ext.getCmp('ReceptionEntryDet-ServiceItem_Code');

    if (ServiceItem_Code) ServiceItem_Code.on('beforequery', function (evt) {

        var Service_Package_Code = Ext.getCmp('ReceptionEntry-Service_Package_Code').getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Det.SERVICE_PACKAGE_CODE = " + Service_Package_Code;

    }, this);

    //ServiceItem_Code.on('rowclick', function (Grid, rowIndex, e) {
    //    var record = Grid.store.getAt(rowIndex);
    //    ReceptionEntryDet.SelectedRecord = record;
    //}, this);

    //ServiceItem_Code.on('beforeedit', function (e) {
    //    var record = e.record;
    //    ReceptionEntryDet.SelectedRecord = record;
    //}, this);


    StatusCode.on('select', function (combo, record, index) {

        var ReceptionEntryNo = Ext.getCmp('ReceptionEntry-ReceptionEntryNo');
        ReceptionEntryNo.setValue(null);

    }, this);


    StatusCode.on('select', function (combo, record, index) {
        var StatusCode = Ext.getCmp('ReceptionEntry-StatusCode');
        if (!form.isView) {
            StatusCode.setComboValue(0);
            StatusCode.disable();
        }
    }, this);


    StatusCode.on('select', function (combo, record, index) {

        var ReceptionEntryNo = Ext.getCmp('ReceptionEntry-ReceptionEntryNo');
        if (ReceptionEntryNo != 0)
            StatusCode.enable();
    }, this);


    Service_Package_Code.on('select', function (combo, record, index) {

        var ReceptionEntryNo = Ext.getCmp('ReceptionEntry-ReceptionEntryNo');
        ReceptionEntryNo.setValue(null);

    }, this);
}


function Vendor(form, login) {
    var StatusCode = Ext.getCmp('Vendor-StatusCode');
    StatusCode.on('select', function (combo, record, index) {
        var StatusCode = Ext.getCmp('Vendor-StatusCode').getValue();
        if (StatusCode == 0) {
            Type_Code.enable();
        }
        else {
            Type_Code.disable();
            Type_Code.clearValue();
        }
    }, this);
}



function CustomerMessage(form, login) {

}
function CustomerMessageSearchHandler(Button, Option) {
    var FilterQry = '';

    var Customer_Number = Ext.getCmp('CustomerMessage-Customer_Number');
    if (Customer_Number.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " cm.Customer_Number ='" + Customer_Number.getValue() + "' ";
        else
            FilterQry += " and cm.Customer_Number ='" + Customer_Number.getValue() + "' ";
    }

    var Customer_Name = Ext.getCmp('CustomerMessage-Customer_Name');


    if (Customer_Name.getValue() != '' && Customer_Name.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(cm.Customer_Name) like upper ('%" + Customer_Name.getValue() + "%')");
        else
            FilterQry += (" and upper(cm.Customer_Name) like upper ('%" + Customer_Name.getValue() + "%')");
    }

    var CustomerTypeCode = Ext.getCmp('CustomerMessage-CustomerTypeCode');
    if (CustomerTypeCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " Cust.CUSTOMER_TYPE_CODE =" + CustomerTypeCode.getValue();
        else
            FilterQry += " and  Cust.CUSTOMER_TYPE_CODE=" + CustomerTypeCode.getValue();
    }

    var CustomerGroupCode = Ext.getCmp('CustomerMessage-CustomerGroupCode');
    if (CustomerGroupCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " cm.CUSTOMERGROUP_CODE =" + CustomerGroupCode.getValue();
        else
            FilterQry += " and  cm.CUSTOMERGROUP_CODE=" + CustomerGroupCode.getValue();
    }

    var PaymentTermsCode = Ext.getCmp('CustomerMessage-PaymentTermsCode');
    if (PaymentTermsCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += " cm.PAYMENT_TERMS =" + PaymentTermsCode.getValue();
        else
            FilterQry += " and  cm.PAYMENT_TERMS =" + PaymentTermsCode.getValue();
    }

    var PersonIdCode = Ext.getCmp('CustomerMessage-PersonIdCode');
    if (PersonIdCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "  cm.PERSON_ID =" + PersonIdCode.getValue();
        else
            FilterQry += " and   cm.PERSON_ID =" + PersonIdCode.getValue();
    }



    DetailStore = Ext.getCmp('CustomerMessageDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.CustomerMessageDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}


function CustomerMessageClearHandler(Button, Option) {
    var Customer_Number = Ext.getCmp('CustomerMessage-Customer_Number').setValue(null);
    var Customer_Name = Ext.getCmp('CustomerMessage-Customer_Name').setValue(null);
    var CustomerTypeCode = Ext.getCmp('CustomerMessage-CustomerTypeCode').clearValue();
    var CustomerGroupCode = Ext.getCmp('CustomerMessage-CustomerGroupCode').clearValue();
    var PaymentTermsCode = Ext.getCmp('CustomerMessage-PaymentTermsCode').clearValue();
    var PersonIdCode = Ext.getCmp('CustomerMessage-PersonIdCode').clearValue();


    var FilterQry1 = '';

    DetailStore = Ext.getCmp('CustomerMessageDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.CRM.CustomerMessageDetail&filter=" + FilterQry1;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function CustomberPostHandler(form, login) {
    var PrimKey = Ext.getCmp('Customber').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'CustomerPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CustomerPostComplete, this);
}

function CustomerPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CustomerPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CUSTOMBER_editform').close();
    }
}


function LoadStudentsHandlers(button, options) {

    showMask();

    var SubjectCode = Ext.getCmp('BulkStudentCourse-SubjCode').getValue();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadStudentsSubjects',
            SubjCode: SubjectCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadStudentsSubjectsComplete, this);
}

function LoadStudentsSubjectsComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadStudentsSubjectsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {

        if (responseText.totalCount == 0) {
            Ext.MessageBox.alert(login.modulename, 'All students Registered for the Selected subject !');
            return;
        }
        //to clear  the grid
        var grdFunctionality = Ext.getCmp('BulkStudentDetailCourseList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();
        //end


        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            EmpRecord = responseText.datum[cnt];

            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                StudentCode: EmpRecord.ID,
                StudentName: EmpRecord.Student_Number,
                Student_Name: EmpRecord.Student_Name,
                CompanyCode: login.CompanyCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        }

    }
}


function ELearningStudentPosts(button, options) {

    var SubjectCode = Ext.getCmp('BulkStudentCourse-SubjCode').getValue();
    var TeacherCode = Ext.getCmp('BulkStudentCourse-TeacherCode').getValue();
    var RoomCode = Ext.getCmp('BulkStudentCourse-ClassroomCode').getValue();
    var StudentCode = '';

    var BulkStudentDetailCourseList = Ext.getCmp('BulkStudentDetailCourseList');
    var count = BulkStudentDetailCourseList.store.getCount();
    for (var cnt = 0; cnt < count; cnt++) {
        var record = BulkStudentDetailCourseList.store.getAt(cnt);
        if (!record.data.selec) continue;
        if (record.data.selec == true)
            StudentCode += (record.get('StudentCode') + ',');

    }

    if (StudentCode != '') StudentCode = StudentCode.substring(0, StudentCode.length - 1);


    showMask();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ELearningStudentPost',
            StudCode: StudentCode,
            SubjCode: SubjectCode,
            TeacherCode: TeacherCode,
            RoomCode: RoomCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ELearningStudentPostComplete, this);
}


function ELearningStudentPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ELearningStudentPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').un('beforeclose', Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').scope.closeWindow, Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').scope);
        Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').on('close', Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').scope.afterCloseWind, Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').scope);
        Ext.getCmp('ID_EBULKSTUDENTCOURSEREG').close();

    }
}

function BulkStudentCourse(form, login) {

    var SubjectCode = Ext.getCmp('BulkStudentCourse-SubjCode');

    var TeacherCode = Ext.getCmp('BulkStudentCourse-TeacherCode');
    var RoomCode = Ext.getCmp('BulkStudentCourse-ClassroomCode');
    if (TeacherCode) TeacherCode.on('beforequery', function (evt) {
        var SubjCode = SubjectCode.editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "cmt.Cms_Teacher_Code in (Select cmtd.Cms_Teacher_Code from CMS_TEACHERSUBJECTDTL cmtd where cmtd.SubjectCode=" + SubjCode + ")";
    }, this);

    if (RoomCode) RoomCode.on('beforequery', function (evt) {
        var TeachCode = TeacherCode.editValue;
        var SubjCode = SubjectCode.editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "LookUpDetailCode in (Select cmtd.ClassRoom from CMS_TEACHERSUBJECTDTL cmtd where cmtd.SubjectCode=" + SubjCode + " and cmtd.Cms_Teacher_Code = " + TeachCode + ")";
    }, this);
}


function LfmsCaseSessions(form, login) {

    var Cases_Code = Ext.getCmp('LfmsCaseSessions-Cases_Code');
    var JudgeCode = Ext.getCmp('LfmsCaseSessionJudgeDtl-JudgeCode');
    var CustomerCode = Ext.getCmp('LfmsCaseSessionOurAttenDtl-CustomerCode');
    var OpponentCode = Ext.getCmp('LfmsCaseSessionOpponentAttenDtl-OpponentCode');
    var LawyerCode = Ext.getCmp('LfmsCaseSessions-LawyerCode');
    var RemarksCode = Ext.getCmp('LfmsCaseSessions-RemarksCode');

    if (RemarksCode) RemarksCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "Lookupcode=139 and Active=1";
    }, this);

    if (Cases_Code) Cases_Code.on('select', function (combo, record, index) {
        RemarksCode.clearValue();
    }, this);

    if (LawyerCode) LawyerCode.on('beforequery', function (evt) {
        var Cases_Code = Ext.getCmp('LfmsCaseSessions-Cases_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "lcl.CASESLAWYERDTLCODE in (select CASESLAWYERDTLCODE from LFMS_CASESLAWYERDTL where LFMS_CASE_CODE =" + Cases_Code + ")";
    }, this);

    if (JudgeCode) JudgeCode.on('beforequery', function (evt) {
        var Cases_Code = Ext.getCmp('LfmsCaseSessions-Cases_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "lcj.CASESJUDGEDTLCODE in (select CASESJUDGEDTLCODE from LFMS_CASESJUDGEDTL where LFMS_CASE_CODE =" + Cases_Code + ")";
    }, this);

    if (CustomerCode) CustomerCode.on('beforequery', function (evt) {
        var Cases_Code = Ext.getCmp('LfmsCaseSessions-Cases_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "sdtl.CASESCUSTOMERDTLCODE in (select CASESCUSTOMERDTLCODE from LFMS_CASESCUSTOMERDTL where LFMS_CASE_CODE =" + Cases_Code + ")";
    }, this);

    if (OpponentCode) OpponentCode.on('beforequery', function (evt) {
        var Cases_Code = Ext.getCmp('LfmsCaseSessions-Cases_Code').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "lco.CASESOPPONENTDTLCODE in (select CASESOPPONENTDTLCODE from LFMS_CASESOPPONENTDTL where LFMS_CASE_CODE =" + Cases_Code + ")";
    }, this);

    if (!form.isView) {

        Ext.getCmp('LfmsCaseSessions-StatusCode').setComboValue(0);
        Ext.getCmp('LfmsCaseSessions-StatusCode').disable();
    }


}

function LfmsCaseSessionsPost(form, login) {
    var PrimKey = Ext.getCmp('LfmsCaseSessions').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LfmsCaseSessionsnPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LfmsCaseSessionsPostComplete, this);
}
function LfmsCaseSessionsPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LfmsCaseSessionsPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CASESESSIONS_editform').close();
    }

}

//Cases


function LfmsCases(form, login) {

    if (!form.isView) {

        Ext.getCmp('LfmsCases-StatusCode').setComboValue(0);
        Ext.getCmp('LfmsCases-StatusCode').disable();

    }

    if (form.selectedIndex != -1 && !form.isView) {

        Ext.getCmp('LfmsCases-CurrentCaseStatusCode').disable();

    }
    Ext.getCmp('LfmsCaseAllDocDetailList').on('beforeview', function (record) {
        //"data/LawFirm/Casesdoc/UploadedDocument"
        var uploadUrl = '';
        if (record.get('type') == 1)//CaseDocuemnt
            uploadUrl = "data/LawFirm/LfmsCases/UploadedDocument";
        else if (record.get('type') == 2)//CaseSession
            uploadUrl = "data/LawFirm/LfmsCaseSession/UploadedDocument";

        Ext.getCmp('LfmsCaseAllDocDetailList').uploadRefUrl = (uploadUrl + '/' + record.get('refdoccol') + '/' + record.get(Ext.getCmp('LfmsCaseAllDocDetailList').DocumentName));
    }, this);
}

function LfmsCasesPost(form, login) {
    var PrimKey = Ext.getCmp('LfmsCases').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LfmsCasesPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LfmsCasesPostComplete, this);
}

function LfmsCasesPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LfmsCasesPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CASE_editform').close();
    }

}


function LfmsSMSEmailSend(form, login) {

    if (login.languagecode == 'en-US') {

        Ext.getCmp('LfmsSMSEmailSend-Message').maxLength = 160;
    }
    else {

        Ext.getCmp('LfmsSMSEmailSend-Message').maxLength = 70;
    }
}

function SMSEmailsendCloseButtonHdlr(form, login) {
    Ext.getCmp('ID_SMSANDEMAILSEND').close();
}

function SMSEmailCustomerSearch(form, login) {

    var FilterQry = '';

    var CustomerCode = Ext.getCmp('LfmsSMSEmailSend-CustomerCode');
    var Customer_Name = Ext.getCmp('LfmsSMSEmailSend-Customer_Name');
    var AlternateCustomer_Name = Ext.getCmp('LfmsSMSEmailSend-AlternateCustomer_Name');
    var CustomerStatusCode = Ext.getCmp('LfmsSMSEmailSend-CustomerStatusCode');
    var Customer_TypeCode = Ext.getCmp('LfmsSMSEmailSend-Customer_TypeCode');
    var CategoryCode = Ext.getCmp('LfmsSMSEmailSend-CategoryCode');
    var CountryCode = Ext.getCmp('LfmsSMSEmailSend-CountryCode');
    var ProvinceCode = Ext.getCmp('LfmsSMSEmailSend-ProvinceCode');
    var Mobile = Ext.getCmp('LfmsSMSEmailSend-Mobile');
    var Email = Ext.getCmp('LfmsSMSEmailSend-Email');

    if (CustomerCode.getValue().toString() != '' && CustomerCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lcus.LFMS_CUSTOMERS_CODE=" + CustomerCode.getValue();
        else
            FilterQry += " and lcus.LFMS_CUSTOMERS_CODE=" + CustomerStatusCode.getValue();
    }


    if (CustomerStatusCode.getValue().toString() != '' && CustomerStatusCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN1.CONSTANTVALUE=" + CustomerStatusCode.getValue();
        else
            FilterQry += " and GEN1.CONSTANTVALUE=" + CustomerStatusCode.getValue();
    }

    if (Customer_TypeCode.getValue().toString() != '' && Customer_TypeCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN.CONSTANTVALUE=" + Customer_TypeCode.getValue();
        else
            FilterQry += " and GEN.CONSTANTVALUE=" + Customer_TypeCode.getValue();
    }
    if (CategoryCode.getValue().toString() != '' && CategoryCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += "  GEN2.CONSTANTVALUE=" + CategoryCode.getValue();
        else
            FilterQry += " and  GEN2.CONSTANTVALUE=" + CategoryCode.getValue();
    }
    if (CountryCode.getValue().toString() != '' && CountryCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += "  GC.COUNTRYCODE=" + CountryCode.getValue();
        else
            FilterQry += " and  GC.COUNTRYCODE=" + CountryCode.getValue();
    }

    if (ProvinceCode.getValue().toString() != '' && ProvinceCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += "  GP.PROVINCECODE=" + ProvinceCode.getValue();
        else
            FilterQry += " and GP.PROVINCECODE=" + ProvinceCode.getValue();
    }

    if (Mobile.getValue() != 0 && Mobile.getValue() != null) {
        if (FilterQry == '')

            FilterQry += (" lcus.MOBILENO1 =" + Mobile.getValue());
        else
            FilterQry += ("and  lcus.MOBILENO1 =" + Mobile.getValue());
    }

    if (Email.getValue() != 0 && Email.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(lcus.EMAIL) like upper ('%" + Email.getValue() + "%')");
        else
            FilterQry += ("and upper(lcus.EMAIL) like upper ('%" + Email.getValue() + "%')");
    }


    DetailStore = Ext.getCmp('LfmsSMSEmailSendDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailSendDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}

function SMSEmailCustomerClear(form, login) {

    var CustomerCode = Ext.getCmp('LfmsSMSEmailSend-CustomerCode').clearValue();
    var Customer_Name = Ext.getCmp('LfmsSMSEmailSend-Customer_Name').setValue(null);
    var AlternateCustomer_Name = Ext.getCmp('LfmsSMSEmailSend-AlternateCustomer_Name').setValue(null);
    var CustomerStatusCode = Ext.getCmp('LfmsSMSEmailSend-CustomerStatusCode').clearValue();
    var Customer_TypeCode = Ext.getCmp('LfmsSMSEmailSend-Customer_TypeCode').clearValue();
    var CategoryCode = Ext.getCmp('LfmsSMSEmailSend-CategoryCode').clearValue();
    var CountryCode = Ext.getCmp('LfmsSMSEmailSend-CountryCode').clearValue();
    var ProvinceCode = Ext.getCmp('LfmsSMSEmailSend-ProvinceCode').clearValue();
    var Mobile = Ext.getCmp('LfmsSMSEmailSend-Mobile').setValue(null);
    var Email = Ext.getCmp('LfmsSMSEmailSend-Email').setValue(null);


    var FilterQry = '';

    DetailStore = Ext.getCmp('LfmsSMSEmailSendDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailSendDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function SMSEmailOpponentSearch(form, login) {

    var FilterQry = '';
    var OpponentCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCode');
    //var Opponent_Name = Ext.getCmp('LfmsSMSEmailSend-Opponent_Name');
    //var AlternateCustomer_Name = Ext.getCmp('LfmsSMSEmailSend-AlternateCustomer_Name');
    var Opponent_TypeCode = Ext.getCmp('LfmsSMSEmailSend-Opponent_TypeCode');
    var OpponentCountryCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCountryCode');
    var OpponentProvinceCode = Ext.getCmp('LfmsSMSEmailSend-OpponentProvinceCode');
    var OpponentCustomerStatusCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCustomerStatusCode');
    var OpponentEMail = Ext.getCmp('LfmsSMSEmailSend-OpponentEMail');
    var OpponentMobileNo1 = Ext.getCmp('LfmsSMSEmailSend-OpponentMobileNo1');



    if (OpponentCode.getValue().toString() != '' && OpponentCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " opp.LFMS_OPPONENTS_CODE=" + OpponentCode.getValue();
        else
            FilterQry += " and opp.LFMS_OPPONENTS_CODE=" + OpponentCode.getValue();

    }

    if (Opponent_TypeCode.getValue().toString() != '' && Opponent_TypeCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN.CONSTANTVALUE=" + Opponent_TypeCode.getValue();
        else
            FilterQry += " and GEN.CONSTANTVALUE=" + Opponent_TypeCode.getValue();

    }

    if (OpponentCountryCode.getValue().toString() != '' && OpponentCountryCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " COUN.COUNTRYCODE=" + OpponentCountryCode.getValue();
        else
            FilterQry += " and COUN.COUNTRYCODE=" + OpponentCountryCode.getValue();

    }

    if (OpponentProvinceCode.getValue().toString() != '' && OpponentProvinceCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " PROV.PROVINCECODE=" + OpponentProvinceCode.getValue();
        else
            FilterQry += " and PROV.PROVINCECODE=" + OpponentProvinceCode.getValue();

    }

    if (OpponentCustomerStatusCode.getValue().toString() != '' && OpponentCustomerStatusCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN1.CONSTANTVALUE=" + OpponentCustomerStatusCode.getValue();
        else
            FilterQry += " and GEN1.CONSTANTVALUE=" + OpponentCustomerStatusCode.getValue();

    }


    if (OpponentEMail.getValue() != 0 && OpponentEMail.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(opp.EMAIL) like upper ('%" + OpponentEMail.getValue() + "%')");
        else
            FilterQry += ("and upper(opp.EMAIL) like upper ('%" + OpponentEMail.getValue() + "%')");
    }

    if (OpponentMobileNo1.getValue().toString() != '') {
        if (FilterQry == '')
            FilterQry += " opp.MOBILENO1=" + OpponentMobileNo1.getValue();
        else
            FilterQry += " and opp.MOBILENO1=" + OpponentMobileNo1.getValue();
    }


    DetailStore = Ext.getCmp('LfmsSMSEmailOpponentdtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailOpponentdtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}

function SMSEmailOpponentClear(form, login) {

    var OpponentCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCode').clearValue();
    var Opponent_Name = Ext.getCmp('LfmsSMSEmailSend-Opponent_Name').setValue(null);
    var AlternateOpponent_Name = Ext.getCmp('LfmsSMSEmailSend-AlternateOpponent_Name').setValue(null);
    var Opponent_TypeCode = Ext.getCmp('LfmsSMSEmailSend-Opponent_TypeCode').clearValue();
    var OpponentCountryCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCountryCode').clearValue();
    var OpponentProvinceCode = Ext.getCmp('LfmsSMSEmailSend-OpponentProvinceCode').clearValue();
    var OpponentCustomerStatusCode = Ext.getCmp('LfmsSMSEmailSend-OpponentCustomerStatusCode').clearValue();
    var OpponentEMail = Ext.getCmp('LfmsSMSEmailSend-OpponentEMail').setValue(null);
    var OpponentMobileNo1 = Ext.getCmp('LfmsSMSEmailSend-OpponentMobileNo1').setValue(null);


    var FilterQry = '';

    DetailStore = Ext.getCmp('LfmsSMSEmailOpponentdtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailOpponentdtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}

function SMSEmailLawyerSearch(form, login) {


    var LawyerCode = Ext.getCmp('LfmsSMSEmailSend-LawyerCode');
    var LawyerName = Ext.getCmp('LfmsSMSEmailSend-LawyerName');
    var AlternateCustomer_Name = Ext.getCmp('LfmsSMSEmailSend-AlternateCustomer_Name');
    var Judgespecialty = Ext.getCmp('LfmsSMSEmailSend-Judgespecialty');
    var LawyerMobileno = Ext.getCmp('LfmsSMSEmailSend-LawyerMobileno');
    var LawyerEmail = Ext.getCmp('LfmsSMSEmailSend-LawyerEmail');
    var JudgeStatusCode = Ext.getCmp('LfmsSMSEmailSend-JudgeStatusCode');

    var FilterQry = '';


    if (LawyerCode.getValue().toString() != '' && LawyerCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " llw.LFMS_LAWYERS_CODE=" + LawyerCode.getValue();
        else
            FilterQry += " and llw.LFMS_LAWYERS_CODE=" + LawyerCode.getValue();

    }

    if (Judgespecialty.getValue() != 0 && Judgespecialty.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(llw.JUDGESPECIALTY) like upper ('%" + Judgespecialty.getValue() + "%')");
        else
            FilterQry += ("and upper(llw.JUDGESPECIALTY) like upper ('%" + Judgespecialty.getValue() + "%')");
    }

    if (LawyerMobileno.getValue().toString() != '') {
        if (FilterQry == '')
            FilterQry += " llw.MOBILENO=" + LawyerMobileno.getValue();
        else
            FilterQry += " and llw.MOBILENO=" + LawyerMobileno.getValue();
    }

    if (LawyerEmail.getValue() != 0 && LawyerEmail.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(llw.EMAIL) like upper ('%" + LawyerEmail.getValue() + "%')");
        else
            FilterQry += ("and upper(llw.EMAIL) like upper ('%" + LawyerEmail.getValue() + "%')");
    }

    if (JudgeStatusCode.getValue().toString() != '' && JudgeStatusCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN.CONSTANTVALUE=" + JudgeStatusCode.getValue();
        else
            FilterQry += " and GEN.CONSTANTVALUE=" + JudgeStatusCode.getValue();

    }

    DetailStore = Ext.getCmp('LfmsSMSEmailLawyersdtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailLawyersdtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}

function SMSEmailLawyerClear(form, login) {

    var LawyerCode = Ext.getCmp('LfmsSMSEmailSend-LawyerCode').clearValue();
    var Lawyer_Name = Ext.getCmp('LfmsSMSEmailSend-Lawyer_Name').setValue(null);
    var Alternativelawyer_Name = Ext.getCmp('LfmsSMSEmailSend-Alternativelawyer_Name').setValue(null);
    var Judgespecialty = Ext.getCmp('LfmsSMSEmailSend-Judgespecialty').setValue(null);
    var LawyerMobileno = Ext.getCmp('LfmsSMSEmailSend-LawyerMobileno').setValue(null);
    var LawyerEmail = Ext.getCmp('LfmsSMSEmailSend-LawyerEmail').setValue(null);
    var JudgeStatusCode = Ext.getCmp('LfmsSMSEmailSend-JudgeStatusCode').clearValue();

    var FilterQry = '';

    DetailStore = Ext.getCmp('LfmsSMSEmailLawyersdtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsSMSEmailLawyersdtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }


}



function SMSEmailSendButtonHdlr(form, login) {

    var GroupSMSEmailSendGrid = Ext.getCmp('LfmsSMSEmailGroupDetailList');
    var LfmsSMSEmailSendGrid = Ext.getCmp('LfmsSMSEmailSendDtlList');
    var LfmsSMSEmailOpponentGrid = Ext.getCmp('LfmsSMSEmailOpponentdtlList');
    var LfmsSMSEmailLawyersGrid = Ext.getCmp('LfmsSMSEmailLawyersdtlList');
    var SendEmail = Ext.getCmp('LfmsSMSEmailSend-SendEmail').getValue();
    var SendSMS = Ext.getCmp('LfmsSMSEmailSend-SendSMS').getValue();
    var LfmsMessage = Ext.getCmp('LfmsSMSEmailSend-Message').getValue();
    var Subject = Ext.getCmp('LfmsSMSEmailSend-Subject').getValue();

    if (SendSMS == 0 && SendEmail == 0) {

        Ext.MessageBox.alert(login.modulename, 'Atleast Select One Mode for Communication, Either SMS or EMail !');
        return;
    }

    // Group Sms/Email

    var GroupDetailsRecords = [];


    for (Cnt = 0; Cnt < GroupSMSEmailSendGrid.store.modified.length; Cnt++) {

        if (GroupSMSEmailSendGrid.store.modified[Cnt].get('Selectt') == true) {
            GroupDetailsRecords.push(Ext.encode(GroupSMSEmailSendGrid.store.modified[Cnt].data));
        }
    }
    var GroupDetailsRecordsRow = '[' + GroupDetailsRecords.join(',') + ']';



    //customer

    var CustomerDetailsRecords = [];


    for (Cnt = 0; Cnt < LfmsSMSEmailSendGrid.store.modified.length; Cnt++) {

        if (LfmsSMSEmailSendGrid.store.modified[Cnt].get('Selectt') == true) {
            CustomerDetailsRecords.push(Ext.encode(LfmsSMSEmailSendGrid.store.modified[Cnt].data));
        }
    }
    var CustomerDetailsRecordsRow = '[' + CustomerDetailsRecords.join(',') + ']';

    //opponent

    var LfmsSMSEmailOpponentRecords = [];

    for (Cnt = 0; Cnt < LfmsSMSEmailOpponentGrid.store.modified.length; Cnt++) {

        if (LfmsSMSEmailOpponentGrid.store.modified[Cnt].get('Selectt') == true) {
            LfmsSMSEmailOpponentRecords.push(Ext.encode(LfmsSMSEmailOpponentGrid.store.modified[Cnt].data));
        }
    }
    var LfmsSMSEmailOpponentRecordsRow = '[' + LfmsSMSEmailOpponentRecords.join(',') + ']';

    // Lawyer

    var LfmsSMSEmailLawyersRecords = [];

    for (Cnt = 0; Cnt < LfmsSMSEmailLawyersGrid.store.modified.length; Cnt++) {

        if (LfmsSMSEmailLawyersGrid.store.modified[Cnt].get('Selectt') == true) {
            LfmsSMSEmailLawyersRecords.push(Ext.encode(LfmsSMSEmailLawyersGrid.store.modified[Cnt].data));
        }
    }
    var LfmsSMSEmailLawyersRecordsRow = '[' + LfmsSMSEmailLawyersRecords.join(',') + ']';



    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'SMSEmailSend',
            GroupDetailsRecordsRow: GroupDetailsRecordsRow,
            CustomerDetailsRecordsRow: CustomerDetailsRecordsRow,
            LfmsSMSEmailOpponentRecordsRow: LfmsSMSEmailOpponentRecordsRow,
            LfmsSMSEmailLawyersRecordsRow: LfmsSMSEmailLawyersRecordsRow,
            SendEmail: SendEmail,
            SendSMS: SendSMS,
            LfmsMessage: LfmsMessage,
            Subject: Subject
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', SMSEmailRequestComplete, this);

}
function SMSEmailRequestComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', SMSEmailRequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }

}



function LfmsCaseSearch(form, login) {


}


function LfmsCaseSearchHdlr(button, option) {


    var FilterQry = '';

    var Cases_Number = Ext.getCmp('LfmsCaseSearch-Case_Number');
    var CaseTypes_Code = Ext.getCmp('LfmsCaseSearch-CaseTypes_Code');
    var CaseSubject = Ext.getCmp('LfmsCaseSearch-CaseSubject');
    var CaseLevelCode = Ext.getCmp('LfmsCaseSearch-CaseLevelCode');
    var CaseStartDate = Ext.getCmp('LfmsCaseSearch-CaseStartDate');
    var NextSessionDate = Ext.getCmp('LfmsCaseSearch-NextSessionDate');
    var Customers_Code = Ext.getCmp('LfmsCaseSearch-Customers_Code');
    var Lawyers_Code = Ext.getCmp('LfmsCaseSearch-Lawyers_Code');
    var Judge_Code = Ext.getCmp('LfmsCaseSearch-Judge_Code');
    var Opponents_Code = Ext.getCmp('LfmsCaseSearch-Opponents_Code');
    var Courts_Code = Ext.getCmp('LfmsCaseSearch-Courts_Code');
    var Court_SectionCode = Ext.getCmp('LfmsCaseSearch-Court_SectionCode');
    var ChamberNo = Ext.getCmp('LfmsCaseSearch-ChamberNo');
    var CurrentCaseStatusCode = Ext.getCmp('LfmsCaseSearch-CurrentCaseStatusCode');


    if (Cases_Number.getValue() != 0 && Cases_Number.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("lc.Case_Number ='" + Cases_Number.getValue() + "'");
        else
            FilterQry += ("and lc.Case_Number='" + Cases_Number.getValue() + "'");
    }


    if (CaseTypes_Code.getValue().toString() != '' && CaseTypes_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lct.LFMS_CASETYPES_CODE=" + CaseTypes_Code.getValue();
        else
            FilterQry += " and lct.LFMS_CASETYPES_CODE=" + CaseTypes_Code.getValue();
    }

    if (CaseSubject.getValue() != 0 && CaseSubject.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("upper(lc.CASESUBJECT) like upper ('%" + CaseSubject.getValue() + "%')");
        else
            FilterQry += ("and upper(lc.CASESUBJECT) like upper ('%" + CaseSubject.getValue() + "%')");
    }


    if (CaseLevelCode.getValue().toString() != '' && CaseLevelCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN2.CONSTANTVALUE=" + CaseLevelCode.getValue();
        else
            FilterQry += " and GEN2.CONSTANTVALUE=" + CaseLevelCode.getValue();
    }

    if (Courts_Code.getValue().toString() != '' && Courts_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " COU.LFMS_COURTS_CODE=" + Courts_Code.getValue();
        else
            FilterQry += " and COU.LFMS_COURTS_CODE=" + Courts_Code.getValue();
    }

    if (Court_SectionCode.getValue().toString() != '' && Court_SectionCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN.CONSTANTVALUE=" + Court_SectionCode.getValue();
        else
            FilterQry += " and GEN.CONSTANTVALUE=" + Court_SectionCode.getValue();
    }

    if (CurrentCaseStatusCode.getValue().toString() != '' && CurrentCaseStatusCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " GEN1.CONSTANTVALUE=" + CurrentCaseStatusCode.getValue();
        else
            FilterQry += " and GEN1.CONSTANTVALUE=" + CurrentCaseStatusCode.getValue();
    }

    if (CaseStartDate.getValue() != '' && CaseStartDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " lc.CASESTARTDATE = TO_DATE('" + CaseStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and lc.CASESTARTDATE = TO_DATE('" + CaseStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }

    if (NextSessionDate.getValue() != '' && NextSessionDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " lc.NEXTSESSIONDATE = TO_DATE('" + NextSessionDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and lc.NEXTSESSIONDATE = TO_DATE('" + NextSessionDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }

    if (ChamberNo.getValue() != 0 && ChamberNo.getValue() != null) {
        if (FilterQry == '')
            FilterQry += ("lc.CHAMBERNO =" + ChamberNo.getValue());
        else
            FilterQry += ("and lc.CHAMBERNO=" + ChamberNo.getValue());
    }

    if (Customers_Code.getValue().toString() != '' && Customers_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESCUSTOMERDTL dtl where dtl.CASECUSTOMERCODE = " + Customers_Code.getValue() + ")";
        else
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESCUSTOMERDTL dtl where dtl.CASECUSTOMERCODE = " + Customers_Code.getValue() + ")";
    }

    if (Lawyers_Code.getValue().toString() != '' && Lawyers_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESLAWYERDTL dtl where dtl.LAWYERCODE = " + Lawyers_Code.getValue() + ")";
        else
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESLAWYERDTL dtl where dtl.LAWYERCODE = " + Lawyers_Code.getValue() + ")";
    }

    if (Judge_Code.getValue().toString() != '' && Judge_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESJUDGEDTL dtl where dtl.LFMS_JUDGE_CODE = " + Judge_Code.getValue() + ")";
        else
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESJUDGEDTL dtl where dtl.LFMS_JUDGE_CODE = " + Judge_Code.getValue() + ")";
    }

    if (Opponents_Code.getValue().toString() != '' && Opponents_Code.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESOPPONENTDTL dtl where dtl.CASEOPPONENTCODE = " + Opponents_Code.getValue() + ")";
        else
            FilterQry += " lc.LFMS_CASE_CODE in (select LFMS_CASE_CODE from LFMS_CASESOPPONENTDTL dtl where dtl.CASEOPPONENTCODE = " + Opponents_Code.getValue() + ")";
    }

    DetailStore = Ext.getCmp('LfmsCaseSearchDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsCaseSearchDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function LfmsCaseClear(button, option) {

    var Case_Number = Ext.getCmp('LfmsCaseSearch-Case_Number').setValue(null);
    var CaseTypes_Code = Ext.getCmp('LfmsCaseSearch-CaseTypes_Code').clearValue();
    var CaseSubject = Ext.getCmp('LfmsCaseSearch-CaseSubject').setValue(null);
    var CaseLevelCode = Ext.getCmp('LfmsCaseSearch-CaseLevelCode').clearValue();
    var Customers_Code = Ext.getCmp('LfmsCaseSearch-Customers_Code').clearValue();
    var Lawyers_Code = Ext.getCmp('LfmsCaseSearch-Lawyers_Code').clearValue();
    var Judge_Code = Ext.getCmp('LfmsCaseSearch-Judge_Code').clearValue();
    var Opponents_Code = Ext.getCmp('LfmsCaseSearch-Opponents_Code').clearValue();
    var Courts_Code = Ext.getCmp('LfmsCaseSearch-Courts_Code').clearValue();
    var Court_SectionCode = Ext.getCmp('LfmsCaseSearch-Court_SectionCode').clearValue();
    var ChamberNo = Ext.getCmp('LfmsCaseSearch-ChamberNo').setValue(null);
    var CurrentCaseStatusCode = Ext.getCmp('LfmsCaseSearch-CurrentCaseStatusCode').clearValue();
    var CaseStartDate = Ext.getCmp('LfmsCaseSearch-CaseStartDate').setValue(null);
    var NextSessionDate = Ext.getCmp('LfmsCaseSearch-NextSessionDate').setValue(null);


    var FilterQry = '';


    DetailStore = Ext.getCmp('LfmsCaseSearchDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.LawFirm.LfmsCaseSearchDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}
//Open in New mode( PKey = -1)

function CreateCaseButtonHdlr(button, option) {

    var LfmsCaseSearchDtlList = Ext.getCmp('LfmsCaseSearchDtlList');
    var count = 0;
    for (var cnt = 0; cnt < LfmsCaseSearchDtlList.store.getCount() ; cnt++) {
        var LfmsCaseSearchDtl = LfmsCaseSearchDtlList.store.getAt(cnt);
        if (LfmsCaseSearchDtl.get('Selectt')) {
            count++;
        }
    }


    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.LawFirm.LfmsCases', Url = '/forms/LawFirm/LfmsCases.xml', PKey = -1, WidgetTitle = 'Cases';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}


//Open in Edit mode( PKey = PK and use EditTemplateOpen)
function EditCaseButtonHdlr(button, option) {


    var LfmsCaseSearchDtlList = Ext.getCmp('LfmsCaseSearchDtlList');
    var count = 0;
    for (var cnt = 0; cnt < LfmsCaseSearchDtlList.store.getCount() ; cnt++) {
        var LfmsCaseSearchDtl = LfmsCaseSearchDtlList.store.getAt(cnt);
        if (LfmsCaseSearchDtl.get('Selectt')) {
            count++;
        }
    }
    PrimKey = LfmsCaseSearchDtl.get('ID');
    if (count == 0) {
        Ext.MessageBox.alert(login.modulename, "Should Select atleast One Record !");
        return;
    }
    if (count > 1) {
        Ext.MessageBox.alert(login.modulename, "More Than One Record Cannot not be Selected !");
        return;
    }
    var EditCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.LawFirm.LfmsCases', Url = '/forms/LawFirm/LfmsCases.xml', PKey = PrimKey, WidgetTitle = 'Cases';
    EditCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

//Open in View mode( PKey = PK and use ViewTemplateOpen)
function ViewCaseButtonHdlr(button, option) {
    var LfmsCaseSearchDtlList = Ext.getCmp('LfmsCaseSearchDtlList');
    var count = 0;
    for (var cnt = 0; cnt < LfmsCaseSearchDtlList.store.getCount() ; cnt++) {
        var LfmsCaseSearchDtl = LfmsCaseSearchDtlList.store.getAt(cnt);
        if (LfmsCaseSearchDtl.get('Selectt')) {
            count++;
        }
    }
    PrimKey = LfmsCaseSearchDtl.get('ID');
    if (count == 0) {
        Ext.MessageBox.alert(login.modulename, "Should Select atleast One Record !");
        return;
    }
    if (count > 1) {
        Ext.MessageBox.alert(login.modulename, "More Than One Record Cannot not be Selected !");
        return;
    }
    var ViewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.LawFirm.LfmsCases', Url = '/forms/LawFirm/LfmsCases.xml', PKey = PrimKey, WidgetTitle = 'Cases';
    ViewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}



function LfmsCaseCloseButtonHdlr(button, option) {

    Ext.getCmp('ID_CASESEARCH').close();
}



function ProviderContact(form, login) {


    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('ProviderContact-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }

        var M1 = Ext.getCmp('ProviderContact-Mobile1');
        var M2 = Ext.getCmp('ProviderContact-Mobile2');
        var Em = Ext.getCmp('ProviderContact-EMail');

        var Name = Ext.getCmp('ProviderContact-Name');
        var AlternativeName = Ext.getCmp('ProviderContact-AlternativeName');


        if (Name) Name.on('change', function (field, newval, odlval) {
            AlternativeName.setValue(field.getValue());
        }, this);

        var IncludeInNotifications = Ext.getCmp('ProviderContact-IncludeInNotifications');
        if (!form.isView) {
            IncludeInNotifications.on('check', onIncludeInNotificationsCheck, this);
        }
    }
}




function onIncludeInNotificationsCheck(checkBox, checked) {
    var Mobile1 = Ext.getCmp('ProviderContact-Mobile1');
    var Mobile2 = Ext.getCmp('ProviderContact-Mobile2');
    var EMail = Ext.getCmp('ProviderContact-EMail');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Mobile2.allowBlank = false;
        Mobile2.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Mobile2.allowBlank = true;
        Mobile2.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}

function NGIBrokerContacts(form, login) {


    var M1 = Ext.getCmp('NGIBrokerContacts-Mobile');
    var Em = Ext.getCmp('NGIBrokerContacts-EMail');

    M1.clearInvalid();
    M1.allowBlank = true;
    Em.clearInvalid();
    Em.allowBlank = true;


    var IncludeInNotifications = Ext.getCmp('NGIBrokerContacts-IncludeInNotifications');
    if (!form.isView) {
        IncludeInNotifications.on('check', onIncludeInNotificationsCheckss, this);
    }
}


function onIncludeInNotificationsCheckss(checkBox, checked) {
    var Mobile1 = Ext.getCmp('NGIBrokerContacts-Mobile');
    var EMail = Ext.getCmp('NGIBrokerContacts-EMail');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}

function AgentBilling(form, login) {

    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            Ext.getCmp('AgentBilling-AgentIDCode').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('AgentBilling-AgentIDCode').disable();
            Ext.getCmp('AgentBilling-AgentName').setValue(isAdditinalInfoRecord.get('AgentName'));
            Ext.getCmp('AgentBilling-PinCode').setValue(isAdditinalInfoRecord.get('AgentPinCode'));
            Ext.getCmp('AgentBilling-CountryCode').setValue(isAdditinalInfoRecord.get('CountryName'));
            Ext.getCmp('AgentBilling-StateCode').setValue(isAdditinalInfoRecord.get('StateName'));
            Ext.getCmp('AgentBilling-CityCode').setValue(isAdditinalInfoRecord.get('CityName'));
        }
        if (form.selectedIndex == -1) {
            Ext.getCmp('AgentBilling-StateCode').disable();
            Ext.getCmp('AgentBilling-CityCode').disable();
        }
        var Country = Ext.getCmp('AgentBilling-CountryCode');
        if (Country) Country.on('select', function (combo, record, index) {
            Ext.getCmp('AgentBilling-StateCode').enable();
        }, this);
        var State = Ext.getCmp('AgentBilling-StateCode');
        if (State) State.on('select', function (combo, record, index) {
            Ext.getCmp('AgentBilling-CityCode').enable();
        }, this);
        if (State) State.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('AgentBilling-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
        }, this);
        var CityCode = Ext.getCmp('AgentBilling-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('AgentBilling-StateCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
        }, this);
    }
}

function AgentContacts(form, login) {


    var M1 = Ext.getCmp('AgentContacts-Mobile');
    var M2 = Ext.getCmp('AgentContacts-Phone');
    var Em = Ext.getCmp('AgentContacts-Email');

    M1.clearInvalid();
    M1.allowBlank = true;
    M2.clearInvalid();
    M2.allowBlank = true;
    Em.clearInvalid();
    Em.allowBlank = true;


    var IncludeInNotifications = Ext.getCmp('AgentContacts-IncludeInNotfication');
    if (!form.isView) {
        IncludeInNotifications.on('check', onIncludeInNotifications, this);
    }
    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {

            Ext.getCmp('AgentContacts-AgentIDCode').setComboValue(isAdditinalInfoValue);
            Ext.getCmp('AgentContacts-AgentIDCode').disable();
            Ext.getCmp('AgentContacts-AgentName').setValue(isAdditinalInfoRecord.get('AgentName'));
            Ext.getCmp('AgentContacts-Email').setValue(isAdditinalInfoRecord.get('AgentEmail'));
            Ext.getCmp('AgentContacts-Mobile').setValue(isAdditinalInfoRecord.get('MainMobile'));
            Ext.getCmp('AgentContacts-Phone').setValue(isAdditinalInfoRecord.get('WorkPhone'));
            Ext.getCmp('AgentContacts-Fax').setValue(isAdditinalInfoRecord.get('AgentFax'));
            Ext.getCmp('AgentContacts-Address').setValue(isAdditinalInfoRecord.get('AgentAddress'));

        }
    }
}
function onIncludeInNotifications(checkBox, checked) {
    var Mobile1 = Ext.getCmp('AgentContacts-Mobile');
    var Phone = Ext.getCmp('AgentContacts-Phone');
    var EMail = Ext.getCmp('AgentContacts-Email');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Phone.allowBlank = false;
        Phone.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Phone.allowBlank = true;
        Phone.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}


function ClincianProviderLink(form, login) {

    if (!form.isView) {
        var HasGovernmentLicense = Ext.getCmp('ClincianProviderLink-HasGovernmentLicense');
        var LicenceIDCode = Ext.getCmp('ClincianProviderLink-LicenceIDCode');
        var LicenceTypeCode = Ext.getCmp('ClincianProviderLink-LicenceTypeCode');
        if (HasGovernmentLicense.getValue()) {
            LicenceIDCode.enable(); LicenceTypeCode.enable();
        }
        else {
            LicenceIDCode.disable(); LicenceTypeCode.disable();
        }
        var HasGovernmentLicense = Ext.getCmp('ClincianProviderLink-HasGovernmentLicense');
        HasGovernmentLicense.on('check', onHasGovernmentLicenseCheck, this);

        if (LicenceTypeCode) LicenceTypeCode.on('select', function (combo, record, index) {
            LicenceIDCode.clearValue();
        }, this);

        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " LICENSE_TYPE in (select constantname from genconstant where CATEGORY='NGILICENCETYPE' and LANGUAGECODE='en-US' and CONSTANTVALUE=" + LicenceTypeCode.editValue + ")";
        }, this);

    }
}

function onHasGovernmentLicenseCheck(checkBox, checked) {
    var LicenceIDCode = Ext.getCmp('ClincianProviderLink-LicenceIDCode');
    var LicenceTypeCode = Ext.getCmp('ClincianProviderLink-LicenceTypeCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}


function GroupMasterContact(form, login) {


    var M1 = Ext.getCmp('GroupMasterContact-Mobile');
    var M2 = Ext.getCmp('GroupMasterContact-Phone');
    var Em = Ext.getCmp('GroupMasterContact-Email');

    M1.clearInvalid();
    M1.allowBlank = true;
    M2.clearInvalid();
    M2.allowBlank = true;
    Em.clearInvalid();
    Em.allowBlank = true;


    var IncludeInNotifications = Ext.getCmp('GroupMasterContact-IncludeInNotfication');
    if (!form.isView) {
        IncludeInNotifications.on('check', onGroupIncludeInNotificationsCheck, this);
    }
}


function onGroupIncludeInNotificationsCheck(checkBox, checked) {
    var Mobile1 = Ext.getCmp('GroupMasterContact-Mobile');
    var Phone = Ext.getCmp('GroupMasterContact-Phone');
    var EMail = Ext.getCmp('GroupMasterContact-Email');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Phone.allowBlank = false;
        Phone.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Phone.allowBlank = true;
        Phone.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}

function GroupMaster(form, login) {
    if (!form.isView) {
        var status = Ext.getCmp('GroupMaster-StatusCode');
        status.setComboValue(0);

        var CountryCode = Ext.getCmp('GroupBillingDetail-CountryCode');
        if (CountryCode) CountryCode.on('select', function (combo, record, index) {
            Ext.getCmp('GroupBillingDetail-StateCode').enable();
        }, this);
        var StateCode = Ext.getCmp('GroupBillingDetail-StateCode');
        if (StateCode) StateCode.on('select', function (combo, record, index) {
            Ext.getCmp('GroupBillingDetail-CityCode').enable();
        }, this);
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('GroupBillingDetail-CountryCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.COUNTRYCODE=" + CountryCode + "";
        }, this);
        var CityCode = Ext.getCmp('GroupBillingDetail-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('GroupBillingDetail-StateCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GP.PROVINCECODE=" + StateCode + "";
        }, this);
    }
}

function NGIMembersExclusion(form, login) {

    var VersionCode = Ext.getCmp('NGIMembersExclusion-VersionCode');
    var TypeCode = Ext.getCmp('NGIMembersExclusion-TypeCode');
    var DetailCode = Ext.getCmp('NGIMembersExclusion-DetailCode');

    if (TypeCode) TypeCode.on('select', function (combo, record, index) {
        VersionCode.clearValue();
        DetailCode.clearValue();
    }, this);

    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        DetailCode.clearValue();
    }, this);


    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        var TypeCode = Ext.getCmp('NGIMembersExclusion-TypeCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " itv.VERSIONCODE in (select  VERSIONCODE from IM_ACTIVITY_DETAILS where typecode=" + TypeCode + ")";
    }, this);



    if (DetailCode) DetailCode.on('beforequery', function (evt) {
        var VersionCod = Ext.getCmp('NGIMembersExclusion-VersionCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "DETAILCODE in(select DETAILCODE from IM_VERSION_DETALIS where versioncode=" + VersionCod + ")";
    }, this);

}

function NGIExclusionGroupMaster(form, login) {

    if (form.selectedIndex != -1 && !form.isView) {
        //Ext.getCmp('NGIExclusionGroupMasterDtlList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        //    Ext.getCmp('NGIExclusionGroupMaster-Description').setValue(Record.get('Description'));

        //}, this);
        Ext.getCmp('NGIExclusionGroupMasterDtlList').getSelectionModel().on('rowselect', onExclusionDtlSelect, this);
        Ext.getCmp('NGIExclusionGroupMasterDtlList').on('rowclick', function (grid, rowIndex, e) {
            var Record = grid.store.getAt(rowIndex);
            Ext.getCmp('NGIExclusionGroupMaster-Description').setValue(Record.get('Description'));
        }, this);
    }

    if (!form.isView) {
        if (form.selectedIndex == -1) {
            Ext.getCmp('NGIExclusionGroupMaster-StatusCode').setComboValue(0);
            Ext.getCmp('NGIExclusionGroupMaster-StatusCode').disable();
        }


        var VersionCode = Ext.getCmp('NGIExclusionGroupMasterDtl-VersionCode');
        var TypeCode = Ext.getCmp('NGIExclusionGroupMasterDtl-TypeCode');
        var DetailCode = Ext.getCmp('NGIExclusionGroupMasterDtl-DetailCode');

        if (VersionCode) VersionCode.on('beforequery', function (evt) {
            var TypeCode = Ext.getCmp('NGIExclusionGroupMasterDtl-TypeCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "VERSIONCODE in (Select versioncode from IM_TYPE_VERSIONS where versioncode in(select  VERSIONCODE from IM_ACTIVITY_DETAILS where typecode=" + TypeCode + "))";
        }, this);



        if (DetailCode) DetailCode.on('beforequery', function (evt) {
            var VersionCod = Ext.getCmp('NGIExclusionGroupMasterDtl-VersionCode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "DETAILCODE in(select DETAILCODE from IM_VERSION_DETALIS where versioncode=" + VersionCod + ")";
        }, this);

    }

}
function onExclusionDtlSelect(SelectionModel, rowIndex, Record) {
    Ext.getCmp('NGIExclusionGroupMaster-Description').setValue(Record.get('Description'));
}

function IFFCollectReceiptHandler(form, login) {

    var DelegateNoCode = Ext.getCmp('IFFCollectReceiptView-DelegateNoCode').getValue();
    var PaidAmount = Ext.getCmp('IFFCollectReceiptView-PaidAmount').getValue();

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'IFFCollectReceipt',
            DelegateNoCode: DelegateNoCode,
            PaidAmount: PaidAmount
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', IFFCollectReceiptComplete, this);
}

function IFFCollectReceiptComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IFFCollectReceiptComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function ClaimProcessRemarkButtonHandler() {

    var DotLine = '--------------------------------------------------------------------------------------------------------------------------------------------------';
    var Remarks = Ext.getCmp('Claims-Remarks');
    var Comments = Ext.getCmp('Claims-RemarksComments');
    var AddComment = Remarks.getValue();


    var Coment = AddComment + "\n" + login.UserName.toUpperCase() + " " + "[" + new Date().format(login.jsdateformat + " " + (login.TimeFormat == 'hh:mm:ss tt' ? 'h:i:s a' : (login.TimeFormat == 'hh:mm tt' ? 'h:i a' : 'H:i'))) + "]: \n" + Comments.getValue() + "\n" + DotLine;
    Remarks.setValue(Coment);

    Comments.setValue(null);
}



var ClaimProcessPrimKey = '';




function NGIClaimsSearch(form, login) {

}





var Provider = '', TariffTypeCode = '';

function PharmacyTariffUploadProvider(Button, Option) {

    var ProviderCode = Ext.getCmp('ProviderPharmacyTariff-ProviderCode').getValue();
    if (ProviderCode == '' || ProviderCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please select Provider first !');
        return true;
    }
    else
        Provider = ProviderCode;

    var UploadPharmacyTraiff = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Provider.UploadPharmacyTariff';
    var Url = '/forms/HumanResources/NGI/Provider/UploadPharmacyTariff.xml';
    var PKey = -1;
    var WidgetTitle = 'Upload Pharmacy Traiff';
    UploadPharmacyTraiff.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'PharmacyTariffImportData');
}

function MEPharmacyTariffUploadProvider(Button, Option) {

    var ProviderCode = Ext.getCmp('MEProviderPharmacyTariff-ProviderCode').getValue();
    if (ProviderCode == '' || ProviderCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please select Provider first !');
        return true;
    }
    else
        Provider = ProviderCode;

    var UploadPharmacyTraiff = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.MEUploadPharmacyTariff';
    var Url = '/forms/Medical/Network/MEUploadPharmacyTariff.xml';
    var PKey = -1;
    var WidgetTitle = 'Upload Pharmacy Traiff';
    UploadPharmacyTraiff.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'MEPharmacyTariffImportData');
}

function MEProviderPharmacyTariff(form, login) {

    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('MEProviderPharmacyTariff-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }
        var ProviderCode = Ext.getCmp('MEProviderPharmacyTariff-ProviderCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "Pro.PROVIDERTYPE=0";
        }, this);
    }
}

// Upload Pharmacy Tariff 
function MEUploadPharmacyTariff(form, login) {

    var UploadCode = Ext.getCmp('MEUploadPharmacyTariff-UploadCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_MEUPLOADPHARMACYTARIFF')";
    }, this);

}

function ProviderTariifUploadPriceHandler(form, login) {

    var ProviderCode = Ext.getCmp('ProviderTariff-ProviderCode').getValue();
    if (ProviderCode == '' || ProviderCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please select Provider first !');
        return true;
    }
    else
        Provider = ProviderCode;

    if (Ext.getCmp('ProviderTariff-PayerCode')) {// for Medical Module
        var PayerCode = Ext.getCmp('ProviderTariff-PayerCode').getValue();
        if (PayerCode == '' || PayerCode == null) {
            Ext.MessageBox.alert(login.modulename, 'Please select Payer first !');
            return true;
        }
    }



    TariffTypeCode = Ext.getCmp('ProviderTariff-TypeCode').getValue();

    var UploadProviderTraiff = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Provider.NGIUploadProviderTariff';
    var Url = '/forms/HumanResources/NGI/Provider/NGIUploadProviderTariff.xml';
    var PKey = -1;
    var WidgetTitle = 'Upload Provider Traiff';
    UploadProviderTraiff.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'ProviderTariffUploadExcelColumns');
}

function NGIUploadProviderTariff(form, login) {

    var UploadCode = Ext.getCmp('NGIUploadProviderTariff-UploadCode');
    var TypeCode = Ext.getCmp('NGIUploadProviderTariff-TypeCode');
    var VersionCode = Ext.getCmp('NGIUploadProviderTariff-VersionCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_NGIUPLOADPROVIDERTARIFF')";
    }, this);
    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "TYPECODE=" + TypeCode.editValue + "";
    }, this);
    if (!form.isView) {
        var ProviderCode = Ext.getCmp('NGIUploadProviderTariff-ProviderCode');
        var UploadTypeCode = Ext.getCmp('NGIUploadProviderTariff-TypeCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Pro.PROVIDERTYPE not in (2) ";
        }, this);

        if (Provider != null || Provider != '') {
            ProviderCode.setComboValue(Provider);
        }
        if (TariffTypeCode != null || TariffTypeCode != '') {
            UploadTypeCode.setComboValue(TariffTypeCode);
        }
        Provider = '';
    }
}



function MedProviderVieworDownload(form, login) {
    var ClassName = 'SBS.Business.Objects.Medical.Network.ProviderTraiff.MEDUploadProviderTariff';
    var Primary = Ext.getCmp('MEDUploadProviderTariff').selectedIndex;

    var FileName = Ext.getCmp('MEDUploadProviderTariff-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderTraiffVieworDownloadreqComplete, this);
}

function ProviderTraiffVieworDownload(form, login) {
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Provider.NGIUploadProviderTariff';
    var Primary = Ext.getCmp('NGIUploadProviderTariff').selectedIndex;

    var FileName = Ext.getCmp('NGIUploadProviderTariff-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderTraiffVieworDownloadreqComplete, this);
}

function ProviderTraiffVieworDownloadreqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ProviderTraiffVieworDownloadreqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}

function ProviderTraiffDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('NGIUploadProviderTariff-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProviderTraiffDownloadTemplatereqComplete, this);

}

function ProviderTraiffDownloadTemplatereqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ProviderTraiffDownloadTemplatereqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}





var NewCode = '', ANTProvider = '';
function AddNewTariffAddNew(form, login) {

    NewCode = Ext.getCmp('AddNewTariff').selectedIndex;

    if (NewCode == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
        return;
    }

    else {
        ANTProvider = Ext.getCmp('AddNewTariff-ProviderCode').editValue;
        var AddNewCode = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Network.PortalRequest.AddNewCode';
        var Url = '/forms/HumanResources/NGI/Network/PortalRequest/AddNewCode.xml';
        var PKey = -1;
        var WidgetTitle = 'Add New Code';
        AddNewCode.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
    }
}

function AddNewTariff(form, login) {

    if (!form.isView) {
        var RequestedStatusCode = Ext.getCmp('AddNewTariff-RequestedStatusCode');
        RequestedStatusCode.setComboValue(0);
        RequestedStatusCode.disable();

        var ProviderCode = Ext.getCmp('AddNewTariff-ProviderCode');

        if (login.userprovidermappedcount > 0) {
            ProviderCode.disable();
            ProviderCode.setComboValue(login.userprovidermappedcode);
        }


        var ANTRequestedUpdateList = Ext.getCmp('ANTRequestedUpdateList');
        var VersionCode = Ext.getCmp('ANTRequestedUpdate-VersionCode');
        var StandardCode = Ext.getCmp('ANTRequestedUpdate-StandardCode');

        ANTRequestedUpdateList.on('beforeedit', function (e) {

            if (VersionCode) VersionCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " itv.TYPECODE= " + e.record.get('TypeCode') + "";
            }, this);


            if (StandardCode) StandardCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " ivd.VERSIONCODE= " + e.record.get('VersionCode') + "";
            }, this);


        }, this);

        var ANTRequestedUpdateDetList = Ext.getCmp('ANTRequestedUpdateDetList');
        ANTRequestedUpdateDetList.getStore().on('update', function (store, Record, options) {
            var TotalAmount = 0;
            if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {// Amount
                Record.set('NetValue', (Record.get('GrossPrice') - Record.get('Discount')));
            }
            else {
                Record.set('NetValue', (Record.get('GrossPrice') - ((Record.get('GrossPrice') * Record.get('Discount')) / 100)));
            }

        }, this);


        ANTRequestedUpdateDetList.on('rowclick', function (grid, rowIndex, e) {
            var Record = grid.store.getAt(rowIndex);
            if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {// Amount
                Record.set('NetValue', (Record.get('GrossPrice') - Record.get('Discount')));
            }
            else {
                Record.set('NetValue', (Record.get('GrossPrice') - ((Record.get('GrossPrice') * Record.get('Discount')) / 100)));
            }
        }, this);

    }
}

function ANTRequestedUpdateEditHandler(record) {

    var AddNewCode = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Network.PortalRequest.AddNewCode';
    var Url = '/forms/HumanResources/NGI/Network/PortalRequest/AddNewCode.xml';
    var PKey = record.get('ID');
    var WidgetTitle = 'Add New Code';
    AddNewCode.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function AddNewCode(form, login) {

    if (!form.isView) {

        if (NewCode != '') {
            Ext.getCmp('AddNewCode-NTCode').setValue(NewCode);
            NewCode = '';
        }

        var GrossPrice = Ext.getCmp('AddNewCode-GrossPrice');
        var Discount = Ext.getCmp('AddNewCode-Discount');
        var NetValue = Ext.getCmp('AddNewCode-NetValue');
        var DiscountTypeCode = Ext.getCmp('AddNewCode-DiscountTypeCode');
        if (DiscountTypeCode) DiscountTypeCode.on('select', function (combo, record, index) {

            var Total = 0;
            if (DiscountTypeCode.editValue == 0)
                Total = GrossPrice.getValue() - Discount.getValue();
            else
                Total = (GrossPrice.getValue()) - ((GrossPrice.getValue() * Discount.getValue()) / 100);
            NetValue.setValue(Total);

        }, this);

        if (GrossPrice) GrossPrice.on('valid', AddNewCodeValidEve, this);
        if (Discount) Discount.on('valid', AddNewCodeValidEve, this);

        var ANTRequestedUpdateDetList = Ext.getCmp('ANTRequestedUpdateDetList');
        ANTRequestedUpdateDetList.on('afteredit', ANTRequestedUpdateDetAfterEdit, this);

        var TypeCode = Ext.getCmp('AddNewCode-TypeCode');
        var VersionCode = Ext.getCmp('AddNewCode-VersionCode');
        var StandardCode = Ext.getCmp('AddNewCode-StandardCode');

        if (VersionCode) VersionCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " itv.VERSIONCODE in (select VERSIONCODE from IM_ACTIVITY_DETAILS where TYPECODE=" + TypeCode.editValue + ") ";
        }, this);


        if (StandardCode) StandardCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " ivd.VERSIONCODE=" + VersionCode.editValue + " and DETAILCODE not in(select STANDARDCODE from im_provider_tariff where PROVIDERCODE=" + ANTProvider + ") ";
        }, this);

        if (TypeCode) TypeCode.on('select', AddNewCodeTypeCodeSelect, this);
        if (TypeCode) TypeCode.on('clear', AddNewCodeTypeCodeSelect, this);

        if (VersionCode) VersionCode.on('select', AddNewCodeVersionCodeSelect, this);
        if (VersionCode) VersionCode.on('clear', AddNewCodeVersionCodeSelect, this);
        if (StandardCode) StandardCode.on('clear', function (combo, record, index) {
            Ext.getCmp('AddNewCode-Description').setValue(null);
        }, this);

        Ext.getCmp('AddNewCode_editform').on('close', onBeforecloseAddNewCodePopUp, this);
    }
}

function onBeforecloseAddNewCodePopUp(form, action) {

    var detailGrid = Ext.getCmp('ANTRequestedUpdateList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}

function AddNewCodeTypeCodeSelect(combo, record, index) {
    Ext.getCmp('AddNewCode-VersionCode').clearValue();
    Ext.getCmp('AddNewCode-Description').setValue(null);
    Ext.getCmp('AddNewCode-VersionCode').allowBlank = false;
    Ext.getCmp('AddNewCode-VersionCode').isValid();
    Ext.getCmp('AddNewCode-StandardCode').clearValue();
    Ext.getCmp('AddNewCode-StandardCode').allowBlank = false;
    Ext.getCmp('AddNewCode-StandardCode').isValid();
}

function AddNewCodeVersionCodeSelect(combo, record, index) {
    Ext.getCmp('AddNewCode-StandardCode').clearValue();
    Ext.getCmp('AddNewCode-Description').setValue(null);
    Ext.getCmp('AddNewCode-StandardCode').allowBlank = false;
    Ext.getCmp('AddNewCode-StandardCode').isValid();
}

function AddNewCodeValidEve(field) {
    var GrossPrice = Ext.getCmp('AddNewCode-GrossPrice');
    var Discount = Ext.getCmp('AddNewCode-Discount');
    var DiscountTypeCode = Ext.getCmp('AddNewCode-DiscountTypeCode');
    var NetValue = Ext.getCmp('AddNewCode-NetValue');

    var Total = 0;
    if (DiscountTypeCode.editValue == 0)
        Total = GrossPrice.getValue() - Discount.getValue();
    else
        Total = (GrossPrice.getValue()) - ((GrossPrice.getValue() * Discount.getValue()) / 100);
    NetValue.setValue(Total);
}

function ANTRequestedUpdateDetAfterEdit(e) {

    for (var i = 0; i < e.grid.store.getCount() ; i++) {
        var Total = 0;
        if (e.grid.store.getAt(i).get('DiscountTypeCode') == 0)
            Total = e.grid.store.getAt(i).get('GrossPrice') - e.grid.store.getAt(i).get('Discount');
        else
            Total = (e.grid.store.getAt(i).get('GrossPrice')) - ((e.grid.store.getAt(i).get('GrossPrice') * e.grid.store.getAt(i).get('Discount')) / 100);
        e.grid.store.getAt(i).set('NetValue', Total);
    }

}

// Upload Mandatory Tariff 
function UploadMandatoryTariff(form, login) {

    var UploadCode = Ext.getCmp('UploadMandatoryTariff-UploadCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADMANDATORIFFTARIFF')";
    }, this);

    if (!form.isView) {

    }
}

function MandatoryTariffDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('UploadMandatoryTariff-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MandatoryTariffDownloadTemplateReqComplete, this);

}

function MandatoryTariffDownloadTemplateReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MandatoryTariffDownloadTemplateReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function MandatoryTariffVieworDownload(form, alogin) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.SetUp.UploadMandatoryTariff';
    var Primary = Ext.getCmp('UploadMandatoryTariff').selectedIndex;

    var FileName = Ext.getCmp('UploadMandatoryTariff-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MandatoryTariffVieworDownloadReqComplete, this);
}

function MandatoryTariffVieworDownloadReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MandatoryTariffVieworDownloadReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function MandatoryTariffImportData(form, login) {

    var SelectedIndex = Ext.getCmp('UploadMandatoryTariff').selectedIndex;

    if (SelectedIndex != -1) {

        var FileName = Ext.getCmp('UploadMandatoryTariff-ImageFileName').getValue();
        if (FileName == '') {
            Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
            return;
        }
        else if (FileName.lastIndexOf('.xl') < 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
            return;
        }

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'CodeTypeImportMandatoryData',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MandatoryTariffImportDataComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
        return true;
    }
}

function MandatoryTariffImportDataComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', MandatoryTariffImportDataComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        var PrimaryKey = Ext.getCmp('UploadMandatoryTariff').selectedIndex;
        var MenuID = 'ID_UPLOADMANDATORIFFTARIFF';
        var TemplateCode = Ext.getCmp('UploadMandatoryTariff-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MandatoryTariffImportDataPrcComplete, this);

    }

}

function MandatoryTariffImportDataPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MandatoryTariffImportDataPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

var UpdateExistingCode = '', UETProvider = '';
function UpdateExistingTariffSelectCode(form, login) {

    UpdateExistingCode = Ext.getCmp('UpdateExistingTariff').selectedIndex;
    if (UpdateExistingCode == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please save the record first !');
        return;
    }

    else {
        UETProvider = Ext.getCmp('UpdateExistingTariff-ProviderCode').editValue;
        var UpdateTariffReq = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Network.PortalRequest.UpdateTariffRequest';
        var Url = '/forms/HumanResources/NGI/Network/PortalRequest/UpdateTariffRequest.xml';
        var PKey = -1;
        var WidgetTitle = 'Update Tariff Request';
        UpdateTariffReq.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
    }
}
function UpdateExistingTariff(form, login) {

    if (!form.isView) {
        var ProviderCode = Ext.getCmp('UpdateExistingTariff-ProviderCode');
        //var RequestedStatusCode = Ext.getCmp('UpdateExistingTariff-RequestedStatusCode');
        //RequestedStatusCode.setComboValue(0);
        //RequestedStatusCode.disable();
        if (login.userprovidermappedcount > 0) {
            ProviderCode.disable();
            ProviderCode.setComboValue(login.userprovidermappedcode);
        }

        var UETRequestedUpdatesList = Ext.getCmp('UETRequestedUpdatesList');
        var VersionCode = Ext.getCmp('UETRequestedUpdates-VersionCode');
        var StandardCode = Ext.getCmp('UETRequestedUpdates-StandardCode');

        UETRequestedUpdatesList.on('beforeedit', function (e) {

            if (VersionCode) VersionCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " itv.TYPECODE= " + e.record.get('TypeCode') + "";
            }, this);


            if (StandardCode) StandardCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " ivd.VERSIONCODE= " + e.record.get('VersionCode') + "";
            }, this);


        }, this);

        var UETRequestUpdateDetList = Ext.getCmp('UETRequestUpdateDetList');
        UETRequestUpdateDetList.getStore().on('update', function (store, Record, options) {
            var TotalAmount = 0;
            if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {// Amount
                Record.set('NetValue', (Record.get('GrossPrice') - Record.get('Discount')));
            }
            else {
                Record.set('NetValue', (Record.get('GrossPrice') - ((Record.get('GrossPrice') * Record.get('Discount')) / 100)));
            }

        }, this);


        UETRequestUpdateDetList.on('rowclick', function (grid, rowIndex, e) {
            var Record = grid.store.getAt(rowIndex);
            if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {// Amount
                Record.set('NetValue', (Record.get('GrossPrice') - Record.get('Discount')));
            }
            else {
                Record.set('NetValue', (Record.get('GrossPrice') - ((Record.get('GrossPrice') * Record.get('Discount')) / 100)));
            }
        }, this);



    }




}
function UpdateReqTariffEditHandler(record) {
    var UpdateTariffReq = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Network.PortalRequest.UpdateTariffRequest';
    var Url = '/forms/HumanResources/NGI/Network/PortalRequest/UpdateTariffRequest.xml';
    var PKey = record.get('ID');
    var WidgetTitle = 'Update Tariff Request';
    UpdateTariffReq.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
}
function UpdateTariffRequest(form, login) {

    if (!form.isview) {
        if (UpdateExistingCode != '') {
            Ext.getCmp('UpdateTariffRequest-UETCode').setValue(UpdateExistingCode);
            UpdateExistingCode = '';
        }
        /*
        var GrossPrice = Ext.getCmp('UpdateTariffRequest-GrossPrice');
        var DiscountTypeCode = Ext.getCmp('UpdateTariffRequest-DiscountTypeCode');
        var Discount = Ext.getCmp('UpdateTariffRequest-Discount');
        var NetValue = Ext.getCmp('UpdateTariffRequest-NetValue');
        DiscountTypeCode.setComboValue(0);

        if (GrossPrice) GrossPrice.on('valid', UpdateTariffRequestNetPriceCal, this);
        if (Discount) Discount.on('valid', UpdateTariffRequestNetPriceCal, this);
        DiscountTypeCode.on('select', function (combo, record, index) {
            var total;
            if (DiscountTypeCode.editValue == 0) {
                total = GrossPrice.getValue() - Discount.getValue();
            }
            else {
                total = (GrossPrice.getValue()) - ((GrossPrice.getValue() * Discount.getValue()) / 100);
            }
            NetValue.setValue(total);
        }, this);*/
        var UETRequestUpdateDetList = Ext.getCmp('UETRequestUpdateDetList');
        UETRequestUpdateDetList.on('afteredit', UpdateTariffRequestNetPriceCaldetail, this)



        var TypeCode = Ext.getCmp('UpdateTariffRequest-TypeCode');
        var VersionCode = Ext.getCmp('UpdateTariffRequest-VersionCode');
        var StandardCode = Ext.getCmp('UpdateTariffRequest-StandardCode');

        if (VersionCode) VersionCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "itv.VERSIONCODE in (select VERSIONCODE from IM_ACTIVITY_DETAILS where TYPECODE=" + TypeCode.editValue + ") ";
        }, this);

        if (StandardCode) StandardCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " VD.VERSIONCODE=" + VersionCode.editValue + " and VD.DETAILCODE in(select STANDARDCODE from im_provider_tariff where PROVIDERCODE=" + UETProvider + ") ";
        }, this);

        if (TypeCode) TypeCode.on('select', UpdateTariffReqTypeSelect, this);
        if (TypeCode) TypeCode.on('clear', UpdateTariffReqTypeSelect, this);
        if (VersionCode) VersionCode.on('select', UpdateTariffReqVersionSelect, this);
        if (VersionCode) VersionCode.on('clear', UpdateTariffReqVersionSelect, this);
        if (StandardCode) StandardCode.on('clear', function (combo, record, index) {
            Ext.getCmp('UpdateTariffRequest-ShortDescription').setValue(null);
        }, this);
        if (form.selectedIndex == -1) {
            if (StandardCode) StandardCode.on('select', UpdateTariffReqStandardCodeSelect, this);
        }

    }
}
function UpdateTariffReqTypeSelect(combo, record, index) {
    Ext.getCmp('UpdateTariffRequest-VersionCode').clearValue();
    Ext.getCmp('UpdateTariffRequest-VersionCode').allowBlank = false;
    Ext.getCmp('UpdateTariffRequest-VersionCode').isValid();
    Ext.getCmp('UpdateTariffRequest-StandardCode').clearValue();
    Ext.getCmp('UpdateTariffRequest-StandardCode').allowBlank = false;
    Ext.getCmp('UpdateTariffRequest-StandardCode').isValid();
    CureentGrossClear();
}
function UpdateTariffReqVersionSelect(combo, record, index) {
    Ext.getCmp('UpdateTariffRequest-StandardCode').clearValue();
    Ext.getCmp('UpdateTariffRequest-StandardCode').allowBlank = false;
    Ext.getCmp('UpdateTariffRequest-StandardCode').isValid();
    CureentGrossClear();
}
function CureentGrossClear() {
    Ext.getCmp('UpdateTariffRequest-ShortDescription').setValue(null);
    Ext.getCmp('UpdateTariffRequest-CurrentNetValue').setValue(null);
    Ext.getCmp('UpdateTariffRequest-CurrentGrossPrice').setValue(null);
    Ext.getCmp('UpdateTariffRequest-CurrentDiscountTypeName').setValue(null);
    Ext.getCmp('UpdateTariffRequest-CurrentDiscount').setValue(null);
}
function UpdateTariffRequestNetPriceCal(Field) {
    var total;
    var GrossPrice = Ext.getCmp('UpdateTariffRequest-GrossPrice');
    var DiscountTypeCode = Ext.getCmp('UpdateTariffRequest-DiscountTypeCode');
    var Discount = Ext.getCmp('UpdateTariffRequest-Discount');
    var NetValue = Ext.getCmp('UpdateTariffRequest-NetValue');
    if (DiscountTypeCode.editValue == 0) {

        if (GrossPrice.getValue() >= Discount.getValue()) {
            total = GrossPrice.getValue() - Discount.getValue();
        }
        else {
            Discount.clear;
            total = GrossPrice.getValue();
        }

    }
    else {
        total = (GrossPrice.getValue()) - ((GrossPrice.getValue() * Discount.getValue()) / 100);
    }
    NetValue.setValue(total);





}
function UpdateTariffRequestNetPriceCaldetail(e) {

    for (var i = 0; i < e.grid.store.getCount() ; i++) {
        var Total = 0;
        if (e.grid.store.getAt(i).get('DiscountTypeCode') == 0)
            Total = e.grid.store.getAt(i).get('GrossPrice') - e.grid.store.getAt(i).get('Discount');
        else
            Total = (e.grid.store.getAt(i).get('GrossPrice')) - ((e.grid.store.getAt(i).get('GrossPrice') * e.grid.store.getAt(i).get('Discount')) / 100);
        e.grid.store.getAt(i).set('NetValue', Total);
    }
}
function UpdateTariffReqStandardCodeSelect(combo, record, index) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadInternalProviderCode',
            Standard: record.id,
            ProviderCode: UETProvider

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadInternalProviderCodeComplete, this);
}
function LoadInternalProviderCodeComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoadInternalProviderCodeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    } else {

        var grdFunctionality = Ext.getCmp('UETRequestUpdateDetList');
        grdFunctionality.store.pruneModifiedRecords = true;
        grdFunctionality.store.added = [];
        grdFunctionality.store.modified = [];
        grdFunctionality.store.removeAll();
        grdFunctionality.store.pruneModifiedRecords = false;
        grdFunctionality.store.totalLength = 0;
        grdFunctionality.pageBar.updateInfo();

        for (cnt = 0; cnt < responseText.totalCount; cnt++) {
            InternalProviderRecord = responseText.datum[cnt];

            var newRecord = new grdFunctionality.recordType({
                ID: cnt + 1,
                SerialNo: cnt + 1,
                Code: InternalProviderRecord.ProviderinternalCode,
                Description: InternalProviderRecord.Comments,
                GrossPrice: InternalProviderRecord.GrossPrice,
                DiscountTypeCode: InternalProviderRecord.DiscountTypeCode,
                DiscountTypeName: InternalProviderRecord.DiscountTypeName,
                Discount: InternalProviderRecord.DiscountValue,
                NetValue: InternalProviderRecord.Net,
                Req_Update_Code: 1,
                LegalEntityCode: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            grdFunctionality.stopEditing();
            grdFunctionality.store.add(newRecord);
            grdFunctionality.storeId += 1;
            grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
            grdFunctionality.pageBar.updateInfo();

        } Altlimit

    }
}
var BrokerAgentName = '';
function QuotationRequest(form, Reqlogin) {

    if (!form.isView) {
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');

        QuotationRequestMemberDltList.on('addrecord', function (evt) {
            evt.record.set('MemberRelationCode', 15);
            evt.record.set('MemberRelationName', 'Self');
        }, this);

        if (form.selectedIndex != -1 && !form.isView) {
            Ext.getCmp('QuotationRequest-Insurancecode').disable();
            Ext.getCmp('QuotationRequest-ContractTypeCode').disable();
        }

        if (form.selectedIndex == -1) {
            Ext.getCmp('QuotationRequest-TemplateCode').setValue('65');
            Ext.getCmp('QuotationRequest-PerimumTypeCode').setComboValue(1);
            var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
            PolicyTypeCode.setComboValue(0);
            Ext.getCmp('QuotationRequest-Insurancecode').setComboValue(login.defaultpartycode);
            var ReqSourceCode = Ext.getCmp('QuotationRequest-ReqSourceCode');
            ReqSourceCode.setComboValue(3);
        }

        var ReqSourceCode = Ext.getCmp('QuotationRequest-ReqSourceCode');
        //ReqSourceCode.setComboValue(3);
        var AgentCode = Ext.getCmp('QuotationRequest-AgentCode');
        var AgentBranchName = Ext.getCmp('QuotationRequest-AgentBranchName');
        var AgentLocationName = Ext.getCmp('QuotationRequest-AgentLocationName');
        var BrokerCode = Ext.getCmp('QuotationRequest-BorkerCode');
        var ReInsurer = Ext.getCmp('QuotationRequest-ReInsuranceCode');
        var BranchName = Ext.getCmp('QuotationRequest-BranchName');
        var LocationIDName = Ext.getCmp('QuotationRequest-LocationIDName');
        var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
        var BranchCodee = Ext.getCmp('QuotationRequest-BranchCodee');
        var AuthorizedStatus = Ext.getCmp('QuotationRequest-AuthorizedStatusCode').getValue();
        var QuotationReqCommisionDetList = Ext.getCmp('QuotationReqCommisionDetList');; NGIPolicy.cs
        //if (form.selectedIndex == -1)
        //    ReInsurer.disable();

        if (AuthorizedStatus === 1) {
            // AgentCode.disable();
            // BrokerCode.disable();

        }


        var PartyTwo = Ext.getCmp('QuoRequestSharingDetail-ReInsuranceCode');
        if (PartyTwo) PartyTwo.on('beforequery', function (evt) {// Filter based on Not a  default party
            var StartDate = Ext.getCmp('QuotationRequest-RequestDate').getValue().format(login.jsdateformat);
            var ContractTypeCode = Ext.getCmp('QuotationRequest-ContractTypeCode').editValue;
            var Insurancecode = Ext.getCmp('QuotationRequest-Insurancecode').editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "detl.REINSURANCE in (select REINSURANCE from IM_QUOTASHARE_TREATY where  CONTRACTTYPE=" + ContractTypeCode + " and INSURANCECO=" + Insurancecode + " and to_date('" + StartDate + "','" + login.dateformat + "') between VALIDFROM and VALIDTO ) ";
        }, this);


        var SharingSummary = Ext.getCmp('QuotationRequest-SharingSummary');
        var QuoRequestSharingDetailList = Ext.getCmp('QuoRequestSharingDetailList');//Sharing Detail Load: to Calculate Sharing Amount
        QuoRequestSharingDetailList.getStore().on('load', function (store, record, options) {
            var Total11 = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) Total11 += (1 * record.get('FinalPremiumValue'));
            }
            SharingSummary.setValue(Total11);
        }, this);

        QuoRequestSharingDetailList.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
            var AmountSum = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                if (e.grid.store.getAt(i).get('ReInsurValueTypeCode') == 1) {// Percentage
                    e.grid.store.getAt(i).set('FinalPremiumValue', 0);
                }
                AmountSum += (1 * e.grid.store.getAt(i).get('FinalPremiumValue'));
            }
            SharingSummary.setValue(AmountSum);
        }, this);

        QuoRequestSharingDetailList.getStore().on('update', function (store, Record, options) {// Sharing Detail After edit: to Set Summary AMount if it amount
            if (Record.get('ReInsurValueTypeCode') == 0) {// Amount
                Record.set('FinalPremiumValue', Record.get('Reinsurance_npq'));
            }
        }, this);

        var Insurancecode = Ext.getCmp('QuotationRequest-Insurancecode');
        var ContractTypeCode = Ext.getCmp('QuotationRequest-ContractTypeCode');
        if (ContractTypeCode) ContractTypeCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('QuoRequestSharingDetailList');
        }, this);
        if (Insurancecode) Insurancecode.on('select', function (combo, record, index) {
            onBusinessTypeclear('QuoRequestSharingDetailList');
        }, this);

        var CategoryGrid = Ext.getCmp('QuotationRequestCategoryDltList');
        CategoryGrid.store.on('load', function (store, record, options) {
            Ext.getCmp('QuotationRequestCategoryDltList_addNew').setVisible(false);
            if (record.length > 0)
                Ext.getCmp('QuotationRequest-QuotationTypeCode').disable();
        }, this);
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
        QuotationRequestMemberDltList.on('beforeedit', function (evt) {
            var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode').editValue;
            var Relation = Ext.getCmp('QuotationRequestMemberDlt-MemberRelationCode');

            var Gender = evt.record.get('GenderCode');
            if (Gender == 0) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,1,2,3,4';
            }
            else if (Gender == 1) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,5,6,7,8';
            }
            else {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
            }
            // For individual policy set General cader
            if (PolicyTypeCode == 1) {
                QuotationRequestMemberDltList.getColumnModel().getColumnById('CategoryCode').editable = false;
                QuotationRequestMemberDltList.getColumnModel().getColumnById('ParentGroupCode').editable = false;
                //evt.record.set('CategoryCode', 100000000000000001);
                //evt.record.set('CategoryName', 'Individual');

            }

            else
                QuotationRequestMemberDltList.getColumnModel().getColumnById('CategoryCode').editable = true;

        }, this);

        QuotationRequestMemberDltList.on('addrecord', function (evt) {
            var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode').editValue;
            if (PolicyTypeCode == 1) {
                evt.record.set('CategoryCode', '100000000000000001');
                evt.record.set('CategoryName', 'Individual');
            }
        }, this);



        var CategoryCode = Ext.getCmp('QuotationRequestMemberDlt-CategoryCode');
        if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
            if (PolicyTypeCode.editValue == 0) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = "cat.CATEGORY_CODE in (select CATEGORY_CODE from im_group_categories where GROUP_CODE=" + Ext.getCmp('QuotationRequest-GroupCode').editValue + ")";;
            }
        }, this);

        //if (form.selectedIndex != -1) {
        //    if (PolicyTypeCode.editValue == 0) {
        //        QuotationRequestMemberDltList.getColumnModel().getColumnById('MemberRelationCode').editable = false;
        //    }
        //    if (PolicyTypeCode.editValue == 1) {
        //        QuotationRequestMemberDltList.getColumnModel().getColumnById('MemberRelationCode').editable = true;
        //    }
        //}

        //QuotationRequestMemberDltList.on('addrecord', function (evt) {
        //    if (PolicyTypeCode.editValue == 0) {
        //        evt.record.set('MemberRelationCode', 0);
        //        evt.record.set('MemberRelationName', 'Employee');
        //        QuotationRequestMemberDltList.getColumnModel().getColumnById('MemberRelationCode').editable = false;
        //    }
        //    if (PolicyTypeCode.editValue == 1) {
        //        QuotationRequestMemberDltList.getColumnModel().getColumnById('MemberRelationCode').editable = true;
        //    }
        //}, this);


        var BillingTypeCode = Ext.getCmp('QuotationRequest-BillingTypeCode');
        var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
        if (BillingTypeCode) BillingTypeCode.on('beforequery', function (evt) {
            BillingTypeCode.lastQuery = '1=2';
            BillingTypeCode.constantFilter = '0,1,2';
            if (PolicyTypeCode.editValue == 0)//Policy
            {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,2';
            }
            else {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,3';
            }

        }, this);

        PolicyTypeCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('QuotationRequestMemberDltList');
            onBusinessTypeclear('QReqMemberPremiumList');
            if (PolicyTypeCode.editValue == 0) // Policy
                BillingTypeCode.setComboValue(2);
            if (PolicyTypeCode.editValue == 1)  // Individual Policy
                BillingTypeCode.setComboValue(3);
        }, this);
        AgentCode.on('select', function (combo, record, index) {
            BillingTypeCode.setComboValue(0);
        }, this);
        if (AgentCode) AgentCode.on('clear', function (e) {
            BillingTypeCode.enable();
            BillingTypeCode.allowBlank = false;
            BillingTypeCode.isValid();
        }, this);
        BrokerCode.on('select', function (combo, record, index) {
            BillingTypeCode.setComboValue(1);
        }, this);
        if (BrokerCode) BrokerCode.on('clear', function (e) {
            BillingTypeCode.enable();
            BillingTypeCode.allowBlank = false;
            BillingTypeCode.isValid();
        }, this);
        ReqSourceCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('QuotationReqCommisionDetList');
            if (ReqSourceCode.editValue == 3) {
                BranchCodee.enable();
                BranchCodee.allowBlank = false;
                BranchCodee.isValid();
                if (PolicyTypeCode.editValue == 0) // Policy
                    BillingTypeCode.setComboValue(2);
                if (PolicyTypeCode.editValue == 1)  // Individual Policy
                    BillingTypeCode.setComboValue(3);
            }
            if (ReqSourceCode.editValue != 3) {
                BranchCodee.setValue('');
                BranchCodee.setValue('');
                BranchCodee.clearValue();
                BranchCodee.allowBlank = true;
                BranchCodee.isValid();
                BranchCodee.disable();
                if (PolicyTypeCode.editValue == 0) // Policy
                    BillingTypeCode.setComboValue(2);
                if (PolicyTypeCode.editValue == 1)  // Individual Policy
                    BillingTypeCode.setComboValue(3);
            }
            if (ReqSourceCode.editValue == 5) { // broker
                BillingTypeCode.setComboValue(1);
            }
            if (ReqSourceCode.editValue == 4) { // agent
                BillingTypeCode.setComboValue(0);
            }

            //if (ReqSourceCode.editValue == 6) {
            //    AgentBranchName.setValue('');
            //    AgentLocationName.setValue('');
            //    AgentCode.clearValue();
            //    AgentCode.allowBlank = true;
            //    AgentCode.isValid();
            //    AgentCode.disable();
            //    BrokerCode.clearValue();
            //    BrokerCode.allowBlank = true;
            //    BrokerCode.isValid();
            //    BrokerCode.disable();
            //    ReInsurer.enable();
            //    ReInsurer.allowBlank = false;
            //    ReInsurer.isValid();

            //}
            /*
            if (ReqSourceCode.editValue == 5) {
                AgentBranchName.setValue('');
                AgentLocationName.setValue('');
                AgentCode.clearValue();
                AgentCode.allowBlank = true;
                AgentCode.isValid();
                AgentCode.disable();
                //ReInsurer.clearValue();
                //ReInsurer.allowBlank = true;
                //ReInsurer.isValid();
                //ReInsurer.disable();
                BrokerCode.enable();
                BrokerCode.allowBlank = false;
                BrokerCode.isValid();

            }
            else if (ReqSourceCode.editValue == 4) {
                BranchName.setValue('');
                LocationIDName.setValue('');
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;
                BrokerCode.isValid();
                BrokerCode.disable();
                //ReInsurer.clearValue();
                //ReInsurer.allowBlank = true;
                //ReInsurer.isValid();
                //ReInsurer.disable();
                AgentCode.enable();
                AgentCode.allowBlank = false;
                AgentCode.isValid();
            }
            else {
                BrokerCode.clearValue();
                BrokerCode.allowBlank = true;
                BrokerCode.isValid();
                BrokerCode.disable();
                //ReInsurer.clearValue();
                //ReInsurer.allowBlank = true;
                //ReInsurer.isValid();
                //ReInsurer.disable();
                BranchName.setValue('');
                LocationIDName.setValue('');
                AgentCode.clearValue();
                AgentCode.allowBlank = true;
                AgentCode.isValid();
                AgentCode.disable();
                AgentBranchName.setValue('');
                AgentLocationName.setValue('');
            }
            */
            BillingTypeCode.clearValue();
            BillingTypeCode.lastQuery = '1=2';
            if (PolicyTypeCode.editValue == 0)//Policy
            {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,2';
            }
            else {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,3';
            }

        }, this);


        if (form.selectedIndex != -1) {//Edit Mode
            if (ReqSourceCode.editValue == 5) {
                BrokerCode.enable();
                BrokerCode.allowBlank = false;
                BrokerCode.isValid();
            }
            else if (ReqSourceCode.editValue == 4) {
                AgentCode.enable();
                AgentCode.allowBlank = false;
                AgentCode.isValid();
            }
            else {
                BrokerCode.disable();
                AgentCode.disable();
                //ReInsurer.disable();
            }
        }
        var ElementTemplateCode = Ext.getCmp('QuotationRequest-ElementTemplateCode');
        ElementTemplateCode.on('select', OnTemplateCodeChange, this);

        //Select type,quotation type and template -filter and store the detail records
        if (form.selectedIndex == -1 && !form.isView) {
            var ElementTemplateCode = Ext.getCmp('QuotationRequest-ElementTemplateCode');
            var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
            var QuotationTypeCode = Ext.getCmp('QuotationRequest-QuotationTypeCode');
            if (PolicyTypeCode) PolicyTypeCode.on('select', function (combo, record, index) {
                QuotationTypeCode.clearValue(); ElementTemplateCode.clearValue();
                var QuotationReqElementDetList = Ext.getCmp('QuotationReqElementDetList');
                onBusinessTypeclear('QuotationReqElementDetList');

            }, this);

            if (QuotationTypeCode) QuotationTypeCode.on('select', function (combo, record, index) {
                ElementTemplateCode.clearValue();
                var QuotationReqElementDetList = Ext.getCmp('QuotationReqElementDetList');
                onBusinessTypeclear('QuotationReqElementDetList');


            }, this);

            if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
                if (PolicyTypeCode.getValue() == 0) {
                    evt.combo.lastQuery = '1=2';
                    if (ElementTemplateCode != '')
                        evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=0 and TEM.QUOTATION_TYPE=" + QuotationTypeCode.getValue() + "";
                    else
                        evt.combo.store.baseParams.filter = "1=2";
                }
            }, this);
            AgentCode.on('select', function (combo, record, index) {
                onBusinessTypeclear('QuotationReqCommisionDetList');
                BrokerAgentName = record.data.AgentName;//Get Agent Name

            }, this);
            BrokerCode.on('select', function (combo, record, index) {
                BrokerAgentName = record.data.Broker_Name_en;//Get Broker Name
                onBusinessTypeclear('QuotationReqCommisionDetList');
            }, this);
            /*
                        ReInsurer.on('select', function (combo, record, index) {
                            BrokerAgentName = record.data.InsuranceName;//Get ReInsurer Name
                        }, this);*/

            var Comission_TypesCode = Ext.getCmp('QuotationReqCommisionDet-Comission_TypesCode');

            QuotationReqCommisionDetList.on('addrecord', function (evt) {
                if (ReqSourceCode.editValue == 4) {
                    if (AgentCode.getValue() == '' || AgentCode.getValue() == null) {//Agent
                        Ext.MessageBox.alert(login.modulename, 'Select Agent Name Before add new Record !');
                        onBusinessTypeclear('QuotationReqCommisionDetList');
                        return;
                    }
                }
                if (ReqSourceCode.editValue == 5) {
                    if (BrokerCode.getValue() == '' || BrokerCode.getValue() == null) {//Broker
                        Ext.MessageBox.alert(login.modulename, 'Select Broker Name Before add new Record !');
                        onBusinessTypeclear('QuotationReqCommisionDetList');
                        return;
                    }
                }
                //if (ReqSourceCode.editValue == 6) {
                //    if (ReInsurer.getValue() == '' || ReInsurer.getValue() == null) {//ReInsurer
                //        Ext.MessageBox.alert(login.modulename, 'Select ReInsurer Name Before add new Record !');
                //        onBusinessTypeclear('QuotationReqCommisionDetList');
                //        return;
                //    }
                //}

            }, this);
            QuotationReqCommisionDetList.on('beforeedit', function (evt) {

                if (ReqSourceCode.editValue == 4) {//Agent
                    Comission_TypesCode.lastQuery = '1=2';
                    Comission_TypesCode.constantFilter = '1,2';
                }
                else if (ReqSourceCode.editValue == 5) {//Broker

                    Comission_TypesCode.lastQuery = '1=2';
                    Comission_TypesCode.constantFilter = '0,2';
                }
                    //else if (ReqSourceCode.editValue == 6) {//Reinsurer

                    //    Comission_TypesCode.lastQuery = '1=2';
                    //    Comission_TypesCode.constantFilter = '3,2';
                    //}
                else if (ReInsurer.editValue != 0) {
                    Comission_TypesCode.lastQuery = '1=2';
                    Comission_TypesCode.constantFilter = '3,2';
                }
                else {//Other
                    Comission_TypesCode.lastQuery = '1=2';
                    Comission_TypesCode.constantFilter = '0,1,2';
                }


            }, this);
            var GeneralCommBillingCode = Ext.getCmp('QuotationReqCommisionDet-GeneralCommBillingCode');
            QuotationReqCommisionDetList.on('afteredit', function (e) {

                for (var i = 0; i < e.grid.store.getCount() ; i++) {
                    if (ReqSourceCode.editValue == 4 || ReqSourceCode.editValue == 5 || ReInsurer.editValue != '') {
                        if (e.grid.store.getAt(i).get('Comission_TypesCode') == 1 || e.grid.store.getAt(i).get('Comission_TypesCode') == 0 || e.grid.store.getAt(i).get('Comission_TypesCode') == 3) {// To set Agent Name or Broker Name
                            e.grid.store.getAt(i).set('CommissionToNewName', BrokerAgentName);
                        }
                    }
                }
                if (e.record.get('Comission_TypesCode') == 2) // NGI Commission
                    e.record.set('CommissionToNewName', GeneralCommBillingCode.lastSelectionText);

            }, this);


            if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
                if (PolicyTypeCode.getValue() == 1) {
                    evt.combo.lastQuery = '1=2';
                    if (ElementTemplateCode != '')
                        evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=1 and TEM.QUOTATION_TYPE=" + QuotationTypeCode.getValue() + "";
                    else
                        evt.combo.store.baseParams.filter = "1=2";
                }
            }, this);
        }

        var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
        var TemplateCode = Ext.getCmp('QuotationRequest-TemplateCode');
        var MemberCode = Ext.getCmp('QuotationRequest-MemberCode');
        var GroupCode = Ext.getCmp('QuotationRequest-GroupCode');
        //TemplateCode.disable();
        MemberCode.disable();
        GroupCode.enable();
        if (PolicyTypeCode.editValue == 1) {
            //TemplateCode.enable();
            MemberCode.enable();
            GroupCode.disable();
        }




        Ext.getCmp('QuotationRequest-AnnualLimitTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequest-InPatientTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequest-OutPatientTypeCode').setComboValue(0);

        GroupCode.on('select', function (combo, record, index) {
            var PolicyGroupCount = Ext.getCmp('QuotationRequest-PolicyGroupCount').getValue();
            var RequestGroupCount = Ext.getCmp('QuotationRequest-RequestGroupCount').getValue();
            var QuotaionMasterGroupCount = Ext.getCmp('QuotationRequest-QuotaionMasterGroupCount').getValue();

            if (RequestGroupCount > 0) {
                Ext.MessageBox.alert(login.modulename, 'Group already has an entry in Quotation Request with pending status! You Cannot Select');
                GroupCode.clearValue();
                return;
            }


        }, this);

        if (GroupCode) GroupCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "GRO.PARENT_GROUP is null";
        }, this);

        var ParentGroupCode = Ext.getCmp('QuotationRequestMemberDlt-ParentGroupCode');
        if (ParentGroupCode) ParentGroupCode.on('beforequery', function (evt) {
            if (GroupCode.editValue != 0 || GroupCode.editValue != '') {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " IG.GROUP_CODE =" + GroupCode.editValue + "";
            }
        }, this);

        var Member = Ext.getCmp('QuotationRequest-MemberCode');
        if (Member) Member.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "MEM.MEMBERCODE not in (select MEMBERCODE  from im_memberpolicy where MEMBERENDDATE is null) and MEM.CATEGORY_CODE=100000000000000001";
        }, this);

        //GroupCode.disable();

        MemberCode.on('select', OnQuotationRequestMemberCodeChange, this);

        if (PolicyTypeCode) PolicyTypeCode.on('select', function (combo, record, index) {
            if (PolicyTypeCode.editValue == 0) {
                GroupCode.enable();
                GroupCode.allowBlank = false;
                GroupCode.isValid();
                MemberCode.allowBlank = true;
                MemberCode.clearValue()
                MemberCode.disable();
                // TemplateCode.allowBlank = true;
                // TemplateCode.clearValue();
                //TemplateCode.disable();
            }
            else {
                GroupCode.allowBlank = true;
                GroupCode.clearValue()
                GroupCode.disable();
                MemberCode.enable();
                MemberCode.allowBlank = false;
                MemberCode.isValid();
                //  TemplateCode.enable();
                //  TemplateCode.allowBlank = false;
                // TemplateCode.isValid();
            }

        }, this);
        var QuotationReqCommisionDetList = Ext.getCmp('QuotationReqCommisionDetList');

        QuotationReqCommisionDetList.on('afteredit', function (e) {


            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var Total = 0;
                var Final_premium = Ext.getCmp('QuotationRequest-Final_premium').getValue();
                if (e.grid.store.getAt(i).get('Calc_MethodCode') == 0)
                    Total = e.grid.store.getAt(i).get('DefaultValue');
                else if (e.grid.store.getAt(i).get('Calc_MethodCode') == 1) {
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    if (DefaultValue > 100) {
                        e.grid.store.getAt(i).set('Commission_value', 0);
                        e.grid.store.getAt(i).set('DefaultValue', 0);
                        Ext.MessageBox.alert(login.modulename, 'Default value should be less or equal to 100');
                        return;
                    }
                    Total = Final_premium != 0 ? ((Final_premium * e.grid.store.getAt(i).get('DefaultValue')) / 100) : 0;
                }
                e.grid.store.getAt(i).set('Commission_value', Total);
            }

        }, this);

        /*

        QuotationReqCommisionDetList.on('beforeedit', function (evt) {

            var CommissionToCode = Ext.getCmp('QuotationReqCommisionDet-CommissionToCode');
            var Comission_TypesCode = evt.record.get('Comission_TypesCode');
            if (Comission_TypesCode == 0) {
                CommissionToCode.lastQuery = '1=2';
                CommissionToCode.store.baseParams.filter = 'Com.TypeCode=1';
            }
            else if (Comission_TypesCode == 1) {
                CommissionToCode.lastQuery = '1=2';
                CommissionToCode.store.baseParams.filter = 'Com.TypeCode=0';
            }
            else {
                CommissionToCode.lastQuery = '1=2';
                CommissionToCode.store.baseParams.filter = '';
            }

        }, this);*/

        var QReqMemberPremiumList = Ext.getCmp('QReqMemberPremiumList');

        var QReqMemberAddPremiumDtlList = Ext.getCmp('QReqMemberAddPremiumDtlList');
        QReqMemberAddPremiumDtlList.on('afteredit', function (e) {
            if (e.record.get('CalcMethodCode') == 0)//Amount
            {
                var BasePremium = e.record.get('DefaultValue');
                e.record.set('Premium_Value', BasePremium);
            }
            else {
                if (e.record.get('DefaultValue') > 100) {
                    Ext.MessageBox.alert(login.modulename, "Defalut Value should be less than or equal to 100 Percentage");
                    e.record.set('DefaultValue', 0)
                }
                var BasePremium = 0;
                for (var i = 0; i < QReqMemberPremiumList.store.getCount() ; i++) {
                    var Record = QReqMemberPremiumList.store.getAt(i);
                    if (QReqMemberPremiumList.store.getAt(i).get('Premium_TypeCode') == 0) {//Base Premium
                        BasePremium = ((Record.get('Premium_Value') * e.record.get('DefaultValue')) / 100);
                    }
                }
                e.record.set('Premium_Value', BasePremium.toFixed(2));
            }
        }, this);


        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');

        if (QuotationRequestMemberDltList) QuotationRequestMemberDltList.on('afteredit', function (e) {
            var AgeTemplateCode = Ext.getCmp('QuotationRequest-TemplateCode');

            for (var i = 0; i < e.grid.store.getCount() ; i++) {

                var DOB = e.grid.store.getAt(i).get('DateOfBirth');
                if (typeof (DOB) == 'string') DOB = Date.parseDate(DOB, login.jsdateformat);
                else DOB = DOB;
                var CurDate = new Date();
                var Month = (CurDate.getMonth() - DOB.getMonth()) + ((CurDate.getFullYear() - DOB.getFullYear()) * 12);
                e.grid.store.getAt(i).set('Age', Math.ceil(Month / 12))


                if (Math.ceil(Month / 12) > AgeTemplateCode.getValue()) {
                    Ext.MessageBox.alert(login.modulename, "Age Should not greater then " + AgeTemplateCode.getValue() + "!");
                    e.grid.store.getAt(i).set('Age', 0);
                    e.grid.store.getAt(i).set('DateOfBirth', '');
                    return;
                }
            }

        }, this);

        //var Altlimit = Ext.getCmp('QuotationRequest-AltLimits');
        //if (Altlimit) Altlimit.on('change', function (field) {
        //    var Oplimit = Ext.getCmp('QuotationRequest-OptLimits');
        //    var Iplimit = Ext.getCmp('QuotationRequest-IptLimits');
        //    if (Iplimit.getValue() == null || Iplimit.getValue() == '' || Iplimit.getValue() == 0) {
        //        Iplimit.setValue(field.getValue());
        //    }
        //    if (Oplimit.getValue() == null || Oplimit.getValue() == '' || Oplimit.getValue() == 0) {
        //        Oplimit.setValue(field.getValue());
        //    }
        //}, this);

        var InceptionDate = Ext.getCmp('QuotationRequest-InceptionDate');
        var ISExistingMember = Ext.getCmp('QuotationRequest-ISExistingMember');
        var Existing_Insurer = Ext.getCmp('QuotationRequest-Existing_Insurer');
        var DateOfEntry = Ext.getCmp('QuotationRequest-DateOfEntry');
        var COCExpiry = Ext.getCmp('QuotationRequest-COCExpiry');
        var Occupation = Ext.getCmp('QuotationRequest-Occupation');
        var Address1 = Ext.getCmp('QuotationRequest-Address1');
        var Address2 = Ext.getCmp('QuotationRequest-Address2');
        var PhoneNo = Ext.getCmp('QuotationRequest-PhoneNo');
        var MobileNo = Ext.getCmp('QuotationRequest-MobileNo');
        var Email_ID = Ext.getCmp('QuotationRequest-Email_ID');
        var PassportNo = Ext.getCmp('QuotationRequest-PassportNo');
        var Height = Ext.getCmp('QuotationRequest-Height');
        var Weight = Ext.getCmp('QuotationRequest-Weight');
        var EmiratesId = Ext.getCmp('QuotationRequest-EmiratesId');
        var StaffId = Ext.getCmp('QuotationRequest-StaffId');
        var DiscountPCT = Ext.getCmp('QuotationRequest-DiscountPCT');
        var LoadingPCT = Ext.getCmp('QuotationRequest-LoadingPCT');
        //var Location = Ext.getCmp('QuotationRequest-Location');
        var MemberLocationCode = Ext.getCmp('QuotationRequest-MemberLocationCode');
        var EntryTypeCode = Ext.getCmp('QuotationRequest-EntryTypeCode');
        var HAADFine = Ext.getCmp('QuotationRequest-HAADFine');
        var WaiveAmount = Ext.getCmp('QuotationRequest-WaiveAmount');
        var NoOfDays = Ext.getCmp('QuotationRequest-NoOfDays');
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');

        QuotationRequestMemberDltList.on('rowclick', function (grid, rowIndex, e) {
            QuotationRequestMemberDltList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
            Record = grid.getStore().getAt(rowIndex);
            Existing_Insurer.setValue(Record.get('Existing_Insurer'));
            InceptionDate.setValue(Record.get('InceptionDate'));
            ISExistingMember.setValue(Record.get('ISExistingMember'));
            DateOfEntry.setValue(Record.get('DateOfEntry'));
            COCExpiry.setValue(Record.get('COCExpiry'));
            Occupation.setValue(Record.get('Occupation'));
            Address1.setValue(Record.get('Address1'));
            Address2.setValue(Record.get('Address2'));
            PhoneNo.setValue(Record.get('PhoneNo'));
            MobileNo.setValue(Record.get('MobileNo'));
            Email_ID.setValue(Record.get('Email_ID'));
            PassportNo.setValue(Record.get('PassportNo'));
            Height.setValue(Record.get('Height'));
            Weight.setValue(Record.get('Weight'));
            EmiratesId.setValue(Record.get('EmiratesId'));
            StaffId.setValue(Record.get('StaffId'));
            DiscountPCT.setValue(Record.get('DiscountPCT'));
            LoadingPCT.setValue(Record.get('LoadingPCT'));
            MemberLocationCode.setComboValue(Record.get('Location'));
            EntryTypeCode.setComboValue(Record.get('EntryType'));
            HAADFine.setValue(Record.get('HAADFine'));
            WaiveAmount.setValue(Record.get('WaiveAmount'));
            NoOfDays.setValue(Record.get('NoOfDays'));
        }, this);

        QuotationRequestMemberDltList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            QuotationRequestMemberDltList.lastSelectedRecord = Record;
            Existing_Insurer.setValue(Record.get('Existing_Insurer'));
            InceptionDate.setValue(Record.get('InceptionDate'));
            ISExistingMember.setValue(Record.get('ISExistingMember'));
            DateOfEntry.setValue(Record.get('DateOfEntry'));
            COCExpiry.setValue(Record.get('COCExpiry'));
            Occupation.setValue(Record.get('Occupation'));
            Address1.setValue(Record.get('Address1'));
            Address2.setValue(Record.get('Address2'));
            PhoneNo.setValue(Record.get('PhoneNo'));
            MobileNo.setValue(Record.get('MobileNo'));
            Email_ID.setValue(Record.get('Email_ID'));
            PassportNo.setValue(Record.get('PassportNo'));
            Height.setValue(Record.get('Height'));
            Weight.setValue(Record.get('Weight'));
            EmiratesId.setValue(Record.get('EmiratesId'));
            StaffId.setValue(Record.get('StaffId'));
            DiscountPCT.setValue(Record.get('DiscountPCT'));
            LoadingPCT.setValue(Record.get('LoadingPCT'));
            MemberLocationCode.setComboValue(Record.get('Location'));
            EntryTypeCode.setComboValue(Record.get('EntryType'));
            HAADFine.setValue(Record.get('HAADFine'));
            WaiveAmount.setValue(Record.get('WaiveAmount'));
            NoOfDays.setValue(Record.get('NoOfDays'));

        }, this);

        if (InceptionDate) InceptionDate.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('InceptionDate', InceptionDate.getValue())
        }, this);

        if (MemberLocationCode) MemberLocationCode.on('select', function (combo, record, index) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Location', MemberLocationCode.editValue)
        }, this);

        if (ISExistingMember) ISExistingMember.on('check', function (field, checked) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('ISExistingMember', ISExistingMember.getValue())
        }, this);

        if (Existing_Insurer) Existing_Insurer.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Existing_Insurer', Existing_Insurer.getValue())
        }, this);

        if (EmiratesId) EmiratesId.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('EmiratesId', EmiratesId.getValue())
        }, this);

        if (DateOfEntry) DateOfEntry.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('DateOfEntry', DateOfEntry.getValue())
        }, this);
        if (COCExpiry) COCExpiry.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('COCExpiry', COCExpiry.getValue())
        }, this);
        if (Occupation) Occupation.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Occupation', Occupation.getValue())
        }, this);
        if (Address1) Address1.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Address1', Address1.getValue())
        }, this);
        if (Address2) Address2.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Address2', Address2.getValue())
        }, this);
        if (PhoneNo) PhoneNo.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('PhoneNo', PhoneNo.getValue())
        }, this);
        if (MobileNo) MobileNo.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('MobileNo', MobileNo.getValue())
        }, this);
        if (Email_ID) Email_ID.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Email_ID', Email_ID.getValue())
        }, this);
        if (Height) Height.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Height', Height.getValue())
        }, this);
        if (Weight) Weight.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('Weight', Weight.getValue())
        }, this);
        if (PassportNo) PassportNo.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('PassportNo', PassportNo.getValue())
        }, this);
        if (StaffId) StaffId.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('StaffId', StaffId.getValue())
        }, this);
        if (DiscountPCT) DiscountPCT.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('DiscountPCT', DiscountPCT.getValue())
        }, this);
        if (LoadingPCT) LoadingPCT.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('LoadingPCT', LoadingPCT.getValue())
        }, this);
        if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('EntryType', EntryTypeCode.editValue);
        }, this);

        if (HAADFine) HAADFine.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('HAADFine', HAADFine.getValue());
        }, this);

        if (WaiveAmount) WaiveAmount.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('WaiveAmount', WaiveAmount.getValue());
        }, this);

        if (NoOfDays) NoOfDays.on('valid', function (text1, oldval, newval) {
            if (QuotationRequestMemberDltList.lastSelectedRecord)
                QuotationRequestMemberDltList.lastSelectedRecord.set('NoOfDays', NoOfDays.getValue());
        }, this);

        if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {
            NgiQuotationRequestSelectRowClikAndSelect();
        }, this);
    }
}

function NgiQuotationRequestSelectRowClikAndSelect(combo, record, index) {

    var EntryTypeCode = Ext.getCmp('QuotationRequest-EntryTypeCode');
    var Existing_Insurer = Ext.getCmp('QuotationRequest-Existing_Insurer');
    var DateOfEntry = Ext.getCmp('QuotationRequest-DateOfEntry');

    if (EntryTypeCode.editValue == 2) {//Residants
        Existing_Insurer.allowBlank = false; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
    else {
        Existing_Insurer.allowBlank = true; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
}

function OnQuotationRequestMemberCodeChange(combo, record, index) {
    var MemberIDCode = Ext.getCmp('QuotationRequest-MemberCode').editValue;
    onBusinessTypeclear('QuotationRequestMemberDltList');

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'MemberDetailLoad',
            MemberIDCode: MemberIDCode
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnQuotationRequestMemberCodeComplete, this);

}
function OnQuotationRequestMemberCodeComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', OnQuotationRequestMemberCodeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var Primary = Ext.getCmp('QuotationRequest').selectedIndex;
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');

        for (cnt = 0; cnt < responseText.Memberdatum.length; cnt++) { //Member
            var MemberRecord = responseText.Memberdatum[cnt];
            var dob = '';
            if (typeof (MemberRecord.Date_of_birth) == 'string') dob = Date.parseDate(MemberRecord.Date_of_birth, login.jsdateformat);
            else dob = MemberRecord.Date_of_birth;

            var CurDate = new Date();
            var Month = (CurDate.getMonth() - dob.getMonth()) + ((CurDate.getFullYear() - dob.getFullYear()) * 12);
            var age = Math.ceil(Month / 12)

            QuotationRequestMemberDltList.storeId += 1;
            var newRecord = new QuotationRequestMemberDltList.recordType({

                ID: QuotationRequestMemberDltList.storeId,
                SerialNo: QuotationRequestMemberDltList.storeId,
                Request_Code: Primary == -1 ? 1 : Primary,
                MemberId: MemberRecord.Member_id,
                MemberIDCode: MemberRecord.ID,
                MemberIDName: MemberRecord.First_Name,
                Member_Name: MemberRecord.First_Name,
                DateOfBirth: dob,
                Age: age,
                GenderCode: MemberRecord.GenderCode,
                GenderName: MemberRecord.GenderName,
                ParentId: null,
                MemberRelationCode: MemberRecord.RelationCode,
                MemberRelationName: MemberRecord.RelationName,
                MaritalStatusCode: MemberRecord.Marital_StatusCode,
                MaritalStatusName: MemberRecord.Marital_StatusName,
                CategoryCode: MemberRecord.CategoryCode,
                CategoryName: MemberRecord.CategoryName,
                NationalityCode: MemberRecord.NationalityCode,
                NationalityName: MemberRecord.NationalityName,
                premiums: '',
                InceptionDate: MemberRecord.InceptionDate,
                ISExistingMember: MemberRecord.ISExistingMember,
                Existing_Insurer: MemberRecord.Existing_Insurer,
                ISExistingMember: MemberRecord.ISExistingMember,
                COCExpiry: MemberRecord.COCExpiry,
                Occupation: MemberRecord.Occupation,
                Address1: MemberRecord.Address1,
                Address2: MemberRecord.Address2,
                PhoneNo: MemberRecord.PhoneNo,
                MobileNo: MemberRecord.MobileNo,
                Email_ID: MemberRecord.Email_ID,
                PassportNo: MemberRecord.PassportNo,
                Height: MemberRecord.Height,
                Weight: MemberRecord.Weight,
                EmiratesId: MemberRecord.EmiratesId,
                StaffId: MemberRecord.StaffId,
                DiscountPCT: MemberRecord.DiscountPCT,
                LoadingPCT: MemberRecord.LoadingPCT,
                Location: null,
                MemberSince: MemberRecord.MemberSince,
                EntryType: MemberRecord.EntryTypeCode,
                HAADFine: MemberRecord.HAADFine,
                WaiveAmount: MemberRecord.WaiveAmount,
                NoOfDays: MemberRecord.NoOfDays,
                LegalEntityCode: 1,
                CustomerCode: 1,
                IsBasePremiumAvail: 0,
                LocationCode: login.LocationCode,
                CompanyCode: login.CompanyCode,
                QReqMemberPremiumList: null,
                QReqMemberPremiumDtlList: null,
                QReqMemberAddPremiumDtlList: null,
                ParentGroupCode: 0,
                ParentGroupName: '',
                InceptionDate: MemberRecord.InceptionDate,
                ISExistingMember: MemberRecord.ISExistingMember,
                Existing_Insurer: MemberRecord.Existing_Insurer,
                DateOfEntry: MemberRecord.DateOfEntry,
                COCExpiry: MemberRecord.COCExpiry,
                Occupation: MemberRecord.Occupation,
                Address1: MemberRecord.Address1,
                Address2: MemberRecord.Address2,
                PhoneNo: MemberRecord.PhoneNo,
                MobileNo: MemberRecord.MobileNo,
                Email_ID: MemberRecord.Email_ID,
                PassportNo: MemberRecord.PassportNo,
                Height: MemberRecord.Height,
                EmiratesId: MemberRecord.Emirates_id,
                StaffId: MemberRecord.StaffId,
                DiscountPCT: MemberRecord.DiscountPCT,
                LoadingPCT: MemberRecord.LoadingPCT,
                Weight: MemberRecord.Weight,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
                /* ID: QuotationRequestMemberDltList.storeId,
                 SerialNo: QuotationRequestMemberDltList.storeId,
                 Request_Code: Primary == -1 ? 1 : Primary,
                 MemberId: MemberRecord.Member_id,
                 MemberIDCode: MemberRecord.ID,
                 MemberIDName: MemberRecord.First_Name,
                 Member_Name: MemberRecord.First_Name,
                 DateOfBirth: dob,
                 Age: age,
                 GenderCode: MemberRecord.GenderCode,
                 GenderName: MemberRecord.GenderName,
                 ParentId: null,
                 MemberRelationCode: MemberRecord.RelationCode,
                 MemberRelationName: MemberRecord.RelationName,
                 MaritalStatusCode: MemberRecord.Marital_StatusCode,
                 MaritalStatusName: MemberRecord.Marital_StatusName,
                 CategoryCode: MemberRecord.CategoryCode,
                 CategoryName: MemberRecord.CategoryName,
                 NationalityCode: MemberRecord.NationalityCode,
                 NationalityName: MemberRecord.NationalityName,
                 premiums: '',
                 InceptionDate: MemberRecord.InceptionDate,
                 ISExistingMember: MemberRecord.ISExistingMember,
                 Existing_Insurer: MemberRecord.Existing_Insurer,
                 DateOfEntry: '',
                 COCExpiry: MemberRecord.COCExpiry,
                 Occupation: MemberRecord.Occupation,
                 Address1: MemberRecord.Address1,
                 Address2: MemberRecord.Address2,
                 PhoneNo: MemberRecord.PhoneNo,
                 MobileNo: MemberRecord.MobileNo,
                 Email_ID: MemberRecord.Email_ID,
                 PassportNo: MemberRecord.PassportNo,
                 Height: MemberRecord.Height,
                 Weight: MemberRecord.Weight,
                 EmiratesId: MemberRecord.EmiratesId,
                 StaffId: MemberRecord.StaffId,
                 DiscountPCT: MemberRecord.DiscountPCT,
                 LoadingPCT: MemberRecord.LoadingPCT,
                 Location: MemberRecord.Location,
                 IsBasePremiumAvail: '',
                 LegalEntityCode: 1,
                 CustomerCode: 1,
                 IsBasePremiumAvail: 0,
                 LocationCode: login.LocationCode,
                 CompanyCode: login.CompanyCode,
                 QReqMemberPremiumList: null,
                 QReqMemberPremiumDtlList: null,
                 QReqMemberAddPremiumDtlList: null,
                 ParentGroupCode: 0,
                 ParentGroupName: '',
                 InceptionDate: null,
                 ISExistingMember: true,
                 Existing_Insurer: null,
                 DateOfEntry: null,
                 COCExpiry: null,
                 Occupation: null,
                 Address1: null,
                 Address2: null,
                 PhoneNo: null,
                 MobileNo: null,
                 Email_ID: null,
                 PassportNo: null,
                 Height: null,
                 EmiratesId: null,
                 StaffId: null,
                 DiscountPCT: null,
                 LoadingPCT: null,
                 Weight: null,
                 IsNew: true,
                 IsDirty: true,
                 IsDeleted: false,
                 IsSavable: true,
                 IsValid: true*/
            });
            QuotationRequestMemberDltList.stopEditing();
            QuotationRequestMemberDltList.store.add(newRecord);
            QuotationRequestMemberDltList.store.totalLength = QuotationRequestMemberDltList.store.getTotalCount() + 1;
            QuotationRequestMemberDltList.pageBar.updateInfo();

            var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
            QuotationRequestMemberDltList.store.load({
                params: {
                    start: 0,
                    limit: QuotationRequestMemberDltList.pageSize
                }
            });

        }
    }
}


function OnTemplateCodeChange(combo, record, index) {
    var Request_Code = Ext.getCmp('QuotationRequest').selectedIndex;


    Template = combo.getValue();


    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ElementTemplate',
            Template: Template

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnTemplateCodeChangeComplete, this);
}

function OnTemplateCodeChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnTemplateCodeChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var grdFunctionality = Ext.getCmp('QuotationReqElementDetList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();


    var PrimKey = Ext.getCmp('QuotationRequest').selectedIndex;

    var QuotationReqElementDetList = Ext.getCmp('QuotationReqElementDetList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Provider
        var Record = responseText.datum[cnt];
        QuotationReqElementDetList.storeId += 1;
        var newRecord = new QuotationReqElementDetList.recordType({
            ID: QuotationReqElementDetList.storeId,
            Serialno: QuotationReqElementDetList.storeId,
            Element_Code: Record.ElementCode,
            Element_Name: Record.ElementName,
            Request_Code: (PrimKey == -1 ? 1 : PrimKey),
            Description: Record.Remarks,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            CreatedIn: null,
            CreatedOn: null,
            CustomerCode: null,
            LegalentityCode: null,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        QuotationReqElementDetList.stopEditing();
        QuotationReqElementDetList.store.add(newRecord);
        QuotationReqElementDetList.store.totalLength = QuotationReqElementDetList.store.getTotalCount() + 1;
        QuotationReqElementDetList.pageBar.updateInfo();

    }


}

function QReqCalcPremiumHandler(form, login) {

    if (!form.isView) {
        var BasePremium = Ext.getCmp('QuotationRequest-Base_perimum').getValue();

        if (BasePremium = '' || BasePremium == null || BasePremium == 0) {
            Ext.MessageBox.alert(login.modulename, 'Please enter Gross Price value!');
            return;
        }
        var CategoryCount = Ext.getCmp('QuotationRequestCategoryDltList').store.getCount();
        if (CategoryCount < 1) {
            Ext.MessageBox.alert(login.modulename, 'Category Detail Must have one Record! Cannot Calculate!');
            return;
        }
        var MemberCount = Ext.getCmp('QuotationRequestMemberDltList').store.getCount();
        if (MemberCount < 1) {
            Ext.MessageBox.alert(login.modulename, 'Member Detail Must have one Record! Cannot Calculate!');
            return;
        }

        var QuotationRequestCategoryDltList = Ext.getCmp('QuotationRequestCategoryDltList');
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
        for (cnt = 0; cnt < QuotationRequestMemberDltList.store.getCount() ; cnt++) {
            MemberRecord = QuotationRequestMemberDltList.store.getAt(cnt);
            var Valid = false;
            for (Count = 0; Count < QuotationRequestCategoryDltList.store.getCount() ; Count++) {
                CategoryRecord = QuotationRequestCategoryDltList.store.getAt(Count);
                if (MemberRecord.get('CategoryCode') == CategoryRecord.get('CategoryCode'))
                    Valid = true;
            }
            if (!Valid) {
                Ext.MessageBox.alert(login.modulename, 'In Member Detail, Member ' + MemberRecord.get('Member_Name') + ' Must have one of the Category in Category Detail!');
                return;
                break;
            }
        }
    }

    var QReqMemberPremiumList = Ext.getCmp('QReqMemberPremiumList');
    if (QReqMemberPremiumList.store.getCount() > 0) {
        Ext.MessageBox.confirm(login.modulename, 'Premium value already calculated. Do you want to calculate again ?', function (button) {
            if (button == 'yes') {

                onBusinessTypeclear('QReqMemberPremiumList');

                var QReqMember = [];
                var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
                var count = 0
                for (cnt = 0; cnt < QuotationRequestMemberDltList.store.getCount() ; cnt++) {
                    QReqMember.push(Ext.encode(QuotationRequestMemberDltList.store.getAt(cnt).data));
                }

                var QReqMemberDetecordRow = '[' + QReqMember.join(',') + ']';


                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRPosting.aspx',
                    params: {
                        action: 'QReqBenefitPremiumFilter',
                        QuotationCode: Ext.getCmp('QuotationRequest').selectedIndex,
                        QReqMemberDetecordRow: QReqMemberDetecordRow,
                        BasePremium: Ext.getCmp('QuotationRequest-Base_perimum').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });

                Ext.Ajax.on('requestcomplete', QReqBenefitPremiumFilterCompleted, this);
            }
        }, this);
    }
    else {
        onBusinessTypeclear('QReqMemberPremiumList');

        var QReqMember = [];
        var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
        var count = 0
        for (cnt = 0; cnt < QuotationRequestMemberDltList.store.getCount() ; cnt++) {
            QReqMember.push(Ext.encode(QuotationRequestMemberDltList.store.getAt(cnt).data));
        }

        var QReqMemberDetecordRow = '[' + QReqMember.join(',') + ']';


        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'QReqBenefitPremiumFilter',
                QuotationCode: Ext.getCmp('QuotationRequest').selectedIndex,
                QReqMemberDetecordRow: QReqMemberDetecordRow,
                BasePremium: Ext.getCmp('QuotationRequest-Base_perimum').getValue()
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });

        Ext.Ajax.on('requestcomplete', QReqBenefitPremiumFilterCompleted, this);
    }



    //var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
    //var QReqMemberPremiumGrid = Ext.getCmp('QReqMemberPremiumList');
    //QReqMemberPremiumGrid.store.pruneModifiedRecords = true;
    //QReqMemberPremiumGrid.store.added = [];
    //QReqMemberPremiumGrid.store.modified = [];
    //QReqMemberPremiumGrid.store.pruneModifiedRecords = false;
    //QReqMemberPremiumGrid.pageBar.updateInfo();
    //for (var i = 0; i < QuotationRequestMemberDltList.store.getCount() ; i++) {
    //    var record = QuotationRequestMemberDltList.store.getAt(i);
    //    if (record.get('IsNew') == true || record.get('IsBasePremiumAvail') == 0) {
    //        QReqMemberPremiumGrid.storeId += 1;
    //var newRecord = new QReqMemberPremiumGrid.recordType({
    //    ID: QReqMemberPremiumGrid.storeId,
    //    SerialNo: QReqMemberPremiumGrid.storeId,
    //    Quot_Req_Mem_Code: record.get('ID'),
    //    BenefitIDCode: null,
    //    BenefitIDName: null,
    //    Premium_TypeCode: 0,
    //    Premium_TypeName: 'Base',
    //    Description: 'Base',
    //    DefaultValue: Ext.getCmp('QuotationRequest-Base_perimum').getValue(),
    //    CalcMethodCode: 0,
    //    CalcMethodName: 'Amount',
    //    Premium_Value: Ext.getCmp('QuotationRequest-Base_perimum').getValue(),
    //    LegalEntityCode: 0,
    //    CustomerCode: 0,
    //    CompanyCode: record.get('CompanyCode'),
    //    LocationCode: record.get('LocationCode'),
    //    IsNew: true,
    //    IsDirty: true,
    //    IsDeleted: false,
    //    IsSavable: true,
    //    IsValid: true
    //});
    //        QReqMemberPremiumGrid.stopEditing();
    //        QReqMemberPremiumGrid.store.add(newRecord);
    //        QReqMemberPremiumGrid.store.totalLength = QReqMemberPremiumGrid.store.getTotalCount() + 1;
    //        QReqMemberPremiumGrid.pageBar.updateInfo();
    //        record.set('IsDirty', true);
    //    }
    //}

    //var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
    //QuotationRequestMemberDltList.store.load({
    //    params: {
    //        start: 0,
    //        limit: QuotationRequestMemberDltList.pageSize
    //    }
    //});
}

function QReqBenefitPremiumFilterCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', QReqBenefitPremiumFilterCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var QuotationRequestMemberDltList = Ext.getCmp('QuotationRequestMemberDltList');
    var QReqMemberPremiumList = Ext.getCmp('QReqMemberPremiumList');

    var TotalFinalPremium = 0;

    //for (var i = 0; i < QuotationRequestMemberDltList.store.getCount() ; i++) {
    //    var record = QuotationRequestMemberDltList.store.getAt(i);

    //    QReqMemberPremiumList.storeId += 1;
    //    //if (record.get('IsNew') == true || record.get('IsBasePremiumAvail') == 0) {}
    //    var newRecord = new QReqMemberPremiumList.recordType({
    //        ID: QReqMemberPremiumList.storeId,
    //        SerialNo: QReqMemberPremiumList.storeId,
    //        Quot_Req_Mem_Code: record.get('ID'),
    //        BenefitIDCode: null,
    //        BenefitIDName: null,
    //        Premium_TypeCode: 0,
    //        Premium_TypeName: 'Base',
    //        Description: 'Base',
    //        DefaultValue: Ext.getCmp('QuotationRequest-Base_perimum').getValue(),
    //        CalcMethodCode: 0,
    //        CalcMethodName: 'Amount',
    //        Premium_Value: Ext.getCmp('QuotationRequest-Base_perimum').getValue(),
    //        LegalEntityCode: 0,
    //        CustomerCode: 0,
    //        CompanyCode: record.get('CompanyCode'),
    //        LocationCode: record.get('LocationCode'),
    //        IsNew: true,
    //        IsDirty: true,
    //        IsDeleted: false,
    //        IsSavable: true,
    //        IsValid: true
    //    });
    //    TotalFinalPremium += (1 * Ext.getCmp('QuotationRequest-Base_perimum').getValue());
    //    QReqMemberPremiumList.stopEditing();
    //    QReqMemberPremiumList.store.add(newRecord);
    //    QReqMemberPremiumList.store.totalLength = QReqMemberPremiumList.store.getTotalCount() + 1;
    //    QReqMemberPremiumList.pageBar.updateInfo();
    //    record.set('IsDirty', true);

    //}

    for (cnt = 0; cnt < responseText.MemberBenefitdatum.length; cnt++) { //Member Detalis
        var Record = responseText.MemberBenefitdatum[cnt];
        var DocAvailable = false;

        QReqMemberPremiumList.storeId += 1;
        var newRecord = new QReqMemberPremiumList.recordType({
            ID: QReqMemberPremiumList.storeId,
            SerialNo: QReqMemberPremiumList.storeId,
            Quot_Req_Mem_Code: Record.MemberCode,
            BenefitIDCode: Record.BeniftCode,
            BenefitIDName: Record.BenefitId,
            Premium_TypeCode: Record.PremiumType,
            Premium_TypeName: Record.PremiumType == 0 ? 'Base' : 'Benefit',
            Description: Record.Description,
            DefaultValue: Record.Premium,
            CalcMethodCode: 0,
            CalcMethodName: 'Amount',
            Premium_Value: Record.Premium,
            LegalEntityCode: 0,
            CustomerCode: 0,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        TotalFinalPremium += (1 * Record.Premium);
        QReqMemberPremiumList.stopEditing();
        QReqMemberPremiumList.store.add(newRecord);
        QReqMemberPremiumList.store.totalLength = QReqMemberPremiumList.store.getTotalCount() + 1;
        QReqMemberPremiumList.pageBar.updateInfo();
    }
    var detailGrid = Ext.getCmp('QuotationRequestMemberDltList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
    Ext.getCmp('QuotationRequest-Final_premium').setValue(TotalFinalPremium);
}

var QRequest_Code = '', QReqAgentCode = '', QReqBrokerCode = '', QReqMemberCode = '', QReqGroupCode = '', QReqNOB = '', QReqClaimUtilization = '', QReqExistingBenefit = '', QReqIsConfirmation = 0;
var QuotationCategoryCode = '';
function QuotationRequestCategory(form, login) {
    var QuotationRequest = Ext.getCmp('QuotationRequest');
    if (QuotationRequest.selectedIndex == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the file!');
        return;
    }
    else {

        var QuotationRequestCategoryDltList = Ext.getCmp('QuotationRequestCategoryDltList');
        var record = '';
        var count = QuotationRequestCategoryDltList.store.getCount();
        for (var i = 0; i < count; i++) {
            record += QuotationRequestCategoryDltList.store.getAt(i).get('CategoryCode');
            if (i < count - 1)
                record += ',';
        }
        QuotationCategoryCode = record;
        QRequest_Code = Ext.getCmp('QuotationRequest').selectedIndex;
        QReqAgentCode = Ext.getCmp('QuotationRequest-AgentCode').editValue;
        QReqGroupCode = Ext.getCmp('QuotationRequest-GroupCode').editValue;
        QReqMemberCode = Ext.getCmp('QuotationRequest-MemberCode').editValue;
        QReqBrokerCode = Ext.getCmp('QuotationRequest-BorkerCode').editValue;
        QReqNOB = Ext.getCmp('QuotationRequest-NatureOfBusinessCode').editValue;
        QReqClaimUtilization = Ext.getCmp('QuotationRequest-ClaimUtilization').getValue();
        QReqExistingBenefit = Ext.getCmp('QuotationRequest-ExistingBenefitsDetails').getValue();
        QReqIsConfirmation = Ext.getCmp('QuotationRequest-IsConfirmationAttached').getValue();

        var QuotationRequestCategory = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.QuotationRequestCategoryPopup';
        var Url = '/forms/HumanResources/NGI/UnderWritting/QuotationRequestCategoryPopup.xml';
        var PKey = -1;
        var WidgetTitle = 'Quotation Request Category';
        QuotationRequestCategory.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
    }
}


function QuotationRequestCategoryPopup(form, login) {

    if (form.selectedIndex == -1) {
        var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
        var Categorycode = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode');
        if (PolicyTypeCode.editValue == 1) {

            Categorycode.setComboValue('100000000000000001');
            Categorycode.disable();
        }
        else {
            Categorycode.enable();
        }
    }

    if (!form.isview) {

        var QReqOverRidePerProviderDtlList = Ext.getCmp('QReqOverRidePerProviderDtlList');
        var QRequestOverRideProviderDtlList = Ext.getCmp('QRequestOverRideProviderDtlList');

        Ext.getCmp('QuotationRequestCategoryPopup-DedectableTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequestCategoryPopup-LimitTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequestCategoryPopup-CoInTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequestCategoryPopup-OONDedectableTypeCode').setComboValue(0);
        Ext.getCmp('QuotationRequestCategoryPopup-OONCoInTypeCode').setComboValue(0);

        var Limits = Ext.getCmp('QuotationRequestCategoryPopup-Limits');
        var LimitTypeCode = Ext.getCmp('QuotationRequestCategoryPopup-LimitTypeCode');
        var OONDedectableValue = Ext.getCmp('QuotationRequestCategoryPopup-OONDedectableValue');
        var OONDedectableTypeCode = Ext.getCmp('QuotationRequestCategoryPopup-OONDedectableTypeCode');
        var DedectableValue = Ext.getCmp('QuotationRequestCategoryPopup-DedectableValue');
        var DedectableTypeCode = Ext.getCmp('QuotationRequestCategoryPopup-DedectableTypeCode');

        Limits.on('change', function (field) {
            var val = Limits.getValue();
            if (OONDedectableValue.getValue() == null || OONDedectableValue.getValue() == '') {
                OONDedectableValue.setValue(val);
            }
            if (DedectableValue.getValue() == null || DedectableValue.getValue() == '') {
                DedectableValue.setValue(val);
            }
        }, this);

        if (LimitTypeCode) LimitTypeCode.on('select', function (combo, record, index) {
            var ComVal = LimitTypeCode.editValue;
            if (OONDedectableValue.getValue() == Limits.getValue()) {
                OONDedectableTypeCode.setComboValue(ComVal);
            }
            if (DedectableValue.getValue() == Limits.getValue()) {
                DedectableTypeCode.setComboValue(ComVal);
            }
        }, this);


        //var Altlimit = Ext.getCmp('QuotationRequestCategoryPopup-AltLimits');
        //if (Altlimit) Altlimit.on('change', function (field) {
        //    var Oplimit = Ext.getCmp('QuotationRequestCategoryPopup-OptLimits');
        //    var Iplimit = Ext.getCmp('QuotationRequestCategoryPopup-IptLimits');
        //    if (Iplimit.getValue() == null || Iplimit.getValue() == '' || Iplimit.getValue() == 0) {
        //        Iplimit.setValue(field.getValue());
        //    }
        //    if (Oplimit.getValue() == null || Oplimit.getValue() == '' || Oplimit.getValue() == 0) {
        //        Oplimit.setValue(field.getValue());
        //    }
        //}, this);

        //var EmgDetectWINetwValue = Ext.getCmp('QuotationRequestCategoryPopup-EmgDetectWINetwValue');
        //if (EmgDetectWINetwValue) EmgDetectWINetwValue.on('change', function (field) {
        //    var EmgDetectOONetwValue = Ext.getCmp('QuotationRequestCategoryPopup-EmgDetectOONetwValue');
        //    if (EmgDetectOONetwValue.getValue() == null || EmgDetectOONetwValue.getValue() == '' || EmgDetectOONetwValue.getValue() == 0) {
        //        EmgDetectOONetwValue.setValue(field.getValue());
        //    }
        //}, this);

        form.findById('QRequestOverRideProviderDtlList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 0);
            evt.record.set('LimitTypeName', 'Amount');
            evt.record.set('CoInTypeCode', 0);
            evt.record.set('CoInTypeName', 'Amount');
            evt.record.set('DedectableTypeCode', 0);
            evt.record.set('DedectableTypeName', 'Amount');
            evt.record.set('OONDedectableTypeCode', 0);
            evt.record.set('OONDedectableTypeName', 'Amount');
            evt.record.set('OONCoInTypeCode', 0);
            evt.record.set('OONCoInTypeCodeName', 'Amount');
        }, this);
        form.findById('QReqOverRidePerProviderDtlList').on('addrecord', function (evt) {
            evt.record.set('LimitTypeCode', 0);
            evt.record.set('LimitTypeName', 'Amount');
            evt.record.set('CoInTypeCode', 0);
            evt.record.set('CoInTypeName', 'Amount');
            evt.record.set('DedectableTypeCode', 0);
            evt.record.set('DedectableTypeName', 'Amount');
            evt.record.set('OONDedectableTypeCode', 0);
            evt.record.set('OONDedectableTypeName', 'Amount');
            evt.record.set('OONCoInTypeCode', 0);
            evt.record.set('OONCoInTypeCodeName', 'Amount');
        }, this);

        if (form.selectedIndex == -1) {


            Ext.getCmp('QuotationRequestCategoryPopup-Request_Code').setValue(QRequest_Code);
            Ext.getCmp('QuotationRequestCategoryPopup-AgentCode').setComboValue(QReqAgentCode);
            Ext.getCmp('QuotationRequestCategoryPopup-GroupCode').setComboValue(QReqGroupCode);
            Ext.getCmp('QuotationRequestCategoryPopup-MemberCode').setComboValue(QReqMemberCode);
            Ext.getCmp('QuotationRequestCategoryPopup-BorkerCode').setComboValue(QReqBrokerCode);
            Ext.getCmp('QuotationRequestCategoryPopup-NatureOfBusinessCode').setComboValue(QReqNOB);
            Ext.getCmp('QuotationRequestCategoryPopup-Claim_utilization').setValue(QReqClaimUtilization);
            Ext.getCmp('QuotationRequestCategoryPopup-Existing_benefits_details').setValue(QReqExistingBenefit);
            Ext.getCmp('QuotationRequestCategoryPopup-Is_confirmation_attached').setValue(QReqIsConfirmation);

            var QRGroupCode = Ext.getCmp('QuotationRequestCategoryPopup-GroupCode').editValue;
            var PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode');
            PlanCode.on('select', OnQReqPlanCodeChange, this);

            var CategoryCode = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode');
            if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                if (QuotationCategoryCode != '') {
                    evt.combo.store.baseParams.filter = " CAT.CATEGORY_CODE not in (" + QuotationCategoryCode + ") and Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where status=0 and GROUP_CODE=" + QRGroupCode + ") ";
                }
                else {
                    evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE in (select CATEGORY_CODE from IM_GROUP_CATEGORIES where status=0 and GROUP_CODE=" + QRGroupCode + ") ";
                }

            }, this)
        }

        Ext.getCmp('QuotationRequestCategoryPopup-FrontingSettingCode').disable();
        var IsfrontingGroup = Ext.getCmp('QuotationRequestCategoryPopup-IsfrontingGroup');
        if (IsfrontingGroup) IsfrontingGroup.on('check', QReqCatPopupIsfrontingGroupCheck, this);

        var IncludeProvider = Ext.getCmp('QReqIncludedProvider-ProviderCode');
        var PKey = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;

        if (IncludeProvider) IncludeProvider.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            //evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PLANPROVIDERDTL where PLAN_CODE=" + PlanCode.editValue + ")";
            evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select NETWORKCODE from IM_QUOREQ_COVEREDNETWORK where QUOT_REQ_CATEGORYCODE=" + PKey + " and ACTIVE=1  ))";
        }, this);

        var ProviderCode = Ext.getCmp('QReqExcludedProvider-ProviderCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            var IncludeProviderGrid = Ext.getCmp('QReqIncludedProviderList');
            var ProviderCodes = '';
            var count = IncludeProviderGrid.store.getCount();
            for (var i = 0; i < count ; i++) {
                ProviderCodes += IncludeProviderGrid.store.getAt(i).get('ProviderCode') + ',';;
            }
            if (ProviderCodes != '') ProviderCodes = ProviderCodes.substring(0, ProviderCodes.length - 1);
            if (ProviderCodes != '') {
                evt.combo.store.baseParams.filter = (" pro.PROVIDERCODE not in (" + ProviderCodes + ") ");
            }
            else
                //evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from IM_PLANPROVIDERDTL where PLAN_CODE=" + PlanCode.editValue + ")";
                evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select NETWORKCODE from IM_QUOREQ_COVEREDNETWORK where QUOT_REQ_CATEGORYCODE=" + PKey + " and ACTIVE=1  ))";

        }, this);

        var BenefitIDCode = Ext.getCmp('QuotationReqExistingBenefits-BenefitIDCode');
        if (BenefitIDCode) BenefitIDCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            var ReqBenefitGrid = Ext.getCmp('QuotationReqRequestedBenefitsList');
            var BenefitIDCodes = '';
            var count = ReqBenefitGrid.store.getCount();
            for (var i = 0; i < count ; i++) {
                BenefitIDCodes += ReqBenefitGrid.store.getAt(i).get('BenefitIDCode');
                if (i < count - 1)
                    BenefitIDCodes += ',';
            }

            if (BenefitIDCodes != '') {
                evt.combo.store.baseParams.filter = (" BEN.BENEFIT_CODE not in (" + BenefitIDCodes + ") ");
            }
            else
                evt.combo.store.baseParams.filter = "1=1";

        }, this);

        /*
        Ext.getCmp('QuotationReqRequestedBenefitsList').on('beforedelete', function (record) {
            Ext.getCmp('QuotationReqRequestedBenefitsList').DelMsg = 'You Cannot Delete Data !'

            if (record.get('Active') == true || record.get('Active') == false)
                return false;

        }, this);*/


        var Total = Ext.getCmp('QuotationRequestCategoryPopup-TotalPremium');
        var QuotationReqExistingBenefitsList = Ext.getCmp('QuotationReqExistingBenefitsList');
        var QuotationReqRequestedBenefitsList = Ext.getCmp('QuotationReqRequestedBenefitsList');
        var AmountSum = 0;
        var AmountSum1 = 0;
        var Sum = 0;

        QuotationReqExistingBenefitsList.on('afteredit', function (e) {//Existing Benifits, Total Premium Calculation

            AmountSum = 0;
            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                if (e.grid.store.getAt(i).get('Active') == true)
                    AmountSum += (1 * e.grid.store.getAt(i).get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);

        }, this);

        QuotationReqExistingBenefitsList.getColumnModel().getColumnById('Active').on('rowclick', function (column, e, record, dataindex) {//Existing Benifits, Total Premium Calculation

            var QuotationReqExistingBenefitsList = Ext.getCmp('QuotationReqExistingBenefitsList');
            AmountSum = 0;

            for (var i = 0; i < QuotationReqExistingBenefitsList.store.getCount() ; i++) {
                var record = QuotationReqExistingBenefitsList.store.getAt(i);
                if (record.get('Active') == true)
                    AmountSum += (1 * record.get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);

        }, this);

        var QuotationExistingBenefitsList = Ext.getCmp('QuotationReqExistingBenefitsList').getStore();

        QuotationExistingBenefitsList.on('load', function (store, record, options) {

            AmountSum = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                if (store.getAt(i).get('Active') == true)
                    AmountSum += (1 * store.getAt(i).get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);
        }, this);




        QuotationReqRequestedBenefitsList.on('afteredit', function (e) {//Request Benifits, total Premium Calculation
            AmountSum1 = 0;

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                if (e.grid.store.getAt(i).get('Active') == true)
                    AmountSum1 += (1 * e.grid.store.getAt(i).get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);

        }, this);


        QuotationReqRequestedBenefitsList.getColumnModel().getColumnById('Active').on('click', function onTotalPremiumActiveClick(column, e, record, dataindex) {

            var QuotationReqRequestedBenefitsList = Ext.getCmp('QuotationReqRequestedBenefitsList');
            AmountSum1 = 0;

            for (var i = 0; i < QuotationReqRequestedBenefitsList.store.getCount() ; i++) {
                var record = QuotationReqRequestedBenefitsList.store.getAt(i);
                if (record.get('Active') == true)
                    AmountSum1 += (1 * record.get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);

        }, this);

        var QuotationReqRequested = Ext.getCmp('QuotationReqRequestedBenefitsList').getStore();
        QuotationReqRequested.on('load', function (store, record, options) {
            AmountSum1 = 0;
            for (var i = 0; i < store.getCount() ; i++) {
                if (store.getAt(i).get('Active') == true)
                    AmountSum1 += (1 * store.getAt(i).get('DefaultPremium'));

            }
            Total.setValue(AmountSum + AmountSum1);

        }, this);


        Ext.getCmp('QuotationRequestCategoryPopup_editform').on('close', onBeforecloseQuoCategoryPopUp, this);

        var QReqCoveredNetworkList = Ext.getCmp('QReqCoveredNetworkList');

        QReqCoveredNetworkList.on('beforedelete', function (record) {
            Ext.getCmp('QReqCoveredNetworkList').DelMsg = 'You Cannot Delete Data !'
            if (record.get('IsNew') == false)
                return false;
        }, this);
    }
    var ElementTemplateCode = Ext.getCmp('QuotationRequestCategoryPopup-ElementTemplateCode');
    ElementTemplateCode.on('select', OnElementTemplateCodeChange, this);


    var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
    var QuotationTypeCode = Ext.getCmp('QuotationRequest-QuotationTypeCode');

    if (PolicyTypeCode) PolicyTypeCode.on('select', function (combo, record, index) {
        QuotationTypeCode.clearValue(); ElementTemplateCode.clearValue();
        var QReqElementDltList = Ext.getCmp('QReqElementDltList');
        onBusinessTypeclear('QReqElementDltList');
    }, this);

    if (QuotationTypeCode) QuotationTypeCode.on('select', function (combo, record, index) {
        ElementTemplateCode.clearValue();
        var QuotationReqElementDetList = Ext.getCmp('QReqElementDltList');
        onBusinessTypeclear('QReqElementDltList');
    }, this);

    if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
        if (PolicyTypeCode.editValue == 0) {
            evt.combo.lastQuery = '1=2';
            if (ElementTemplateCode != '')
                evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=0 and TEM.QUOTATION_TYPE=" + QuotationTypeCode.editValue + "";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }
    }, this);


    if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
        if (PolicyTypeCode.editValue == 1) {
            evt.combo.lastQuery = '1=2';
            if (ElementTemplateCode != '')
                evt.combo.store.baseParams.filter = "TEM.ISINDIVIDUAL=1 and TEM.QUOTATION_TYPE=" + QuotationTypeCode.editValue + "";
            else
                evt.combo.store.baseParams.filter = "1=2";
        }
    }, this);

    var ReportTemplateCode = Ext.getCmp('QuotationRequestCategoryPopup-ReportTemplateCode');

    if (ReportTemplateCode) ReportTemplateCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (ReportTemplateCode != '')
            evt.combo.store.baseParams.filter = "RPT.MENUID='ID_QUOTATIONREQUEST'";
        else
            evt.combo.store.baseParams.filter = "1=2";
    }, this);

    var PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode');
    var QuotationTypeCode = Ext.getCmp('QuotationRequest-QuotationTypeCode');
    var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');

    if (PlanCode) PlanCode.on('beforequery', function (evt) {
        /*
        evt.combo.lastQuery = '1=2';
        if (PlanCode != '')
            evt.combo.store.baseParams.filter = "plan.OwnerCode=" + QuotationTypeCode.editValue + "";
        else
            evt.combo.store.baseParams.filter = "1=2";
            */
        var IsIndivialPlan = 0;
        if (PolicyTypeCode.editValue == 1)
            IsIndivialPlan = 1;

        evt.combo.lastQuery = '1=2';
        if (PlanCode != '')
            evt.combo.store.baseParams.filter = "plan.OwnerCode=" + QuotationTypeCode.editValue + " and nvl(Plan.INDIVIDUAL_PLAN,0)=" + IsIndivialPlan + " ";
        else
            evt.combo.store.baseParams.filter = "1=2";

    }, this);

    if (PolicyTypeCode.editValue == 1) { // Policy
        EmirateCode = Ext.getCmp('QuotationRequestCategoryPopup-EmirateCode');
        EmirateCode.allowBlank = false;
        EmirateCode.isValid();
    }

    QRequest_Code = '', QReqAgentCode = '', QReqBrokerCode = '', QReqMemberCode = '', QReqGroupCode = '', QReqNOB = '', QReqClaimUtilization = '', QReqExistingBenefit = '', QReqIsConfirmation = 0;


    var PolicyTypeCode = Ext.getCmp('QuotationRequest-PolicyTypeCode');
    if (PolicyTypeCode.editValue == 1) {  // Individual Policy
        Ext.getCmp('QReqAgeWizePremiumDltList').store.on('load', function (store, record, options) {
            Ext.getCmp('QReqAgeWizePremiumDltList_addNew').setVisible(false);
        }, this);
    }

    var CardTextArea = Ext.getCmp('QuotationRequestCategoryPopup-CardTextArea');
    var QReqAgeWizePremiumDltList = Ext.getCmp('QReqAgeWizePremiumDltList');

    QReqAgeWizePremiumDltList.on('rowclick', function (grid, rowIndex, e) {
        QReqAgeWizePremiumDltList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);

        CardTextArea.setValue(Record.get('CardText'));
    }, this);

    QReqAgeWizePremiumDltList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        QReqAgeWizePremiumDltList.lastSelectedRecord = Record;
        CardTextArea.setValue(Record.get('CardText'));
    }, this);


    if (CardTextArea) CardTextArea.on('valid', function (text1, oldval, newval) {
        if (QReqAgeWizePremiumDltList.lastSelectedRecord)
            QReqAgeWizePremiumDltList.lastSelectedRecord.set('CardText', CardTextArea.getValue())
    }, this);

    var CardText = Ext.getCmp('QuotationRequestCategoryPopup-CardText');
    var QuotationReqRequestedBenefitsList = Ext.getCmp('QuotationReqRequestedBenefitsList');

    QuotationReqRequestedBenefitsList.on('rowclick', function (grid, rowIndex, e) {
        QuotationReqRequestedBenefitsList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);

        CardText.setValue(Record.get('CardText'));
    }, this);

    QuotationReqRequestedBenefitsList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        QuotationReqRequestedBenefitsList.lastSelectedRecord = Record;
        CardText.setValue(Record.get('CardText'));
    }, this);


    if (CardText) CardText.on('valid', function (text1, oldval, newval) {
        if (QuotationReqRequestedBenefitsList.lastSelectedRecord)
            QuotationReqRequestedBenefitsList.lastSelectedRecord.set('CardText', CardText.getValue())
    }, this);

}

function OnElementTemplateCodeChange(combo, record, index) {
    var Request_Code = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;


    Request_Code = combo.getValue();


    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ElementTemplate',
            Template: Request_Code

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnElementTemplateCodeChangeComplete, this);
}

function OnElementTemplateCodeChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnElementTemplateCodeChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    var grdFunctionality = Ext.getCmp('QReqElementDltList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();


    var PrimKey = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;

    var QReqElementDltList = Ext.getCmp('QReqElementDltList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Provider
        var Record = responseText.datum[cnt];
        QReqElementDltList.storeId += 1;
        var newRecord = new QReqElementDltList.recordType({
            ID: QReqElementDltList.storeId,
            Serialno: QReqElementDltList.storeId,
            Element_Code: Record.ElementCode,
            Element_Name: Record.ElementName,
            Quot_Req_CategoryCode: (PrimKey == -1 ? 1 : PrimKey),
            Description: Record.Remarks,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            CreatedIn: null,
            CreatedOn: null,
            CustomerCode: null,
            LegalentityCode: null,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        QReqElementDltList.stopEditing();
        QReqElementDltList.store.add(newRecord);
        QReqElementDltList.store.totalLength = QReqElementDltList.store.getTotalCount() + 1;
        QReqElementDltList.pageBar.updateInfo();

    }


}

function onBeforecloseQuoCategoryPopUp(form, action) {

    var detailGrid = Ext.getCmp('QuotationRequestCategoryDltList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}

function QReqCatPopupIsfrontingGroupCheck(field, Checked) {

    var FrontingSettingCode = Ext.getCmp('QuotationRequestCategoryPopup-FrontingSettingCode').disable();
    if (Checked) {
        FrontingSettingCode.enable();
        FrontingSettingCode.allowBlank = false;
        FrontingSettingCode.isValid();
    } else {
        FrontingSettingCode.allowBlank = true;
        FrontingSettingCode.clearValue();
        FrontingSettingCode.disable();
    }
}

function OnQReqPlanCodeChange(combo, record, index) {

    onBusinessTypeclear('QReqCoveredNetworkList');
    onBusinessTypeclear('QReqGeograficAreasDtlList');
    onBusinessTypeclear('QReqCountryList');
    onBusinessTypeclear('QReqCitiesList');
    onBusinessTypeclear('QReqStateList');
    onBusinessTypeclear('QuotationReqRequestedBenefitsList');

    var PolicyType = Ext.getCmp('QuotationRequest-PolicyTypeCode').editValue;
    var EmirateCode = '';
    if (PolicyType == 1) {
        EmirateCode = Ext.getCmp('QuotationRequestCategoryPopup-EmirateCode').editValue;
        if (EmirateCode == '' || EmirateCode == 0) {
            Ext.MessageBox.alert(login.modulename, 'Select the State/Emirate to Proceed!');
            Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').clearValue();
            return true;
        }
    }
    else {
        EmirateCode = 0;
    }

    var PlanCode = Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').editValue;
    var Categorycode1 = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode').getValue();
    if (Categorycode1 == '') {
        Ext.MessageBox.alert(login.modulename, 'Select the Category Name to Proceed!');
        Ext.getCmp('QuotationRequestCategoryPopup-PlanCode').clearValue();
        return true;
    }

    var PolicyCode = Ext.getCmp('QuotationRequestCategoryPopup').selectedIndex;
    //var TypeCode = Ext.getCmp('NGIQuotationMaster-PolicyTypeCode').getValue();
    var Categorycode1 = Ext.getCmp('QuotationRequestCategoryPopup-Categorycode').editValue;


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyLoad',
            PlanCode: PlanCode,
            CategoryCode: Categorycode1,
            PolicyCode: PolicyCode,
            PolicyType: PolicyType,
            EmirateCode: EmirateCode,
            TypeCode: 2,
            IsChangePlan: 0

        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnQReqPlanCodeChangeComplete, this);

}

function OnQReqPlanCodeChangeComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', OnQReqPlanCodeChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var IndAgeDetailGrid = Ext.getCmp('QReqAgeWizePremiumDltList');

        for (cnt = 0; cnt < responseText.agetotalCount; cnt++) { //Age Details
            var AgeRecord = responseText.agedatum[cnt];
            IndAgeDetailGrid.storeId += 1;
            var newRecord = new IndAgeDetailGrid.recordType({
                ID: IndAgeDetailGrid.storeId,
                SerialNo: IndAgeDetailGrid.storeId,
                Quot_Req_CategoryCode: 1,
                AgeFrom: AgeRecord.AgeFrom,
                AgeTo: AgeRecord.AgeTo,
                Premium: AgeRecord.Premium,
                GenderCode: AgeRecord.GenderCode,
                GenderName: AgeRecord.GenderName,
                ApplicableForCode: AgeRecord.ApplicableForCode,
                ApplicableForName: AgeRecord.ApplicableForName,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CardText: AgeRecord.CardText,
                QuotationReqAgeWiseSubDtlList: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            IndAgeDetailGrid.stopEditing();
            IndAgeDetailGrid.store.add(newRecord);
            IndAgeDetailGrid.store.totalLength = IndAgeDetailGrid.store.getTotalCount() + 1;
            IndAgeDetailGrid.pageBar.updateInfo();
        }


        var QReqIncludedProviderList = Ext.getCmp('QReqIncludedProviderList');

        for (cnt = 0; cnt < responseText.providertotalCount; cnt++) { //Provider
            var ProviderRecord = responseText.providerdatum[cnt];
            QReqIncludedProviderList.storeId += 1;
            var newRecord = new QReqIncludedProviderList.recordType({
                ID: QReqIncludedProviderList.storeId,
                Serialno: QReqIncludedProviderList.storeId,
                ProviderCode: ProviderRecord.ProviderCode,
                ProviderName: ProviderRecord.ProviderName,
                Active: 1,
                PCDCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            QReqIncludedProviderList.stopEditing();
            QReqIncludedProviderList.store.add(newRecord);
            QReqIncludedProviderList.store.totalLength = QReqIncludedProviderList.store.getTotalCount() + 1;
            QReqIncludedProviderList.pageBar.updateInfo();

        }

        var QReqGeograficAreasDtlGrid = Ext.getCmp('QReqGeograficAreasDtlList');

        for (cnt = 0; cnt < responseText.geographictotalCount; cnt++) {   //Gerograhpic Area
            var Geographicrec = responseText.geographicdatum[cnt];

            QReqGeograficAreasDtlGrid.storeId += 1;

            var newRecord = new QReqGeograficAreasDtlGrid.recordType({

                ID: QReqGeograficAreasDtlGrid.storeId,
                Serialno: QReqGeograficAreasDtlGrid.storeId,
                GaIDName: Geographicrec.GeoGraphicName,
                GaIDCode: Geographicrec.GeoGraphicCode,
                GaName: Geographicrec.GAName,
                Quot_Req_CategoryCode: 1,
                Active: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            QReqGeograficAreasDtlGrid.stopEditing();
            QReqGeograficAreasDtlGrid.store.add(newRecord);

            QReqGeograficAreasDtlGrid.store.totalLength = QReqGeograficAreasDtlGrid.store.getTotalCount() + 1;
            QReqGeograficAreasDtlGrid.pageBar.updateInfo();
        }


        var QReqCoveredNetworkGrid = Ext.getCmp('QReqCoveredNetworkList');

        for (cnt = 0; cnt < responseText.networktotalCount; cnt++) { //Network
            var NetworkRecord = responseText.networkdatum[cnt];
            QReqCoveredNetworkGrid.storeId += 1;
            var newRecord = new QReqCoveredNetworkGrid.recordType({

                ID: QReqCoveredNetworkGrid.storeId,
                Serialno: QReqCoveredNetworkGrid.storeId,
                NetworkIDCode: NetworkRecord.NetworkIDCode,
                NetworkIDName: NetworkRecord.NetworkIDName,
                NetworkName: NetworkRecord.NetworkName,
                ApplicableForCode: NetworkRecord.ApplicableForCode,
                ApplicableForName: NetworkRecord.ApplicableForName,
                Active: 1,
                Quot_Req_CategoryCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            QReqCoveredNetworkGrid.stopEditing();
            QReqCoveredNetworkGrid.store.add(newRecord);
            QReqCoveredNetworkGrid.store.totalLength = QReqCoveredNetworkGrid.store.getTotalCount() + 1;
            QReqCoveredNetworkGrid.pageBar.updateInfo();

        }

        var QuotationReqRequestedBenefitsGrid = Ext.getCmp('QuotationReqRequestedBenefitsList');
        for (cnt = 0; cnt < responseText.benifittotalCount; cnt++) {  //Benefit Detail
            var BenefitRecord = responseText.benifitdatum[cnt];
            QuotationReqRequestedBenefitsGrid.storeId += 1;
            var newRecord = new QuotationReqRequestedBenefitsGrid.recordType({

                ID: QuotationReqRequestedBenefitsGrid.storeId,
                SerialNo: QuotationReqRequestedBenefitsGrid.storeId,
                BenefitTypeCode: 1,
                BenefitTypeName: 'Requested Benefits',
                BenefitIDCode: BenefitRecord.BenefitIDCode,
                BenefitIDName: BenefitRecord.BenefitIDName,
                BenefitName: BenefitRecord.BenefitName,
                ParentName: BenefitRecord.ParentName,
                ApplySettingPremium: BenefitRecord.ApplySettingPremium,
                ApplyFullPermiumRefund: BenefitRecord.ApplyFullPermiumRefund,
                Remarks: '',
                CardText: BenefitRecord.CardText,
                DefaultPremium: BenefitRecord.DefaultPremium,
                Active: 1,
                Quot_Req_CategoryCode: 1,
                LegalEntityCode: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            QuotationReqRequestedBenefitsGrid.stopEditing();
            QuotationReqRequestedBenefitsGrid.store.add(newRecord);
            QuotationReqRequestedBenefitsGrid.store.totalLength = QuotationReqRequestedBenefitsGrid.store.getTotalCount() + 1;
            QuotationReqRequestedBenefitsGrid.pageBar.updateInfo();



        }
        var QuotationReqRequestedBenefitsList = Ext.getCmp('QuotationReqRequestedBenefitsList');
        QuotationReqRequestedBenefitsList.store.load({
            params: {
                start: 0,
                limit: QuotationReqRequestedBenefitsList.pageSize
            }
        });


        var QReqCountryGird = Ext.getCmp('QReqCountryList');
        for (cnt = 0; cnt < responseText.countrytotalCount; cnt++) { //Country Detail
            var CountryRecord = responseText.countrydatum[cnt];
            QReqCountryGird.storeId += 1;
            var newRecord = new QReqCountryGird.recordType({
                ID: QReqCountryGird.storeId,
                Serialno: QReqCountryGird.storeId,
                CountryCode: CountryRecord.CountryCode,
                CountryName: CountryRecord.CountryName,
                Quot_Req_CategoryCode: 1,
                Active: 1,
                QReqStateList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            QReqCountryGird.stopEditing();
            QReqCountryGird.store.add(newRecord);
            QReqCountryGird.store.totalLength = QReqCountryGird.store.getTotalCount() + 1;
            QReqCountryGird.pageBar.updateInfo();

            var QReqStateGrid = Ext.getCmp('QReqStateList');

            for (subcnt = 0; subcnt < responseText.statetotalCount; subcnt++) { //State 
                var StateRecord = responseText.statedatum[subcnt];
                if (CountryRecord.ID != StateRecord.GACountryCode) continue;
                QReqStateGrid.storeId += 1;
                var subnewRecord = new QReqStateGrid.recordType({
                    ID: QReqStateGrid.storeId,
                    Serialno: QReqStateGrid.storeId,
                    ProvinceCode: StateRecord.ProvinceCode,
                    ProvinceName: StateRecord.ProvinceName,
                    Qreq_Cat_Country_Code: QReqCountryGird.storeId,
                    Active: 1,
                    QReqCitiesList: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                QReqStateGrid.stopEditing();
                QReqStateGrid.store.add(subnewRecord);
                QReqStateGrid.store.totalLength = QReqStateGrid.store.getTotalCount() + 1;
                QReqStateGrid.pageBar.updateInfo();

                var QReqCitiesGrid = Ext.getCmp('QReqCitiesList');

                for (subsubcnt = 0; subsubcnt < responseText.citytotalCount; subsubcnt++) { //City Detail
                    var CityRecord = responseText.citydatum[subsubcnt];
                    if (StateRecord.ID != CityRecord.GAEmirateCode) continue;
                    QReqCitiesGrid.storeId += 1;
                    var SubsubnewRecord = new QReqCitiesGrid.recordType({
                        ID: QReqCitiesGrid.storeId,
                        Serialno: QReqCitiesGrid.storeId,
                        PlaceCode: CityRecord.PlaceCode,
                        PlaceName: CityRecord.PlaceName,
                        Qreq_Cat_State_Code: QReqStateGrid.storeId,
                        Active: 1,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    QReqCitiesGrid.stopEditing();
                    QReqCitiesGrid.store.add(SubsubnewRecord);
                    QReqCitiesGrid.store.totalLength = QReqCitiesGrid.store.getTotalCount() + 1;
                    QReqCitiesGrid.pageBar.updateInfo();
                }
            }
        }

    }
}


function QuotationRequesCategoryEdit(record) {
    var QuotationRequest = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.QuotationRequestCategoryPopup';
    var Url = '/forms/HumanResources/NGI/UnderWritting/QuotationRequestCategoryPopup.xml';
    var PKey = -1;
    var WidgetTitle = 'Quotation Request Category';
    QuotationRequest.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);
}

function AddMemberPolicyUnPost(form, login) {
    var Primkey = Ext.getCmp('AddMemberPolicy').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('AddMemberPolicy-AuthorizedStatusCode');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'AddMemberPolicyUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', AddMemberPolicyUnPostComplete, this);
        }
    }, this);

}
function AddMemberPolicyUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddMemberPolicyUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_ADDMEMBERPOLICY_editform').close();

    }
}

function AddMemberPolicy(form, btnlogin) {

    if (form.selectedIndex == -1) {
        //Ext.getCmp('AddMemberPolicy-TemplateCode').setValue('65');
    }


    if (!form.isView) {

        var AddMemberPolicyMemberDetList = Ext.getCmp('AddMemberPolicyMemberDetList');
        AddMemberPolicyMemberDetList.on('addrecord', function (evt) {
            evt.record.set('MemberRelationCode', 15);
            evt.record.set('MemberRelationName', 'Self');
        }, this);

        Ext.getCmp('AddMemberPolicy-EndDate').disable();
        Ext.getCmp('AddMemberPolicy-StartDate').disable();
        Ext.getCmp('AddMemberPolicy-PolicyIDCode').disable();
        Ext.getCmp('AddMemberPolicy-IPPolicyIDCode').disable();
        var PolicyIDCode = Ext.getCmp('AddMemberPolicy-PolicyIDCode');
        if (PolicyIDCode) PolicyIDCode.on('select', AddMemberPolicyselectEvt, this);
        var IPPolicyIDCode = Ext.getCmp('AddMemberPolicy-IPPolicyIDCode');
        if (IPPolicyIDCode) IPPolicyIDCode.on('select', AddMemberIndividualPolicyselectEvt, this);

        var PolicyTypeCode = Ext.getCmp('AddMemberPolicy-PolicyTypeCode');
        var AddMemberPolicyMemberDetList = Ext.getCmp('AddMemberPolicyMemberDetList');
        AddMemberPolicyMemberDetList.on('addrecord', function (evt) {
            if (PolicyTypeCode.editValue == 1) {//Policy
                evt.record.set('MemberRelationCode', 15);
                evt.record.set('MemberRelationName', 'Self');
                //AddMemberPolicyMemberDetList.getColumnModel().getColumnById('MemberRelationCode').editable = false;

            }
            if (PolicyTypeCode.editValue == 2) {
                AddMemberPolicyMemberDetList.getColumnModel().getColumnById('MemberRelationCode').editable = true;
                AddMemberPolicyMemberDetList.getColumnModel().getColumnById('ParentGroupCode').editable = false;
            }
        }, this);

        AddMemberPolicyMemberDetList.on('beforeedit', function (evt) {

            var Relation = Ext.getCmp('AddMemberPolicyMemberDet-MemberRelationCode');
            var Gender = evt.record.get('GenderCode');
            if (Gender == 0) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,1,2,3,4';
            }
            else if (Gender == 1) {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,10,11,15,5,6,7,8';
            }
            else {
                Relation.lastQuery = '1=2';
                Relation.constantFilter = '0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20';
            }
        }, this);
    }

    var TypeCode = Ext.getCmp('AddMemberPolicy-PolicyTypeCode');
    var PolicyCode = Ext.getCmp('AddMemberPolicy-PolicyIDCode');
    var IndividualpolicyCode = Ext.getCmp('AddMemberPolicy-IPPolicyIDCode');
    TypeCode.on('select', function (combo, record, index) {
        onBusinessTypeclear('AddMemberPolicyMemberDetList');
        onBusinessTypeclear('AddMemberPolicyDetailList');
        if (TypeCode.editValue == 1) {  //policy
            PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
            IndividualpolicyCode.disable(); IndividualpolicyCode.clearValue(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
        }
        if (TypeCode.editValue == 2) { //Individual Policy
            IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
            PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
        }
        Ext.getCmp('AddMemberPolicy-PolicyName').setValue(null);
        Ext.getCmp('AddMemberPolicy-StartDate').setValue(null);
        Ext.getCmp('AddMemberPolicy-EndDate').setValue(null);
        Ext.getCmp('AddMemberPolicy-Base_Perimum').setValue(null);
        Ext.getCmp('AddMemberPolicy-GroupName').setValue(null);
        Ext.getCmp('AddMemberPolicy-PerimumName').setValue(null);
        Ext.getCmp('AddMemberPolicy-AnnualLimitTypeName').setValue(null);
        Ext.getCmp('AddMemberPolicy-AltLimit').setValue(null);
        Ext.getCmp('AddMemberPolicy-InpatientName').setValue(null);
        Ext.getCmp('AddMemberPolicy-IPLimit').setValue(null);
        Ext.getCmp('AddMemberPolicy-OutpatientName').setValue(null);
        Ext.getCmp('AddMemberPolicy-OPLimit').setValue(null);
    }, this);

    if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "pol.TypeCode=1 and POL.POLICYCODE not in (select policycode from IM_DEL_CANCEL_MEMBER where TYPECODE=1 and policycode is not null)";
    }, this);
    if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "pol.TypeCode=2  and POL.POLICYCODE not in (select INDIVIDUALPOLICYCODE from IM_DEL_CANCEL_MEMBER where TYPECODE=1 and INDIVIDUALPOLICYCODE is not null)";
    }, this);

    var AddMemberPolicyMemberDetList = Ext.getCmp('AddMemberPolicyMemberDetList');
    var CategoryCode = Ext.getCmp('AddMemberPolicyMemberDet-CategoryCode');
    if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
        var PolicyTypeCode = Ext.getCmp('AddMemberPolicy-PolicyTypeCode').editValue;
        if (PolicyTypeCode == 1) { // Policy]
            var PolicyCode = Ext.getCmp('AddMemberPolicy-PolicyIDCode').editValue;
            CategoryCode.lastQuery = '1=2';
            CategoryCode.store.baseParams.filter = "CAT.CATEGORY_CODE in (select  CATEGORYCODE from IM_POLICY_CATEGORYDTL where POLICYCODE=" + PolicyCode + ")";
        }
        if (PolicyTypeCode == 2) { // Individual Policy
            var IPPolicyIDCode = Ext.getCmp('AddMemberPolicy-IPPolicyIDCode').editValue;
            CategoryCode.lastQuery = '1=2';
            CategoryCode.store.baseParams.filter = "CAT.CATEGORY_CODE in (select  CATEGORYCODE from IM_NGIINDPOLICYCATEGORY where INDIVIDUALPOLICYCODE=" + IPPolicyIDCode + ")";
        }

    }, this);

    AddMemberPolicyMemberDetList.on('afteredit', function (e) {
        var AgeTemplateCode = Ext.getCmp('AddMemberPolicy-TemplateCode');
        var BasePremium = Ext.getCmp('AddMemberPolicy-Base_Perimum').getValue();
        var PolicyEndDate = Ext.getCmp('AddMemberPolicy-EndDate').getValue();
        var StartDate = Ext.getCmp('AddMemberPolicy-StartDate').getValue();

        if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
        else PolicyEndDate = PolicyEndDate;
        if (typeof (StartDate) == 'string') StartDate = Date.parseDate(StartDate, login.jsdateformat);
        else StartDate = StartDate;

        var DOB = e.record.get('Date_of_birth');
        if (typeof (DOB) == 'string') DOB = Date.parseDate(DOB, login.jsdateformat);
        else DOB = DOB;
        var CurDate = new Date();
        var Month = (CurDate.getMonth() - DOB.getMonth()) + ((CurDate.getFullYear() - DOB.getFullYear()) * 12);
        e.record.set('Age', Math.ceil(Month / 12))

        if (Math.ceil(Month / 12) > AgeTemplateCode.getValue()) {
            Ext.MessageBox.alert(login.modulename, "Age Should not greater then " + AgeTemplateCode.getValue() + "!");
            e.record.set('Age', 0);
            e.record.set('Date_of_birth', '');
            return;
        }

        var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
        var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());

        var EffectiveDate = e.record.get('EffectiveDate');
        if (EffectiveDate != '') {
            if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
            else EffectiveDate = EffectiveDate;
            if (PolicyEndDate < EffectiveDate) {
                Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
                e.record.set('EffectiveDate', '');
                //e.record.set('TotalApplyAmount', '');
                return;
            }

            if (StartDate > EffectiveDate) {
                Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Greater then Policy Start Date!');
                e.record.set('EffectiveDate', '');
                //e.record.set('TotalApplyAmount', '');
                return;
            }

            //var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
            //var TotalPolicyDays = Math.abs(t1 - t3) / (1000 * 60 * 60 * 24);
            //var diff = Math.abs(t1 - t2) / (1000 * 60 * 60 * 24);
            //AddMemberRemainigDays = diff;
            //var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);
            //e.record.set('TotalApplyAmount', ApplyAmountValue);
        }



    }, this);

    var GeneralCommBillingCode = Ext.getCmp('AddMemberPolicyCommisionDet-GeneralCommBillingCode');
    var AddMemberPolicyCommisionDetList = Ext.getCmp('AddMemberPolicyCommisionDetList');
    AddMemberPolicyCommisionDetList.on('afteredit', function (e) {

        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var FinalAmount = Ext.getCmp('AddMemberPolicy-TotalApplyAmount').getValue();
            var DefValueAmnt = 0, DefValuePre = 0;
            if (e.grid.store.getAt(i).get('Calc_MethodCode') == 0) {  //  Amount
                var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                DefValueAmnt = e.grid.store.getAt(i).get('DefaultValue');
                DefValuePre == 0;
            }
            else if (e.grid.store.getAt(i).get('Calc_MethodCode') == 1) {  // Precentage
                var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                var FinalAmount = Ext.getCmp('AddMemberPolicy-TotalApplyAmount').getValue();
                if (DefaultValue > 100) {
                    e.grid.store.getAt(i).set('Commission_value', 0);
                    e.grid.store.getAt(i).set('DefaultValue', 0);
                    Ext.MessageBox.alert(login.modulename, 'Default value should be less or equal to 100');
                    return;
                }
                DefValuePre = FinalAmount != 0 ? ((FinalAmount * e.grid.store.getAt(i).get('DefaultValue')) / 100) : 0;
                DefValueAmnt == 0;
            }
            var Total = DefValueAmnt == 0 ? DefValuePre : DefValueAmnt;
            e.grid.store.getAt(i).set('Commission_value', Total);
        }
        if (e.record.get('Comission_TypesCode') == 2) // NGI Commission
            e.record.set('Description', GeneralCommBillingCode.lastSelectionText);

    }, this);

    var AddMemAddtionalPremiumList = Ext.getCmp('AddMemAddtionalPremiumList');
    var AddMemberPolicyDetailList = Ext.getCmp('AddMemberPolicyDetailList');
    AddMemAddtionalPremiumList.on('afteredit', function (e) {
        if (e.record.get('CalcMethodCode') == 0)//Amount
        {
            var BasePremium = e.record.get('DefaultValue');
            e.record.set('Premium_Value', BasePremium);
        }
        else {
            if (e.record.get('DefaultValue') > 100) {
                Ext.MessageBox.alert(login.modulename, "Defalut Value should be less than or equal to 100 Percentage");
                e.record.set('DefaultValue', 0)
            }
            var BasePremium = 0;
            for (var i = 0; i < AddMemberPolicyDetailList.store.getCount() ; i++) {
                var Record = AddMemberPolicyDetailList.store.getAt(i);
                if (AddMemberPolicyDetailList.store.getAt(i).get('Premium_TypeCode') == 0) {//Base Premium
                    BasePremium = ((Record.get('Premium_Value') * e.record.get('DefaultValue')) / 100);
                }
            }
            e.record.set('Premium_Value', BasePremium.toFixed(2));
        }
    }, this);

    var MemberSince = Ext.getCmp('AddMemberPolicy-MemberSince');
    var InceptionDate = Ext.getCmp('AddMemberPolicy-InceptionDate');
    var ISExistingMember = Ext.getCmp('AddMemberPolicy-ISExistingMember');
    var Existing_Insurer = Ext.getCmp('AddMemberPolicy-Existing_Insurer');
    var DateOfEntry = Ext.getCmp('AddMemberPolicy-DateOfEntry');
    var COCExpiry = Ext.getCmp('AddMemberPolicy-COCExpiry');
    var Occupation = Ext.getCmp('AddMemberPolicy-Occupation');
    var Address1 = Ext.getCmp('AddMemberPolicy-Address1');
    var Address2 = Ext.getCmp('AddMemberPolicy-Address2');
    var PhoneNo = Ext.getCmp('AddMemberPolicy-PhoneNo');
    var MobileNo = Ext.getCmp('AddMemberPolicy-MobileNo');
    var Email_ID = Ext.getCmp('AddMemberPolicy-Email_ID');
    var PassportNo = Ext.getCmp('AddMemberPolicy-PassportNo');
    var Height = Ext.getCmp('AddMemberPolicy-Height');
    var Weight = Ext.getCmp('AddMemberPolicy-Weight');
    var EmiratesId = Ext.getCmp('AddMemberPolicy-EmiratesId');
    var StaffId = Ext.getCmp('AddMemberPolicy-StaffId');
    var DiscountPCT = Ext.getCmp('AddMemberPolicy-DiscountPCT');
    var LoadingPCT = Ext.getCmp('AddMemberPolicy-LoadingPCT');
    var FIneAmount = Ext.getCmp('AddMemberPolicy-FIneAmount');
    var MemberLocationCode = Ext.getCmp('AddMemberPolicy-MemberLocationCode');
    var EntryTypeCode = Ext.getCmp('AddMemberPolicy-EntryTypeCode');
    var HAADFine = Ext.getCmp('AddMemberPolicy-HAADFine');
    var WaiveAmount = Ext.getCmp('AddMemberPolicy-WaiveAmount');
    var NoOfDays = Ext.getCmp('AddMemberPolicy-NoOfDays');

    var ResidentialLocationCode = Ext.getCmp('AddMemberPolicy-ResidentialLocationCode');
    var WorkLocationCode = Ext.getCmp('AddMemberPolicy-WorkLocationCode');
    var SalaryBandCode = Ext.getCmp('AddMemberPolicy-SalaryBandCode');
    var MemCommissionTypeCode = Ext.getCmp('AddMemberPolicy-MemCommissionTypeCode');
    var EntityTypeCode = Ext.getCmp('AddMemberPolicy-EntityTypeCode');
    var EntityIDCode = Ext.getCmp('AddMemberPolicy-EntityIDCode');
    var UIDNumber = Ext.getCmp('AddMemberPolicy-UIDNumber');
	var MemberEntityIDName = Ext.getCmp('AddMemberPolicy-MemberEntityIDName');
    var IsPreExisting = Ext.getCmp('AddMemberPolicy-IsPreExisting');

    var AddMemberPolicyMemberDetList = Ext.getCmp('AddMemberPolicyMemberDetList');

    AddMemberPolicyMemberDetList.on('rowclick', function (grid, rowIndex, e) {
        AddMemberPolicyMemberDetList.lastSelectedRecord = grid.getStore().getAt(rowIndex);
        Record = grid.getStore().getAt(rowIndex);
        Existing_Insurer.setValue(Record.get('Existing_Insurer'));
        InceptionDate.setValue(Record.get('InceptionDate'));
        MemberSince.setValue(Record.get('MemberSince'));
        ISExistingMember.setValue(Record.get('ISExistingMember'));
        DateOfEntry.setValue(Record.get('DateOfEntry'));
        COCExpiry.setValue(Record.get('COCExpiry'));
        Occupation.setValue(Record.get('Occupation'));
        Address1.setValue(Record.get('Address1'));
        Address2.setValue(Record.get('Address2'));
        PhoneNo.setValue(Record.get('PhoneNo'));
        MobileNo.setValue(Record.get('MobileNo'));
        Email_ID.setValue(Record.get('Email_ID'));
        PassportNo.setValue(Record.get('PassportNo'));
        Height.setValue(Record.get('Height'));
        Weight.setValue(Record.get('Weight'));
        EmiratesId.setValue(Record.get('EmiratesId'));
        StaffId.setValue(Record.get('StaffId'));
        DiscountPCT.setValue(Record.get('DiscountPCT'));
        LoadingPCT.setValue(Record.get('LoadingPCT'));
        FIneAmount.setValue(Record.get('FIneAmount'));
        if (Record.get('Location') != '' && Record.get('Location') != null)
            MemberLocationCode.setComboValue(Record.get('Location'));
        else
            MemberLocationCode.setComboValue(1);
        EntryTypeCode.setComboValue(Record.get('EntryType'));
        HAADFine.setValue(Record.get('HAADFine'));
        WaiveAmount.setValue(Record.get('WaiveAmount'));
        NoOfDays.setValue(Record.get('NoOfDays'));

       if(!Record.get('ResidentialLocationCode'))
		   ResidentialLocationCode.setComboValue(1);
	   else 
		     ResidentialLocationCode.setComboValue(Record.get('ResidentialLocationCode'));
	   if(!Record.get('WorkLocationCode'))
        WorkLocationCode.setComboValue(1);
	 else 
		 WorkLocationCode.setComboValue(Record.get('WorkLocationCode'));
         if(Record.get('SalaryBandCode')) Record.get('SalaryBandCode') == 0 ? SalaryBandCode.clearValue() : SalaryBandCode.setComboValue(Record.get('SalaryBandCode'));
         if(Record.get('MemCommissionTypeCode')) Record.get('MemCommissionTypeCode') == 0 ? MemCommissionTypeCode.clearValue() : MemCommissionTypeCode.setComboValue(Record.get('MemCommissionTypeCode'));
         if(Record.get('EntityTypeCode')) Record.get('EntityTypeCode') == 0 ? EntityTypeCode.clearValue() : EntityTypeCode.setComboValue(Record.get('EntityTypeCode'));
         //if(Record.get('EntityIDCode')) Record.get('EntityIDCode') == 0 ? EntityIDCode.clearValue() : EntityIDCode.setComboValue(Record.get('EntityIDCode'));
        UIDNumber.setValue(Record.get('UIDNumber'));
        IsPreExisting.setValue(Record.get('IsPreExisting'));
		MemberEntityIDName.setValue(Record.get('UIDNumber'));
        AddMemberPolicySelectRowClikAndSelect();
    }, this);

    AddMemberPolicyMemberDetList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
        AddMemberPolicyMemberDetList.lastSelectedRecord = Record;
        Existing_Insurer.setValue(Record.get('Existing_Insurer'));
        InceptionDate.setValue(Record.get('InceptionDate'));
        MemberSince.setValue(Record.get('MemberSince'));
        ISExistingMember.setValue(Record.get('ISExistingMember'));
        DateOfEntry.setValue(Record.get('DateOfEntry'));
        COCExpiry.setValue(Record.get('COCExpiry'));
        Occupation.setValue(Record.get('Occupation'));
        Address1.setValue(Record.get('Address1'));
        Address2.setValue(Record.get('Address2'));
        PhoneNo.setValue(Record.get('PhoneNo'));
        MobileNo.setValue(Record.get('MobileNo'));
        Email_ID.setValue(Record.get('Email_ID'));
        PassportNo.setValue(Record.get('PassportNo'));
        Height.setValue(Record.get('Height'));
        Weight.setValue(Record.get('Weight'));
        EmiratesId.setValue(Record.get('EmiratesId'));
        StaffId.setValue(Record.get('StaffId'));
        DiscountPCT.setValue(Record.get('DiscountPCT'));
        LoadingPCT.setValue(Record.get('LoadingPCT'));
        FIneAmount.setValue(Record.get('FIneAmount'));
        if (Record.get('Location') != '' && Record.get('Location') != null)
            MemberLocationCode.setComboValue(Record.get('Location'));
        else
            MemberLocationCode.setComboValue(1);
        EntryTypeCode.setComboValue(Record.get('EntryType'));
        HAADFine.setValue(Record.get('HAADFine'));
        WaiveAmount.setValue(Record.get('WaiveAmount'));
        NoOfDays.setValue(Record.get('NoOfDays'));

       if(!Record.get('ResidentialLocationCode'))
		   ResidentialLocationCode.setComboValue(1);
	   else 
		     ResidentialLocationCode.setComboValue(Record.get('ResidentialLocationCode'));
	   if(!Record.get('WorkLocationCode'))
        WorkLocationCode.setComboValue(1);
	 else 
		 WorkLocationCode.setComboValue(Record.get('WorkLocationCode'));
       if(Record.get('SalaryBandCode')) Record.get('SalaryBandCode') == 0 ? SalaryBandCode.clearValue() : SalaryBandCode.setComboValue(Record.get('SalaryBandCode'));
       if(Record.get('MemCommissionTypeCode')) Record.get('MemCommissionTypeCode') == 0 ? MemCommissionTypeCode.clearValue() : MemCommissionTypeCode.setComboValue(Record.get('MemCommissionTypeCode'));
      if(Record.get('EntityTypeCode'))  Record.get('EntityTypeCode') == 0 ? EntityTypeCode.clearValue() : EntityTypeCode.setComboValue(Record.get('EntityTypeCode'));
       //if(Record.get('EntityIDCode')) Record.get('EntityIDCode') == 0 ? EntityIDCode.clearValue() : EntityIDCode.setComboValue(Record.get('EntityIDCode'));
        UIDNumber.setValue(Record.get('UIDNumber'));
        IsPreExisting.setValue(Record.get('IsPreExisting'));
		MemberEntityIDName.setValue(Record.get('UIDNumber'));
        AddMemberPolicySelectRowClikAndSelect();
    }, this);


    if (UIDNumber) UIDNumber.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('UIDNumber', UIDNumber.getValue());
    }, this);

    if (IsPreExisting) IsPreExisting.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('IsPreExisting', IsPreExisting.getValue());
    }, this);

    /*if (EntityIDCode) EntityIDCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('EntityIDCode', EntityIDCode.editValue);
    }, this);*/

    if (EntityTypeCode) EntityTypeCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('EntityTypeCode', EntityTypeCode.editValue);
    }, this);


    if (MemCommissionTypeCode) MemCommissionTypeCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('MemCommissionTypeCode', MemCommissionTypeCode.editValue);
    }, this);

    if (ResidentialLocationCode) ResidentialLocationCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('ResidentialLocationCode', ResidentialLocationCode.editValue);
    }, this);

    if (WorkLocationCode) WorkLocationCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('WorkLocationCode', WorkLocationCode.editValue);
    }, this);

    if (SalaryBandCode) SalaryBandCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('SalaryBandCode', SalaryBandCode.editValue);
    }, this);

    if (InceptionDate) InceptionDate.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('InceptionDate', InceptionDate.getValue())
    }, this);

    if (MemberLocationCode) MemberLocationCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Location', MemberLocationCode.editValue)
    }, this);

    if (ISExistingMember) ISExistingMember.on('check', function (field, checked) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('ISExistingMember', ISExistingMember.getValue())
    }, this);

    if (Existing_Insurer) Existing_Insurer.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Existing_Insurer', Existing_Insurer.getValue())
    }, this);
    if (DateOfEntry) DateOfEntry.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('DateOfEntry', DateOfEntry.getValue())
    }, this);
    if (COCExpiry) COCExpiry.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('COCExpiry', COCExpiry.getValue())
    }, this);
    if (Occupation) Occupation.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Occupation', Occupation.getValue())
    }, this);
    if (Address1) Address1.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Address1', Address1.getValue())
    }, this);
    if (Address2) Address2.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Address2', Address2.getValue())
    }, this);
    if (PhoneNo) PhoneNo.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('PhoneNo', PhoneNo.getValue())
    }, this);
    if (MobileNo) MobileNo.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('MobileNo', MobileNo.getValue())
    }, this);
    if (Email_ID) Email_ID.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Email_ID', Email_ID.getValue())
    }, this);
    if (Height) Height.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Height', Height.getValue())
    }, this);
    if (Weight) Weight.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('Weight', Weight.getValue())
    }, this);
    if (PassportNo) PassportNo.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('PassportNo', PassportNo.getValue())
    }, this);
    if (StaffId) StaffId.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('StaffId', StaffId.getValue())
    }, this);
    if (DiscountPCT) DiscountPCT.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('DiscountPCT', DiscountPCT.getValue())
    }, this);
    if (LoadingPCT) LoadingPCT.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('LoadingPCT', LoadingPCT.getValue())
    }, this);
    if (FIneAmount) FIneAmount.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('FIneAmount', FIneAmount.getValue())
    }, this);
    if (EmiratesId) EmiratesId.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('EmiratesId', EmiratesId.getValue())
    }, this);
    if (MemberSince) MemberSince.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('MemberSince', MemberSince.getValue())
    }, this);

    if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('EntryType', EntryTypeCode.editValue)
    }, this);

    if (HAADFine) HAADFine.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('HAADFine', HAADFine.getValue())
    }, this);

    if (WaiveAmount) WaiveAmount.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('WaiveAmount', WaiveAmount.getValue())
    }, this);

    if (NoOfDays) NoOfDays.on('valid', function (text1, oldval, newval) {
        if (AddMemberPolicyMemberDetList.lastSelectedRecord)
            AddMemberPolicyMemberDetList.lastSelectedRecord.set('NoOfDays', NoOfDays.getValue())
    }, this);

    if (EntryTypeCode) EntryTypeCode.on('select', function (combo, record, index) {

        AddMemberPolicySelectRowClikAndSelect();

    }, this);

    var Group = Ext.getCmp('AddMemberPolicy-GroupCode');
    var ParentGroupCode = Ext.getCmp('AddMemberPolicyMemberDet-ParentGroupCode');
    if (ParentGroupCode) ParentGroupCode.on('beforequery', function (evt) {
        if (Group.editValue != 0 || Group.editValue != '') {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "IG.PARENT_GROUP=" + Group.getValue() + "";
        }
    }, this);

    var SharingSummary = Ext.getCmp('AddMemberPolicy-SharingSummary');
    var AddMemberPolicySharingDtlList = Ext.getCmp('AddMemberPolicySharingDtlList');//Sharing Detail Load: to Calculate Sharing Amount
    AddMemberPolicySharingDtlList.getStore().on('load', function (store, record, options) {
        var Total11 = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) Total11 += (1 * record.get('FinalPremiumValue'));
        }
        SharingSummary.setValue(Total11);
    }, this);

    AddMemberPolicySharingDtlList.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
        var AmountSum = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            if (e.grid.store.getAt(i).get('ReInsurValueTypeCode') == 1) {// Percentage
                e.grid.store.getAt(i).set('FinalPremiumValue', 0);
            }
            AmountSum += (1 * e.grid.store.getAt(i).get('FinalPremiumValue'));
        }
        SharingSummary.setValue(AmountSum);
    }, this);

    var AddMemberPolicyDetailList = Ext.getCmp('AddMemberPolicyDetailList');

    var PremiumTotal = Ext.getCmp('AddMemberPolicy-PremiumTotal');
    var CommissionValTotal = Ext.getCmp('AddMemberPolicy-CommissionValTotal');

    AddMemberPolicyDetailList.on('afteredit', function (e) {

        var Totalamount = 0;
        var Totalamount1 = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var Total = 0;
            Totalamount += 1 * e.grid.store.getAt(i).get('Premium_Value');
            Totalamount1 += 1 * e.grid.store.getAt(i).get('DefaultValue');

        }
        PremiumTotal.setValue(Totalamount);
        CommissionValTotal.setValue(Totalamount1);

    }, this);


    var AddMemberPolicyDetailList = Ext.getCmp('AddMemberPolicyDetailList').getStore();
    AddMemberPolicyDetailList.on('load', function (store, record, options) {
        var Totalamount = 0;
        var Totalamount2 = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            Totalamount += 1 * record.get('Premium_Value');
            Totalamount2 += 1 * record.get('DefaultValue');
        }
        PremiumTotal.setValue(Totalamount);
        CommissionValTotal.setValue(Totalamount2);


    }, this);

    var AddtionalPremiumTotal = Ext.getCmp('AddMemberPolicy-AddtionalPremiumTotal');

    var AddMemAddtionalPremiumList = Ext.getCmp('AddMemAddtionalPremiumList');

    AddMemAddtionalPremiumList.on('afteredit', function (e) {

        var Totalamount = 0;
        var Totalamount2 = 0;

        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var Total = 0;

            Totalamount += 1 * e.grid.store.getAt(i).get('Premium_Value');


        }
        AddtionalPremiumTotal.setValue(Totalamount);


    }, this);


    var AddMemAddtionalPremiumListStore = Ext.getCmp('AddMemAddtionalPremiumList').getStore();
    AddMemAddtionalPremiumListStore.on('load', function (store, record, options) {
        var Totalamount = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var Total = 0;
            var record = store.getAt(i);
            Totalamount += record.get('Premium_Value');


        }
        AddtionalPremiumTotal.setValue(Totalamount);


    }, this);
}

function AddMemberPolicySelectRowClikAndSelect(combo, record, index) {

    var EntryTypeCode = Ext.getCmp('AddMemberPolicy-EntryTypeCode');
    var Existing_Insurer = Ext.getCmp('AddMemberPolicy-Existing_Insurer');
    var DateOfEntry = Ext.getCmp('AddMemberPolicy-DateOfEntry');

    if (EntryTypeCode.editValue == 2) {//Residants
        Existing_Insurer.allowBlank = false; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
    else {
        Existing_Insurer.allowBlank = true; Existing_Insurer.isValid();
        DateOfEntry.allowBlank = false; DateOfEntry.isValid();
    }
}

function AddMemberPolicyselectEvt(combo, record, index) {
    /*
    onBusinessTypeclear('AddMemberPolicyDetailList');
    var Primmary = Ext.getCmp('AddMemberPolicy').selectedIndex;
    var grdFunctionality = Ext.getCmp('AddMemberPolicyDetailList');

    var newRecord = new grdFunctionality.recordType({
        ID: 1,
        Serialno: 1,
        AddMemberPolicyCode: 1,
        PremiumTypeCode: 0,
        PremiumTypeName: 'Base',
        Defaultvalue: Ext.getCmp('AddMemberPolicy-Base_Perimum').getValue(),
        CalcMethodCode: 0,
        CalcMethodName: 'Amount',
        Premium_value: Ext.getCmp('AddMemberPolicy-Base_Perimum').getValue(),
        LegalentityCode: 0,
        CustomerCode: 0,
        Description: 'Base',
        CompanyCode: login.CompanyCode,
        LocationCode: login.LocationCode,
        IsNew: true,
        IsDirty: true,
        IsDeleted: false,
        IsSavable: true,
        IsValid: true
    });
    grdFunctionality.stopEditing();
    grdFunctionality.store.add(newRecord);
    grdFunctionality.storeId += 1;
    grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
    grdFunctionality.pageBar.updateInfo();
    */

    onBusinessTypeclear('AddMemberPolicyCommisionDetList');
    onBusinessTypeclear('AddMemberPolicySharingDtlList');
    var PolicyCode = Ext.getCmp('AddMemberPolicy-PolicyIDCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyCommissionLoad',
            PolicyCode: PolicyCode,
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddMemPolicyCommissionLoadComplete, this);
}
function AddMemberIndividualPolicyselectEvt(combo, record, index) {
    // Ext.getCmp('AddMemberPolicy-ApplyAmount').setValue(null);

    onBusinessTypeclear('AddMemberPolicyCommisionDetList');
    onBusinessTypeclear('AddMemberPolicySharingDtlList');
    var IPPolicyIDCode = Ext.getCmp('AddMemberPolicy-IPPolicyIDCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyIPCommissionLoad',
            IPPolicyIDCode: IPPolicyIDCode
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddMemPolicyIPCommissionLoadComplete, this);
}

function AddMemPolicyIPCommissionLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', AddMemPolicyIPCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    //return;
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var AddMemberPolicyCommisionDetList = Ext.getCmp('AddMemberPolicyCommisionDetList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) {
            var CommissionRecord = responseText.commissiondatum[cnt];
            AddMemberPolicyCommisionDetList.storeId += 1;
            var newRecord = new AddMemberPolicyCommisionDetList.recordType({
                ID: AddMemberPolicyCommisionDetList.storeId,
                SerialNo: AddMemberPolicyCommisionDetList.storeId,
                AddMemberPolicyCode: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                LegalentityCode: CommissionRecord.LegalentityCode,
                Description: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                Description: CommissionRecord.IndPolcyCommisionTo,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            AddMemberPolicyCommisionDetList.stopEditing();
            AddMemberPolicyCommisionDetList.store.add(newRecord);
            AddMemberPolicyCommisionDetList.store.totalLength = AddMemberPolicyCommisionDetList.store.getTotalCount() + 1;
            AddMemberPolicyCommisionDetList.pageBar.updateInfo();
        }

        var AddMemberPolicySharingDtlList = Ext.getCmp('AddMemberPolicySharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            AddMemberPolicySharingDtlList.storeId += 1;
            var SharingRecord = new AddMemberPolicySharingDtlList.recordType({
                ID: AddMemberPolicySharingDtlList.storeId,
                Serialno: AddMemberPolicySharingDtlList.storeId,
                AddMemberPolicyCode: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            AddMemberPolicySharingDtlList.stopEditing();
            AddMemberPolicySharingDtlList.store.add(SharingRecord);
            AddMemberPolicySharingDtlList.store.totalLength = AddMemberPolicySharingDtlList.store.getTotalCount() + 1;
            AddMemberPolicySharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('AddMemberPolicySharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}

function AddMemPolicyCommissionLoadComplete(conn, response) {


    Ext.Ajax.un('requestcomplete', AddMemPolicyCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    //return;
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var AddMemberPolicyCommisionDetList = Ext.getCmp('AddMemberPolicyCommisionDetList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) { //Commission Detail
            var CommissionRecord = responseText.commissiondatum[cnt];
            AddMemberPolicyCommisionDetList.storeId += 1;
            var newRecord = new AddMemberPolicyCommisionDetList.recordType({
                ID: AddMemberPolicyCommisionDetList.storeId,
                SerialNo: AddMemberPolicyCommisionDetList.storeId,
                AddMemberPolicyCode: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                Description: CommissionRecord.CommissionToNewName,
                LegalentityCode: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            AddMemberPolicyCommisionDetList.stopEditing();
            AddMemberPolicyCommisionDetList.store.add(newRecord);
            AddMemberPolicyCommisionDetList.store.totalLength = AddMemberPolicyCommisionDetList.store.getTotalCount() + 1;
            AddMemberPolicyCommisionDetList.pageBar.updateInfo();
        }

        var AddMemberPolicySharingDtlList = Ext.getCmp('AddMemberPolicySharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            AddMemberPolicySharingDtlList.storeId += 1;
            var SharingRecord = new AddMemberPolicySharingDtlList.recordType({
                ID: AddMemberPolicySharingDtlList.storeId,
                Serialno: AddMemberPolicySharingDtlList.storeId,
                AddMemberPolicyCode: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            AddMemberPolicySharingDtlList.stopEditing();
            AddMemberPolicySharingDtlList.store.add(SharingRecord);
            AddMemberPolicySharingDtlList.store.totalLength = AddMemberPolicySharingDtlList.store.getTotalCount() + 1;
            AddMemberPolicySharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('AddMemberPolicySharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}

function ViewMemberHandler(form, login) {
    var membercode = Ext.getCmp('AddMemberPolicy-MemberCode').editValue;
    if (membercode == 0) {
        Ext.MessageBox.alert(login.modulename, 'Select the Member ID');
        return;
    }

    var MemberScreen = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.NGIMember';
    var Url = '/forms/HumanResources/NGI/UnderWritting/NGIMember.xml';
    var PKey = -1;
    var WidgetTitle = 'Member';
    MemberScreen.ViewTemplateOpen(ClassName, Url, membercode, WidgetTitle);
}

function ViewPolicyHandler(form, login) {
    var PolicyIDCode = Ext.getCmp('AddMemberPolicy-PolicyIDCode').editValue;
    if (PolicyIDCode == 0) {
        Ext.MessageBox.alert(login.modulename, 'Select the Policy ID');
        return;
    }

    var PolicyScreen = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.NGIPolicy';
    var Url = '/forms/HumanResources/NGI/UnderWritting/Policies/NGIPolicy.xml';
    var PKey = -1;
    var WidgetTitle = 'Policy';
    PolicyScreen.ViewTemplateOpen(ClassName, Url, PolicyIDCode, WidgetTitle);
}


function MPCNextBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);

    // for checking wizard errors
    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);
                /*
                Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
                });
                */
            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });
    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }

    var PolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode');
    var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode');
    var MemberPolicyTypeCode = Ext.getCmp('MemberPoliciesConversation-MemberPolicyTypeCode');
    if (card.actItemInd == 0) {
        card.actItemInd = 0;
    }
    if (card.actItemInd == 1) {

        if (PolicyCode.editValue == 0 && IndividualpolicyCode.editValue == 0) {
            Ext.MessageBox.alert(login.modulename, 'You Must Select either Policy or Individual Policy !');
        }
        else {
            IndividualpolicyCode.disable();
            PolicyCode.disable();
            MemberPolicyTypeCode.disable();
            card.actItemInd = 2;
        }
    }

    else if (card.actItemInd == 1) {
        card.actItemInd = 2;
    }
    else
        card.actItemInd = card.actItemInd + direction;

    card.getLayout().setActiveItem(card.actItemInd); // show the next wizard

    // Disable or enable the Button

    if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
    else Ext.getCmp(btnID + 'move-prev').disable();

    if (card.actItemInd == (card.MaxItems - 1)) {
        Ext.getCmp(btnID + 'move-next').disable();
        Ext.getCmp(btnID + 'move-finish').enable();
    }
    else {
        Ext.getCmp(btnID + 'move-next').enable();
        Ext.getCmp(btnID + 'move-finish').disable();
    }

    if (card.actItemInd == (card.MinItems - 1)) {
        Ext.getCmp(btnID + 'move-prev').disable();
    }
    else {
        Ext.getCmp(btnID + 'move-prev').enable();
    }


    var FilterQry = '';

    //if (card.actItemInd == 1) {

    //    DetailStore = Ext.getCmp('MemberPoliciesConversationCategoryDtlList').getStore();
    //    if (DetailStore && !DetailStore.Firstimeloaded) {
    //        DetailStore.Firstimeloaded = true;
    //        DetailStore.load({
    //            params: {
    //                start: 0,
    //                limit: 20
    //            }
    //        });
    //    }
    //}




    if (card.actItemInd == 3) {

        var CategoryDetailgrid = Ext.getCmp('MemberPoliciesConversationCategoryDtlList');
        var CategoryCode = '';
        var CategoryRecord = [];
        for (var i = 0; i < CategoryDetailgrid.store.getCount() ; i++) {
            var record = CategoryDetailgrid.store.getAt(i);
            if (record.get('Selectcheck') == true) {
                CategoryRecord.push(record.data);
            }
        }
        for (var i = 0; i < CategoryRecord.length; i++) {
            CategoryCode += CategoryRecord[i].PcdCode;
            if (i < (CategoryRecord.length) - 1)
                CategoryCode += ',';
        }

        var PolicyCode = '', Type = null;
        var ConIndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode').editValue;
        var ConPolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode').editValue;

        if (ConPolicyCode == 0) {
            PolicyCode = ConIndividualpolicyCode;
            Type = 2;
        }
        else if (ConIndividualpolicyCode == 0) {
            PolicyCode = ConPolicyCode;
            Type = 1;
        }

        if (CategoryCode == '') {
            onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
        }
        if (CategoryCode != '' && Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified) {
            Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified = false;
            onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'MemberPolicyConversionMemberLoad',
                    CategoryCode: CategoryCode,
                    PolicyCode: PolicyCode,
                    Type: Type
                },

                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PolicyConversionMemberLoadComplete, this);
        }

        DetailStore = Ext.getCmp('MemberPoliciesConversationMemberDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }

    }

}

function PolicyConversionMemberLoadComplete(conn, response) {
    onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
    Ext.Ajax.un('requestcomplete', PolicyConversionMemberLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {


        var Primary = Ext.getCmp('MemberPoliciesConversation').selectedIndex;
        var MemberPoliciesConversationMemberDtlList = Ext.getCmp('MemberPoliciesConversationMemberDtlList');

        for (cnt = 0; cnt < responseText.memberdtldatum.length; cnt++) { //Member
            var MemberRecord = responseText.memberdtldatum[cnt];
            MemberPoliciesConversationMemberDtlList.storeId += 1;
            var newRecord = new MemberPoliciesConversationMemberDtlList.recordType({

                ID: MemberPoliciesConversationMemberDtlList.storeId,
                Serialno: MemberPoliciesConversationMemberDtlList.storeId,
                MemberPolicyConver_Code: Primary == -1 ? 1 : Primary,
                PolicyMemberDetailCode: MemberRecord.ID,
                Type: responseText.Type,
                MemberName: MemberRecord.MemberName,
                NationalityName: MemberRecord.NationalityName,
                MaritalstatusName: MemberRecord.Marital_statusName,
                MemberrelationName: MemberRecord.Member_Relation_Name,
                GenderName: MemberRecord.Member_genderName,
                Remarks: '',
                //PolicyMemberPremiumList: null,
                LegalentityCode: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                Selectcheck: true,
                LocationCode: login.LocationCode,
                ParentGroupName: null,
                ParentId: MemberRecord.ParentId,
                Age: MemberRecord.Age,
                CategoryName: MemberRecord.CategoryName,
                CardId: '',
                Member_id: '',
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MemberPoliciesConversationMemberDtlList.stopEditing();
            MemberPoliciesConversationMemberDtlList.store.add(newRecord);
            MemberPoliciesConversationMemberDtlList.store.totalLength = MemberPoliciesConversationMemberDtlList.store.getTotalCount() + 1;
            MemberPoliciesConversationMemberDtlList.pageBar.updateInfo();
        }

    }
}

function MPCBackBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);
    var PolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode');
    var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode');
    var MemberPolicyTypeCode = Ext.getCmp('MemberPoliciesConversation-MemberPolicyTypeCode');

    if (card.actItemInd == 4) {
        card.actItemInd = 3;
    }
    else if (card.actItemInd == 3) {
        card.actItemInd = 2;
    }
    else if (card.actItemInd == 2) {
        card.actItemInd = 1;
    }
    else if (card.actItemInd == 1) {
        if (MemberPolicyTypeCode.editValue == 1) {
            PolicyCode.enable();
            IndividualpolicyCode.disable();
            MemberPolicyTypeCode.enable();
        }
        else {
            PolicyCode.disable();
            IndividualpolicyCode.enable();
            MemberPolicyTypeCode.enable();
        }
        card.actItemInd = 0;
    }
    else
        card.actItemInd = card.actItemInd - direction;

    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);

    if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
    else Ext.getCmp(btnID + 'move-prev').disable();

    if (card.actItemInd == (card.MaxItems - 1)) {
        Ext.getCmp(btnID + 'move-next').disable();
        Ext.getCmp(btnID + 'move-finish').enable();
    }
    else {
        Ext.getCmp(btnID + 'move-next').enable();
        Ext.getCmp(btnID + 'move-finish').disable();
    }

    if (card.actItemInd == (card.MinItems - 1)) {
        Ext.getCmp(btnID + 'move-prev').disable();
    }
    else {
        Ext.getCmp(btnID + 'move-prev').enable();
    }
}

function MPCCancelBtnHandler(card, btnID, direction) {
    card = Ext.getCmp('MemberPoliciesConversationWIZ001');
    card.actItemInd = 0;
    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);
    Ext.getCmp('WIZ001move-next').enable();
    Ext.getCmp('WIZ001move-prev').disable();
    Ext.getCmp('WIZ001move-finish').disable();

    var PolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode');
    var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode');
    var MemberPolicyTypeCode = Ext.getCmp('MemberPoliciesConversation-MemberPolicyTypeCode');

    if (MemberPolicyTypeCode.editValue == 1) {
        PolicyCode.enable();
        IndividualpolicyCode.disable();
        MemberPolicyTypeCode.enable();
    }
    else {
        PolicyCode.disable();
        IndividualpolicyCode.enable();
        MemberPolicyTypeCode.enable();
    }
}

function MPCFinishBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);

    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);

                Ext.MessageBox.show({
                    title: GlobalTerminologies.LBLERROR,
                    msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });

    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }



    MemberPoliciesConversationForm = Ext.getCmp('MemberPoliciesConversation');
    var params = {};
    MemberPoliciesConversationForm.form.items.each(function (f) {
        if (f.isValid && !f.isValid(true)) {
            Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, f.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return;
        }

        if (f.disabled) {
            params[f.id + 'DISVAL'] = f.getValue();
        }

        if (f.dataColumn && f.editValue && f.editValue != 0 && f.editValue != f.getValue() && f.value != '') {
            f.setValue(f.editValue);
        }

        //to get the invisible tab values
        if (!f.rendered) {
            if (f.editValue) {
                params[f.id + 'DISVAL'] = f.editValue;
            }
            else {
                params[f.id + 'DISVAL'] = f.getValue();
            }
        }

        if (f.xtype == 'htmleditor') {
            f.value = Ext.util.Format.htmlEncode(f.getValue());
            f.el.dom.value = Ext.util.Format.htmlEncode(f.getValue());
        }

    });

    if (MemberPoliciesConversationForm.form.isValid() == true) {
        var detailNames = [];
        var detailData = [];
        var details = MemberPoliciesConversationForm.findByType('detailgrid');
        for (var i = 0, len = details.length; i < len; i++) {
            if (!details[i].isValid(true)) return;
            var tempData = [];
            var ds = details[i].getStore();
            var editedRecords = ds.getModifiedRecords();
            if (details[i].mustHaveChild) {
                showError = false;
                if (MemberPoliciesConversationForm.selectedIndex == -1 && ds && ds.getCount() == 0) {
                    showError = true;
                } else if ((MemberPoliciesConversationForm.selectedIndex != -1) && (details[i].rendered) && (ds.getCount() == 0) && !(details[i].masterName)) {
                    showError = true;
                }
                if (showError) {
                    Ext.MessageBox.show({
                        title: GlobalTerminologies.LBLERROR,
                        msg: details[i].title + ' ' + GlobalTerminologies.MSGCOMMON011,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    return;
                }
            }
            for (var j = 0, count = editedRecords.length; j < count; j++) {
                var record = editedRecords[j];
                if (record.get('IsNew') == false) {
                    var recordData = Ext.apply({}, editedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            var addedRecords = ds.getAddedRecords();
            for (var j = 0, count = addedRecords.length; j < count; j++) {
                var record = addedRecords[j];
                if (record.get('IsDeleted') == false) {
                    var recordData = Ext.apply({}, addedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            if (tempData.length > 0) {
                var temp = '[' + tempData.join(',') + ']';
                detailData.push(temp);
                var detailName = details[i].getBOName();
                if (detailName) detailName = detailName.substr(detailName.lastIndexOf('.') + 1);
                detailNames.push(detailName);
            }
        }
        for (var j = 0, lenj = details.length; j < lenj; j++) {
            details[j].loadData = true;
        }
        //var params = {};
        if (detailNames.length > 0 && detailData.length > 0) {
            params.detailnames = detailNames.join(',');
            params.detaildata = '[' + detailData.join(',') + ']';
        }

        params.action = 'save';
        params.id = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.MemberPoliciesConversation';
        if (Ext.getCmp('MemberPoliciesConversation').selectedIndex) {
            params.index = (Ext.getCmp('MemberPoliciesConversation').selectedIndex);
        }
        else {
            params.index = -1;
        }
        MemberPoliciesConversationForm.form.baseParams = params;
        showMask(GlobalTerminologies.MSGSAVEWIDGET);
        MemberPoliciesConversationForm.form.submit({});
    }
}

function MemberPoliciesConversation(form, login) {

    if (!form.isView) {
        var MemberPolicyTypeCode = Ext.getCmp('MemberPoliciesConversation-MemberPolicyTypeCode');
        var PolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode');
        var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode');
        PolicyCode.disable();
        IndividualpolicyCode.disable();
        if (MemberPolicyTypeCode) MemberPolicyTypeCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('MemberPoliciesConversationCategoryDtlList');
            onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
            Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified = true;
            if (MemberPolicyTypeCode.editValue == 1) {
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IndividualpolicyCode.clearValue(); IndividualpolicyCode.disable(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
            }
            else if (MemberPolicyTypeCode.editValue == 2) {
                IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
                PolicyCode.clearValue(); PolicyCode.disable(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
        }, this);

        PolicyCode.on('select', OnMemberPolicyCodeChange, this);

        var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode');
        IndividualpolicyCode.on('select', OnIndividualpolicyCodeChange, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " POLI.TypeCode=1 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);

        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " POLI.TypeCode=2 and poli.ISMEMBERPOLICYCONVERTED=0";
        }, this);

        Ext.getCmp('MemberPoliciesConversationCategoryDtlList').getColumnModel().getColumnById('Selectcheck').on('click', function (column, e, record, dataIndex) {
            Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified = true;
        }, this);
    }

}


function MemberPolicyConversionPolicySelect(evt) {

    var MemberPolicyTypeCode = Ext.getCmp('MemberPoliciesConversation-MemberPolicyTypeCode');
    var filter = '';
    if (MemberPolicyTypeCode.editValue == 1) {
        filter = 1;
    }
    else if (MemberPolicyTypeCode.editValue == 2) {
        filter = 2;
    }
    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = " POLI.TypeCode=" + filter;
}

function OnMemberPolicyCodeChange(combo, record, index) {

    onBusinessTypeclear('MemberPoliciesConversationCategoryDtlList');
    onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
    Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified = true;
    var PolicyCode = Ext.getCmp('MemberPoliciesConversation-PolicyCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'MemberPolicyConversionCategoryLoad',
            PolicyCode: PolicyCode,
            Type: 1
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MemberPolicyConversionCategoryLoadComplete, this);

}

function MemberPolicyConversionCategoryLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MemberPolicyConversionCategoryLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var Primary = Ext.getCmp('MemberPoliciesConversation').selectedIndex;
        var MemberPoliciesConversationCategoryDtlList = Ext.getCmp('MemberPoliciesConversationCategoryDtlList');

        for (cnt = 0; cnt < responseText.categorydatum.length; cnt++) { //Category
            var CategoryRecord = responseText.categorydatum[cnt];
            MemberPoliciesConversationCategoryDtlList.storeId += 1;
            var newRecord = new MemberPoliciesConversationCategoryDtlList.recordType({
                ID: MemberPoliciesConversationCategoryDtlList.storeId,
                Serialno: MemberPoliciesConversationCategoryDtlList.storeId,
                Memberpolicyconver_Code: Primary == -1 ? 1 : Primary,
                PcdCode: CategoryRecord.ID,
                Type: 1,//Policy
                Allimit: CategoryRecord.Altlimit,
                Optlimit: CategoryRecord.Oplimit,
                IPTLimit: CategoryRecord.Iplimit,
                Calculatefine: CategoryRecord.CalculateFine,
                Isfrontinggroup: CategoryRecord.IsfrontingGroup,
                CategoryName: CategoryRecord.CategoryName,
                PlanName: CategoryRecord.PlanName,
                FrontingsettingName: CategoryRecord.FrontingSettingName,
                Selectcheck: true,
                Remarks: '',
                LegalentityCode: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MemberPoliciesConversationCategoryDtlList.stopEditing();
            MemberPoliciesConversationCategoryDtlList.store.add(newRecord);
            MemberPoliciesConversationCategoryDtlList.store.totalLength = MemberPoliciesConversationCategoryDtlList.store.getTotalCount() + 1;
            MemberPoliciesConversationCategoryDtlList.pageBar.updateInfo();


        }
    }
}


function OnIndividualpolicyCodeChange(combo, record, index) {

    onBusinessTypeclear('MemberPoliciesConversationCategoryDtlList');
    onBusinessTypeclear('MemberPoliciesConversationMemberDtlList');
    Ext.getCmp('MemberPoliciesConversationCategoryDtlList').isModified = true;
    var IndividualpolicyCode = Ext.getCmp('MemberPoliciesConversation-IndividualpolicyCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'MemberPolicyConversionCategoryLoad',
            PolicyCode: IndividualpolicyCode,
            Type: 2
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnIndividualpolicyCodeLoadComplete, this);

}

function OnIndividualpolicyCodeLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', OnIndividualpolicyCodeLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var Primary = Ext.getCmp('MemberPoliciesConversation').selectedIndex;
        var MemberPoliciesConversationCategoryDtlList = Ext.getCmp('MemberPoliciesConversationCategoryDtlList');
        var type = 1;
        for (cnt = 0; cnt < responseText.categorydatum.length; cnt++) { //Category
            var CategoryRecord = responseText.categorydatum[cnt];
            MemberPoliciesConversationCategoryDtlList.storeId += 1;
            var newRecord = new MemberPoliciesConversationCategoryDtlList.recordType({
                ID: MemberPoliciesConversationCategoryDtlList.storeId,
                Serialno: MemberPoliciesConversationCategoryDtlList.storeId,
                Memberpolicyconver_Code: Primary == -1 ? 1 : Primary,
                PcdCode: CategoryRecord.ID,
                Type: 2,//Invidual Policy
                Allimit: CategoryRecord.Altlimit,
                Optlimit: CategoryRecord.Oplimit,
                IPTLimit: CategoryRecord.Iplimit,
                Calculatefine: CategoryRecord.CalculateFine,
                Isfrontinggroup: CategoryRecord.IsFrontingGroup,
                CategoryName: CategoryRecord.CategoryName,
                PlanName: CategoryRecord.PlanName,
                FrontingsettingName: CategoryRecord.FrontingSettingName,
                Selectcheck: true,
                Remarks: '',
                LegalentityCode: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MemberPoliciesConversationCategoryDtlList.stopEditing();
            MemberPoliciesConversationCategoryDtlList.store.add(newRecord);
            MemberPoliciesConversationCategoryDtlList.store.totalLength = MemberPoliciesConversationCategoryDtlList.store.getTotalCount() + 1;
            MemberPoliciesConversationCategoryDtlList.pageBar.updateInfo();

        }

    }
}

function AddCommentsMPCButtonHandler() {
    var DotLine = '--------------------------------------------------------------------------------------------------------------------------------------------------';
    var Remarks = Ext.getCmp('MemberPoliciesConversation-Remarks');
    var Comments = Ext.getCmp('MemberPoliciesConversation-Comments');

    if (Comments != '' && Comments != null) {
        var Comment = Remarks.getValue() + "\n" + login.UserName.toUpperCase() + " " + "[" + new Date().format(login.jsdateformat + " " + (login.TimeFormat == 'hh:mm:ss tt' ? 'h:i:s a' : (login.TimeFormat == 'hh:mm tt' ? 'h:i a' : 'H:i'))) + "]: \n" + Comments.getValue() + "\n" + DotLine;
        Remarks.setValue(Comment);

    }

    Comments.setValue(null);

}

function DelCancelMemberUnPost(form, login) {
    var Primkey = Ext.getCmp('DelCancelMember').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('DelCancelMember-AuthorizedStatusCode');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'DelCancelMemberUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', DelCancelMemberUnPostComplete, this);
        }
    }, this);

}
function DelCancelMemberUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DelCancelMemberUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DELCANCELMEMBER_editform').close();

    }
}
function DelCancelMember(form, login) {

    Ext.getCmp('DelCancelMember-Startdate').disable();
    Ext.getCmp('DelCancelMember-Enddate').disable();
    Ext.getCmp('DelCancelMember-PolicyIdCode').disable();
    Ext.getCmp('DelCancelMember-IPPolicyIDCode').disable();

    if (!form.isView) {

        var TypeCode = Ext.getCmp('DelCancelMember-TypeCode');
        var CancelledByCode = Ext.getCmp('DelCancelMember-CancelledByCode');
        CancelledByCode.disable();
        if (TypeCode) TypeCode.on('Select', function (combo, record, index) {

            var TypeCode = Ext.getCmp('DelCancelMember-TypeCode').editValue;
            var CancelledByCode = Ext.getCmp('DelCancelMember-CancelledByCode');

            if (TypeCode == 0) { //Deletion

                CancelledByCode.clearValue();
                CancelledByCode.allowBlank = true;
                CancelledByCode.isValid();
                CancelledByCode.disable();
            }
            else {
                CancelledByCode.enable();
                CancelledByCode.allowBlank = false;
                CancelledByCode.isValid();
            }

        }, this);

        var TypeCode = Ext.getCmp('DelCancelMember-PolicyTypesCode');
        var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode');
        var IndividualpolicyCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode');
        var PolicyName = Ext.getCmp('DelCancelMember-PolicyName');
        var PolicytypeName = Ext.getCmp('DelCancelMember-PolicytypeName');
        var Startdate = Ext.getCmp('DelCancelMember-Startdate');
        var Enddate = Ext.getCmp('DelCancelMember-Enddate');
        var GroupName = Ext.getCmp('DelCancelMember-GroupName');
        var Base_perimum = Ext.getCmp('DelCancelMember-Base_perimum');
        var PolicytypeName = Ext.getCmp('DelCancelMember-PolicytypeName');
        var Altlimit = Ext.getCmp('DelCancelMember-Altlimit');
        var Iplimit = Ext.getCmp('DelCancelMember-Iplimit');
        var Oplimit = Ext.getCmp('DelCancelMember-Oplimit');
        var AnnualLimitTypeName = Ext.getCmp('DelCancelMember-AnnualLimitTypeName');
        var InpatientName = Ext.getCmp('DelCancelMember-InpatientName');
        var OutpatientName = Ext.getCmp('DelCancelMember-OutpatientName');
        TypeCode.on('select', function (combo, record, index) {
            if (TypeCode.editValue == 1) {  //policy
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IndividualpolicyCode.disable(); IndividualpolicyCode.clearValue(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
            }
            if (TypeCode.editValue == 2) { //Individual Policy
                IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
                PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
            PolicyName.setValue(null); PolicytypeName.setValue(null); Startdate.setValue(null); Enddate.setValue(null); GroupName.setValue(null);
            Base_perimum.setValue(null); PolicytypeName.setValue(null); Altlimit.setValue(null); Iplimit.setValue(null); Oplimit.setValue(null);
            AnnualLimitTypeName.setValue(null); InpatientName.setValue(null); OutpatientName.setValue(null);
        }, this);

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "pol.TypeCode=1";
        }, this);
        if (IndividualpolicyCode) IndividualpolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "pol.TypeCode=2";
        }, this);

        var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode');
        //if (PolicyCode) PolicyCode.on('select', function (combo, record, index) {
        //    Ext.getCmp('DelCancelMember-Applyamount').setValue(null);

        //}, this);
        Ext.getCmp('DelCancelMember-Enddate').disable();

        var PolicyIDCode = Ext.getCmp('DelCancelMember-PolicyIdCode');
        if (PolicyIDCode) PolicyIDCode.on('select', DelCancelMemberPolicyselectEvt, this);
        var IPPolicyIDCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode');
        if (IPPolicyIDCode) IPPolicyIDCode.on('select', DelCancelMemberIndPolicyselectEvt, this);


        var DelMemberPolicyCommisionDetList = Ext.getCmp('DelMemberPolicyCommisionDetList');
        var GeneralCommBillingCode = Ext.getCmp('DelMemberPolicyCommisionDet-GeneralCommBillingCode');
        DelMemberPolicyCommisionDetList.on('afteredit', function (e) {

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var FinalAmount = Ext.getCmp('DelCancelMember-TotalApplyAmount').getValue();
                var DefValueAmnt = 0, DefValuePre = 0;
                if (e.grid.store.getAt(i).get('Calc_MethodCode') == 0) {  //  Amount
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    DefValueAmnt = e.grid.store.getAt(i).get('DefaultValue');
                    DefValuePre == 0;
                }
                else if (e.grid.store.getAt(i).get('Calc_MethodCode') == 1) {  // Precentage
                    var DefaultValue = e.grid.store.getAt(i).get('DefaultValue');
                    var FinalAmount = Ext.getCmp('DelCancelMember-TotalApplyAmount').getValue();
                    if (DefaultValue > 100) {
                        e.grid.store.getAt(i).set('Commission_value', 0);
                        e.grid.store.getAt(i).set('DefaultValue', 0);
                        Ext.MessageBox.alert(login.modulename, 'Default value should be less or equal to 100');
                        return;
                    }
                    DefValuePre = FinalAmount != 0 ? ((FinalAmount * e.grid.store.getAt(i).get('DefaultValue')) / 100) : 0;
                    DefValueAmnt == 0;
                }
                var Total = DefValueAmnt == 0 ? DefValuePre : DefValueAmnt;
                e.grid.store.getAt(i).set('Commission_value', Total);
            }
            if (e.record.get('Comission_TypesCode') == 2) // NGI Commission
                e.record.set('Description', GeneralCommBillingCode.lastSelectionText);

        }, this);


        //DelMemberPolicyCommisionDetList.on('beforeedit', function (evt) {

        //    var CommissionToCode = Ext.getCmp('DelMemberPolicyCommisionDet-CommissionToCode');
        //    var Comission_TypesCode = evt.record.get('Comission_TypesCode');
        //    if (Comission_TypesCode == 0) {
        //        CommissionToCode.lastQuery = '1=2';
        //        CommissionToCode.store.baseParams.filter = 'Com.TypeCode=1';
        //    }
        //    else if (Comission_TypesCode == 1) {
        //        CommissionToCode.lastQuery = '1=2';
        //        CommissionToCode.store.baseParams.filter = 'Com.TypeCode=0';
        //    }

        //}, this);

    }

    //var DelCancelMemberPremiumList = Ext.getCmp('DelCancelMemberPremiumList');
    //DelCancelMemberPremiumList.on('afteredit', function (e) {
    //    for (var i = 0; i < e.grid.store.getCount() ; i++) {
    //        var Total = 0;
    //        var ApplyAmount = Ext.getCmp('DelCancelMember-Applyamount').getValue();
    //        if (e.grid.store.getAt(i).get('CalcMethodCode') == 0)
    //            Total = e.grid.store.getAt(i).get('DefaultValue');
    //        else if (e.grid.store.getAt(i).get('CalcMethodCode') == 1) {

    //            Total = (ApplyAmount * e.grid.store.getAt(i).get('DefaultValue')) / 100;
    //        }
    //        e.grid.store.getAt(i).set('Premium_Value', Total);
    //    }
    //}, this);

    Ext.getCmp('DelCancelMemberDtlList').on('rowclick', function (grid, rowIndex, Record) {

        var MemberPolicyCode = grid.getStore().getAt(rowIndex).get('MemberPolicyCode');
        var FilterQry = "pco.MEMBERPOLICYCODE=" + MemberPolicyCode;
        FilterQry = '';
        DetailStore = Ext.getCmp('DelCancelAdditionPremiumList').getStore();
        var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.DelCancelAdditionPremium&filter=" + FilterQry;
        if (DetailStore) {
            DetailStore.proxy = new Ext.data.HttpProxy({
                url: DetUrl
            });
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }

    }, this);

    var MemberCode = Ext.getCmp('DelCancelMemberDtl-MemberCode');
    if (MemberCode) MemberCode.on('beforequery', function (evt) {
        var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode').editValue;
        var IndPolicyCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode').editValue;
        var TypeCode = Ext.getCmp('DelCancelMember-PolicyTypesCode').editValue;
        var MemberPolicyCode = TypeCode == 1 ? PolicyCode : IndPolicyCode;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " IME.MEMBERPOLICYCODE  in (select MEMBERPOLICYCODE from IM_MEMBERPOLICY where POLICYCODE=" + MemberPolicyCode + " and TYPEE=" + TypeCode + ")";
    }, this);

    //Ext.getCmp('DelCancelMemberDtlList').getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {

    //    var MemberPolicyCode = Record.get('MemberPolicyCode');
    //    //DelCancelMemberDtlList.lastSelectedRecord = Record;
    //    var FilterQry = "pco.MEMBERPOLICYCODE=" + MemberPolicyCode;
    //    DetailStore = Ext.getCmp('DelCancelAdditionPremiumList').getStore();
    //    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.DelCancelAdditionPremium&filter=" + FilterQry;
    //    if (DetailStore) {
    //        DetailStore.proxy = new Ext.data.HttpProxy({
    //            url: DetUrl
    //        });
    //        DetailStore.load({
    //            params: {
    //                start: 0,
    //                limit: 20
    //            }
    //        });
    //    }
    //}, this);

    var DelCancelMemberDtlList = Ext.getCmp('DelCancelMemberDtlList');
    var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
    var StartDate = Ext.getCmp('DelCancelMember-Startdate').getValue();

    if (DelCancelMemberDtlList) DelCancelMemberDtlList.on('addrecord', function (evt) {
        evt.record.set('EffectiveDate', Ext.getCmp('DelCancelMember-Effectivedate').getValue());
    }, this);


    if (DelCancelMemberDtlList) DelCancelMemberDtlList.on('afteredit', function (e) {

        var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
        var StartDate = Ext.getCmp('DelCancelMember-Startdate').getValue();
        var MemberStartDate = e.record.get('MemberStartDate');
        var EffectiveDate = e.record.get('EffectiveDate');

        if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
        else PolicyEndDate = PolicyEndDate;

        if (typeof (MemberStartDate) == 'string') MemberStartDate = Date.parseDate(MemberStartDate, login.jsdateformat);
        else MemberStartDate = MemberStartDate;

        if (EffectiveDate != '') {
            if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
            else EffectiveDate = EffectiveDate;

            if (PolicyEndDate < EffectiveDate) {
                Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
                e.record.set('EffectiveDate', '');
                //e.record.set('BasePremium', 0);
                return;
            }

            var Member_StartDate = e.record.get('MemberStartDate');
            if (MemberStartDate > EffectiveDate) {
                Ext.MessageBox.alert(login.modulename, "EffectiveDate should greater then Member joined Date. Member Joined Date was " + Member_StartDate + "");
                e.record.set('EffectiveDate', '');
                //e.record.set('BasePremium', 0);
                return;
            }

            if (typeof (StartDate) == 'string') StartDate = Date.parseDate(StartDate, login.jsdateformat);
            else StartDate = StartDate;

            var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
            var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
            var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());

            var TotalPolicyDays = Math.floor(t1 - t3) / (1000 * 60 * 60 * 24);
            var diff = Math.floor(t1 - t2) / (1000 * 60 * 60 * 24);

            DeletionRemainigDays = diff;

            //var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);

            //e.grid.store.getAt(i).set('BasePremium', ApplyAmountValue);
        }
    }, this);

    var DelCancelRefundPremiumList = Ext.getCmp('DelCancelRefundPremiumList');
    if (DelCancelRefundPremiumList) DelCancelRefundPremiumList.on('afteredit', function (e) {
        if (e.record.get('Premium_TypeCode') > 2) {
            if (e.record.get('CalcMethodCode') == 1) {
                var BasePremium = ((DelCancelRefundPremiumList.masterRecord.get('BasePremium') * e.record.get('DefaultValue')) / 100);
                e.record.set('Premium_Value', BasePremium);
            }
            else {
                e.record.set('Premium_Value', e.record.get('DefaultValue'));
            }
        }

    }, this);

    var SharingSummary = Ext.getCmp('DelCancelMember-SharingSummary');
    var DelCancelMemberSharingDtlList = Ext.getCmp('DelCancelMemberSharingDtlList');//Sharing Detail Load: to Calculate Sharing Amount
    DelCancelMemberSharingDtlList.getStore().on('load', function (store, record, options) {
        var Total11 = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) Total11 += (1 * record.get('FinalPremiumValue'));
        }
        SharingSummary.setValue(Total11);
    }, this);

    DelCancelMemberSharingDtlList.on('afteredit', function (e) {// Sharing Detail After edit: to Calculate Sharing Amount
        var AmountSum = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            if (e.grid.store.getAt(i).get('ReInsurValueTypeCode') == 1) {// Percentage
                e.grid.store.getAt(i).set('FinalPremiumValue', 0);
            }
            AmountSum += (1 * e.grid.store.getAt(i).get('FinalPremiumValue'));
        }
        SharingSummary.setValue(AmountSum);
    }, this);

    var DelCancelRefundPremiumList = Ext.getCmp('DelCancelRefundPremiumList');

    var RefundPremiumTotal = Ext.getCmp('DelCancelMember-RefundPremiumTotal');
    var RefundCommissionValTotal = Ext.getCmp('DelCancelMember-RefundValueTotal')

    DelCancelRefundPremiumList.on('afteredit', function (e) {

        var Totalamount = 0;
        var Totalamount1 = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var Total = 0;
            Totalamount += 1 * e.grid.store.getAt(i).get('Premium_Value');
            Totalamount1 += 1 * e.grid.store.getAt(i).get('DefaultValue');
            if (Ext.get('DelCancelMember-RefundUserPremium').checked == true) {
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('Premium_Value').editable = true;
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('BenefitIDCode').editable = true;
            }
            if (Ext.get('DelCancelMember-RefundUserPremium').checked == false) {
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('Premium_Value').editable = false;
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('BenefitIDCode').editable = false;
            }
        }
        RefundPremiumTotal.setValue(Totalamount);
        RefundCommissionValTotal.setValue(Totalamount1);

    }, this);


    var DelCancelRefundPremiumList = Ext.getCmp('DelCancelRefundPremiumList').getStore();
    DelCancelRefundPremiumList.on('load', function (store, record, options) {
        var Totalamount = 0;
        var Totalamount2 = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            Totalamount += 1 * record.get('Premium_Value');
            Totalamount2 += 1 * record.get('DefaultValue');
			
			if (Ext.get('DelCancelMember-RefundUserPremium').checked == true) {
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('Premium_Value').editable = true;
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('BenefitIDCode').editable = true;
            }
            if (Ext.get('DelCancelMember-RefundUserPremium').checked == false) {
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('Premium_Value').editable = false;
                Ext.getCmp('DelCancelRefundPremiumList').getColumnModel().getColumnById('BenefitIDCode').editable = false;
            }
        }
        RefundPremiumTotal.setValue(Totalamount);
        RefundCommissionValTotal.setValue(Totalamount2);


    }, this);

    var DelCancelAdditionPremiumList = Ext.getCmp('DelCancelAdditionPremiumList');

    var AddPremiumTotal = Ext.getCmp('DelCancelMember-AddPremiumTotal');
    var AddCommissionValTotal = Ext.getCmp('DelCancelMember-AddCommissionTotal')

    DelCancelAdditionPremiumList.on('afteredit', function (e) {

        var Totalamount = 0;
        var Totalamount1 = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            var Total = 0;
            Totalamount += 1 * e.grid.store.getAt(i).get('Premium_Value');
            Totalamount1 += 1 * e.grid.store.getAt(i).get('DefaultValue');

        }
        AddPremiumTotal.setValue(Totalamount);
        AddCommissionValTotal.setValue(Totalamount1);

    }, this);


    var DelCancelAdditionPremiumList = Ext.getCmp('DelCancelAdditionPremiumList').getStore();
    DelCancelAdditionPremiumList.on('load', function (store, record, options) {
        var Totalamount = 0;
        var Totalamount2 = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            Totalamount += 1 * record.get('Premium_Value');
            Totalamount2 += 1 * record.get('DefaultValue');
        }
        AddPremiumTotal.setValue(Totalamount);
        AddCommissionValTotal.setValue(Totalamount2);
    }, this);

}

function DelCancelMemberPolicyselectEvt(combo, record, index) {

    onBusinessTypeclear('DelMemberPolicyCommisionDetList');
    var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyCommissionLoad',
            PolicyCode: PolicyCode,
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DelCancelMemberCommissionLoadComplete, this);
}
function DelCancelMemberIndPolicyselectEvt(combo, record, index) {

    onBusinessTypeclear('DelMemberPolicyCommisionDetList');
    var PolicyCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AddMemPolicyIPCommissionLoad',
            IPPolicyIDCode: PolicyCode
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DelCancelMemberIPCommissionLoadComplete, this);
}

function DelCancelMemberIPCommissionLoadComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', DelCancelMemberIPCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var DelMemberPolicyCommisionDetList = Ext.getCmp('DelMemberPolicyCommisionDetList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) {
            var CommissionRecord = responseText.commissiondatum[cnt];
            DelMemberPolicyCommisionDetList.storeId += 1;
            var newRecord = new DelMemberPolicyCommisionDetList.recordType({
                ID: DelMemberPolicyCommisionDetList.storeId,
                SerialNo: DelMemberPolicyCommisionDetList.storeId,
                Dcmember_Code: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                LegalentityCode: CommissionRecord.LegalentityCode,
                Description: CommissionRecord.LegalentityCode,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                CustomerCode: CommissionRecord.CustomerCode,
                Description: CommissionRecord.IndPolcyCommisionTo,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            DelMemberPolicyCommisionDetList.stopEditing();
            DelMemberPolicyCommisionDetList.store.add(newRecord);
            DelMemberPolicyCommisionDetList.store.totalLength = DelMemberPolicyCommisionDetList.store.getTotalCount() + 1;
            DelMemberPolicyCommisionDetList.pageBar.updateInfo();
        }
        var DelCancelMemberSharingDtlList = Ext.getCmp('DelCancelMemberSharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            DelCancelMemberSharingDtlList.storeId += 1;
            var SharingRecord = new DelCancelMemberSharingDtlList.recordType({
                ID: DelCancelMemberSharingDtlList.storeId,
                Serialno: DelCancelMemberSharingDtlList.storeId,
                Dcmember_Code: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            DelCancelMemberSharingDtlList.stopEditing();
            DelCancelMemberSharingDtlList.store.add(SharingRecord);
            DelCancelMemberSharingDtlList.store.totalLength = DelCancelMemberSharingDtlList.store.getTotalCount() + 1;
            DelCancelMemberSharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('DelCancelMemberSharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}

function DelCancelMemberCommissionLoadComplete(conn, response) {


    Ext.Ajax.un('requestcomplete', DelCancelMemberCommissionLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    //return;
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var DelMemberPolicyCommisionDetList = Ext.getCmp('DelMemberPolicyCommisionDetList');

        for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) { //City Detail
            var CommissionRecord = responseText.commissiondatum[cnt];
            DelMemberPolicyCommisionDetList.storeId += 1;
            var newRecord = new DelMemberPolicyCommisionDetList.recordType({
                ID: DelMemberPolicyCommisionDetList.storeId,
                SerialNo: DelMemberPolicyCommisionDetList.storeId,
                Dcmember_Code: 1,
                Comission_TypesCode: CommissionRecord.Comission_TypesCode,
                Comission_TypesName: CommissionRecord.Comission_TypesName,
                CommissionToCode: CommissionRecord.CommissionToCode,
                CommissionToName: CommissionRecord.CommissionToName,
                DefaultValue: CommissionRecord.DefaultValue,
                Calc_MethodCode: CommissionRecord.Calc_MethodCode,
                Calc_MethodName: CommissionRecord.Calc_MethodName,
                Commission_value: 0,
                Description: CommissionRecord.CommissionToNewName,
                LegalentityCode: CommissionRecord.LegalentityCode,
                CustomerCode: CommissionRecord.CustomerCode,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                GeneralCommBillingCode: CommissionRecord.GeneralCommBillingCode,
                GeneralCommBillingName: CommissionRecord.GeneralCommBillingName,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            DelMemberPolicyCommisionDetList.stopEditing();
            DelMemberPolicyCommisionDetList.store.add(newRecord);
            DelMemberPolicyCommisionDetList.store.totalLength = DelMemberPolicyCommisionDetList.store.getTotalCount() + 1;
            DelMemberPolicyCommisionDetList.pageBar.updateInfo();
        }

        var DelCancelMemberSharingDtlList = Ext.getCmp('DelCancelMemberSharingDtlList');

        for (cnt = 0; cnt < responseText.sharingDtlCount; cnt++) { //sharingdtl Detail
            var SharingRecord = responseText.sharingdtldatum[cnt];
            DelCancelMemberSharingDtlList.storeId += 1;
            var SharingRecord = new DelCancelMemberSharingDtlList.recordType({
                ID: DelCancelMemberSharingDtlList.storeId,
                Serialno: DelCancelMemberSharingDtlList.storeId,
                Dcmember_Code: 1,
                ReInsuranceCode: SharingRecord.ReInsuranceCode,
                ReInsuranceName: SharingRecord.ReInsuranceName,
                ReInsurValueTypeCode: SharingRecord.ReInsurValueTypeCode,
                ReInsurValueTypeName: SharingRecord.ReInsurValueTypeName,
                Reinsurance_npq: SharingRecord.Reinsurance_npq,
                Reinsr_NpqTypeCode: SharingRecord.Reinsr_NpqTypeCode,
                Reinsr_NpqTypeName: SharingRecord.Reinsr_NpqTypeName,
                FinalPremiumValue: 0,
                RenewalPremiumType: SharingRecord.RenewalPremiumType,
                RenewalAmout: SharingRecord.RenewalAmout,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            DelCancelMemberSharingDtlList.stopEditing();
            DelCancelMemberSharingDtlList.store.add(SharingRecord);
            DelCancelMemberSharingDtlList.store.totalLength = DelCancelMemberSharingDtlList.store.getTotalCount() + 1;
            DelCancelMemberSharingDtlList.pageBar.updateInfo();
        }

        DetailStore = Ext.getCmp('DelCancelMemberSharingDtlList').getStore();
        if (DetailStore && !DetailStore.Firstimeloaded) {
            DetailStore.Firstimeloaded = true;
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 20
                }
            });
        }
    }
}

var DeletionRemainigDays = 0;
function CalPerimunButtonHandler(form, login) {

    var BasePremium = Ext.getCmp('DelCancelMember-Base_perimum').getValue();
    var ApplyAmount = Ext.getCmp('DelCancelMember-Applyamount');

    //Apply amount Calculation
    if (form.selectedIndex != -1 && !form.isView) {
        var PolicyIDCode = Ext.getCmp('DelCancelMember-PolicyIdCode').editValue;
    }

    //if (PolicyIDCode == null || PolicyIDCode == '' || PolicyIDCode == 0) {
    //    Ext.MessageBox.alert(login.modulename, 'Policy ID Should not be Empty');
    //    return;
    //}

    if (BasePremium == '' || BasePremium == null || BasePremium == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please enter Gross Price value!');
        return;
    }

    var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
    var EffectiveDate = Ext.getCmp('DelCancelMember-Effectivedate').getValue();
    var StartDate = Ext.getCmp('DelCancelMember-Startdate').getValue();

    if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
    else PolicyEndDate = PolicyEndDate;

    if (typeof (StartDate) == 'string') StartDate = Date.parseDate(StartDate, login.jsdateformat);
    else StartDate = StartDate;

    if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
    else EffectiveDate = EffectiveDate;

    if (PolicyEndDate == '' || PolicyEndDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Policy End date Should not be Empty!');
        return;
    }
    if (StartDate == '' || StartDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Policy End date Should not be Empty!');
        return;
    }

    if (EffectiveDate == '' || EffectiveDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Please enter EffectiveDate!');
        return;
    }

    if (PolicyEndDate < EffectiveDate) {
        Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
        return;
    }

    if (StartDate > EffectiveDate) {
        Ext.MessageBox.alert(login.modulename, 'EffectiveDate should greater then Policy start Date!');
        return;
    }

    var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
    var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
    var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());
    if (t1 == t3) {
        Ext.MessageBox.alert(login.modulename, 'PolicyEndDate should not Equal to Policy Startdate!');
        return;
    }
    var TotalPolicyDays = Math.floor(t1 - t3) / (1000 * 60 * 60 * 24);
    var diff = Math.floor(t1 - t2) / (1000 * 60 * 60 * 24);

    DeletionRemainigDays = diff;

    var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);
    ApplyAmount.setValue(ApplyAmountValue);

}
function DelCancelMemberAddButton(form, login) {

    if (form.selectedIndex != -1 && !form.isView) {

        var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode').editValue;
        var IPPolicyIDCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode').editValue;
        var PolicyTypesCode = Ext.getCmp('DelCancelMember-PolicyTypesCode').editValue;
    }
    if (PolicyTypesCode == 1)//Policy
    {
        if (PolicyCode == null || PolicyCode == '' || PolicyCode == 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select Policy ID');
            return;
        }
    }
    else if (PolicyTypesCode == 2)// Indivual Policy
    {
        if (IPPolicyIDCode == null || IPPolicyIDCode == '' || IPPolicyIDCode == 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select Individual Policy ID');
            return;
        }
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'Please Select Policy Type');
        return;
    }

    var BasePremium = Ext.getCmp('DelCancelMember-Base_perimum').getValue();

    //if (BasePremium == '' || BasePremium == null || BasePremium == 0) {
    //    Ext.MessageBox.alert(login.modulename, 'Please enter Gross Price value!');
    //    return;
    //}

    var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
    var StartDate = Ext.getCmp('DelCancelMember-Startdate').getValue();
    var EffectiveDate = Ext.getCmp('DelCancelMember-Effectivedate').getValue();

    if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
    else PolicyEndDate = PolicyEndDate;

    if (typeof (StartDate) == 'string') StartDate = Date.parseDate(StartDate, login.jsdateformat);
    else StartDate = StartDate;

    if (PolicyEndDate == '' || PolicyEndDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Policy End date Should not be Empty!');
        return;
    }
    if (StartDate == '' || StartDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Policy End date Should not be Empty!');
        return;
    }
    if (EffectiveDate == '' || EffectiveDate == null) {
        Ext.MessageBox.alert(login.modulename, 'Please enter EffectiveDate!');
        return;
    }
    if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
    else EffectiveDate = EffectiveDate;
    if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
    else PolicyEndDate = PolicyEndDate;
    if (PolicyEndDate < EffectiveDate) {
        Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
        return;
    }
    if (StartDate > EffectiveDate) {
        Ext.MessageBox.alert(login.modulename, 'EffectiveDate should greater then Policy Start Date!');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'DeleteCancelMemberPopUp',
            PolicyCode: PolicyTypesCode == 1 ? PolicyCode : IPPolicyIDCode,
            //IPPolicyIDCode: 0,//PolicyTypesCode == 1 ? PolicyCode : IPPolicyIDCode,
            Type: PolicyTypesCode

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DeleteCancelMemberComplete, this);

}

function DeleteCancelMemberComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DeleteCancelMemberComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.DeleteCancelMemberForm = new Ext.form.FormPanel(responseText.DeleteCancelMemberPopUpCofig);

    this.DeleteCancelMemberForm.addButton({
        text: 'Select All',
        handler: function () {
            var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');

            for (var pcnt = 0; pcnt < DelCancelMemberPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = DelCancelMemberPopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.DeleteCancelMemberForm.FormFieldsCount + 2
    });

    this.DeleteCancelMemberForm.addButton({
        text: 'Load',
        handler: function () {

            var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode').editValue;
            var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');
            var MemCode = '';
            var Count = DelCancelMemberPopUpDtlList.store.getCount();
            var NoOfSelect = 0;
            for (i = 0; i < Count; i++) {
                var record = DelCancelMemberPopUpDtlList.store.getAt(i);
                if (record.get('Selectcheck') == true) {
                    NoOfSelect++;
                    MemCode += DelCancelMemberPopUpDtlList.store.getAt(i).get('ID') + ',';
                }
            }
            if (NoOfSelect == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select Atleast One Member');
                return;
            }
            if (MemCode != '') {
                MemCode = MemCode.substring(0, MemCode.length - 1);
            }
            var MemberCode = MemCode;

            var PolicyCode = Ext.getCmp('DelCancelMember-PolicyIdCode');
            var IPPolicyIDCode = Ext.getCmp('DelCancelMember-IPPolicyIDCode');
            var PolicyTypesCode = Ext.getCmp('DelCancelMember-PolicyTypesCode').editValue;
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'DelCancelAdditionPremiumFilter',
                    PolicyCode: PolicyTypesCode == 1 ? PolicyCode.editValue : IPPolicyIDCode.editValue,
                    MemberCode: MemberCode,
                    Type: Ext.getCmp('DelCancelMember-TypeCode').editValue,
                    DeletionRemainigDays: DeletionRemainigDays,
                    PolicyTypesCode: PolicyTypesCode,
                    CancelledBy: Ext.getCmp('DelCancelMember-CancelledByCode').editValue == '' ? 0 : Ext.getCmp('DelCancelMember-CancelledByCode').editValue,
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', DelCancelAdditionPremiumFilterCompleted, this);

            //    var DelCancelMemberDtlList = Ext.getCmp('DelCancelMemberDtlList');
            //    DelCancelMemberDtlList.store.load({
            //        params: {
            //            start: 0,
            //            limit: DelCancelMemberDtlList.pageSize
            //        }
            //    });
        },


        scope: this,
        formBind: true,
        tabIndex: this.DeleteCancelMemberForm.FormFieldsCount + 2
    });

    this.DeleteCancelMemberForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.DeleteCancelMemberFormWindow.close();
        },
        scope: this,
        tabIndex: this.DeleteCancelMemberForm.FormFieldsCount + 2
    });

    this.DeleteCancelMemberFormWindow = new Ext.Window({
        id: 'DeleteCancelMemberFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.DeleteCancelMemberForm.width + 10,
        height: this.DeleteCancelMemberForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.DeleteCancelMemberForm]
    });
    this.DeleteCancelMemberForm.on('render', DelCancelMemberPopUp.createDelegate(this.form, [login], true), this);
    this.DeleteCancelMemberFormWindow.show();

}

function DelCancelMemberPopUp(form, login) {

    if (!form.isview) {
        var type = Ext.getCmp('DelCancelMember-TypeCode').editValue;


        var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');
        DelCancelMemberPopUpDtlList.store.on('load', function (store, record, options) {
            if (type == 1) {

                for (var i = 0; i < store.getCount() ; i++) {
                    store.getAt(i).set('Selectcheck', true);
                }
            }
        }, this);

        if (type == 1) {
            DelCancelMemberPopUpDtlList.getColumnModel().getColumnById('Selectcheck').editable = false;
        }

        var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');

        var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
        var StartDate = Ext.getCmp('DelCancelMember-Startdate').getValue();
        var EffectiveDate = Ext.getCmp('DelCancelMember-Effectivedate').getValue();
        var BasePremium = Ext.getCmp('DelCancelMember-Base_perimum').getValue();
        var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');
        DelCancelMemberPopUpDtlList.store.on('load', function (store, record, options) {
            for (var i = 0; i < store.getCount() ; i++) {
                var EffectiveDate = Ext.getCmp('DelCancelMember-Effectivedate').getValue();
                store.getAt(i).set('EffectiveDate', EffectiveDate);
                var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
                var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
                var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());
                var TotalPolicyDays = Math.floor(t1 - t3) / (1000 * 60 * 60 * 24);
                var diff = Math.floor(t1 - t2) / (1000 * 60 * 60 * 24);
                DeletionRemainigDays = diff;
                var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);
                //store.getAt(i).set('BasePremium', ApplyAmountValue);
            }
        }, this);
        if (DelCancelMemberPopUpDtlList) DelCancelMemberPopUpDtlList.on('afteredit', function (e) {

            var PolicyEndDate = Ext.getCmp('DelCancelMember-Enddate').getValue();
            var MemberStartDate = e.record.get('MemberStartDate');
            var EffectiveDate = e.record.get('EffectiveDate');

            if (EffectiveDate != '') {

                if (typeof (EffectiveDate) == 'string') EffectiveDate = Date.parseDate(EffectiveDate, login.jsdateformat);
                else EffectiveDate = EffectiveDate;

                if (typeof (PolicyEndDate) == 'string') PolicyEndDate = Date.parseDate(PolicyEndDate, login.jsdateformat);
                else PolicyEndDate = PolicyEndDate;

                if (typeof (MemberStartDate) == 'string') MemberStartDate = Date.parseDate(MemberStartDate, login.jsdateformat);
                else MemberStartDate = MemberStartDate;

                if (PolicyEndDate < EffectiveDate) {
                    Ext.MessageBox.alert(login.modulename, 'EffectiveDate should Less then Policy End Date!');
                    e.record.set('EffectiveDate', '');
                    return;
                }

                var Member_StartDate = e.record.get('MemberStartDate');
                if (MemberStartDate > EffectiveDate) {
                    Ext.MessageBox.alert(login.modulename, "EffectiveDate should greater then Member start Date. Member Joind Date was " + Member_StartDate + "");
                    e.record.set('EffectiveDate', '');
                    return;
                }


                //var t1 = Date.UTC(PolicyEndDate.getFullYear(), PolicyEndDate.getMonth(), PolicyEndDate.getDate());
                //var t2 = Date.UTC(EffectiveDate.getFullYear(), EffectiveDate.getMonth(), EffectiveDate.getDate());
                //var t3 = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());

                //var TotalPolicyDays = Math.floor(t1 - t3) / (1000 * 60 * 60 * 24);
                //var diff = Math.floor(t1 - t2) / (1000 * 60 * 60 * 24);

                //DeletionRemainigDays = diff;

                //var ApplyAmountValue = ((BasePremium / TotalPolicyDays) * diff).toFixed(2);

                //e.grid.store.getAt(i).set('BasePremium', ApplyAmountValue);
            }

        }, this);
    }

}
function DelCancelAdditionPremiumFilterCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', DelCancelAdditionPremiumFilterCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {

        var PrimKey = Ext.getCmp('DelCancelMember').selectedIndex;
        var DelCancelMemberPopUpDtlList = Ext.getCmp('DelCancelMemberPopUpDtlList');
        var DelCancelMemberDtlList = Ext.getCmp('DelCancelMemberDtlList');
        var DelCancelMemberPremiumList = Ext.getCmp('DelCancelMemberPremiumList');
        var DelCancelRefundPremiumList = Ext.getCmp('DelCancelRefundPremiumList');

        for (var pcnt = 0; pcnt < DelCancelMemberPopUpDtlList.store.getCount() ; pcnt++) {

            var PopupRecord = DelCancelMemberPopUpDtlList.store.getAt(pcnt);

            if (!PopupRecord.get('Selectcheck')) continue;
            else {

                if (PopupRecord.get('EffectiveDate') == '') {

                    Ext.MessageBox.alert(login.modulename, "EffectiveDate should not empty for the Member " + PopupRecord.get('MemberName') + " ! ");
                    return;
                }
            }

            DelCancelMemberDtlList.storeId += 1;
            var MemberID = DelCancelMemberDtlList.storeId;
            var newRecord = new DelCancelMemberDtlList.recordType({
                ID: MemberID,
                Serialno: MemberID,
                Dcmember_Code: (PrimKey == -1 ? 1 : PrimKey),//master primary Key
                MemberPolicyCode: PopupRecord.get('MemberPolicyCode'),
                MemberCode: PopupRecord.get('ID'),
                MemberName: PopupRecord.get('MemberName'),
                Date_of_birth: PopupRecord.get('Date_of_birth'),
                MemberStartDate: PopupRecord.get('MemberStartDate'),
                Age: PopupRecord.get('Age'),
                CategoryName: PopupRecord.get('CategoryName'),
                GenderName: PopupRecord.get('GenderName'),
                MemberrelationName: PopupRecord.get('MemberrelationName'),
                MaritalstatusName: PopupRecord.get('MaritalstatusName'),
                NationalityName: PopupRecord.get('NationalityName'),
                EffectiveDate: PopupRecord.get('EffectiveDate'),
                BasePremium: PopupRecord.get('BasePremium'),
                DelCancelMemberPremiumList: null,
                DelCancelRefundPremiumList: null,
                DelCancelAdditionPremiumList: null,
                LegalentityCode: 0,
                Location: 0,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,

                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            DelCancelMemberDtlList.stopEditing();
            DelCancelMemberDtlList.store.add(newRecord);
            DelCancelMemberDtlList.store.totalLength = DelCancelMemberDtlList.store.getTotalCount() + 1;
            DelCancelMemberDtlList.pageBar.updateInfo();
            /*
            DelCancelRefundPremiumList.storeId += 1;
            var RefundPremiumID = DelCancelRefundPremiumList.storeId;
            var newRefDtlRecord = new DelCancelRefundPremiumList.recordType({
                ID: RefundPremiumID,
                SerialNo: RefundPremiumID,
                Policy_Mem_Code: MemberID,
                Premium_TypeCode: 1,
                Premium_TypeName: 'Refundable',
                Description: 'Refundable Premium',
                DefaultValue: appAmount,
                CalcMethodCode: 0,
                CalcMethodName: 'Amount',
                Premium_Value: appAmount,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CustomerCode: 0,
                LegalEntityCode: 0,
                BenefitIDCode: null,
                BenefitIDName:null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            DelCancelRefundPremiumList.stopEditing();
            DelCancelRefundPremiumList.store.add(newRefDtlRecord);
            DelCancelRefundPremiumList.store.totalLength = DelCancelRefundPremiumList.store.getTotalCount() + 1;
            DelCancelRefundPremiumList.pageBar.updateInfo();
            */

            for (cnt = 0; cnt < responseText.MemberBenefitdatum.length; cnt++) {
                var BenefitRecord = responseText.MemberBenefitdatum[cnt];
                if (PopupRecord.get('ID') != BenefitRecord.Member_Code) continue;
                DelCancelRefundPremiumList.storeId += 1;
                var RefundPremiumID = DelCancelRefundPremiumList.storeId;
                var SubnewRecord = new DelCancelRefundPremiumList.recordType({
                    ID: RefundPremiumID,
                    SerialNo: RefundPremiumID,
                    Policy_Mem_Code: MemberID,
                    Premium_TypeCode: 2,
                    Premium_TypeName: 'Benefit',
                    BenefitIDCode: BenefitRecord.BeniftCode,
                    BenefitIDName: BenefitRecord.BenefitId,
                    Description: BenefitRecord.Description,
                    DefaultValue: BenefitRecord.Premium,
                    CalcMethodCode: 0,
                    CalcMethodName: 'Amount',
                    Premium_Value: BenefitRecord.Premium,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CustomerCode: 0,
                    LegalEntityCode: 0,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true

                });

                DelCancelRefundPremiumList.stopEditing();
                DelCancelRefundPremiumList.store.add(SubnewRecord);
                DelCancelRefundPremiumList.store.totalLength = DelCancelRefundPremiumList.store.getTotalCount() + 1;
                DelCancelRefundPremiumList.pageBar.updateInfo();
            }
        }
        this.DeleteCancelMemberFormWindow.close();
    }
}

function CliamRequesMailRecordOpen(record) {

    this.CliamRequesMailHistryForm = new Ext.FormPanel({
        title: 'Mail Histry',
        labelAlign: 'left',
        labelWidth: 105,
        autoHeight: true,
        width: 650,
        buttonAlign: 'center',
        method: 'POST',
        frame: true,
        monitorValid: true,
        items: [new Ext.form.TextField({
            fieldLabel: 'Email ID',
            name: 'MailId',
            width: 300,
            height: 20,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('MailId'),
            tabIndex: 1
        }), new Ext.form.TextField({
            fieldLabel: 'Subject',
            name: 'Subject',
            width: 300,
            height: 20,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('Subject'),
            tabIndex: 2
        }),
        new Ext.form.TextArea({
            fieldLabel: 'Message',
            name: 'Message',
            width: 500,
            height: 150,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('Body'),
            tabIndex: 2
        })]
    });

    this.CliamRequesMailHistryForm.addButton({
        text: 'Ok',
        handler: function () {
            this.CliamRequesMailHistryFormWindow.close();
        },
        scope: this,
        tabIndex: this.CliamRequesMailHistryForm.FormFieldsCount + 2
    });

    this.CliamRequesMailHistryFormWindow = new Ext.Window({
        id: 'CliamRequesMailHistryForm',
        title: 'Cliam Request Mail Histry',
        width: 650,
        //height:150,
        autoHeight: true,
        plain: true,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        bodyStyle: 'padding:0px',
        closeTips: 'Close',
        modal: true,
        items: [this.CliamRequesMailHistryForm]
    });
    this.CliamRequesMailHistryFormWindow.show();
}
function CliamProcessMailRecordOpen(record) {

    this.CliamRequesMailHistryForm = new Ext.FormPanel({
        title: 'Mail Histry',
        labelAlign: 'left',
        labelWidth: 105,
        autoHeight: true,
        width: 650,
        buttonAlign: 'center',
        method: 'POST',
        frame: true,
        monitorValid: true,
        items: [new Ext.form.TextField({
            fieldLabel: 'Email ID',
            name: 'MailId',
            width: 300,
            height: 20,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('MailId'),
            tabIndex: 1
        }), new Ext.form.TextField({
            fieldLabel: 'Subject',
            name: 'Subject',
            width: 300,
            height: 20,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('Subject'),
            tabIndex: 2
        }),
        new Ext.form.TextArea({
            fieldLabel: 'Message',
            name: 'Message',
            width: 500,
            height: 150,
            allowBlank: true,
            editable: false,
            readOnly: true,
            value: record.get('Body'),
            tabIndex: 2
        })]
    });

    this.CliamRequesMailHistryForm.addButton({
        text: 'Ok',
        handler: function () {
            this.CliamRequesMailHistryFormWindow.close();
        },
        scope: this,
        tabIndex: this.CliamRequesMailHistryForm.FormFieldsCount + 2
    });

    this.CliamRequesMailHistryFormWindow = new Ext.Window({
        id: 'CliamRequesMailHistryForm',
        title: 'Cliam Request Mail Histry',
        width: 650,
        //height:150,
        autoHeight: true,
        plain: true,
        animCollapse: true,
        constrainHeader: true,
        expandOnShow: true,
        bodyStyle: 'padding:0px',
        closeTips: 'Close',
        modal: true,
        items: [this.CliamRequesMailHistryForm]
    });
    this.CliamRequesMailHistryFormWindow.show();
}

function ProviderSearch(form, login) {
}

function ProviderSearchHandler(form, login) {
}
function ProviderClearHandler(button, option) {

    var ProviderName = Ext.getCmp('ProviderSearch-ProviderName').setValue(null);
    var ClinicianCode = Ext.getCmp('ProviderSearch-ClinicianCode').clearValue();
    var SpecialtyCode = Ext.getCmp('ProviderSearch-SpecialtyCode').clearValue();
    var CountryCode = Ext.getCmp('ProviderSearch-CountryCode').clearValue();
    var StateCode = Ext.getCmp('ProviderSearch-StateCode').clearValue();
    var Phone = Ext.getCmp('ProviderSearch-Phone').setValue(null);
    var Mobile1 = Ext.getCmp('ProviderSearch-Mobile1').setValue(null);
    var Mobile2 = Ext.getCmp('ProviderSearch-Mobile2').setValue(null);

    var Address = Ext.getCmp('ProviderSearch-Address').setValue(null);

}

function ProviderCloseHandler(form, login) {
    Ext.getCmp('ID_PROVIDERSSEARCH').close();

}


function PolicyRenewal(form, login) {

    if (!form.isView) {
        var TypeCode = Ext.getCmp('PolicyRenewal-TypeCode');
        var PolicyCode = Ext.getCmp('PolicyRenewal-PolicyIDCode');

        var TypeCode = Ext.getCmp('PolicyRenewal-TypeCode');

        if (PolicyCode) PolicyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " Pol.Typecode=" + TypeCode.editValue;
        }, this);

        if (PolicyCode) PolicyCode.on('select', PolicyRenwalPolicyload, this);

        var RenewalFor = Ext.getCmp('PolicyRenewal-RenewalFor');
        var RenewalTypeCode = Ext.getCmp('PolicyRenewal-RenewalTypeCode');
        if (RenewalFor) RenewalFor.on('valid', function (field) {
            var EndDate = Ext.getCmp('PolicyRenewal-EndDate').getValue();

            var NewEndDate = new Date();
            if (typeof (EndDate) == 'string') NewEndDate = Date.parseDate(EndDate, login.jsdateformat);
            else
                NewEndDate = EndDate;

            if (RenewalTypeCode.editValue == 0)//Days
                NewEndDate = NewEndDate.add(Date.DAY, field.getValue());
            else if (RenewalTypeCode.editValue == 1)//Months
                NewEndDate = NewEndDate.add(Date.MONTH, field.getValue());
            else if (RenewalTypeCode.editValue == 2)//Year
                NewEndDate = NewEndDate.add(Date.YEAR, field.getValue());

            Ext.getCmp('PolicyRenewal-NewEndDate').setValue(NewEndDate.format(login.jsdateformat));

        }, this)

        if (RenewalTypeCode) RenewalTypeCode.on('select', function (combo, record, index) {

            var EndDate = Ext.getCmp('PolicyRenewal-EndDate').getValue();
            if (EndDate == null)
                EndDate = Ext.getCmp('PolicyRenewal-RenewalDate').getValue();
            var NewEndDate = new Date();
            if (typeof (EndDate) == 'string') NewEndDate = Date.parseDate(EndDate, login.jsdateformat);
            else
                NewEndDate = EndDate;

            if (RenewalTypeCode.editValue == 0)//Days
                NewEndDate = NewEndDate.add(Date.DAY, RenewalFor.getValue());
            else if (RenewalTypeCode.editValue == 1)//Months
                NewEndDate = NewEndDate.add(Date.MONTH, RenewalFor.getValue());
            else if (RenewalTypeCode.editValue == 2)//Year
                NewEndDate = NewEndDate.add(Date.YEAR, RenewalFor.getValue());

            Ext.getCmp('PolicyRenewal-NewEndDate').setValue(NewEndDate.format(login.jsdateformat));
            onBusinessTypeclear('PolicyRenewalCategoryDet');
        }, this);

        var PolicyRenewal = Ext.getCmp('PolicyRenewal').selectedIndex;
        if (PolicyRenewal != -1) {
            var PolicyRenewalCategoryDetList = Ext.getCmp('PolicyRenewalCategoryDetList').getStore();
            PolicyRenewalCategoryDetList.on('load', function (store, record, options) {
                var PolicyCode = Ext.getCmp('PolicyRenewal-PolicyIDCode').editValue;
                var PolicyType = Ext.getCmp('PolicyRenewal-TypeCode').editValue;
                var Filter = " pcd.PolicyType=" + PolicyType + " and pcd.POLICYCODE=" + PolicyCode;
                DetailStore = Ext.getCmp('PolicyRenewalCategoryDetList').getStore();
                var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalCategoryDet&filter=" + Filter;
                if (DetailStore) {
                    DetailStore.proxy = new Ext.data.HttpProxy({
                        url: DetUrl
                    });
                    DetailStore.load({
                        params: {
                            start: 0,
                            limit: 20
                        }
                    });
                }
            }, this);
        }
    }

}

function PolicyRenwalPolicyload(combo, record, index) {

    var PolicyCode = Ext.getCmp('PolicyRenewal-PolicyIDCode');
    var EndDate = Ext.getCmp('PolicyRenewal-EndDate').getValue();
    if (EndDate == null)
        EndDate = Ext.getCmp('PolicyRenewal-RenewalDate').getValue();
    var NewEndDate = new Date();
    if (typeof (EndDate) == 'string')
        NewEndDate = Date.parseDate(EndDate, login.jsdateformat);
    else
        NewEndDate = EndDate;
    Ext.getCmp('PolicyRenewal-NewStartDate').setValue(NewEndDate.add(Date.DAY, 1));

    onBusinessTypeclear('PolicyRenewalCategoryDetList');
    //onBusinessTypeclear('PolicyRenewalMemberDetList');
    var PolicyType = Ext.getCmp('PolicyRenewal-TypeCode').editValue;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PolicyRenewalPolicyMemberLoad',
            PolicyCode: PolicyCode.editValue,
            PolicyType: PolicyType
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PolicyRenewalPolicyMemberLoadComplete, this);

}

function PolicyRenewalPolicyMemberLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyRenewalPolicyMemberLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    /*  By kumaresan
else {
    var Primary = Ext.getCmp('PolicyRenewal').selectedIndex;
    var PolicyRenewalMemberDetList = Ext.getCmp('PolicyRenewalMemberDetList');

    for (cnt = 0; cnt < responseText.MemberPolicydatum.length; cnt++) {

        var MemberPolicyRecords = responseText.MemberPolicydatum[cnt];

        PolicyRenewalMemberDetList.storeId += 1;
        var newRecord = new PolicyRenewalMemberDetList.recordType({
            ID: PolicyRenewalMemberDetList.storeId,
            SerialNo: PolicyRenewalMemberDetList.storeId,
            PolicyRenwalCode: Primary == -1 ? 1 : Primary,
            PolicyMemberCode: MemberPolicyRecords.ID,
            MemberId: MemberPolicyRecords.MemberName,
            MemberName: MemberPolicyRecords.Member_Name,
            MobileNumber: MemberPolicyRecords.MobileNumber,
            MemberStartDate: MemberPolicyRecords.Memberstartdate,
            MemberEndDate: MemberPolicyRecords.Memberenddate,
            ParentName: MemberPolicyRecords.ParentName,
            Renewed: true,

            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PolicyRenewalMemberDetList.stopEditing();
        PolicyRenewalMemberDetList.store.add(newRecord);
        PolicyRenewalMemberDetList.store.totalLength = PolicyRenewalMemberDetList.store.getTotalCount() + 1;
        PolicyRenewalMemberDetList.pageBar.updateInfo();

    }
}*/

    var PolicyCode = Ext.getCmp('PolicyRenewal-PolicyIDCode').editValue;
    var PolicyType = Ext.getCmp('PolicyRenewal-TypeCode').editValue;
    var Filter = " pcd.PolicyType=" + PolicyType + " and pcd.POLICYCODE=" + PolicyCode;
    DetailStore = Ext.getCmp('PolicyRenewalCategoryDetList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalCategoryDet&filter=" + Filter;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function ElementTemplate(form, login) {

    if (form.selectedIndex == -1 && !form.isView) {
        var IsIndividual = Ext.getCmp('ElementTemplate-IsIndividual');

        if (IsIndividual) IsIndividual.on('check', function (field, Checked) {
            if (Checked) {
                onBusinessTypeclear('ElementTemplateDtlList');
                ElementTemplateDtlList.disable();
            }

            if (!Checked) {
                onBusinessTypeclear('ElementTemplateDtlList');
                ElementTemplateDtlList.disable();
            }

        }, this);
    }

    if (!form.isView) {

        var IsIndividual = Ext.getCmp('ElementTemplate-IsIndividual');
        var ElementCode = Ext.getCmp('ElementTemplateDtl-ElementCode');

        if (ElementCode) ElementCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (IsIndividual.getValue() == true)
                evt.combo.store.baseParams.filter = " Ele.ISINDIVIDUAL=1";
            else
                evt.combo.store.baseParams.filter = "";
        }, this);
    }
}




//CC
function DriverLock(form, login) {
    var DriverIDCode = Ext.getCmp('DriverLock-DriverIDCode');

    if (!form.isView) {
        Ext.getCmp('DriverLock-StatuCcode').setComboValue(0);
        Ext.getCmp('DriverLock-StatuCcode').disable();
    }

    if (DriverIDCode) DriverIDCode.on('beforequery', function (evt) {
        var DriverIDCode = Ext.getCmp('DriverLock-DriverIDCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " STATUSCODE=0 ";

    }, this);


}



function DriverLockPost(form, login) {
    var PrimKey = Ext.getCmp('DriverLock').selectedIndex;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'DriverLockPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DriverLockPostComplete, this);
}
function DriverLockPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DriverLockPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DRIVERLOCK_editform').close();
    }

}



function DriverRelease(form, login) {
    var DriverIDCode = Ext.getCmp('DriverRelease-DriverIDCode');

    if (!form.isView) {
        Ext.getCmp('DriverRelease-StatuCcode').setComboValue(2);
        Ext.getCmp('DriverRelease-StatuCcode').disable();
    }

    if (DriverIDCode) DriverIDCode.on('beforequery', function (evt) {
        var DriverIDCode = Ext.getCmp('DriverRelease-DriverIDCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "STATUSCODE=2 ";

    }, this);



}

function DriverReleasePost(form, login) {
    var PrimKey = Ext.getCmp('DriverRelease').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'DriverReleasePost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', DriverReleasePostComplete, this);
}
function DriverReleasePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', DriverReleasePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DRIVERRELEASE_editform').close();
    }

}


function VehicleLock(form, login) {

    var VehicleCode = Ext.getCmp('VehicleLock-VehicleCode');

    if (!form.isView) {
        Ext.getCmp('VehicleLock-StatusCode').setComboValue(0);
        Ext.getCmp('VehicleLock-StatusCode').disable();
    }



    if (VehicleCode) VehicleCode.on('beforequery', function (evt) {
        var VehicleCode = Ext.getCmp('VehicleLock-VehicleCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " vm.STATUSCODE=0  ";

    }, this);

}

function VehicleLockPost(form, login) {
    var PrimKey = Ext.getCmp('VehicleLock').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehicleLockPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehicleLockPostComplete, this);
}
function VehicleLockPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', VehicleLockPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLELK_editform').close();
    }

}


function VehicleRelease(form, login) {
    var VehicleCode = Ext.getCmp('VehicleRelease-VehicleCode');


    if (!form.isView) {
        Ext.getCmp('VehicleRelease-StatusCode').setComboValue(2);
        Ext.getCmp('VehicleRelease-StatusCode').disable();
    }



    if (VehicleCode) VehicleCode.on('beforequery', function (evt) {
        var VehicleCode = Ext.getCmp('VehicleRelease-VehicleCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "  vm.STATUSCODE=2  ";

    }, this);

}

function VehicleReleasePost(form, login) {
    var PrimKey = Ext.getCmp('VehicleRelease').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'VehicleReleasePost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', VehicleReleasePostComplete, this);
}
function VehicleReleasePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', VehicleReleasePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLERELEASE_editform').close();
    }

}



function DriverVehicleAssign(form, login) {

    var LandmarkCode = Ext.getCmp('DriverVehicleAssign-LandmarkCode');

    var Place = Ext.getCmp('NGIMembersExclusion-Place');
    if (!form.isView) {
        var StatusCode = Ext.getCmp('DriverVehicleAssign-StatusCode');
        StatusCode.disable();

    }


    if (LandmarkCode) DetailCode.on('beforequery', function (evt) {
        var VersionCod = Ext.getCmp('DriverVehicleAssign-LandmarkCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "DETAILCODE in(select DETAILCODE from IM_VERSION_DETALIS where versioncode=" + VersionCod + ")";
    }, this);

}

function DriverVehicleAssignPost(form, login) {
}

function DriverVehicleAssignPostComplete(conn, response) {
}


// Booking Assign
function AssignMonitorViewBookingHdlr(record) {
    PrimKey = record.get('ID');
    var ViewBuyer = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    ViewBuyer.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

//On duty View
function AssignMonitorViewOnDutyHdlr(record) {
    PrimKey = record.get('ID');
    var ViewBuyer = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    ViewBuyer.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}


function Assigning(form, login) {

}

function AssignBookingEditHdlr(record) {

    PrimKey = record.get('ID');

    var EditProperty = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    EditProperty.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Assign Confirmed', 'BookingAssignedConfirmHndlr');
}

function AssignMonitorEditOnDutyHdlr(record) {

    PrimKey = record.get('ID');

    var EditProperty = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    EditProperty.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Booking Trip Completed,Booking Cancelled', 'BookingTripCompletedHndlr,BookingCancelledHndlr');

}


function AssignMonitorEditBookingHdlr(record) {

    PrimKey = record.get('ID');

    var EditProperty = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    EditProperty.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Booking OnDuty', 'BookingOnDutyHndlr');

}

function BookingMaster(form, login) {

    //var StatusCode = Ext.getCmp('BookingMaster-StatusCode');
    //StatusCode.setComboValue(0);
    //StatusCode.disable();
}

//Booking Assign View
function AssignBookingViewHdlr(record) {
    PrimKey = record.get('ID');
    var ViewBuyer = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = 'forms/HumanResources/HelpLine/BookingMasterWorkAssignConfirm.xml', PKey = PrimKey, WidgetTitle = 'Current Booking Master';
    ViewBuyer.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

// Handlers
function AssignerMonitorHndlr(form, login) {
}

function AsignerIntermediateHndlr(form, login) {
}

function CommonHndlr(form, login) {
}

function CurrenttHndlr(form, login) {
}

function AdvanceRegularHndlr(form, login) {
}

function PackagesOutstationHndlr(form, login) {
}


//Posting For Booking Assgin Confirmed
function BookingAssignedConfirmHndlr(form, login) {
    var PrimKey = Ext.getCmp('BookingMaster').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'BookingMasterAssignConfirmPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BookingMasterAssignConfirmPostComplete, this);
}

function BookingMasterAssignConfirmPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BookingMasterAssignConfirmPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('AssigningBookingDetailList').getStore();
        store.reload();


    }

}

//function BookingAssignedConfirmHndlr(form, login) {
//    var PrimKey = Ext.getCmp('BookingMaster').selectedIndex;
//    showMask();
//    Ext.Ajax.request({
//        url: 'tools/HumanResources/HRPosting.aspx',
//        params: {
//            action: 'BookingMasterAssignPost',
//            PrimKey: PrimKey
//        },
//        method: 'POST',
//        failure: function (result, request) {
//            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//        },
//        timeout: 1200000,
//        scope: this
//    });
//    Ext.Ajax.on('requestcomplete', BookingMasterAssignPostComplete, this);
//}

//function BookingMasterAssignPostComplete(conn, response) {
//    hideMask();
//    Ext.Ajax.un('requestcomplete', BookingMasterAssignPostComplete, this);
//    var responseText = Ext.util.JSON.decode(response.responseText);
//    if (!responseText.success) {
//        Ext.MessageBox.alert(login.modulename, responseText.Msg);
//    } else {

//        Ext.MessageBox.show({
//            title: login.modulename,
//            msg: responseText.Msg,
//            buttons: Ext.MessageBox.OK,
//            icon: Ext.MessageBox.INFO
//        });
//        Ext.getCmp('ID_BOOKINGMASTER_editform').close();
//    }

//}




function BookingTripCompletedHndlr(form, login) {

    var PrimKey = Ext.getCmp('BookingMaster').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'BookingTripCompletedPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BookingTripCompletedPostComplete, this);

}

function BookingTripCompletedPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BookingTripCompletedPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }

}

function BookingOnDutyHndlr(form, login) {


    var PrimKey = Ext.getCmp('BookingMaster').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'BookingOnDutyPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BookingOnDutyPostComplete, this);

}

function BookingOnDutyPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BookingOnDutyPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('AssignMonitorBookingDtlList').getStore();
        store.reload();

        var store1 = Ext.getCmp('AssignMonitorOnDutyDtlList').getStore();
        store1.reload();
    }

}

function BookingCancelledHndlr(form, login) {


    var PrimKey = Ext.getCmp('BookingMaster').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'BookingCancelledPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', BookingCancelledPostComplete, this);

}
function BookingCancelledPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', BookingCancelledPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('AssignMonitorBookingDtlList').getStore();
        store.reload();
    }

}

function Zone1Hndlr(form, login) {
}

function Zone2Hndlr(form, login) {
}

function Zone3Hndlr(form, login) {
}

function Zone4Hndlr(form, login) {
}

function CreateBookingButtonHdlr(form, login) {


}


function CreateBookingButtonHdlr(record) {

    //PrimKey = record.get('ID');

    var EditContract = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.HelpLine.Booking.BookingMaster', Url = '/forms/HumanResources/CallCenter/Booking/BookingMaster.xml', PKey = -1, WidgetTitle = 'Assign Monitor';
    EditContract.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}



function CloseButtonHdlr(Button, Option) {

    Ext.getCmp('ID_CCASSIGNING').close();
}

function CloseasignmonitorButtonHdlr(Button, Option) {

    Ext.getCmp('ID_ASSIGNMONITOR').close();
}
function VehicleChangeButtonHdlr(Button, Option) {

    Ext.getCmp('ID_VEHICLANCHANG').close();
}




function InsuranceCompany(form, login) {
    var InsuranceTypeCode = Ext.getCmp('InsuranceCompany-InsuranceTypeCode');
    InsuranceTypeCode.setComboValue(2);
}

function DriverMaster(form, login) {

    if (!form.isView) {
        Ext.getCmp('DriverMaster-StatuCcode').setComboValue(0);
        Ext.getCmp('DriverMaster-StatuCcode').disable();
    }
    if (!form.isView) {
        var CheckAddress = Ext.getCmp('DriverMaster-CheckAddress');



        CheckAddress.on('check', onCheckAddress, this);



    }
}

function onCheckAddress(field, checked) {

    var Address = Ext.getCmp('DriverMaster-Address');
    var PinCode = Ext.getCmp('DriverMaster-PinCode');

    var PermenantAddress = Ext.getCmp('DriverMaster-PermenantAddress');
    var PermenantPinCode = Ext.getCmp('DriverMaster-PermenantPinCode');

    if (checked) {

        PermenantAddress.setValue(Address.getValue());
        PermenantPinCode.setValue(PinCode.getValue());
    }

    else {
        PermenantAddress.setValue(null);
        PermenantPinCode.setValue(null);
    }

}


function DriverVehicleAssign(form, login) {
    if (!form.isView) {
        Ext.getCmp('DriverVehicleAssign-StatusCode').setComboValue(0);
        Ext.getCmp('DriverVehicleAssign-StatusCode').disable();
    }

}


function HLDrivervehicleAssignPost(form, login) {
    var PrimKey = Ext.getCmp('DriverVehicleAssign').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HLDrivervehicleAssignPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HLDrivervehicleAssignPostComplete, this);
}
function HLDrivervehicleAssignPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HLDrivervehicleAssignPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DRIVVECHICASSIGN_editform').close();
    }

}

function VehicleLandmark(form, login) {
}

function HLVehileLandMarkChangePost(form, login) {
    var VehicleCode = Ext.getCmp('VehicleLandmark-VehicleCode').getValue();
    var LandmarkCode = Ext.getCmp('VehicleLandmark-LandmarkCode').getValue();

    if (VehicleCode == '' || VehicleCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please Enter The Specified Vehicle ID To Change The Landmark!');
        return;
    }

    if (LandmarkCode == '' || LandmarkCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please Enter The  Landmark !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'HLVehileLandMarkChangePost',
            VehicleCode: VehicleCode,
            LandmarkCode: LandmarkCode,

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HLVehileLandMarkChangePostComplete, this);
}

function HLVehileLandMarkChangePostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HLVehileLandMarkChangePostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_VEHICLANCHANG_editform').close();
    }

}

var IsSelectFullRow = 0;
function CardPrintSearch(form, login) {


    var PolicyIDCode = Ext.getCmp('CardPrintSearch-PolicyIDCode');
    var PolicyTypeCode = Ext.getCmp('CardPrintSearch-PolicyTypeCode');
    var PolicyName = Ext.getCmp('CardPrintSearch-PolicyName');
    var StatusCode = Ext.getCmp('CardPrintSearch-StatusCode');
    var MemberIDCode = Ext.getCmp('CardPrintSearch-MemberIDCode');
    var Member_Name = Ext.getCmp('CardPrintSearch-Member_Name');

    Ext.getCmp('CardPrintSearch-PolicyTypeCode').setComboValue(1);
    Ext.getCmp('CardPrintSearch-StatusCode').setComboValue(0);
    if (PolicyTypeCode) PolicyTypeCode.on('select', function (combo, record, index) {
        PolicyIDCode.clearValue();
        PolicyName.setValue(null);
        MemberIDCode.clearValue();
        Member_Name.setValue(null);
    }, this);

    if (PolicyIDCode) PolicyIDCode.on('select', function (combo, record, index) {
        MemberIDCode.clearValue();
        Member_Name.setValue(null);
    }, this);

    if (PolicyTypeCode) PolicyTypeCode.on('clear', function (evt) {
        PolicyIDCode.clearValue();
        PolicyName.setValue(null);
        MemberIDCode.clearValue();
        Member_Name.setValue(null);
    }, this);

    if (PolicyIDCode) PolicyIDCode.on('clear', function (evt) {
        MemberIDCode.clearValue();
        Member_Name.setValue(null);
    }, this);


    form.buttons[8].setVisible(false);// Hide Print Preview Template Button

    var Policy = Ext.getCmp('CardPrintSearch-PolicyIDCode');
    if (Policy) Policy.on('beforequery', function (evt) {

        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "pol.TypeCode=" + PolicyTypeCode.getValue();

    }, this);


    if (MemberIDCode) MemberIDCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        //evt.combo.store.baseParams.filter = "mem.POLICYTYPE=" + PolicyTypeCode.getValue() + "and MEM.POLICYCODE=" + Policy.getValue();
        evt.combo.store.baseParams.filter = "MEM.POLICYCODE=" + Policy.getValue();
    }, this);

    var PrintedBy = Ext.getCmp('CardPrintSearch-PrintedBy').setValue(login.UserName);
    var CollectedBy = Ext.getCmp('CardPrintSearch-CollectedBy').setValue(login.UserName);
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn').disable();
    var DetailGrid = Ext.getCmp('CardPrintSearchDetailList');
    var CardPrintSearchDetailList = Ext.getCmp('CardPrintSearchDetailList');
    CardPrintSearchDetailList.getColumnModel().getColumnById('Print').editable = false;
    CardPrintSearchDetailList.getColumnModel().getColumnById('Reprint').editable = false;
    CardPrintSearchDetailList.getColumnModel().getColumnById('Deleiver').editable = false;
    CardPrintSearchDetailList.getColumnModel().getColumnById('Returned').editable = false;
    CardPrintSearchDetailList.getColumnModel().getColumnById('IsActive').editable = false;

    CardPrintSearchDetailList.on('contextmenu', function (e, element, options) {

        if (IsSelectFullRow == 0) {
            for (var cnt = 0; cnt < CardPrintSearchDetailList.store.getCount() ; cnt++) {
                var Record = CardPrintSearchDetailList.store.getAt(cnt)
                Record.set('Selectt', true);
                IsSelectFullRow = 1;
            }
        }
        else {
            for (var cnt = 0; cnt < CardPrintSearchDetailList.store.getCount() ; cnt++) {
                var Record = CardPrintSearchDetailList.store.getAt(cnt)
                Record.set('Selectt', false);
                IsSelectFullRow = 0;
            }
        }

    }, this);

    if (Ext.getCmp('CardPrintSearchDetailList'))
        CardPrintSearchDetailListConfig = Ext.getCmp('CardPrintSearchDetailList').getColumnModel().config;

    for (var i = 0; i < CardPrintSearchDetailListConfig.length; i++)
        if (!CardPrintSearchDetailListConfig[i].checkbox) CardPrintSearchDetailListConfig[i].renderer = onCardPrintSearchDetailListRender;

    var FilterQry = "cp.CordPrintCode=0";

    var DetailStore = Ext.getCmp('CardPrintSearchDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.CardPrintSearchDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 5000
            }
        });
    }
    /*
        if (login.userglobalrights == '113') {
            Ext.getCmp('CardRePrintHndlr').enable();
        }
        else {
            Ext.getCmp('CardRePrintHndlr').disable();
        }*/

    if (Ext.getCmp('CardPrintSearchHistoryList')) Ext.getCmp('CardPrintSearchHistoryList').getStore().on('load', function (store, record, options) {
        if (KCardPrintDetailLoad == true) {
            SearchCardPrinthandler();
        }
        if (KCardRePrintDetailLoad == true) {
            SearchCardReprinthandler();
        }
    }, this);

}

function onCardPrintSearchDetailListRender(value, metaData, record, rowIndex, colIndex, store) {

    if (record.get('Print') == true && record.get('Reprint') == false && record.get('Deleiver') == false && record.get('Returned') == false) {
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    }
    else if (record.get('Print') == true && record.get('Reprint') == true && record.get('Deleiver') == false && record.get('Returned') == false) {
        return '<span style="font-weight:bold; color:black;">' + value + '</span>';
    }
    else if (record.get('Print') == true && record.get('Reprint') == false && record.get('Deleiver') == true && record.get('Returned') == false) {
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('Print') == true && record.get('Reprint') == true && record.get('Deleiver') == true && record.get('Returned') == false) {
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('Returned') == true) {
        return '<span style="font-weight:bold; color:red;">' + value + '</span>';
    }
    else {
        return '<span style="font-weight:bold; color:pink;">' + value + '</span>';
    }
}

function CardPrintSearchHandler(form, login) {

    var FilterQry = '';

    var PolicyIDCode = Ext.getCmp('CardPrintSearch-PolicyIDCode');
    var PolicyTypeCode = Ext.getCmp('CardPrintSearch-PolicyTypeCode');
    var PolicyName = Ext.getCmp('CardPrintSearch-PolicyName');
    var MemberIDCode = Ext.getCmp('CardPrintSearch-MemberIDCode');
    var Member_Name = Ext.getCmp('CardPrintSearch-Member_Name');
    var CollectedBy = Ext.getCmp('CardPrintSearch-CollectedBy');
    var CollectedOn = Ext.getCmp('CardPrintSearch-CollectedOn');
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn');
    var CategoryCode = Ext.getCmp('CardPrintSearch-CategoryCode');
    var StatusCode = Ext.getCmp('CardPrintSearch-StatusCode');
    var PrintforCode = Ext.getCmp('CardPrintSearch-PrintforCode');



    if (PolicyIDCode.getValue().toString() != '' && PolicyIDCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " cp.POLICYCODE=" + PolicyIDCode.getValue();
        else
            FilterQry += " and cp.POLICYCODE=" + PolicyIDCode.getValue();
    }

    if (StatusCode.getValue().toString() != '' && StatusCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += "  GEN.CONSTANTVALUE=" + StatusCode.getValue();
        else
            FilterQry += " and  GEN.CONSTANTVALUE=" + StatusCode.getValue();
    }

    if (PolicyTypeCode.getValue() == 1) {
        if (PrintforCode.getValue() == 0) {
            if (FilterQry == '')
                FilterQry += "  im.GROUP_CODE is not null";
            else
                FilterQry += " and  im.GROUP_CODE is not null";
        }

        if (PrintforCode.getValue() == 1) {
            if (FilterQry == '')
                FilterQry += "   im.PARENTGROUPCODE is not null";
            else
                FilterQry += " and  im.PARENTGROUPCODE is not null";
        }

        if (PrintforCode.getValue() == 2) {
            if (FilterQry == '')
                FilterQry += "   1=1";
            else
                FilterQry += " and   1=1";
        }
    }

    if (PolicyTypeCode.getValue().toString() != '' && PolicyTypeCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " cp.POLICYTYPE=" + PolicyTypeCode.getValue();
        else
            FilterQry += " and cp.POLICYTYPE=" + PolicyTypeCode.getValue();
    }

    if (MemberIDCode.getValue().toString() != '' && MemberIDCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " im.MEMBER_CODE=" + MemberIDCode.getValue();
        else
            FilterQry += " and im.MEMBER_CODE=" + MemberIDCode.getValue();
    }

    if (CategoryCode.getValue().toString() != '' && CategoryCode.getValue().toString() != null) {
        if (FilterQry == '')
            FilterQry += " CP.CATEGORYCODE=" + CategoryCode.getValue();
        else
            FilterQry += " and CP.CATEGORYCODE=" + CategoryCode.getValue();
    }



    DetailStore = Ext.getCmp('CardPrintSearchDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.CardPrintSearchDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

}


function CardPrintClearHandler(form, login) {

    var PolicyTypeCode = Ext.getCmp('CardPrintSearch-PolicyTypeCode').clearValue();
    var PolicyIDCode = Ext.getCmp('CardPrintSearch-PolicyIDCode').clearValue();
    var PolicyName = Ext.getCmp('CardPrintSearch-PolicyName').setValue(null);
    var MemberIDCode = Ext.getCmp('CardPrintSearch-MemberIDCode').clearValue();
    var Member_Name = Ext.getCmp('CardPrintSearch-Member_Name').setValue(null);
    var CollectedBy = Ext.getCmp('CardPrintSearch-CollectedBy').setValue(null);
    var CollectedOn = Ext.getCmp('CardPrintSearch-CollectedOn').setValue(null);
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn').setValue(null);
    var CategoryCode = Ext.getCmp('CardPrintSearch-CategoryCode').clearValue();
    var StatusCode = Ext.getCmp('CardPrintSearch-StatusCode').clearValue();
    var PrintforCode = Ext.getCmp('CardPrintSearch-PrintforCode').clearValue();


    var FilterQry = '';
    DetailStore = Ext.getCmp('CardPrintSearchDetailList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.CardPrintSearchDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function CardPrintSelectAllHdlr(form, login) {

    //  var Selectt = Ext.getCmp('CardPrintSearch-Selectt');
    // Selectt.setValue(true);

    var CardPrintSearchDetailList = Ext.getCmp('CardPrintSearchDetailList');
    for (var pcnt = 0; pcnt < CardPrintSearchDetailList.store.getCount() ; pcnt++) {

        var PopupRecord = CardPrintSearchDetailList.store.getAt(pcnt);
        PopupRecord.set('Selectt', true);

    }


}

//var ACardPrintCodes = [];
function CardPrintHndlr(form, login) {

    var CardPrintSearchDetailPrintGrid = Ext.getCmp('CardPrintSearchDetailList');
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn').getValue();
    var PrintedBy = Ext.getCmp('CardPrintSearch-PrintedBy').getValue();
    var PrintGroupType = Ext.getCmp('CardPrintSearch-PrintforCode').getValue();
    var IsDuplicateCard = Ext.getCmp('CardPrintSearch-IsDuplicateCard').getValue();

    if (PrintGroupType == null || PrintGroupType == '') {
        PrintGroupType = 0;
    }

    var CardPrintCode = '';
    var CardPrintSearchDetailPrintRecord = [];

    var count = 0;
    var Printcount = 0, statusCnt = 0;
    for (cnt = 0; cnt < CardPrintSearchDetailPrintGrid.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetailPrintGrid.store.getAt(cnt);
        if (record.get('Selectt') == true) {
            if (!record.get('Print')) {
                Printcount++;
            }
            CardPrintCode = CardPrintCode + "," + CardPrintSearchDetailPrintGrid.store.getAt(cnt).get('ID');
            CardPrintSearchDetailPrintRecord.push(Ext.encode(CardPrintSearchDetailPrintGrid.store.getAt(cnt).data));
            // ACardPrintCodes= CardPrintSearchDetailPrintGrid.store.getAt(cnt).ID.join(',');
            count++;
        }
        if (count > 0) {
            if (Printcount != count) {
                Ext.MessageBox.alert(login.modulename, "Already Printed Record cannot be Printed agian.! Cannot Printed Refernce No  " + record.get('Cpno'));
                return true;
            }
        }
        if (record.get('Selectt') && record.get('StatusCode') == 2) {//BlockMember
            statusCnt++;
        }
    }

    if (statusCnt > 0) {
        Ext.MessageBox.alert(login.modulename, 'This Member Already Blocked!');
        return;
    }

    var CardPrintSearchDetailPrintRecordRow = '[' + CardPrintSearchDetailPrintRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do Print !");
        return true;
    }

    KCardPrintDetailLoad = true;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberCardPrint',//MemberCardPrint
            CardPrintSearchDetailPrintRecordRow: CardPrintSearchDetailPrintRecordRow,
            PrintedOn: PrintedOn,
            PrintedBy: PrintedBy,
            CardPrintCode: CardPrintCode,
            PrintGroupType: PrintGroupType,
            IsDuplicateCard: (IsDuplicateCard == true ? 1 : 0)


        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardPrintHndlrComplete, this);

}

function CardPrintHndlrComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CardPrintHndlrComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);


    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Msg,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});
        var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
        store.reload();


    }
    //var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    // store.reload();

    var CardPrintSearchDetailList = Ext.getCmp('CardPrintSearchDetailList');

    for (cnt = 0; cnt < CardPrintSearchDetailList.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetailList.store.getAt(cnt);
        record.set('Selectt', false);
    }

}

function SearchCardPrinthandler() {
    var WidgetObj = Ext.getCmp('ID_CARDPRINTSEARCH').scope; //.immediatePrintClick(PKEy);
    var ReportType = Ext.getCmp('CardPrintSearch-ReportTypeCode').getValue();
    if (ReportType == '' || ReportType == null) {
        WidgetObj.RptType = 1;
    }
    else {
        WidgetObj.RptType = ReportType;
    }
    WidgetObj.immediatePrintClick(1);
    KCardPrintDetailLoad = false;
}


function CardPrintDeActivateHandler(form, login) {

    var CardPrintSearchDetDeActivateGrid = Ext.getCmp('CardPrintSearchDetailList');

    var CardPrintSearchDetDeActivateRecord = [];

    var count = 0;
    var Decount = 0;
    for (cnt = 0; cnt < CardPrintSearchDetDeActivateGrid.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetDeActivateGrid.store.getAt(cnt);
        if (record.get('Selectt') == true) {

            CardPrintSearchDetDeActivateRecord.push(Ext.encode(CardPrintSearchDetDeActivateGrid.store.getAt(cnt).data));
            count++;
            if (record.get('IsActive') == false) {
                Decount++;
            }
        }

    }


    var CardPrintSearchDetDeActivateRecordRow = '[' + CardPrintSearchDetDeActivateRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select Member To DeActivate !");
        return true;
    }
    if (Decount > 0) {

        Ext.MessageBox.alert(login.modulename, "Cannot DeActivate.Already DeActivated Member!");
        return true;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CardPrintDeActivate',
            CardPrintSearchDetDeActivateRecordRow: CardPrintSearchDetDeActivateRecordRow

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardPrintDeActivateComplete, this);

}

function CardPrintDeActivateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', CardPrintDeActivateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
    var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    store.reload();
}

function CardRePrintHndlr(form, login) {
    var CardPrintSearchDetailRePrintGrid = Ext.getCmp('CardPrintSearchDetailList');
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn').getValue();
    var PrintedBy = Ext.getCmp('CardPrintSearch-PrintedBy').getValue();
    var PrintGroupType = Ext.getCmp('CardPrintSearch-PrintforCode').getValue();
    var IsDuplicateCard = Ext.getCmp('CardPrintSearch-IsDuplicateCard').getValue();

    if (PrintGroupType == null || PrintGroupType == '') {
        PrintGroupType = 0;
    }
    var CardRePrintCode = 0;
    var CardPrintSearchDetailRePrintRecord = [];

    var count = 0;
    var rePrint = 0;
    var rePrint1 = 0;
    for (cnt = 0; cnt < CardPrintSearchDetailRePrintGrid.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetailRePrintGrid.store.getAt(cnt);
        if (record.get('Selectt') == true) {
            if (record.get('Print')) {
                rePrint++;
                if (record.get('Reprint')) {
                    rePrint1++;
                }
            }
            CardRePrintCode = CardRePrintCode + "," + CardPrintSearchDetailRePrintGrid.store.getAt(cnt).get('ID');
            CardPrintSearchDetailRePrintRecord.push(Ext.encode(CardPrintSearchDetailRePrintGrid.store.getAt(cnt).data));
            count++;
            if (count > 0) {
                if (rePrint != count) {
                    Ext.MessageBox.alert(login.modulename, "Only Printed Record can be RePrinted! Cannot  Reprint Reference No " + record.get('Cpno'));
                    return true;
                }/*
                else if (rePrint1 > 0) {
                  Ext.MessageBox.alert(login.modulename, "Already RePrinted Record cannot be RePrinted Again! Cannot  Reprint Reference No " + record.get('Cpno'));
                 return true;
                } */
            }
        }
    }



    var CardPrintSearchDetailRePrintRecordRow = '[' + CardPrintSearchDetailRePrintRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do RePrint !");
        return true;
    }

    var CardPrintSearchHistoryList = Ext.getCmp('CardPrintSearchHistoryList');

    var ReprintCount = 0;


    for (var scnt = 0; scnt < CardPrintSearchHistoryList.store.getCount() ; scnt++) {
        var record = CardPrintSearchHistoryList.store.getAt(scnt);
        if (record.get('CardtypeCode') == 1)//1 re Printed 
        {
            ReprintCount++;
        }
    }


    if (ReprintCount > 0 && CardRePrintMaxCount == ReprintCount) {

        Ext.MessageBox.alert(login.modulename, "Cannot Reprint.Maximum Allowed Reprint " + CardRePrintMaxCount + "!");
        return true;
    }

    KCardRePrintDetailLoad = true;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberCardRePrint',//MemberCardRePrint,MemberCardRePrintNew
            CardPrintSearchDetailRePrintRecordRow: CardPrintSearchDetailRePrintRecordRow,
            PrintedBy: PrintedBy,
            PrintedOn: PrintedOn,
            CardRePrintCode: CardRePrintCode,
            PrintGroupType: (PrintGroupType == null ? 0 : PrintGroupType),
            IsDuplicateCard: (IsDuplicateCard == true ? 1 : 0)

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardRePrintHndlrComplete, this);

}

function CardRePrintHndlrComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CardRePrintHndlrComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Msg,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        //var WidgetObj = Ext.getCmp('ID_CARDPRINTSEARCH').scope; //.immediatePrintClick(PKEy);
        //Ext.MessageBox.confirm(login.modulename, GlobalTerminologies.LBLPRINTIMMEDIATE, function (button) {
        //    if (button == 'yes') {
        //        WidgetObj.immediatePrintClick(1);
        //    }
        //}, this);

        var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
        store.reload();
    }
    // var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    //  store.reload();
}


function SearchCardReprinthandler() {

    var WidgetObj = Ext.getCmp('ID_CARDPRINTSEARCH').scope; //.immediatePrintClick(PKEy);

    var ReportType = Ext.getCmp('CardPrintSearch-ReportTypeCode').getValue();

    if (ReportType == '' || ReportType == null) {
        WidgetObj.RptType = 1;
    }
    else {
        WidgetObj.RptType = ReportType;
    }

    WidgetObj.immediatePrintClick(1);

    KCardRePrintDetailLoad = false;

}

function CardPrintDeliverHndlr(form, login) {
    var CardPrintSearchDetailDeliverGrid = Ext.getCmp('CardPrintSearchDetailList');
    var CollectedBy = Ext.getCmp('CardPrintSearch-CollectedBy').getValue();
    var CollectedOn = Ext.getCmp('CardPrintSearch-CollectedOn').getValue();
    var PrintedOn = Ext.getCmp('CardPrintSearch-PrintedOn').getValue();
    var PrintedBy = Ext.getCmp('CardPrintSearch-PrintedBy').getValue();
    var CardPrintSearchDetailDeliverRecord = [];

    if (PrintedOn > CollectedOn) {
        Ext.MessageBox.alert(login.modulename, 'Collected On should Greater then Printed On!');
        return;
    }

    var count = 0;
    var Delivered = 0;
    var Delivered1 = 0;

    for (cnt = 0; cnt < CardPrintSearchDetailDeliverGrid.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetailDeliverGrid.store.getAt(cnt);
        if (record.get('Selectt') == true) {
            if (record.get('Print')) {
                Delivered++;
                if (record.get('Deleiver')) {
                    Delivered1++;
                }

            }
            CardPrintSearchDetailDeliverRecord.push(Ext.encode(CardPrintSearchDetailDeliverGrid.store.getAt(cnt).data));
            count++;
            if (count > 0) {
                if (Delivered != count) {

                    Ext.MessageBox.alert(login.modulename, "Only Printed or Reprinted Record can be Delivered ! Cannnot Delivered the Reference No " + record.get('Cpno'));
                    return true;
                }
                if (Delivered1 > 0) {

                    Ext.MessageBox.alert(login.modulename, "Already Delivered Record cannot be Delivered again! Cannnot Delivered the Reference No " + record.get('Cpno'));
                    return true;
                }
            }
        }
    }



    var CardPrintSearchDetailDeliverRecordRow = '[' + CardPrintSearchDetailDeliverRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do Deliver !");
        return true;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberCardDeliverPrint',
            CardPrintSearchDetailDeliverRecordRow: CardPrintSearchDetailDeliverRecordRow,
            CollectedBy: CollectedBy,
            CollectedOn: CollectedOn,
            PrintedOn: PrintedOn,
            PrintedBy: PrintedBy

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardPrintDeliverComplete, this);

}

function CardPrintDeliverComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CardPrintDeliverComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
    var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    store.reload();
}


function CardPrintCancelledHndlr(form, login) {
    var CardPrintSearchDetailCancelledGrid = Ext.getCmp('CardPrintSearchDetailList');
    var CardPrintSearchDetailCancelledRecord = [];

    var count = 0
    for (cnt = 0; cnt < CardPrintSearchDetailCancelledGrid.store.getCount() ; cnt++)
        if (CardPrintSearchDetailCancelledGrid.store.getAt(cnt).get('Selectt') == true) {
            CardPrintSearchDetailCancelledRecord.push(Ext.encode(CardPrintSearchDetailCancelledGrid.store.getAt(cnt).data));

            count++;
        }


    var CardPrintSearchDetailCancelledRecordRow = '[' + CardPrintSearchDetailCancelledRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do Cancell !");
        return true;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberCardCancelledPrint',
            CardPrintSearchDetailCancelledRecordRow: CardPrintSearchDetailCancelledRecordRow,

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardPrintCancelledComplete, this);

}


function CardPrintCancelledComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CardPrintCancelledComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
    var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    store.reload();
}

function CardPrintReturnHndlr(form, login) {
    var CardPrintSearchDetailReturnGrid = Ext.getCmp('CardPrintSearchDetailList');
    var CardPrintSearchDetailReturnRecord = [];

    var count = 0;
    var returned = 0;
    var returned1 = 0;
    for (cnt = 0; cnt < CardPrintSearchDetailReturnGrid.store.getCount() ; cnt++) {
        var record = CardPrintSearchDetailReturnGrid.store.getAt(cnt);
        if (record.get('Selectt') == true) {
            if (record.get('Deleiver')) {
                returned++;
                if (record.get('Returned')) {
                    returned1++;
                }
            }

            CardPrintSearchDetailReturnRecord.push(Ext.encode(CardPrintSearchDetailReturnGrid.store.getAt(cnt).data));
            count++;
            if (count > 0) {
                if (returned != count) {
                    Ext.MessageBox.alert(login.modulename, "Only Delivered Record can be Returned! Cannot Returned Reference No " + record.get('Cpno'));
                    return true;
                }
                if (returned > 0) {
                    Ext.MessageBox.alert(login.modulename, "Already Returned Record cannot be Returned again! Cannot Returned Reference No " + record.get('Cpno'));
                    return true;
                }
            }
        }
    }


    var CardPrintSearchDetailReturnRecordRow = '[' + CardPrintSearchDetailReturnRecord.join(',') + ']';

    if (count == 0) {

        Ext.MessageBox.alert(login.modulename, "Please Select One Record To do Return !");
        return true;
    }


    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberCardReturnPrint',
            CardPrintSearchDetailReturnRecordRow: CardPrintSearchDetailReturnRecordRow,

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CardPrintReturnComplete, this);

}



function CardPrintReturnComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CardPrintReturnComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
    var store = Ext.getCmp('CardPrintSearchDetailList').getStore();
    store.reload();
}

function CardPrintCloseHndlr(form, login) {

    Ext.getCmp('ID_CARDPRINTSEARCH').close();
}


function LoadWorkingHoursHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'AssignmentSetWorkingHours'

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadWorkingHoursHandlerComplete, this);

}

function LoadWorkingHoursHandlerComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', LoadWorkingHoursHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var grdFunctionality = Ext.getCmp('PYAssignmenWorkDtlList');
    grdFunctionality.store.pruneModifiedRecords = true;
    grdFunctionality.store.added = [];
    grdFunctionality.store.modified = [];
    grdFunctionality.store.removeAll();
    grdFunctionality.store.pruneModifiedRecords = false;
    grdFunctionality.store.totalLength = 0;
    grdFunctionality.pageBar.updateInfo();

    var PrimKey = Ext.getCmp('PYAssignmentSet').selectedIndex;

    var PYAssignmenWorkDtlList = Ext.getCmp('PYAssignmenWorkDtlList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Element Detalis
        var Record = responseText.datum[cnt];
        PYAssignmenWorkDtlList.storeId += 1;
        var newRecord = new PYAssignmenWorkDtlList.recordType({
            ID: PYAssignmenWorkDtlList.storeId,
            WorkingHoursSerialNo: PYAssignmenWorkDtlList.storeId,
            Assignment_Set_Code: (PrimKey == -1 ? 1 : PrimKey),
            WeekDay_Code: Record.WeekDay_Code,
            WeekDay_Name: Record.WeekDay_Name,
            DayTypeCode: Record.DayTypeCode,
            DayTypeName: Record.DayTypeName,
            From: Record.From,
            To: Record.To,
            BreakFrom: Record.BreakFrom,
            BreakTo: Record.BreakTo,
            TotalWorkingHours: Record.TotalWorkingHours,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PYAssignmenWorkDtlList.stopEditing();
        PYAssignmenWorkDtlList.store.add(newRecord);
        PYAssignmenWorkDtlList.store.totalLength = PYAssignmenWorkDtlList.store.getTotalCount() + 1;
        PYAssignmenWorkDtlList.pageBar.updateInfo();

    }


}
function PYTimeSheet(form, login) {

}

function PYTimeSheetDateselect(datefield, date) {

    var GridFunction = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
    GridFunction.store.pruneModifiedRecords = true;
    GridFunction.store.added = [];
    GridFunction.store.modified = [];
    GridFunction.store.removeAll();
    GridFunction.store.pruneModifiedRecords = false;
    GridFunction.store.totalLength = 0;
    GridFunction.pageBar.updateInfo();

    var FilterQry = '';

    var Conversiondate = Ext.getCmp('PYTimeSheet-Conversiondate');

    if (Conversiondate.getValue() != '' && Conversiondate.getValue() != null && Conversiondate.getValue() != '' && Conversiondate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " hrattd.ATT_DATE between TO_DATE('" + Conversiondate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + Conversiondate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and hrattd.ATT_DATE between TO_DATE('" + Conversiondate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + Conversiondate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }

    DetailStore = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();



    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYAttendanceTimeEntriesDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PYTimeSheetselect(combo, record, index) {

    var GridFunction = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
    GridFunction.store.pruneModifiedRecords = true;
    GridFunction.store.added = [];
    GridFunction.store.modified = [];
    GridFunction.store.removeAll();
    GridFunction.store.pruneModifiedRecords = false;
    GridFunction.store.totalLength = 0;
    GridFunction.pageBar.updateInfo();

    var FilterQry = '';
    var Period_Code = Ext.getCmp('PYTimeSheet-Period_Code');
    //var EmployeeCode = Ext.getCmp('PYTimeSheet-EmployeeCode');
    //  var Assign_Code = Ext.getCmp('PYTimeSheet-Assign_Code');




    if (Period_Code.editValue != '' && Period_Code.editValue != null) {
        if (FilterQry == '')
            FilterQry += " hrattd.PERIOD_CODE = " + Period_Code.editValue;
        else
            FilterQry += " and hrattd.PERIOD_CODE = " + Period_Code.editValue;
    }

    //if (EmployeeCode.editValue != '' && EmployeeCode.editValue != null) {
    //    if (FilterQry == '')
    //        FilterQry += " hrattd.PERSON_CODE = " + EmployeeCode.editValue;
    //    else
    //        FilterQry += " and hrattd.PERSON_CODE = " + EmployeeCode.editValue;
    //}


    //if (Assign_Code.getValue() != '' && Assign_Code.getValue() != null) {
    //    if (FilterQry == '')
    //        FilterQry += "  TT.Hdr_Code  =" + Assign_Code.getValue();
    //    else
    //        FilterQry += " and  TT.Hdr_Code  = " + Assign_Code.getValue();
    //}


    DetailStore = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();



    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYAttendanceTimeEntriesDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PYTimeSheetEmployeeselect(combo, record, index) {

    var GridFunction = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
    GridFunction.store.pruneModifiedRecords = true;
    GridFunction.store.added = [];
    GridFunction.store.modified = [];
    GridFunction.store.removeAll();
    GridFunction.store.pruneModifiedRecords = false;
    GridFunction.store.totalLength = 0;
    GridFunction.pageBar.updateInfo();

    var FilterQry = '';
    var EmployeeCode = Ext.getCmp('PYTimeSheet-EmployeeCode');

    if (EmployeeCode.editValue != '' && EmployeeCode.editValue != null) {
        if (FilterQry == '')
            FilterQry += " hrattd.EMPLOYEE= " + EmployeeCode.editValue;
        else
            FilterQry += " and hrattd.EMPLOYEE = " + EmployeeCode.editValue;
    }


    //if (Assign_Code.getValue() != '' && Assign_Code.getValue() != null) {
    //    if (FilterQry == '')
    //        FilterQry += "  TT.Hdr_Code  =" + Assign_Code.getValue();
    //    else
    //        FilterQry += " and  TT.Hdr_Code  = " + Assign_Code.getValue();
    //}


    DetailStore = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();



    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYAttendanceTimeEntriesDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PYTimeSheetAssignselect(form, login) {
    var GridFunction = Ext.getCmp('PYAttendanceTimeEntriesDetailList');
    GridFunction.store.pruneModifiedRecords = true;
    GridFunction.store.added = [];
    GridFunction.store.modified = [];
    GridFunction.store.removeAll();
    GridFunction.store.pruneModifiedRecords = false;
    GridFunction.store.totalLength = 0;
    GridFunction.pageBar.updateInfo();

    var FilterQry = '';
    var FilterQry = '';
    var Assign_Code = Ext.getCmp('PYTimeSheet-Assign_Code');


    if (Assign_Code.getValue() != '' && Assign_Code.getValue() != null) {

        if (FilterQry == '')
            FilterQry += " hrattd.EMPLOYEE in(select PERSON_CODE from PY_AssignmentS_set_DETAILS where ASSIGNMENT_SET_CODE   = " + Assign_Code.getValue() + ")";
        else
            FilterQry += " hrattd.EMPLOYEE in(select PERSON_CODE from PY_AssignmentS_set_DETAILS where ASSIGNMENT_SET_CODE  = " + Assign_Code.getValue() + ")";
    }


    DetailStore = Ext.getCmp('PYAttendanceTimeEntriesDetailList').getStore();



    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.PY.PYAttendanceTimeEntriesDetail&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function PolicyFinancePostingUnPost(form, login) {
    var Primkey = Ext.getCmp('PolicyFinancePosting').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('PolicyFinancePosting-AuthorizedStatusCode');
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont unpost, Approved records only allow to UnPost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Unpost the Record', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'PolicyFinancePostingUnPost',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PolicyFinancePostingUnPostComplete, this);
        }
    }, this);

}
function PolicyFinancePostingUnPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyFinancePostingUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_POLICYFINANCEPOSTING_editform').close();

    }
}
var PFPPrimKey = '';
function PolicyFinancePosting(form, login) {
    if (!form.isview) {
		
		 var PolicyFinanceInstallmentList = Ext.getCmp('PolicyFinanceInstallmentList');
        PolicyFinanceInstallmentList.on('addrecord', function (evt) {
            evt.record.set('InstallmentNo', PolicyFinanceInstallmentList.store.totalLength);
        }, this);

        
        PolicyFinanceInstallmentList.getStore().on('update', function (store, record, options) {

            var NetTotal = Ext.getCmp('PolicyFinancePosting-Total').getValue();
            if (record.get('Calc_MethodCode') == 1) {
                PolicyFinanceInstallmentList.getColumnModel().getColumnById('Amount').editable = false;
                PolicyFinanceInstallmentList.getColumnModel().getColumnById('Percentage').editable = true;
                var InstallmentAmount = ((NetTotal / 100) * (record.get('Percentage'))).toFixed(2);
                record.set('Amount', InstallmentAmount);
            }
            else {
                PolicyFinanceInstallmentList.getColumnModel().getColumnById('Percentage').editable = false;
                PolicyFinanceInstallmentList.getColumnModel().getColumnById('Amount').editable = true;
                var InstallmentPercentage = ((record.get('Amount') / NetTotal) * 100).toFixed(2);
                record.set('Percentage', InstallmentPercentage);
            }
           
        }, this);
        PolicyFinanceInstallmentList.on('afteredit', function (evt) {
            var NetTotal = Ext.getCmp('PolicyFinancePosting-Total').getValue();
            if (record.get('Calc_MethodCode') == 1) {
                var InstallmentAmount = ((NetTotal / 100) * (record.get('Percentage'))).toFixed(2);
                record.set('Amount', InstallmentAmount);
            }
            else {
                var InstallmentPercentage = ((record.get('Amount') / NetTotal) * 100).toFixed(2);
                record.set('Percentage', InstallmentPercentage);
            }

        }, this);
 
        var PrimaryKey = Ext.getCmp('PolicyFinancePosting').selectedIndex;
        PFPPrimKey = PrimaryKey;
        var PolicyTypeCode = Ext.getCmp('PolicyFinancePosting-PolicyTypeCode');
        var PolicyCode = Ext.getCmp('PolicyFinancePosting-PolicyIdCode');
        var IPPolicyCode = Ext.getCmp('PolicyFinancePosting-IPPolicyIDCode');
        PolicyCode.disable(), IPPolicyCode.disable();
        var TypeCode = Ext.getCmp('PolicyFinancePosting-PolicyTypeCode');
        var BillingTypeCode = Ext.getCmp('PolicyFinancePosting-OldBillingTypeCode');
        if (BillingTypeCode) BillingTypeCode.on('beforequery', function (evt) {
            BillingTypeCode.lastQuery = '1=2';
            if (PolicyTypeCode.editValue == 1)//Policy
            {
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,2';
            }
            if (PolicyTypeCode.editValue == 2) { // individual policy
                BillingTypeCode.lastQuery = '1=2';
                BillingTypeCode.constantFilter = '0,1,3';
            }

        }, this);
        PolicyTypeCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('PolicyFinancePostingCommissionDtlList');
            onBusinessTypeclear('PolicyFinancePostingDtlList');
            if (PolicyTypeCode.editValue == 1) {
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IPPolicyCode.disable(); IPPolicyCode.clearValue(); IPPolicyCode.allowBlank = true; IPPolicyCode.isValid();
            }
            if (PolicyTypeCode.editValue == 2) {
                IPPolicyCode.enable(); IPPolicyCode.allowBlank = false; IPPolicyCode.isValid();
                PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
        }, this);

        var BranchCode = Ext.getCmp('PolicyFinancePosting-BranchCode');
        PolicyCode.on('select', function (combo, record, index) {

            BranchCode.setComboValueDisplay(record.data.Organizations_Code, record.data.BranchNamee)
            BranchCode.value = record.data.Organizations_Code;
        }, this);
        IPPolicyCode.on('select', function (combo, record, index) {
            BranchCode.setComboValueDisplay(record.data.Organizations_Code, record.data.BranchNamee)
            BranchCode.value = record.data.Organizations_Code;
        }, this);

        PolicyCode.on('select', OnPolicyCodeChange, this);
        IPPolicyCode.on('select', OnIPPolicyCodeChange, this);

        var PolicyFinancePostingDtlList = Ext.getCmp('PolicyFinancePostingDtlList');
        PolicyFinancePostingDtlList.store.on('load', function (store, record, options) {
            var AddPre = 0, DeletePre = 0;
            for (var i = 0; i < PolicyFinancePostingDtlList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) AddPre += (1 * record.get('AddPremium'));
                if (record.get('IsDeleted') == false) DeletePre += (1 * record.get('DeletePremium'));
            }
            Ext.getCmp('PolicyFinancePosting-AddPremiumTotal').setRawValue(AddPre.toFixed(2));
            Ext.getCmp('PolicyFinancePosting-DeletePremiumTotal').setRawValue(DeletePre.toFixed(2));
            var tot = AddPre - DeletePre;
            Ext.getCmp('PolicyFinancePosting-Total').setRawValue(tot.toFixed(2));
        }, this);

        if (login.userglobalrights && login.userglobalrights.indexOf('126') < 0 && Ext.getCmp('PolicyFinancePostingReverse'))
            Ext.getCmp('PolicyFinancePostingReverse').disable();
        if (login.userglobalrights && login.userglobalrights.indexOf('127') < 0 && Ext.getCmp('EndorseMentUnPostFinance'))
            Ext.getCmp('EndorseMentUnPostFinance').disable();
    }
}

function OnPolicyCodeChange(combo, record, index) {

    var LoadAfterSave = Ext.getCmp('PolicyFinancePosting-LoadAfterSave');
    if (LoadAfterSave.getValue() == true) {
        var BranchCode = Ext.getCmp('PolicyFinancePosting-BranchCode');
        BranchCode.setComboValue(BranchCode.editValue);
        return;
    }

    showMask();
    onBusinessTypeclear('PolicyFinancePostingDtlList');
    onBusinessTypeclear('PolicyFinancePostingCommissionDtlList');
    var PolicyIdCode = Ext.getCmp('PolicyFinancePosting-PolicyIdCode').editValue;
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadEnddoresement',
            Policy: PolicyIdCode,
            TypeCode: 1//Policy

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadEnddoresementComplete, this);
}

function OnIPPolicyCodeChange(combo, record, index) {

    var LoadAfterSave = Ext.getCmp('PolicyFinancePosting-LoadAfterSave');
    if (LoadAfterSave.getValue() == true) {
        var BranchCode = Ext.getCmp('PolicyFinancePosting-BranchCode');
        BranchCode.setComboValue(BranchCode.editValue);
        return;
    }

    showMask();
    onBusinessTypeclear('PolicyFinancePostingDtlList');
    onBusinessTypeclear('PolicyFinancePostingCommissionDtlList');
    var IPPolicyIDCode = Ext.getCmp('PolicyFinancePosting-IPPolicyIDCode').editValue;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoadEnddoresement',
            Policy: IPPolicyIDCode,
            TypeCode: 2//IndividualPolicy

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoadEnddoresementComplete, this);
}

function LoadEnddoresementComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoadEnddoresementComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var AddtionPremium = 0, RefundPremium = 0;
    var PrimKey = Ext.getCmp('PolicyFinancePosting').selectedIndex;

    var PolicyFinancePostingDtlList = Ext.getCmp('PolicyFinancePostingDtlList');

    for (cnt = 0; cnt < responseText.Enddoredatum.length; cnt++) { //LoadEnddoresement Detalis
        var Record = responseText.Enddoredatum[cnt];
        PolicyFinancePostingDtlList.storeId += 1;
        AddtionPremium += Record.AddPremium;
        RefundPremium += Record.DeletePremium;
        var newRecord = new PolicyFinancePostingDtlList.recordType({
            ID: PolicyFinancePostingDtlList.storeId,
            SerialNo: PolicyFinancePostingDtlList.storeId,
            CardNo: Record.CardNo,
            MemberPolicyCode: Record.MemberCode,
            Member_id: Record.Member_Id,
            MemberName: Record.MemberName,
            Category_Name: Record.CategoryName,
            StartDate: Record.StartDate,
            EndDate: Record.EndDate,
            AddPremium: Record.AddPremium,
            DeletePremium: Record.DeletePremium,
            PolicyFinancePostingCode: (PrimKey == -1 ? 1 : PrimKey),
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            GroupCode: Record.GroupCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PolicyFinancePostingDtlList.stopEditing();
        PolicyFinancePostingDtlList.store.add(newRecord);
        PolicyFinancePostingDtlList.store.totalLength = PolicyFinancePostingDtlList.store.getTotalCount() + 1;
        PolicyFinancePostingDtlList.pageBar.updateInfo();

    }

    var PolicyFinancePostingCommissionDtlList = Ext.getCmp('PolicyFinancePostingCommissionDtlList');

    for (cnt = 0; cnt < responseText.commissiondatum.length; cnt++) { //LoadEnddoresement Detalis
        var Record = responseText.commissiondatum[cnt];
        PolicyFinancePostingCommissionDtlList.storeId += 1;
        var SecnewRecord = new PolicyFinancePostingCommissionDtlList.recordType({
            ID: PolicyFinancePostingCommissionDtlList.storeId,
            SerialNo: PolicyFinancePostingCommissionDtlList.storeId,
            PolicyCode: Record.ID,
            Comission_TypesCode: Record.Comission_TypesCode,
            Comission_TypesName: Record.Comission_TypesName,
            AdditionAmount: Record.AdditionAmount,
            RefundAmount: Record.RefundAmount,
            CommissionTo: Record.CommissionTo,
            Description: Record.Description,
            PolicyFinancePostingCode: (PrimKey == -1 ? 1 : PrimKey),
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        PolicyFinancePostingCommissionDtlList.stopEditing();
        PolicyFinancePostingCommissionDtlList.store.add(SecnewRecord);
        PolicyFinancePostingCommissionDtlList.store.totalLength = PolicyFinancePostingCommissionDtlList.store.getTotalCount() + 1;
        PolicyFinancePostingCommissionDtlList.pageBar.updateInfo();
    }

    //DetailStore = Ext.getCmp('PolicyFinancePostingDtlList').getStore();
    //if (DetailStore && !DetailStore.Firstimeloaded) {
    //    DetailStore.Firstimeloaded = true;
    //    DetailStore.load({
    //        params: {
    //            start: 0,
    //            limit: 200
    //        }
    //    });

    //}

    Ext.getCmp('PolicyFinancePosting-AddPremiumTotal').setValue(AddtionPremium);
    Ext.getCmp('PolicyFinancePosting-DeletePremiumTotal').setValue(RefundPremium);
    Ext.getCmp('PolicyFinancePosting-Total').setValue(AddtionPremium - RefundPremium);
    var BranchCode = Ext.getCmp('PolicyFinancePosting-BranchCode');
    BranchCode.setComboValue(BranchCode.editValue);

}
function PrintPharmacyDrughandler(buttion, option) {
}

function HRDailyWagesSheet(form, login) {
    // New Mode
    var PaymentTypeCode = Ext.getCmp('HRDailyWagesSheet-PaymentTypeCode');
    var ChequeNumber = Ext.getCmp('HRDailyWagesSheet-ChequeNumber');
    var MaturityDate = Ext.getCmp('HRDailyWagesSheet-MaturityDate');
    var NewPostedCode = Ext.getCmp('HRDailyWagesSheet-NewPostedCode');
    if (form.selectedIndex == -1 && !form.isView) {
        PaymentTypeCode.setComboValue(0);
        ChequeNumber.disable();
        MaturityDate.disable();
        NewPostedCode.setComboValue(0);
        NewPostedCode.disable();

    }

    //Edit Mode
    if (form.selectedIndex != -1 && !form.isView) {
        if (PaymentTypeCode.editValue == 0) {
            ChequeNumber.disable();
            MaturityDate.disable();
        }

    }

    var BankAccountCode = Ext.getCmp('HRDailyWagesSheet-BankAccountCode');
    if (BankAccountCode) BankAccountCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "b.bank_account_code in (select BANK_ACCOUNT_ID from ap_user_bank_access where USERCODE=" + login.UserCode + ") and BType = " + (Ext.getCmp('HRDailyWagesSheet-PaymentTypeCode').getValue() == 0 ? '1' : '0') + "";
    }, this);
    var TypeCode = Ext.getCmp('HRDailyWagesSheet-PaymentTypeCode');
    TypeCode.on('select', function (combo, record, options) {
        if (combo.getValue() == 0) {
            MaturityDate.allowBlank = true;
            ChequeNumber.allowBlank = true;
            ChequeNumber.setValue(null);
            MaturityDate.setValue(null);
            MaturityDate.disable();
            ChequeNumber.disable();
        }
        else {
            MaturityDate.enable();
            ChequeNumber.enable();
            ChequeNumber.allowBlank = false;
            MaturityDate.allowBlank = false;
        }
        ChequeNumber.isValid();
        MaturityDate.isValid();
    }, this);

    TypeCode.on('select', function fnd(combo, record, index) {

        var BankAccountCode = Ext.getCmp('HRDailyWagesSheet-BankAccountCode').clearValue();

    }, this);

    var HRDailyWagesSheetDtlList = Ext.getCmp('HRDailyWagesSheetDtlList');

    var TotalSalary = Ext.getCmp('HRDailyWagesSheet-TotalSalary');
    var Amount = Ext.getCmp('HRDailyWagesSheet-Amount');
    HRDailyWagesSheetDtlList.on('afteredit', function (e) {
        var TotalDailySalary = 0;
        var Total_NewSal = 0;
        for (var i = 0; i < e.grid.store.getCount() ; i++) {
            TotalDailySalary += (1 * e.grid.store.getAt(i).get('DailySalary'));

        }
        TotalSalary.setValue(TotalDailySalary);
        Amount.setValue(TotalDailySalary);


    }, this);

    var HRDailyWagesSheetDtlList = Ext.getCmp('HRDailyWagesSheetDtlList').getStore();
    HRDailyWagesSheetDtlList.on('load', function (store, record, options) {

        var TotalDailySalary = 0;

        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (record.get('IsDeleted') == false) TotalDailySalary += (1 * record.get('DailySalary'));
        }
        TotalSalary.setValue(TotalDailySalary);
        Amount.setValue(TotalDailySalary);
    }, this);

}



function HRDailyWagesSheetPost(Button, options) {


    var PrimKey = Ext.getCmp('HRDailyWagesSheet').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRDailyWagesSheetPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRDailyWagesSheetPostComplete, this);
}

function HRDailyWagesSheetPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', HRDailyWagesSheetPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_DAILYWAGESSHEET_editform').close();
    }
}



function DailyWagesUnPost(form, login) {

    var Primkey = Ext.getCmp('HRDailyWagesSheet').selectedIndex;
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Record cannont be Unpost, Posted records only allow to Unpost');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Un Post Posted Record ?', function (button) {
        if (button == 'yes') {
            showMask();
            Ext.Ajax.request({
                url: 'tools/finance/JVHeaderRequest.aspx',
                params: {
                    action: 'HRDailyWagesSheetUnPost',
                    Primkey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', HRDailyWagesSheetUnPostComplete, this);
        }
    }, this);

}

function HRDailyWagesSheetUnPostComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', HRDailyWagesSheetUnPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var WidgetObj = Ext.getCmp('ID_DAILYWAGESSHEET_editform').scope;
        Ext.getCmp('ID_DAILYWAGESSHEET_editform').close();
        WidgetObj.afterCloseWind(WidgetObj);
    }
}


function NGIClinicians(form, login) {



    if (!form.isView) {

        var SpecialtyCode = Ext.getCmp('NGIClinicians-SpecialtyCode');
        if (SpecialtyCode) SpecialtyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "active=1";
        }, this);

        //State filter based on Country 
        var StateCode = Ext.getCmp('NGIClinicianProvider-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('NGIClinicianProvider-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        //City filtered based on State

        var CityCode = Ext.getCmp('NGIClinicianProvider-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('NGIClinicianProvider-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        }, this);



        var NGIClinicianProviderList = Ext.getCmp('NGIClinicianProviderList');
        NGIClinicianProviderList.getColumnModel().setHidden(6, true);

        NGIClinicianProviderList.on('addrecord', function (evt) {
            if (form.selectedIndex == -1) {
                onBusinessTypeclear('NGIClinicianProviderList');
                Ext.MessageBox.alert(login.modulename, 'Please save before add new Provider detail');
                return;
            }

        }, this);

    }
}

function CandidateCourseAssign(form, login) {
    if (!form.isView) {
        var StaffIDCode = Ext.getCmp('CandidateCourseAssign-StaffIDCode');
        var CoursestudyCode = Ext.getCmp('CandidateCourseAssign-CoursestudyCode');
        var EmpFullName = Ext.getCmp('CandidateCourseAssign-EmpFullName');
        var TrTotl = Ext.getCmp('CandidateCourseAssign-TrTotl');


        var StatusCode = Ext.getCmp('CandidateCourseAssign-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();

        if (StaffIDCode) StaffIDCode.on('beforequery', function (evt) {
            var CoursestudyCode = Ext.getCmp('CandidateCourseAssign-CoursestudyCode');
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "Emp.PERSON_CODE in( select STAFFCODE from  HRM_COURSE_STUDY_DTL where COURSE_STUDY_CODE=" + CoursestudyCode.getValue() + ")";
        }, this);

        if (CoursestudyCode) CoursestudyCode.on('clear', function (e) {
            StaffIDCode.clearValue();
            EmpFullName.clearValue();
        }, this);
        if (CoursestudyCode) CoursestudyCode.on('select', function (e) {
            StaffIDCode.clearValue();
            EmpFullName.setValue(null);

        }, this);

        var CandidateCourseAssignDtlList = Ext.getCmp('CandidateCourseAssignDtlList');
        CandidateCourseAssignDtlList.on('addrecord', function (evt) {

            evt.record.set('BalanceAmount', TrTotl.getValue());

        }, this);


    }
}

function CandidateCoursePayment(form, login) {
    if (!form.isView) {
        var StatusCode = Ext.getCmp('CandidateCoursePayment-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
        // New Mode
        var PaymentTypeCode = Ext.getCmp('CandidateCoursePayment-PaymentTypeCode');
        var ChequeNumber = Ext.getCmp('CandidateCoursePayment-ChequeNumber');
        var MaturityDate = Ext.getCmp('CandidateCoursePayment-MaturityDate');

        if (form.selectedIndex == -1 && !form.isView) {
            PaymentTypeCode.setComboValue(0);
            ChequeNumber.disable();
            MaturityDate.disable();

        }

        //Edit Mode
        if (form.selectedIndex != -1 && !form.isView) {
            if (PaymentTypeCode.editValue == 0) {
                ChequeNumber.disable();
                MaturityDate.disable();
            }

        }

        var BankAccountCode = Ext.getCmp('CandidateCoursePayment-BankAccountCode');
        if (BankAccountCode) BankAccountCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "b.bank_account_code in (select BANK_ACCOUNT_ID from ap_user_bank_access where USERCODE=" + login.UserCode + ") and BType = " + (Ext.getCmp('CandidateCoursePayment-PaymentTypeCode').getValue() == 0 ? '1' : '0') + "";
        }, this);
        var TypeCode = Ext.getCmp('CandidateCoursePayment-PaymentTypeCode');
        TypeCode.on('select', function (combo, record, options) {
            if (combo.getValue() == 0) {
                MaturityDate.allowBlank = true;
                ChequeNumber.allowBlank = true;
                ChequeNumber.setValue(null);
                MaturityDate.setValue(null);
                MaturityDate.disable();
                ChequeNumber.disable();
            }
            else {
                MaturityDate.enable();
                ChequeNumber.enable();
                ChequeNumber.allowBlank = false;
                MaturityDate.allowBlank = false;
            }
            ChequeNumber.isValid();
            MaturityDate.isValid();
        }, this);

        TypeCode.on('select', function fnd(combo, record, index) {

            var BankAccountCode = Ext.getCmp('CandidateCoursePayment-BankAccountCode').clearValue();

        }, this);

        var PaidAmount = Ext.getCmp('CandidateCoursePayment-Paidamount');

        if (PaidAmount) PaidAmount.on('valid', function (text1, oldval, newval) {
            CalBalanceAmount();
        }, this);
    }
}



function CalBalanceAmount() {

    var BalanceAmount = Ext.getCmp('CandidateCoursePayment-Balanceamount');
    var Netvalue = Ext.getCmp('CandidateCoursePayment-Totalamount').getValue();
    var PaidAmount = Ext.getCmp('CandidateCoursePayment-Paidamount').getValue() * 1;


    var AverageCost = 0;

    AverageCost = ((Netvalue) * 1) - ((PaidAmount) * 1);
    Ext.getCmp('CandidateCoursePayment-Balanceamount').setValue(AverageCost);
}



function CandidateCoursePaymentPost(Button, Option) {
    var PrimKey = Ext.getCmp('CandidateCoursePayment').selectedIndex;
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CandidateCoursePaymentPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CandidateCoursePaymentPostComplete, this);
}

function CandidateCoursePaymentPostComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', CandidateCoursePaymentPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CANDIDATECOURSEPAYMENT_editform').close();
    }
}
function NGIClaimsProcessDtlView(record) {

    var PrimKey = record.get('ClaimCode');

    var ClaimsApporval = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.Claims'
    var Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/ClaimsViewHistory.xml';
    var PKey = PrimKey, WidgetTitle = 'View Claims';
    ClaimsApporval.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function PolicyRenewalMemberLoad(form, login) {

    var OldPolicyCode = Ext.getCmp('NGIPolicy-OldPolicyCode');

    if (OldPolicyCode.getValue() > 0) {
        showMask();
        Ext.Ajax.request({

            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'PolicyRenewalMemberLoad',
                OldPolicyCode: OldPolicyCode.getValue(),
                PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });

        Ext.Ajax.on('requestcomplete', PolicyRenewalMemberLoadCompleted, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'No Member dateil records.This Policy not renewed !');
        return;
    }

}

function PolicyRenewalMemberLoadCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyRenewalMemberLoadCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.PolicyRenewalMemberPopupForm = new Ext.form.FormPanel(responseText.RenewalMemberConfig);

    this.PolicyRenewalMemberPopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var PolicyRenewalMemberPopupDtlList = Ext.getCmp('PolicyRenewalMemberPopupDtlList');

            for (var pcnt = 0; pcnt < PolicyRenewalMemberPopupDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = PolicyRenewalMemberPopupDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.PolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.PolicyRenewalMemberPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var PolicyRenewalMemberPopupDtlList = Ext.getCmp('PolicyRenewalMemberPopupDtlList');

            for (var pcnt = 0; pcnt < PolicyRenewalMemberPopupDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = PolicyRenewalMemberPopupDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.PolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.PolicyRenewalMemberPopupForm.addButton({
        text: 'Load',
        handler: function () {

            var CategoryCode = Ext.getCmp('PolicyRenewalMemberPopup-CategoryCode').getValue();
            //if (CategoryCode == '' && CategoryCode < 1) {
            //    Ext.MessageBox.alert(login.modulename, 'CategoryCode should not empty. !');
            //    return;
            //}
            var MemberGridRecords = []; var cnt = 0;
            var MemberGrid = Ext.getCmp('PolicyRenewalMemberPopupDtlList');
            for (var i = 0; i < MemberGrid.store.getCount() ; i++) {
                if (MemberGrid.store.getAt(i).get('Selectcheck') == true) {
                    MemberGridRecords.push(Ext.encode(MemberGrid.store.getAt(i).data));
                    cnt++;
                }
            }

            if (cnt > 0) {
                var MemberGridRecordsRow = '[' + MemberGridRecords.join(',') + ']';
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'PolicyRenewalMemberRecordsLoad',
                        MemberGridRecordsRow: MemberGridRecordsRow,
                        PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex,
                        CategoryCode: Ext.getCmp('PolicyRenewalMemberPopup-CategoryCode').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyRenewalMemberRecordsLoadComplete, this);
            }
            else {
                Ext.MessageBox.alert(login.modulename, 'No Selected records.You cannot load member records !');
                return;
            }

        },

        scope: this,
        formBind: true,
        tabIndex: this.PolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.PolicyRenewalMemberPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PolicyRenewalMemberPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.PolicyRenewalMemberPopupFormWindow = new Ext.Window({
        id: 'PolicyRenewalMemberPopupFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.PolicyRenewalMemberPopupForm.width + 10,
        height: this.PolicyRenewalMemberPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PolicyRenewalMemberPopupForm]
    });
    this.PolicyRenewalMemberPopupForm.on('render', PolicyRenewalMemberPopup, this);
    this.PolicyRenewalMemberPopupFormWindow.show();

}


function IndPolicyRenewalMemberLoad(form, login) {

    var OldPolicyCode = Ext.getCmp('NGIIndividualPolicies-OldPolicyCode');

    if (OldPolicyCode.getValue() > 0) {
        showMask();
        Ext.Ajax.request({

            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'IndPolicyRenewalMemberLoad',
                OldPolicyCode: OldPolicyCode.getValue(),
                PolicyCode: Ext.getCmp('NGIIndividualPolicies').selectedIndex,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });

        Ext.Ajax.on('requestcomplete', IndPolicyRenewalMemberLoadCompleted, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'No Member dateil records.This Policy not renewed !');
        return;
    }

}

function IndPolicyRenewalMemberLoadCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IndPolicyRenewalMemberLoadCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.IndPolicyRenewalMemberPopupForm = new Ext.form.FormPanel(responseText.RenewalMemberConfig);

    this.IndPolicyRenewalMemberPopupForm.addButton({
        text: 'Select All',
        handler: function () {
            var IndPolicyRenewalMemberPopupDtlList = Ext.getCmp('IndPolicyRenewalMemberPopupDtlList');

            for (var pcnt = 0; pcnt < IndPolicyRenewalMemberPopupDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = IndPolicyRenewalMemberPopupDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.IndPolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.IndPolicyRenewalMemberPopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var IndPolicyRenewalMemberPopupDtlList = Ext.getCmp('IndPolicyRenewalMemberPopupDtlList');

            for (var pcnt = 0; pcnt < IndPolicyRenewalMemberPopupDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = IndPolicyRenewalMemberPopupDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.IndPolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.IndPolicyRenewalMemberPopupForm.addButton({
        text: 'Load',
        handler: function () {

            var MemberGridRecords = []; var cnt = 0;
            var MemberGrid = Ext.getCmp('IndPolicyRenewalMemberPopupDtlList');
            for (var i = 0; i < MemberGrid.store.getCount() ; i++) {
                if (MemberGrid.store.getAt(i).get('Selectcheck') == true) {
                    MemberGridRecords.push(Ext.encode(MemberGrid.store.getAt(i).data));
                    cnt++;
                }
            }

            if (cnt > 0) {
                var MemberGridRecordsRow = '[' + MemberGridRecords.join(',') + ']';
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'IndPolicyRenewalMemberRecordsLoad',
                        MemberGridRecordsRow: MemberGridRecordsRow,
                        PolicyCode: Ext.getCmp('NGIIndividualPolicies').selectedIndex,
                        CategoryCode: '100000000000000001'
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyRenewalMemberRecordsLoadComplete, this);
            }
            else {
                Ext.MessageBox.alert(login.modulename, 'No Selected records.You cannot load member records !');
                return;
            }

        },

        scope: this,
        formBind: true,
        tabIndex: this.IndPolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.IndPolicyRenewalMemberPopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.IndPolicyRenewalMemberPopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.IndPolicyRenewalMemberPopupForm.FormFieldsCount + 2
    });

    this.IndPolicyRenewalMemberPopupFormWindow = new Ext.Window({
        id: 'PolicyRenewalMemberPopupFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.IndPolicyRenewalMemberPopupForm.width + 10,
        height: this.IndPolicyRenewalMemberPopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.IndPolicyRenewalMemberPopupForm]
    });
    //this.IndPolicyRenewalMemberPopupFormWindow.on('render', IndPolicyRenewalMemberPopup, this);
    this.IndPolicyRenewalMemberPopupFormWindow.show();

}


function PolicyRenewalMemberRecordsLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyRenewalMemberRecordsLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function PolicyRenewalMemberPopup(form, login) {

    var CategoryCode = Ext.getCmp('PolicyRenewalMemberPopup-CategoryCode');
    var OldPolicyCode = Ext.getCmp('NGIPolicy-OldPolicyCode').getValue();
    CategoryCode.allowBlank = false;
    CategoryCode.clearValue();
    CategoryCode.isValid();
    if (CategoryCode) CategoryCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL where policycode=" + OldPolicyCode + ")";
    }, this);

    var FilterQry1 = " Mem.PolicyCode=" + OldPolicyCode + " and nvl(Mem.Status,0)=0 ";

    DetailStore = Ext.getCmp('PolicyRenewalMemberPopupDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalMemberPopupDtl&filter=" + FilterQry1;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 1000
            }
        });
    }

    var CategoryCode = Ext.getCmp('PolicyRenewalMemberPopup-CategoryCode');
    if (CategoryCode) CategoryCode.on('select', function (combo, record, index) {

        var FilterQry = " Mem.PolicyCode=" + OldPolicyCode + " and nvl(Mem.Status,0)=0 and Mem.Member_Code in (select Member_Code from im_Members where Category_Code=" + CategoryCode.getValue() + ")";

        DetailStore = Ext.getCmp('PolicyRenewalMemberPopupDtlList').getStore();

        var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.PolicyRenewalMemberPopupDtl&filter=" + FilterQry;
        if (DetailStore) {
            DetailStore.proxy = new Ext.data.HttpProxy({
                url: DetUrl
            });
            DetailStore.load({
                params: {
                    start: 0,
                    limit: 1000
                }
            });
        }

    }, this);
}
function EndrosementPaymentPopUp(form, login) { }

function EndrosementPaymentUpdate(form, login) {

    var Primary = Ext.getCmp('EndorsementPosting').selectedIndex;

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'EndrosementPaymentUpdateForm'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', EndrosementPaymentUpdateFormReqComplete, this);

}

function EndrosementPaymentUpdateFormReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndrosementPaymentUpdateFormReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.EndrosementPaymentUpdateForm = new Ext.form.FormPanel(responseText.AttendanceCofig);
    this.EndrosementPaymentUpdateForm.addButton({
        text: 'Update',
        handler: function () {

            var PaymentCode = Ext.getCmp('EndrosementPaymentPopUp-PaymentCode').getValue();
            var PrimKey = Ext.getCmp('EndorsementPosting').selectedIndex;


            var PaymentName = Ext.getCmp('EndrosementPaymentPopUp-PaymentCode').lastSelectionText;

            if (PaymentName == '' || PaymentName == null) {
                Ext.MessageBox.alert(login.modulename, 'Please Select Payment Mode to Update !');
                return;
            }
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'UpdatePayment',
                    PaymentCode: PaymentCode,
                    PrimKey: PrimKey

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndrosementPaymentUpdateComplete, this);

        },

        scope: this,
        tabIndex: this.EndrosementPaymentUpdateForm.FormFieldsCount + 2
    });
    this.EndrosementPaymentUpdateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.EndrosementPaymentUpdateFormWindow.close();
        },
        scope: this,
        tabIndex: this.EndrosementPaymentUpdateForm.FormFieldsCount + 2
    });
    this.EndrosementPaymentUpdateFormWindow = new Ext.Window({
        id: 'EndrosementPaymentUpdateFormWindow',
        title: 'Endrosement Payment Update',
        closable: true,
        minimizable: false,
        width: this.EndrosementPaymentUpdateForm.width + 10,
        height: this.EndrosementPaymentUpdateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.EndrosementPaymentUpdateForm]
    });
    this.EndrosementPaymentUpdateForm.on('render', EndrosementPaymentUpdateFormRendeer, this);
    this.EndrosementPaymentUpdateFormWindow.show();


}

function EndrosementPaymentUpdateComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndrosementPaymentUpdateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        this.EndrosementPaymentUpdateFormWindow.close();

    }
}

function EndrosementPaymentUpdateFormRendeer(form, login) { }

function PolicyFinancePostingReverse(form, login) {
    var Primkey = Ext.getCmp('PolicyFinancePosting').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('PolicyFinancePosting-AuthorizedStatusCode');
    var ReverseEndorsementCode = Ext.getCmp('PolicyFinancePosting-ReverseEndorsementCode');

    if (ReverseEndorsementCode.getValue() > 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, This Endorsement was reversed Endorsement !');
        return;
    }
    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Reverse the Endorsement', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'PolicyFinancePostingReverse',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PolicyFinancePostingReverseComplete, this);
        }
    }, this);

}
function PolicyFinancePostingReverseComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyFinancePostingReverseComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_POLICYFINANCEPOSTING_editform').close();

    }
}

function EndorseMentUnPostFinance(form, login) {
    var Primkey = Ext.getCmp('PolicyFinancePosting').selectedIndex;
    var AuthorizedStatusCode = Ext.getCmp('PolicyFinancePosting-AuthorizedStatusCode');

    if (Primkey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }
    if (AuthorizedStatusCode.getValue() == 0) {
        Ext.MessageBox.alert(login.modulename, 'You cannont Reverse, Approved records only allow to Reverse');
        return;
    }
    Ext.MessageBox.confirm(login.modulename, 'Are You sure You want to Reverse the Endorsement', function (button) {
        if (button == 'yes') {
            showMask();

            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'EndorseMentUnPostFinance',
                    PrimKey: Primkey
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', EndorseMentUnPostFinanceComplete, this);
        }
    }, this);

}
function EndorseMentUnPostFinanceComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', EndorseMentUnPostFinanceComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_POLICYFINANCEPOSTING_editform').close();

    }
}

/*
function MemberEnquirySendSMSorEMail(form, login) {
    var Massage = Ext.getCmp('MemberEnquiry-Description').getValue();
    var MobileNo = Ext.getCmp('MemberEnquiry-Mobileno').getValue();
    var EmailID = Ext.getCmp('MemberEnquiry-Email_id').getValue();

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberEnquirySendSMSEMail',
            Massage: Massage,
            MobileNo: MobileNo,
            EmailID: EmailID
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MemberEnquirySendSMSEMailComplete, this);
}

function MemberEnquirySendSMSEMailComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MemberEnquirySendSMSEMailComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}
*/

function HR_UpdatePersonDetails(form, login) {
    var StatusCode = Ext.getCmp('HR_UpdatePersonDetails-StatusCode');
    if (!form.isView) {
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
}

function UpdateEmployeeProfilehandler(form, login) {
    var StatusCode = Ext.getCmp('HR_UpdatePersonDetails-StatusCode');
    var MobileNo = 0, EmailID = 0;
    var Person_Code = Ext.getCmp('HR_UpdatePersonDetails-PersonIDCode');
    var Form = Ext.getCmp('HR_UpdatePersonDetails');
    if (Form.selectedIndex == 1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    if (StatusCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }

    if (Person_Code.editValue == null || Person_Code.editValue == 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select Employee!');
        return;
    }

    var UpDateEmpDetail = [];
    var HR_UpdatePersonDetailsDtlList = Ext.getCmp('HR_UpdatePersonDetailsDtlList');
    var count = 0
    for (cnt = 0; cnt < HR_UpdatePersonDetailsDtlList.store.getCount() ; cnt++) {
        UpDateEmpDetail.push(Ext.encode(HR_UpdatePersonDetailsDtlList.store.getAt(cnt).data));
    }
    var UpDateEmpDetailRow = '[' + UpDateEmpDetail.join(',') + ']';

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRUpdateEmployeeProfilePosting',
            PrimKey: Form.selectedIndex,
            UpDateEmpDetailRow: UpDateEmpDetailRow,
            Person_Code: Person_Code.editValue
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRUpdateEmployeeProfilePostingComplete, this);
}

function HRUpdateEmployeeProfilePostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRUpdateEmployeeProfilePostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}


function HRMemo(form, login) {
    if (!form.isView) {
        var StatusCode = Ext.getCmp('HRMemo-MemoStatusCode');
        //var EmployeeIDName = Ext.getCmp('HRMemo-PersonIDName');
        //var EmployeeName = Ext.getCmp('HRMemo-Person_FullName');

        //EmployeeIDName.setValue(login.portalemployee.Employee_Number);
        //EmployeeName.setValue(login.portalemployee.EmployeeFullName);


        StatusCode.setComboValue(0);
        StatusCode.disable();
    }

}

function EmployeeMemoProfilehandler(form, login) {
    var StatusCode = Ext.getCmp('HRMemo-MemoStatus');
    var Form = Ext.getCmp('HRMemo');
    if (Form.selectedIndex == 1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    if (StatusCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HREmployeeMemoPosting',
            PrimKey: Form.selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HREmployeeMemoPostingComplete, this);
}

function HREmployeeMemoPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HREmployeeMemoPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}



function HRComplaint(form, login) {
    if (login.employeecode != null) {
        var EmployeeIDName = Ext.getCmp('HRComplaint-PersonIDName');
        var EmployeeIDCode = Ext.getCmp('HRComplaint-PersonIDCode');
        var EmployeeName = Ext.getCmp('HRComplaint-Person_FullName');

        EmployeeIDCode.setComboValue(login.employeecode);
        EmployeeIDCode.disable();
        EmployeeIDName.setValue(login.portalemployee.Employee_Number);
        EmployeeName.setValue(login.portalemployee.EmployeeFullName);

    }

    if (form.selectedIndex == -1) {
        var StatusCode = Ext.getCmp('HRComplaint-StatusCode');
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }

}

function ComplaintPostinghandler(form, login) {

    var StatusCode = Ext.getCmp('HRComplaint-StatusCode');
    var Form = Ext.getCmp('HRComplaint');
    if (Form.selectedIndex == 1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    if (StatusCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRComplaintPosting',
            PrimKey: Form.selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRComplaintPostingComplete, this);
}

function HRComplaintPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRComplaintPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function HRComplaintActionTaken(form, login) {
    var StatusCode = Ext.getCmp('HRComplaintActionTaken-ComplaintStatusCode');
    var ComplaintFullNoCode = Ext.getCmp('HRComplaintActionTaken-ComplaintFullNoCode');
    var ActionTakenComments = Ext.getCmp('HRComplaintActionTaken-ActionTakenComments');
    if (form.selectedIndex == -1) {
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
    if (ComplaintFullNoCode) ComplaintFullNoCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "COM.STATUSCODE= 1"; // Psted Record only
    }, this);

    ActionTakenComments.setValue(login.UserName);
}

function ComplaintActionTakenPostinghandler(form, login) {
    var StatusCode = Ext.getCmp('HRComplaintActionTaken-ComplaintStatus');
    var Form = Ext.getCmp('HRComplaintActionTaken');
    if (Form.selectedIndex == 1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    if (StatusCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRComplaintActionTakenPosting',
            PrimKey: Form.selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRComplaintActionTakenPostingComplete, this);
}

function HRComplaintActionTakenPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRComplaintActionTakenPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function HRMemoActionTaken(form, login) {
    var StatusCode = Ext.getCmp('HRMemoActionTaken-MemoStatusCode');
    var MemoFullNoCode = Ext.getCmp('HRMemoActionTaken-MemoFullNoCode');
    var ActionTakenComments = Ext.getCmp('HRMemoActionTaken-ActionTakenComments');
    if (form.selectedIndex == -1) {
        StatusCode.setComboValue(0);
        StatusCode.disable();
    }
    if (MemoFullNoCode) MemoFullNoCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ME.MEMOSTATUS=1"; // Psted Record only
    }, this);
    ActionTakenComments.setValue(login.UserName);
}

function MemoActionTakenPostinghandler(form, login) {
    var StatusCode = Ext.getCmp('HRMemoActionTaken-MemoStatusCode');
    var Form = Ext.getCmp('HRMemoActionTaken');
    if (Form.selectedIndex == 1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }
    if (StatusCode == 1) {
        Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
        return;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'HRMemoActionTakenPosting',
            PrimKey: Form.selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRMemoActionTakenPostingComplete, this);
}

function HRMemoActionTakenPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRMemoActionTakenPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}

function HR_PersonsFeedBack(form, login) {

    if (!form.isview) {
        if (login.employeecode != null) {
            //var EmployeeIDName = Ext.getCmp('HR_PersonsFeedBack-PersonIDName');
            var EmployeeIDCode = Ext.getCmp('HR_PersonsFeedBack-PersonIDCode');
            var EmployeeName = Ext.getCmp('HR_PersonsFeedBack-Person_FullName');

            EmployeeIDCode.setComboValue(login.employeecode);
            EmployeeIDCode.disable();
            //EmployeeIDName.setValue(login.portalemployee.Employee_Number);
            EmployeeName.setValue(login.portalemployee.EmployeeFullName);
        }

        var total1 = Ext.getCmp('HR_PersonsFeedBack-TotalMaxRating');
        var total2 = Ext.getCmp('HR_PersonsFeedBack-TotalRating');
        var HR_PersonsFeedBackDtlList = Ext.getCmp('HR_PersonsFeedBackDtlList');

        HR_PersonsFeedBackDtlList.store.on('load', function (store, record, options) {
            var UnitTotal = 0, UnitTotal1 = 0;
            for (var i = 0; i < HR_PersonsFeedBackDtlList.store.getCount() ; i++) {
                var record = store.getAt(i);
                if (record.get('IsDeleted') == false) UnitTotal += (1 * record.get('MaxRating'));
                if (record.get('IsDeleted') == false) UnitTotal1 += (1 * record.get('Rating'));
            }
            total1.setRawValue(UnitTotal.toFixed(2));
            total2.setRawValue(UnitTotal1.toFixed(2));
        }, this);

        HR_PersonsFeedBackDtlList.on('afteredit', function (e) {
            var UTotal = 0, UTotal1 = 0;
            for (var i = 0; i < HR_PersonsFeedBackDtlList.store.getCount() ; i++) {
                UTotal += (1 * e.grid.store.getAt(i).get('MaxRating'));
                UTotal1 += (1 * e.grid.store.getAt(i).get('Rating'));
            }
            total1.setRawValue(UTotal.toFixed(2));
            total2.setRawValue(UTotal1.toFixed(2));
        }, this);
    }
}

// Delete Policy Member

function PolicyMemberDeleteLoad(form, login) {

    //var OldPolicyCode = Ext.getCmp('NGIPolicy-OldPolicyCode');

    //if (OldPolicyCode.getValue() > 0) {
    showMask();
    Ext.Ajax.request({

        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyMemberDeleteLoad',
            PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', PolicyMemberDeleteLoadCompleted, this);
    //}
    //else {
    //    Ext.MessageBox.alert(login.modulename, 'No Member detail records.!');
    //    return;
    //}

}

function PolicyMemberDeleteLoadCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyMemberDeleteLoadCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.PolicyMembersDeletePopUpForm = new Ext.form.FormPanel(responseText.DeleteMemberConfig);

    this.PolicyMembersDeletePopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var PolicyMembersDeletePopUpDtlList = Ext.getCmp('PolicyMembersDeletePopUpDtlList');

            for (var pcnt = 0; pcnt < PolicyMembersDeletePopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = PolicyMembersDeletePopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.PolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.PolicyMembersDeletePopUpForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var PolicyMembersDeletePopUpDtlList = Ext.getCmp('PolicyMembersDeletePopUpDtlList');

            for (var pcnt = 0; pcnt < PolicyMembersDeletePopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = PolicyMembersDeletePopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.PolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.PolicyMembersDeletePopUpForm.addButton({
        text: 'Delete',
        handler: function () {

            //var CategoryCode = Ext.getCmp('PolicyMembersDeletePopUp-CategoryCode').getValue();
            //if (CategoryCode == '' && CategoryCode < 1) {
            //    Ext.MessageBox.alert(login.modulename, 'CategoryCode should not empty. !');
            //    return;
            //}
            var DeleteMemberGridRecords = []; var cnt = 0;
            var DelMemberGrid = Ext.getCmp('PolicyMembersDeletePopUpDtlList');
            for (var i = 0; i < DelMemberGrid.store.getCount() ; i++) {
                if (DelMemberGrid.store.getAt(i).get('Selectcheck') == true) {
                    DeleteMemberGridRecords.push(Ext.encode(DelMemberGrid.store.getAt(i).data));
                    cnt++;
                }
            }

            if (cnt > 0) {
                var DeleteMemberGridRecordsRow = '[' + DeleteMemberGridRecords.join(',') + ']';
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'PolicyDeleteMemberRecordsLoad',
                        DeleteMemberGridRecordsRow: DeleteMemberGridRecordsRow,
                        PolicyCode: Ext.getCmp('NGIPolicy').selectedIndex
                        // CategoryCode: Ext.getCmp('PolicyMembersDeletePopUp-CategoryCode').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyDeleteMemberRecordsLoadComplete, this);
            }
            else {
                Ext.MessageBox.alert(login.modulename, 'No Selected records.You cannot load member records !');
                return;
            }

        },

        scope: this,
        formBind: true,
        tabIndex: this.PolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.PolicyMembersDeletePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PolicyMembersDeletePopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.PolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.PolicyMembersDeletePopUpFormWindow = new Ext.Window({
        id: 'PolicyMembersDeletePopUpFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.PolicyMembersDeletePopUpForm.width + 10,
        height: this.PolicyMembersDeletePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PolicyMembersDeletePopUpForm]
    });
    this.PolicyMembersDeletePopUpForm.on('render', PolicyMembersDeletePopUp, this);
    this.PolicyMembersDeletePopUpFormWindow.show();

}

function PolicyMembersDeletePopUp(form, login) {
}

function PolicyDeleteMemberRecordsLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PolicyDeleteMemberRecordsLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}


// Delete Individual Policy Members
function IndPolicyMemberDeleteLoad(form, login) {

    //var OldPolicyCode = Ext.getCmp('NGIPolicy-OldPolicyCode');

    //if (OldPolicyCode.getValue() > 0) {
    showMask();
    Ext.Ajax.request({

        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'IndPolicyMemberDeleteLoad',
            IndPolicyCode: Ext.getCmp('NGIIndividualPolicies').selectedIndex
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', IndPolicyMemberDeleteLoadCompleted, this);
    //}
    //else {
    //    Ext.MessageBox.alert(login.modulename, 'No Member detail records.!');
    //    return;
    //}

}

function IndPolicyMemberDeleteLoadCompleted(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', IndPolicyMemberDeleteLoadCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.IndPolicyMembersDeletePopUpForm = new Ext.form.FormPanel(responseText.DeleteMemberConfig);

    this.IndPolicyMembersDeletePopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var IndPolicyMembersDeletePopUpDtlList = Ext.getCmp('IndPolicyMembersDeletePopUpDtlList');

            for (var pcnt = 0; pcnt < IndPolicyMembersDeletePopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = IndPolicyMembersDeletePopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.IndPolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.IndPolicyMembersDeletePopUpForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var IndPolicyMembersDeletePopUpDtlList = Ext.getCmp('IndPolicyMembersDeletePopUpDtlList');

            for (var pcnt = 0; pcnt < IndPolicyMembersDeletePopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = IndPolicyMembersDeletePopUpDtlList.store.getAt(pcnt);
                PopupRecord.set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.IndPolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.IndPolicyMembersDeletePopUpForm.addButton({
        text: 'Delete',
        handler: function () {

            //var CategoryCode = Ext.getCmp('PolicyMembersDeletePopUp-CategoryCode').getValue();
            //if (CategoryCode == '' && CategoryCode < 1) {
            //    Ext.MessageBox.alert(login.modulename, 'CategoryCode should not empty. !');
            //    return;
            //}
            var IndDeleteMemberGridRecords = []; var cnt = 0;
            var IndDelMemberGrid = Ext.getCmp('IndPolicyMembersDeletePopUpDtlList');
            for (var i = 0; i < IndDelMemberGrid.store.getCount() ; i++) {
                if (IndDelMemberGrid.store.getAt(i).get('Selectcheck') == true) {
                    IndDeleteMemberGridRecords.push(Ext.encode(IndDelMemberGrid.store.getAt(i).data));
                    cnt++;
                }
            }

            if (cnt > 0) {
                var IndDeleteMemberGridRecordsRow = '[' + IndDeleteMemberGridRecords.join(',') + ']';
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'IndPolicyDeleteMemberRecordsLoad',
                        IndDeleteMemberGridRecordsRow: IndDeleteMemberGridRecordsRow,
                        IndPolicyCode: Ext.getCmp('NGIIndividualPolicies').selectedIndex
                        // CategoryCode: Ext.getCmp('PolicyMembersDeletePopUp-CategoryCode').getValue()
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', PolicyDeleteMemberRecordsLoadComplete, this);
            }
            else {
                Ext.MessageBox.alert(login.modulename, 'No Selected records.You cannot load member records !');
                return;
            }

        },

        scope: this,
        formBind: true,
        tabIndex: this.IndPolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.IndPolicyMembersDeletePopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.IndPolicyMembersDeletePopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.IndPolicyMembersDeletePopUpForm.FormFieldsCount + 2
    });

    this.IndPolicyMembersDeletePopUpFormWindow = new Ext.Window({
        id: 'IndPolicyMembersDeletePopUpFormWindow',
        title: 'Member Details',
        closable: true,
        minimizable: false,
        width: this.IndPolicyMembersDeletePopUpForm.width + 10,
        height: this.IndPolicyMembersDeletePopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.IndPolicyMembersDeletePopUpForm]
    });
    this.IndPolicyMembersDeletePopUpForm.on('render', IndPolicyMembersDeletePopUp, this);
    this.IndPolicyMembersDeletePopUpFormWindow.show();

}



function IndPolicyMembersDeletePopUp(form, login) {
}


function OnlineNGIClaimsProcessPrintHandler(record) {
    var PrimKey = record.get('ID');
    var WidgetObj = Ext.getCmp('ID_ONLINECLAIMSEARCHS').scope;
    WidgetObj.printPreviewClick(PrimKey, 1);
}

function OnlineAddRemarksbyDoctorHandler(button, options) {
}

function OnlineClaimViewActivityObserveHandler(button, options) {
}




function SaveClaimDiagnosis() {

    if (ClaimActivityMode == 1) {
        for (var pcnt = 0; pcnt < Ext.getCmp('ClaimProcessDiagnosisList').store.getCount() ; pcnt++) {
            var record = Ext.getCmp('ClaimProcessDiagnosisList').getStore().getAt(pcnt);
            if (record.get('DetailCode') == Ext.getCmp('NewActivity-DetailCode').getValue()) {
                Ext.MessageBox.alert('Claim Processing', 'Diagnosis already exists for this claim !');
                return;
            }
        }
        FillClaimDiagnosis();
    }
    if (ClaimActivityMode == 2) {
        for (var pcnt = 0; pcnt < Ext.getCmp('ClaimProcessDiagnosisList').store.getCount() ; pcnt++) {
            var record = Ext.getCmp('ClaimProcessDiagnosisList').getStore().getAt(pcnt);
            if ((record.get('DetailCode') == Ext.getCmp('NewActivity-DetailCode').getValue()) && (Ext.getCmp('ClaimProcessActivityList').record.get('ID') != record.get('ID'))) {
                Ext.MessageBox.alert('Claim Processing', 'Diagnosis already exists for this claim !');
                return;
            }
        }

        FillClaimDiagnosis();
    }

}

function FillClaimDiagnosis() {

    var flag = 1;
    var count = 1;
    var cnt = 1;
    var PrimKey = Ext.getCmp('Claims').selectedIndex;
    var ClaimProcessDiagnosisList = Ext.getCmp('ClaimProcessDiagnosisList');
    var ClaimProcessActivityDtlList = Ext.getCmp('ClaimProcessActivityDtlList');
    ClaimProcessDiagnosisList.storeId += (Ext.getCmp('ClaimProcessActivityList').storeId) + 1;

    var newRecord = new ClaimProcessDiagnosisList.recordType({
        ID: ClaimProcessDiagnosisList.storeId,
        SerialNo: ClaimProcessDiagnosisList.storeId,
        Claim_Code: PrimKey == undefined ? 1 : PrimKey,
        TypeCode: Ext.getCmp('NewActivity-TypeCode').getValue(),
        TypeName: (Ext.getCmp('NewActivity-TypeCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-TypeCode').lastSelectionText),
        ActivityTypeCode: JClaimActiviyType,
        ActivityTypeName: JClaimActiviyName,
        //VersionCode: Ext.getCmp('NewActivity-VersionCode').getValue(),
        //VersionName: Ext.getCmp('NewActivity-VersionCode').lastSelectionText,
        DetailCode: Ext.getCmp('NewActivity-DetailCode').getValue(),
        DetailName: Ext.getCmp('NewActivity-DetailCode').lastSelectionText,
        Description: Ext.getCmp('NewActivity-Description').getValue(),
        LongDescription: Ext.getCmp('NewActivity-LongDescription').getValue(),
        NetPrice: Ext.getCmp('NewActivity-NetPrice').getValue(),
        TariffDetailCode: Ext.getCmp('NewActivity-TariffDetailCode').getValue(),
        TariffDetailName: (Ext.getCmp('NewActivity-TariffDetailCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-TariffDetailCode').lastSelectionText),
        ProviderInternalDesc: Ext.getCmp('NewActivity-ProviderInternalDesc').getValue(),
        Price: Ext.getCmp('NewActivity-Price').getValue(),
        Qty: Ext.getCmp('NewActivity-Qty').getValue(),
        DiscountAmount: Ext.getCmp('NewActivity-DiscountAmount').getValue(),
        CoinsuranceAmount: Ext.getCmp('NewActivity-CoinsuranceAmount').getValue(),
        DeductibleAmount: Ext.getCmp('NewActivity-DeductibleAmount').getValue(),
        Total: Ext.getCmp('NewActivity-Total').getValue(),
        BenefitIDCode: Ext.getCmp('NewActivity-BenefitIDCode').getValue(),
        BenefitIDName: (Ext.getCmp('NewActivity-BenefitIDCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-BenefitIDCode').lastSelectionText),
        BenefitName: Ext.getCmp('NewActivity-BenefitName').getValue(),
        ActivityStatusCode: Ext.getCmp('NewActivity-ActivityStatusCode').getValue(),
        ActivityStatusName: (Ext.getCmp('NewActivity-ActivityStatusCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-ActivityStatusCode').lastSelectionText),
        DiscountPercentage: Ext.getCmp('NewActivity-DiscountPercentage').getValue(),
        DenialCode: Ext.getCmp('NewActivity-DenialCode').getValue(),
        DenialName: (Ext.getCmp('NewActivity-DenialCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-DenialCode').lastSelectionText),
        ShortDescription: '',
        CDCode: Ext.getCmp('NewActivity-CDCode').getValue(),
        CDName: (Ext.getCmp('NewActivity-CDCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-CDCode').lastSelectionText),
        ClinicianName: Ext.getCmp('NewActivity-ClinicianName').getValue(),
        TreatmentTypeCode: Ext.getCmp('NewActivity-TreatmentTypeCode').getValue(),
        TreatmentTypeName: (Ext.getCmp('NewActivity-TreatmentTypeCode').lastSelectionText == undefined ? '' : Ext.getCmp('NewActivity-TreatmentTypeCode').lastSelectionText),
        DenailValue: Ext.getCmp('NewActivity-DenailValue').getValue(),
        ActivityChecked: JActivityTypeChecked,
        RequestAmount: Ext.getCmp('NewActivity-RequestAmount').getValue(),
        RequestQty: Ext.getCmp('NewActivity-RequestQty').getValue(),
        CustomerCode: login.CompanyCode,
        LocationCode: login.LocationCode,
        CompanyCode: login.CompanyCode,
        ProcessDiagnosisRemarksList: '',
        IsNew: true,
        IsDirty: true,
        IsDeleted: false,
        IsSavable: true,
        IsValid: true
    });
    var EditProcessDiagnosisList = Ext.getCmp('EditProcessDiagnosisList');
    var ProcessDiagnosisRemarksList = Ext.getCmp('ProcessDiagnosisRemarksList');
    for (var pcnt = 0; pcnt < EditProcessDiagnosisList.store.getCount() ; pcnt++) {

        var PopupRecord = EditProcessDiagnosisList.store.getAt(pcnt);

        var newDtlRecord = new ProcessDiagnosisRemarksList.recordType({
            ID: ActivityRemarkCount,
            SerialNo: ActivityRemarkCount,
            Activity_Detail_Code: ClaimProcessDiagnosisList.storeId,
            Remarks: PopupRecord.get('Remarks'),
            ISAdded: 1,
            ErrorCode: PopupRecord.get('ErrorCode'),
            CompanyCode: 1,
            LocationCode: 1,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true


        });
        ActivityRemarkCount++;
        if (EditProcessDiagnosisList.store.getCount() > 0) {
            ProcessDiagnosisRemarksList.stopEditing();
            ProcessDiagnosisRemarksList.store.add(newDtlRecord);
            ProcessDiagnosisRemarksList.store.totalLength = ProcessDiagnosisRemarksList.store.getTotalCount() + 1;
            ProcessDiagnosisRemarksList.pageBar.updateInfo();
        }
    }
    ClaimProcessDiagnosisList.stopEditing();
    ClaimProcessDiagnosisList.store.add(newRecord);
    ClaimProcessDiagnosisList.store.totalLength = ClaimProcessDiagnosisList.store.getTotalCount() + 1;
    ClaimProcessDiagnosisList.pageBar.updateInfo();

    var ClaimProcessDiagnosisList = Ext.getCmp('ClaimProcessDiagnosisList');
    ClaimProcessDiagnosisList.store.load({
        params: {
            start: 0,
            limit: ClaimProcessDiagnosisList.pageSize
        }
    });



    if (NewActivityWindow == 2) {
        AddDiagnosisActivityFormWindow.close();
        AddDiagnosisActivityFormWindow = '';
    }
    if (NewActivityWindow == 1) {
        ClearReviewDiagnosis();
    }

}



function BundleMaster(form, login) {
    if (!form.isView) {
        var GrossPrice = Ext.getCmp('BundleMaster-BundlePrice');
        var Discount = Ext.getCmp('BundleMaster-Discount');
        var NetValue = Ext.getCmp('BundleMaster-NetValue');
        if (Discount) Discount.on('valid', BundleMasterNetPriceCal, this);
    }
}

function BundleMasterNetPriceCal(Field) {
    var total;
    var GrossPrice = Ext.getCmp('BundleMaster-BundlePrice');
    var Discount = Ext.getCmp('BundleMaster-Discount');
    var NetValue = Ext.getCmp('BundleMaster-NetValue');

    if (GrossPrice.getValue() <= Discount.getValue()) {
        Discount.clear;
        total = GrossPrice.getValue();
    }

    total = (GrossPrice.getValue()) - ((GrossPrice.getValue() * Discount.getValue()) / 100);

    NetValue.setValue(total);

}


function MEProviderContact(form, login) {


    if (!form.isView) {

        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('MEProviderContact-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
        }

        var M1 = Ext.getCmp('MEProviderContact-Mobile1');
        var M2 = Ext.getCmp('MEProviderContact-Mobile2');
        var Em = Ext.getCmp('MEProviderContact-EMail');

        var Name = Ext.getCmp('MEProviderContact-Name');
        var AlternativeName = Ext.getCmp('MEProviderContact-AlternativeName');


        if (Name) Name.on('change', function (field, newval, odlval) {
            AlternativeName.setValue(field.getValue());
        }, this);

        var IncludeInNotifications = Ext.getCmp('MEProviderContact-IncludeInNotifications');
        if (!form.isView) {
            IncludeInNotifications.on('check', onMEIncludeInNotificationsCheck, this);
        }
    }
}
//checked
function onMEIncludeInNotificationsCheck(checkBox, checked) {
    var Mobile1 = Ext.getCmp('MEProviderContact-Mobile1');
    var Mobile2 = Ext.getCmp('MEProviderContact-Mobile2');
    var EMail = Ext.getCmp('MEProviderContact-EMail');
    if (checked == true) {

        Mobile1.allowBlank = false;
        Mobile1.isValid();

        Mobile2.allowBlank = false;
        Mobile2.isValid();

        EMail.allowBlank = false;
        EMail.isValid();

    }
    else {

        Mobile1.allowBlank = true;
        Mobile1.clearInvalid();

        Mobile2.allowBlank = true;
        Mobile2.clearInvalid();

        EMail.allowBlank = true;
        EMail.clearInvalid();
    }
}
//checked
function MEProviderLicencesMapping(form, login) {

    if (!form.isView) {


        if (isAdditinalInfoValue != 0) {
            var ProviderCode = Ext.getCmp('MEProviderLicencesMapping-ProviderCode');
            ProviderCode.setComboValue(isAdditinalInfoValue);
            ProviderCode.disable();
            Ext.getCmp('MEProviderLicencesMapping-ProviderAlternativeName').setValue(isAdditinalInfoRecord.get('ProviderAlternativeName'));
            Ext.getCmp('MEProviderLicencesMapping-ProviderTypeName').setValue(isAdditinalInfoRecord.get('ProviderTypeName'));
            Ext.getCmp('MEProviderLicencesMapping-HeadOfficeName').setValue(isAdditinalInfoRecord.get('HeadOfficeName'));
            Ext.getCmp('MEProviderLicencesMapping-IsFastTraceProvider').setValue(isAdditinalInfoRecord.get('IsFastTraceProvider'));
            Ext.getCmp('MEProviderLicencesMapping-NOB').setValue(isAdditinalInfoRecord.get('NOB'));
            Ext.getCmp('MEProviderLicencesMapping-ClaimQuoteTypeName').setValue(isAdditinalInfoRecord.get('ClaimQuoteTypeName'));
            Ext.getCmp('MEProviderLicencesMapping-ProviderStatusName').setValue(isAdditinalInfoRecord.get('ProviderStatusName'));
        }

        if (form.selectedIndex == -1) {

            //var ValidFrom = Ext.getCmp('MEProviderLicencesMapping-ValidFrom');
            //var ToDate = Ext.getCmp('MEProviderLicencesMapping-ValidTo');
            //ToDate.setValue((new Date()).add(Date.YEAR, 1).format(login.jsdateformat));

            ////ValidFrom.on('blur', function (field, newval, odlval) {
            ////    ToDate.setValue((field.getValue()).add(Date.YEAR, 1).format(login.jsdateformat));
            ////}, this);
        }
        var HasGovernmentLicense = Ext.getCmp('MEProviderLicencesMapping-HasGovernmentLicense');
        if (form.selectedIndex == -1)
            HasGovernmentLicense.setValue(1);
        HasGovernmentLicense.on('check', onMedicalHasGovernmentCheck, this);
        var LicenceIDCode = Ext.getCmp('MEProviderLicencesMapping-LicenceIDCode');
        var ProviderActivityType = Ext.getCmp('MEProviderLicencesMapping-ProviderActivityType');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=" + ProviderActivityType.getValue() + " and FILTERTYPE=1";
        }, this);

        var ProviderCode = Ext.getCmp('MEProviderLicencesMapping-ProviderCode');
        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "PRO.PROVIDERTYPE in (0)";
        }, this);
    }
}

function onMedicalHasGovernmentCheck(checkBox, checked) {
    var HasGovernmentLicense = Ext.getCmp('MEProviderLicencesMapping-HasGovernmentLicense');
    var LicenceIDCode = Ext.getCmp('MEProviderLicencesMapping-LicenceIDCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}

/*function onPbmproviderHasGovernmentLicenseCheck(checkBox, checked) {
    var LicenceIDCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceIDCode');
    var LicenceTypeCode = Ext.getCmp('PBMProviderLicencesMapping-LicenceTypeCode');
    if (checked == true) {
        LicenceIDCode.enable(); LicenceIDCode.allowBlank = false; LicenceIDCode.isValid();
        LicenceTypeCode.enable(); LicenceTypeCode.allowBlank = false; LicenceTypeCode.isValid();
    }
    else {
        LicenceIDCode.clearValue(); LicenceIDCode.allowBlank = true; LicenceIDCode.isValid(); LicenceIDCode.disable();
        LicenceTypeCode.clearValue(); LicenceTypeCode.allowBlank = true; LicenceTypeCode.isValid(); LicenceTypeCode.disable();
    }
}*/


function MEInsuranceCompany(form, login) {
    if (!form.isView) {

        var InsuranceTypeCode = Ext.getCmp('MEInsuranceCompany-InsuranceTypeCode');
        InsuranceTypeCode.setComboValue(2);

        var LicenceIDCode = Ext.getCmp('MEInsuranceCompany-LicenceIDCode');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=0 and FILTERTYPE=7";
        }, this);

        var DhaLicenseCode = Ext.getCmp('MEInsuranceCompany-DhaLicenseCode');
        if (DhaLicenseCode) DhaLicenseCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=1 and FILTERTYPE=7";
        }, this);

        var PayerHaddLicenceCode = Ext.getCmp('MEInsuranceCompany-PayerHaddLicenceCode');
        if (PayerHaddLicenceCode) PayerHaddLicenceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=0 and FILTERTYPE=7";
        }, this);

        var PayerDhaLicenceCode = Ext.getCmp('MEInsuranceCompany-PayerDhaLicenceCode');
        if (PayerDhaLicenceCode) PayerDhaLicenceCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=1 and FILTERTYPE=7";
        }, this);
    }
}

function MEInsuranceCompanyContact(form, login) {
    if (!form.isView) {
        if (isAdditinalInfoValue != 0) {
            var InsuranceCode = Ext.getCmp('MEInsuranceCompanyContact-InsuranceCode');
            InsuranceCode.setComboValue(isAdditinalInfoValue);
            InsuranceCode.disable();
        }
    }
}

function TableOfBenefit(form, login) {
}

function TableofBenefitSearchbuttonhandler(form, login) {

    var Membercode = Ext.getCmp('TableOfBenefit-MemberCode');
    var CategoryCode = Ext.getCmp('TableOfBenefit-CategoryCode');
    var GroupCode = Ext.getCmp('TableOfBenefit-GroupCode');
    var BenefitCode = Ext.getCmp('TableOfBenefit-BenefitCode');

    var FilterQry = '';

    if (Membercode.getValue() !== '' && Membercode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "MEM.MEMBER_CODE  =" + Membercode.editValue + " ";
        else
            FilterQry += " and MEM.MEMBER_CODE  =" + Membercode.editValue + " ";
    }

    if (CategoryCode.getValue() !== '' && CategoryCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "MEM.CATEGORY_CODE  =" + CategoryCode.editValue + " ";
        else
            FilterQry += " and MEM.CATEGORY_CODE  =" + CategoryCode.editValue + " ";
    }

    if (GroupCode.getValue() !== '' && GroupCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "MEM.GROUP_CODE  =" + GroupCode.editValue + " ";
        else
            FilterQry += " and MEM.GROUP_CODE  =" + GroupCode.editValue + " ";
    }

    if (BenefitCode.getValue() !== '' && BenefitCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "MEMPOL.BENEFITCODE  =" + BenefitCode.editValue + " ";
        else
            FilterQry += " and MEMPOL.BENEFITCODE  =" + BenefitCode.editValue + " ";
    }

    DetailStore = Ext.getCmp('TableOfBenefitDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Network.MemberPortal.TableOfBenefitDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }

}

function TableofBenefitClearbuttonhandler(from, login) {

    var Membercode = Ext.getCmp('TableOfBenefit-MemberCode');
    var CategoryCode = Ext.getCmp('TableOfBenefit-CategoryCode');
    var GroupCode = Ext.getCmp('TableOfBenefit-GroupCode');
    var BenefitCode = Ext.getCmp('TableOfBenefit-BenefitCode');
    var TableOfBenefitDtlList = Ext.getCmp('TableOfBenefitDtlList');

    Membercode.clearValue();
    CategoryCode.clearValue();
    GroupCode.clearValue();
    BenefitCode.clearValue();

    onBusinessTypeclear('TableOfBenefitDtlList');

    TableOfBenefitDtlList.store.load({
        params: {
            start: 0,
            limit: TableOfBenefitDtlList.pageSize
        }
    });
}

function ProviderNetwork(form, login) {
}

function ProviderNetworkSearchbuttonhandler(form, login) {

    var SpecialtyCode = Ext.getCmp('ProviderNetwork-SpecialtyCode');
    var CountryCode = Ext.getCmp('ProviderNetwork-CountryCode');
    var EmirateCode = Ext.getCmp('ProviderNetwork-EmirateCode');
    //var BenefitCode = Ext.getCmp('TableOfBenefit-BenefitCode');
    var ProviderTypeCode = Ext.getCmp('ProviderNetwork-ProviderTypeCode');
    var NetworkCode = Ext.getCmp('ProviderNetwork-NetworkCode');
    var ProviderArea = Ext.getCmp('ProviderNetwork-ProviderArea');

    var FilterQry = '';

    if (ProviderTypeCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pro.PROVIDERTYPE  =" + ProviderTypeCode.getValue() + " ";
        else
            FilterQry += " and pro.PROVIDERTYPE  =" + ProviderTypeCode.getValue() + " ";
    }

    if (NetworkCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pron.NETWORKCODE  =" + NetworkCode.getValue() + " ";
        else
            FilterQry += " and pron.NETWORKCODE  =" + NetworkCode.getValue() + " ";
    }

    if (ProviderArea.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "pron.PROVIDERAREA  =" + ProviderArea.getValue() + " ";
        else
            FilterQry += " and pron.PROVIDERAREA  =" + ProviderArea.getValue() + " ";
    }

    if (SpecialtyCode.getValue() !== '') {
        if (FilterQry == '')
            FilterQry += "GEN.CONSTANTVALUE  =" + SpecialtyCode.getValue() + " ";
        else
            FilterQry += " and GEN.CONSTANTVALUE  =" + SpecialtyCode.getValue() + " ";
    }

    if (CountryCode.getValue() !== '' && CountryCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "pro.COUNTRYCODE  =" + CountryCode.getValue() + " ";
        else
            FilterQry += " and pro.CountryCode  =" + CountryCode.getValue() + " ";
    }

    if (EmirateCode.getValue() !== '' && EmirateCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += "pro.STATE  =" + EmirateCode.getValue() + " ";
        else
            FilterQry += " and pro.STATE  =" + EmirateCode.getValue() + " ";
    }

    DetailStore = Ext.getCmp('ProviderNetworkDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Network.MemberPortal.ProviderNetworkDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }

}
function ProviderNetworkClearbuttonhandler(form, login) {
    var SpecialtyCode = Ext.getCmp('ProviderNetwork-SpecialtyCode');
    var CountryCode = Ext.getCmp('ProviderNetwork-CountryCode');
    var EmirateCode = Ext.getCmp('ProviderNetwork-EmirateCode');
    var ProviderTypeCode = Ext.getCmp('ProviderNetwork-ProviderTypeCode');
    var NetworkCode = Ext.getCmp('ProviderNetwork-NetworkCode');
    var ProviderArea = Ext.getCmp('ProviderNetwork-ProviderArea');


    SpecialtyCode.setValue(null);
    CountryCode.setValue(null);
    EmirateCode.setValue(null);
    ProviderTypeCode.setValue(null);
    NetworkCode.setValue(null);
    ProviderArea.setValue(null);

    var FilterQry = '';
    DetailStore = Ext.getCmp('ProviderNetworkDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Network.MemberPortal.ProviderNetworkDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }

}


var JMailHistoryDetLoad = false, JMailHistoryViewLoad = false, JAddtoRemarksList = '', TempCoInsuranceBalance = 0, TempCoInsuranceBalance = 0, TempEligibleBalSave = 0;

function MEDPriorAuthorization(form, login1) {

    if (Ext.getCmp('PriorAuthApprovalHistoryDtlList'))
        PriorAuthApprovalHistoryDtlConfig = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getColumnModel().config;

    for (var i = 0; i < PriorAuthApprovalHistoryDtlConfig.length; i++)
        if (!PriorAuthApprovalHistoryDtlConfig[i].actions && !PriorAuthApprovalHistoryDtlConfig[i].checkbox) PriorAuthApprovalHistoryDtlConfig[i].renderer = PriorAuthApprovalHistoryDtlRender;


    if (Ext.getCmp('PriorViewActivityList'))
        PriorViewActivityConfig = Ext.getCmp('PriorViewActivityList').getColumnModel().config;

    for (var i = 0; i < PriorViewActivityConfig.length; i++)
        if (!PriorViewActivityConfig[i].actions && !PriorViewActivityConfig[i].checkbox) PriorViewActivityConfig[i].renderer = PriorViewActivityConfigRender;


    var Provider_Code = Ext.getCmp('MEDPriorAuthorization-ProviderIDCode');
    if (Provider_Code) Provider_Code.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "IM.PROVIDERTYPE in (0) AND  im.PROVIDERCODE in (select PROVIDERCODE from ME_DISTRIBUTE_PROVIDER Det join ME_DISTRIBUTE_CLAIM Mas on  Mas.DISTRIBUTE_CODE=Det.DISTRIBUTE_CODE and Mas.DOCTORCODE=" + login.UserCode + " ) ";
    }, this);

    var LicenseCode = Ext.getCmp('MEDPriorAuthorization-LicenseCode');
    if (LicenseCode) LicenseCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        if (Provider_Code.editValue > 0)
            evt.combo.store.baseParams.filter = "CLI.ProviderCode=" + Provider_Code.editValue + "";
        else
            evt.combo.store.baseParams.filter = "1=1";
    }, this);

    var PriorAuthApprovalHistoryDtlList = Ext.getCmp('PriorAuthApprovalHistoryDtlList');
    PriorAuthApprovalHistoryDtlList.on('rowclick', function (grid, rowIndex, e) {
        var Record = grid.store.getAt(rowIndex);
        CollectionsSearchSelectID = Record.get('ID');

    }, this);

    var PriorAuthApprovalHistoryDtlList = Ext.getCmp('PriorAuthApprovalHistoryDtlList');
    PriorAuthApprovalHistoryDtlList.getColumnModel().getColumnById('IsClaimSubmitted').editable = false;
    var PriorViewActivityList = Ext.getCmp('PriorViewActivityList');
    PriorViewActivityList.getColumnModel().getColumnById('ClaimStatus').editable = false;

    var AuthorizedStatusCode = Ext.getCmp('MEDPriorAuthorization-AuthorizedStatusCode');
    AuthorizedStatusCode.constantFilter = '0,8';

    var AuthorizedStatusCode = Ext.getCmp('MEDPriorAuthorization-PaymentStatusCode');
    AuthorizedStatusCode.constantFilter = '1,2,3';

    Ext.getCmp('MEDPriorAuthorization-CardNo').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-ProviderIDCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-InsuranceCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-LicenseCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-ParentName').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-EmiratesID').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-Mobile_Number').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-Claimref').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-TStartDate').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-TEndDate').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-TreatmentTypeCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-MedicalFile').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-PaymentStatusCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);
    Ext.getCmp('MEDPriorAuthorization-AuthorizedStatusCode').on('specialkey', function (field, e) {
        if (e.getKey() == e.ENTER) {
            MedPriorEnterKeySearch();
        }
    }, this);

}
function ClaimReSubmissionprint(form, login) {

    if (CollectionsSearchSelectID == '' || Ext.isEmpty(CollectionsSearchSelectID)) {
        Ext.MessageBox.alert(login.modulename, "Please Select Record To Print");
        return;
    }
    else {
        PrimKey = CollectionsSearchSelectID;
    }
    var WidgetObj = Ext.getCmp('ID_MEDPRIORAUTHORIZATION').scope;
    Ext.MessageBox.confirm(login.modulename, 'Are You sure to Print', function (button) {
        if (button == 'yes') {
            var RepObj = new Ext.biz.WidgetInfo();
            RepObj.immediatePrintClick(PrimKey, 'Re-Claim Submission', 'ID_MEDPRIORAUTHORIZATION', '1');
            // WidgetObj.immediatePrintClick(1);
        }

    }, this);

}

function PriorAuthApprovalHistoryDtlRender(value, metaData, record, rowIndex, colIndex, store) {

    if (record.get('PaymentStatusCode') == 1) {//Paid
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('PaymentStatusCode') == 2) {//Partial
        return '<span style="font-weight:bold; color:orange;">' + value + '</span>';
    }
    else if (record.get('PaymentStatusCode') == 3) {//Rejected
        return '<span style="font-weight:bold; color:red;">' + value + '</span>';
    }
    else {
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    }
}

function PriorViewActivityConfigRender(value, metaData, record, rowIndex, colIndex, store) {

    if (record.get('StatusCode') == 1) {//Paid
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';
    }
    else if (record.get('StatusCode') == 3) {//Partial
        return '<span style="font-weight:bold; color:orange;">' + value + '</span>';
    }
    else if (record.get('StatusCode') == 2) {//Rejected
        return '<span style="font-weight:bold; color:red;">' + value + '</span>';
    }
    else {
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    }
}

function OnPriorMemberCodeChange(combo, record, index) {
    var FilterQry = '';
    var MemberCode = Ext.getCmp('MEDPriorAuthorization-MemberIDCode');
    JMemberName = record.get('Member_Name');
}

function OnPriorClaimsPolicyCodeChange(combo, record, index) {
    var FilterQry = '';
    JProviderTariffType = record.get('ProviderTariffType');
}

var ClaimFilterQry = '';
function PriorSearchHistory(form, login) {


    var FilterQry = '1=1';
    var Claimref = Ext.getCmp('MEDPriorAuthorization-Claimref');
    var CardNo = Ext.getCmp('MEDPriorAuthorization-CardNo');
    var ParentName = Ext.getCmp('MEDPriorAuthorization-ParentName');
    var EmiratesID = Ext.getCmp('MEDPriorAuthorization-EmiratesID');
    var Mobile_Number = Ext.getCmp('MEDPriorAuthorization-Mobile_Number');
    var TStartDate = Ext.getCmp('MEDPriorAuthorization-TStartDate');
    var TEndDate = Ext.getCmp('MEDPriorAuthorization-TEndDate');
    var TreatmentTypeCode = Ext.getCmp('MEDPriorAuthorization-TreatmentTypeCode');
    var MedicalFile = Ext.getCmp('MEDPriorAuthorization-MedicalFile');
    var LicenseCode = Ext.getCmp('MEDPriorAuthorization-LicenseCode');
    var AuthorizedStatusCode = Ext.getCmp('MEDPriorAuthorization-AuthorizedStatusCode');
    var ProviderIDCode = Ext.getCmp('MEDPriorAuthorization-ProviderIDCode');
    var ProviderName = Ext.getCmp('MEDPriorAuthorization-ProviderName');
    var InsuranceCode = Ext.getCmp('MEDPriorAuthorization-InsuranceCode');
    var PaymentStatusCode = Ext.getCmp('MEDPriorAuthorization-PaymentStatusCode');

    onBusinessTypeclear('PriorAuthApprovalHistoryDtlList');
    onBusinessTypeclear('PriorViewActivityList');
    onBusinessTypeclear('PriorViewDiagnosisList');

    if (ProviderIDCode.getValue() != '' && ProviderIDCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += " Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderIDCode.getValue() + ") ";
        else
            FilterQry += " and Pro.LICENCEID  IN  (SELECT LICENCEID FROM ME_PROVIDERS WHERE PROVIDERCODE=" + ProviderIDCode.getValue() + ") ";
    }

    if (InsuranceCode.getValue() != '' && InsuranceCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "CRH.PAYERCODE=" + InsuranceCode.editValue + " ";
        else
            FilterQry += " and CRH.PAYERCODE =" + InsuranceCode.editValue + " ";
    }

    if (Claimref.getValue() !== '' && Claimref.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += ("upper (CRH.CLAIMREF_NO)  like upper( '%" + Claimref.getValue() + "%' )");
        else
            FilterQry += (" and upper (CRH.CLAIMREF_NO)  like upper( '%" + Claimref.getValue() + "%' )");
    }

    if (CardNo.getValue() != '' && CardNo.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "upper(CRH.CARDID) like '%" + CardNo.getValue().toUpperCase() + "%' ";
        else
            FilterQry += " and upper(CRH.CARDID) like '%" + CardNo.getValue().toUpperCase() + "%' ";
    }

    if (ParentName.getValue() != '' && ParentName.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "upper(CRH.MEMBERNAME) like '%" + ParentName.getValue().toUpperCase() + "%' ";
        else
            FilterQry += " and upper(CRH.MEMBERNAME) like '%" + ParentName.getValue().toUpperCase() + "%' ";
    }


    if (EmiratesID.getValue() != '' && EmiratesID.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "upper(CRH.EMIRATEID) like '%" + EmiratesID.getValue().toUpperCase() + "%' ";
        else
            FilterQry += " and upper(CRH.EMIRATEID) like '%" + EmiratesID.getValue().toUpperCase() + "%' ";
    }

    if (Mobile_Number.getValue() != '' && Mobile_Number.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "upper(CRH.MOBLIENO) like '%" + Mobile_Number.getValue().toUpperCase() + "%' ";
        else
            FilterQry += " and upper(CRH.MOBLIENO) like '%" + Mobile_Number.getValue().toUpperCase() + "%' ";
    }

    if (TStartDate.getValue() != '' && TStartDate.getValue() != null && TEndDate.getValue() != '' && TEndDate.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "  CRH.ENCOUNTER_START_DATE between TO_DATE('" + TStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + TEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        else
            FilterQry += " and  CRH.ENCOUNTER_START_DATE between TO_DATE('" + TStartDate.getValue().format('d-m-y') + "','dd/mm/RR') and TO_DATE('" + TEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
    }
    else {
        if (TStartDate.getValue() != '' && TStartDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += "  CRH.ENCOUNTER_START_DATE>=TO_DATE('" + TStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and  CRH.ENCOUNTER_START_DATE>=TO_DATE('" + TStartDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
        if (TEndDate.getValue() != '' && TEndDate.getValue() != null) {
            if (FilterQry == '')
                FilterQry += "  CRH.ENCOUNTER_START_DATE<=TO_DATE('" + TEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
            else
                FilterQry += " and  CRH.ENCOUNTER_START_DATE<=TO_DATE('" + TEndDate.getValue().format('d-m-y') + "','dd/mm/RR')";
        }
    }

    if (TreatmentTypeCode.lastSelectionText != '' && TreatmentTypeCode.lastSelectionText != undefined && TreatmentTypeCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "CRH.TREATMENT_TYPE=" + TreatmentTypeCode.getValue() + " ";
        else
            FilterQry += " and CRH.TREATMENT_TYPE =" + TreatmentTypeCode.getValue() + " ";
    }


    if (MedicalFile.getValue() != '' && MedicalFile.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "upper(CRH.MEDICALFILE) like '%" + MedicalFile.getValue().toUpperCase() + "%' ";
        else
            FilterQry += " and CRH.MEDICALFILE like '%" + MedicalFile.getValue().toUpperCase() + "%' ";
    }

    if (LicenseCode.getValue() != '' && LicenseCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "CRH.CDCODE=" + LicenseCode.editValue + " ";
        else
            FilterQry += " and CRH.CDCODE =" + LicenseCode.editValue + " ";
    }

    if (AuthorizedStatusCode.getValue() != '' && AuthorizedStatusCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "CRH.STATUSTYPE=" + AuthorizedStatusCode.getValue() + " ";
        else
            FilterQry += " and CRH.STATUSTYPE =" + AuthorizedStatusCode.getValue() + " ";
    }

    if (PaymentStatusCode.getValue() != '' && PaymentStatusCode.getValue() != null) {
        if (FilterQry == '')
            FilterQry += "CRH.PaymentStatusCode=" + PaymentStatusCode.editValue + " ";
        else
            FilterQry += " and CRH.PaymentStatusCode =" + PaymentStatusCode.editValue + " ";
    }

    ClaimFilterQry = FilterQry;

}

function PriorSearchShowAllHistory(form, login) {

    PriorSearchHistory();
    var FilterQry = ClaimFilterQry;

    FilterQry = encodeURIComponent(FilterQry);
    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100
            }
        });
    }


}

function MedPriorEnterKeySearch(form, login) {

    PriorSearchHistory();
    var FilterQry = ClaimFilterQry;
    FilterQry = encodeURIComponent(FilterQry);

    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100
            }
        });
    }
}

function PriorShowcrntproviderhistory(form, login) {
}

function PriorSearchShowMemberHistory(form, login) {
}

function PriorProcessClear(form, login) {


    Ext.getCmp('MEDPriorAuthorization-Claimref').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-CardNo').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-ParentName').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-EmiratesID').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-Mobile_Number').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-TStartDate').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-TEndDate').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-TreatmentTypeCode').clearValue();
    Ext.getCmp('MEDPriorAuthorization-MedicalFile').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-ProviderIDCode').clearValue();
    Ext.getCmp('MEDPriorAuthorization-ProviderName').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-InsuranceCode').clearValue();
    Ext.getCmp('MEDPriorAuthorization-LicenseCode').clearValue();
    Ext.getCmp('MEDPriorAuthorization-ClinicianName').setValue(null);
    Ext.getCmp('MEDPriorAuthorization-AuthorizedStatusCode').clearValue();
    Ext.getCmp('MEDPriorAuthorization-PaymentStatusCode').clearValue();

    var GridFunction = Ext.getCmp('PriorViewActivityList');
    GridFunction.store.pruneModifiedRecords = true;
    GridFunction.store.added = [];
    GridFunction.store.modified = [];
    GridFunction.store.removeAll();
    GridFunction.store.pruneModifiedRecords = false;
    GridFunction.store.totalLength = 0;
    GridFunction.pageBar.updateInfo();

    var GridFunction1 = Ext.getCmp('PriorViewDiagnosisList');
    GridFunction1.store.pruneModifiedRecords = true;
    GridFunction1.store.modified = [];
    GridFunction1.store.removeAll();
    GridFunction1.store.pruneModifiedRecords = false;
    GridFunction1.store.totalLength = 0;
    GridFunction1.pageBar.updateInfo();

    FilterQry = '1=2';
    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }

    /*
    NetworkFilterQry = "2=1";

    NetworkDetailStore = Ext.getCmp('PriorSearchSelectedNetworkDtlList').getStore();

    var DetNetworkUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorSearchSelectedNetworkDtl&filter=" + NetworkFilterQry;
    if (NetworkDetailStore) {
        NetworkDetailStore.proxy = new Ext.data.HttpProxy({
            url: DetNetworkUrl
        });
        NetworkDetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }


    ApprovalHistoryFilterQry = "2=1";

    ApprovalHistoryStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var ApprovalHistoryUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + ApprovalHistoryFilterQry;
    if (ApprovalHistoryStore) {
        ApprovalHistoryStore.proxy = new Ext.data.HttpProxy({
            url: ApprovalHistoryUrl
        });
        ApprovalHistoryStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
    */
    BenefitFilterQry = "2=1";

    BenefitDetailStore = Ext.getCmp('PriorSearchBenifitSummaryList').getStore();


    var BenefitDetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorSearchBenifitSummary&filter=" + BenefitFilterQry;
    if (BenefitDetailStore) {
        BenefitDetailStore.proxy = new Ext.data.HttpProxy({
            url: BenefitDetUrl
        });
        BenefitDetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}

function RepaymentPriorBtnHandler(form, login) {


}
function PriorSearchNew(form, login) {
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Claim Processing', 'Please wait until the Detail loads !');
        return;
    }
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEPriorApprovedClaims', Url = '/forms/Medical/MEPriorApprovedClaims.xml', PKey = -1, WidgetTitle = 'New Calim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}
function MEPriorApprovedClaims(form, login) {

    if (!form.isView) {

        var Diagnosis = Ext.getCmp('MEPriorApprovedClaims-Diagnosis');
        var Drugs = Ext.getCmp('MEPriorApprovedClaims-Drugs');
        var Procedures = Ext.getCmp('MEPriorApprovedClaims-Procedures');
        var DubaiServiceList = Ext.getCmp('MEPriorApprovedClaims-DubaiServiceList');
        var HCPCS = Ext.getCmp('MEPriorApprovedClaims-HCPCS');
        var StatusTypeCode = Ext.getCmp('MEPriorApprovedClaims-StatusTypeCode');
        StatusTypeCode.setComboValue(0);
        StatusTypeCode.disable();

        if (Diagnosis) Diagnosis.on('check', function (checkBox, checked) {
            if (checked) Drugs.setValue(false);
            if (checked) Procedures.setValue(false);
            if (checked) DubaiServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);

        if (Drugs) Drugs.on('check', function (checkBox, checked) {
            if (checked) Diagnosis.setValue(false);
            if (checked) Procedures.setValue(false);
            if (checked) DubaiServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);

        if (Procedures) Procedures.on('check', function (checkBox, checked) {
            if (checked) Diagnosis.setValue(false);
            if (checked) Drugs.setValue(false);
            if (checked) DubaiServiceList.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);

        if (DubaiServiceList) DubaiServiceList.on('check', function (checkBox, checked) {
            if (checked) Diagnosis.setValue(false);
            if (checked) Drugs.setValue(false);
            if (checked) Procedures.setValue(false);
            if (checked) HCPCS.setValue(false);
        }, this);

        if (HCPCS) HCPCS.on('check', function (checkBox, checked) {
            if (checked) Diagnosis.setValue(false);
            if (checked) Drugs.setValue(false);
            if (checked) Procedures.setValue(false);
            if (checked) DubaiServiceList.setValue(false);
        }, this);



        var RequestAmount = Ext.getCmp('MEPriorApprovedClaims-RequestAmount');
        var DeductableValue = Ext.getCmp('MEPriorApprovedClaims-DeductableValue');
        var Co_Ins_Value = Ext.getCmp('MEPriorApprovedClaims-Co_Ins_Value');
        var CoInsPercnt = Ext.getCmp('MEPriorApprovedClaims-OrginalPatientShare');
        var NewAmount = Ext.getCmp('MEPriorApprovedClaims-Total');
        var RemainGrossAmount = Ext.getCmp('MEPriorApprovedClaims-RemainGrossAmount');
        var RemainNetAmount = Ext.getCmp('MEPriorApprovedClaims-RemainNetAmount');


        RequestAmount.on('valid', onReRequestAmountValid, this);
        DeductableValue.on('valid', onReRequestAmountValid, this);
        CoInsPercnt.on('valid', onReRequestAmountValid, this);

        var MEDPriorClaimViewActivityList = Ext.getCmp('MEDPriorClaimViewActivityDtlList');//Sharing Detail Load: to Calculate Sharing Amount
        MEDPriorClaimViewActivityList.getStore().on('load', function (store, record, options) {
            onReActivityDetialLoad();
        }, this);


        var Provider_Code = Ext.getCmp('MEPriorApprovedClaims-Provider_Code');
        if (Provider_Code) Provider_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " pro.ProviderCode in (select PROVIDERCODE from ME_DISTRIBUTE_PROVIDER Det join ME_DISTRIBUTE_CLAIM Mas on  Mas.DISTRIBUTE_CODE=Det.DISTRIBUTE_CODE and Mas.DOCTORCODE=" + login.UserCode + " ) ";
        }, this);
    }


}

function onReActivityDetialLoad(form, login) {

    var RequestAmount = Ext.getCmp('MEPriorApprovedClaims-RequestAmount');
    var NewAmount = Ext.getCmp('MEPriorApprovedClaims-Total');
    var RemainGrossAmount = Ext.getCmp('MEPriorApprovedClaims-RemainGrossAmount');
    var RemainNetAmount = Ext.getCmp('MEPriorApprovedClaims-RemainNetAmount');

    var MEDPriorClaimViewActivityList = Ext.getCmp('MEDPriorClaimViewActivityDtlList');
    var DetNetvalue = 0, DetReqAmt = 0, DetCoIns = 0;
    for (var i = 0; i < MEDPriorClaimViewActivityList.store.getCount() ; i++) {
        var record = MEDPriorClaimViewActivityList.store.getAt(i);
        if (record.get('IsDeleted') == false) DetNetvalue += (1 * record.get('Total'));
        if (record.get('IsDeleted') == false) DetReqAmt += (1 * record.get('RequestAmount'));
    }

    var ReGrossAmt = Number(RequestAmount.getValue()) - Number(DetReqAmt);
    var ReNetsAmt = Number(NewAmount.getValue()) - Number(DetNetvalue);
    RemainGrossAmount.setValue(ReGrossAmt);
    RemainNetAmount.setValue(ReNetsAmt);

    if (Number(RemainGrossAmount.getValue()) > 0) {
        RemainGrossAmount.addClass('approve-editor');
    }
    else {
        RemainGrossAmount.removeClass('approve-editor');
    }

    if (Number(RemainNetAmount.getValue()) > 0) {
        RemainNetAmount.addClass('approve-editor');
    }
    else {
        RemainNetAmount.removeClass('approve-editor');
    }
}

function onReRequestAmountValid(field) {
    var RequestAmount = Ext.getCmp('MEPriorApprovedClaims-RequestAmount');
    var DeductableValue = Ext.getCmp('MEPriorApprovedClaims-DeductableValue');
    var Co_Ins_Value = Ext.getCmp('MEPriorApprovedClaims-Co_Ins_Value');
    var CoInsPercnt = Ext.getCmp('MEPriorApprovedClaims-OrginalPatientShare');
    var NewAmount = Ext.getCmp('MEPriorApprovedClaims-Total');

    var Total = 0, CoInsAmount = (Number(RequestAmount.getValue()) * Number(CoInsPercnt.getValue())) / 100;
    Co_Ins_Value.setValue(Number(DeductableValue.getValue()) + Number(CoInsAmount));
    NewAmount.setValue(Number(RequestAmount.getValue()) - Number(Co_Ins_Value.getValue()));

    onReActivityDetialLoad();
}



/*
function PriorSearchNew(form, login) {
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Prior Authorization Processing', 'Please wait until the Detail loads !');
        return;
    }
    JClaimType = 0;
    JAddtoRemarksList = '';
    var ProviderCode = Ext.getCmp('MEDPriorAuthorization-ProviderCode').getValue();
    var MemberCode = Ext.getCmp('MEDPriorAuthorization-MemberIDCode').getValue();
    if (MemberCode == null || MemberCode == '' || MemberCode == 0) {
        Ext.MessageBox.alert('Prior Authorization Processing', 'Please Select Member !');
        return true;
    }
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'MedPriorAuthorizationRequest',
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', MedPriorAuthorizationRequestComplete, this);
}
*/
function MedPriorAuthorizationRequestComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MedPriorAuthorizationRequestComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.MedPriorAuthorizationRequestForm = new Ext.form.FormPanel(responseText.MedPriorAuthorizationCofig);

    this.MedPriorAuthorizationRequestFormWindow = new Ext.Window({
        id: 'MedPriorAuthorizationRequestFormWindow',
        title: 'Add New Prior Authorization',
        closable: true,
        minimizable: false,
        width: this.MedPriorAuthorizationRequestForm.width + 10,
        height: this.MedPriorAuthorizationRequestForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.MedPriorAuthorizationRequestForm]
    });

    closeClaimWindow = this.MedPriorAuthorizationRequestFormWindow;
    this.MedPriorAuthorizationRequestForm.on('render', OnNewMedPriorAuthorizationRender, this);
    this.MedPriorAuthorizationRequestForm.on('actioncomplete', afterSaveProcessForm, this);
    this.MedPriorAuthorizationRequestForm.on('actionfailed', failedSaveProcessForm, this);
    this.MedPriorAuthorizationRequestFormWindow.on('beforeclose', onBeforecloseClaimProcessWindow, this);
    this.MedPriorAuthorizationRequestFormWindow.show();
}
function onChangeClaimDuration() {

    var Duration = Ext.getCmp('PriorClaims-Duration').getValue();
    var EndDate = Ext.getCmp('PriorClaims-EncounterEndDate');
    var StartDate = Ext.getCmp('PriorClaims-EncounterStartDate');
    var dateOffset = (24 * 60 * 60 * 1000) * (Duration - 1);
    EndDate.setValue(new Date(StartDate.getValue().getTime() + (dateOffset)));

}
function OnNewMedPriorAuthorizationRender(form, login) {

    var ProviderCode = Ext.getCmp('MEDPriorAuthorization-ProviderCode').editValue;
    var MemberIDCode = Ext.getCmp('MEDPriorAuthorization-MemberIDCode').editValue;
    var MemberIDName = Ext.getCmp('MEDPriorAuthorization-MemberIDName').getValue();
    var RelationCode = Ext.getCmp('MEDPriorAuthorization-RelationCode').editValue;
    var CategoryCode = Ext.getCmp('MEDPriorAuthorization-Category_Code').editValue;
    var MemberName = Ext.getCmp('MEDPriorAuthorization-Member_Name').getValue();
    var GenderCode = Ext.getCmp('MEDPriorAuthorization-GenderCode').editValue;
    var DateOfBirth = Ext.getCmp('MEDPriorAuthorization-Dateofbirth').getValue();
    var Membersincedate = Ext.getCmp('MEDPriorAuthorization-Membersincedate').getValue();
    var Validtodate = Ext.getCmp('MEDPriorAuthorization-Validtodate').getValue();
    var PolicyStartDate = Ext.getCmp('MEDPriorAuthorization-PolicyStartDate').getValue();
    var Age = Ext.getCmp('MEDPriorAuthorization-Age').getValue();

    var Emirates = Ext.getCmp('MEDPriorAuthorization-Emirates').getValue();
    var BenefitIDCode = Ext.getCmp('PriorClaims-BenefitIDCode');
    var ProvinceCode = Ext.getCmp('PriorClaims-ProvinceCode');
    var ProviderCode = Ext.getCmp('PriorClaims-ProviderCode');
    var Duration = Ext.getCmp('PriorClaims-Duration');
    if (Duration) Duration.on('blur', onChangeClaimDuration, this);
    var ClinicianCode = Ext.getCmp('PriorClaims-CDCode');
    if (ClinicianCode) ClinicianCode.on('beforequery', OnPriorClinicianFilterByProvider, this);
    if (ProviderCode) ProviderCode.on('beforequery', OnPriorClaimsPolicyFilterByMember, this);
    if (ProviderCode) ProviderCode.on('select', OnPriorClaimsPolicyCodeChange, this);
    Ext.getCmp('PriorClaims-RequestTypeCode').disable();
    if (JClaimType == 2) {
        Ext.getCmp('PriorClaims-RequestTypeCode').setComboValue(3);
    }
    else {
        Ext.getCmp('PriorClaims-RequestTypeCode').setComboValue(2);
    }

    Ext.getCmp('PriorClaims-RequestSourceCode').setComboValue(0);
    ProvinceCode.setComboValue('100000000000001994');
    Ext.getCmp('PriorClaims-MemberIDCode').setComboValue(MemberIDCode);
    Ext.getCmp('PriorClaims-MemberIDName').setValue(MemberIDName);
    Ext.getCmp('PriorClaims-RelationCode').setValue(RelationCode);
    Ext.getCmp('PriorClaims-Category_Code').setValue(CategoryCode);
    Ext.getCmp('PriorClaims-PolicyCode').setValue(Ext.getCmp('MEDPriorAuthorization-PolicyCode').getValue());
    Ext.getCmp('PriorClaims-Member_Name').setValue(MemberName);
    Ext.getCmp('PriorClaims-Age').setValue(Age);
    Ext.getCmp('PriorClaims-GenderCode').setComboValue(GenderCode);
    if (typeof (DateOfBirth) == 'string') var DateOfBirth = Date.parseDate(DateOfBirth, login.jsdateformat).format('d/m/Y');
    else DateOfBirth = DateOfBirth.format('d/m/Y');
    Ext.getCmp('PriorClaims-Dateofbirth').setValue(DateOfBirth);
    Ext.getCmp('PriorClaims-Membersincedate').setValue(Membersincedate);
    Ext.getCmp('PriorClaims-Validtodate').setValue(Validtodate);
    Ext.getCmp('PriorClaims-PolicyStartDate').setValue(PolicyStartDate);
    Ext.getCmp('PriorClaims-MemberIDCode').disable();
    Ext.getCmp('PriorClaims-RelationCode').disable();
    Ext.getCmp('PriorClaims-Category_Code').disable();
    Ext.getCmp('PriorClaims-Member_Name').disable();
    Ext.getCmp('PriorClaims-GenderCode').disable();
    Ext.getCmp('PriorClaims-Dateofbirth').disable();
    Ext.getCmp('PriorClaims-Membersincedate').disable();
    Ext.getCmp('PriorClaims-PolicyStartDate').disable();
    Ext.getCmp('PriorClaims-Validtodate').disable();
    Ext.getCmp('PriorClaims-Age').disable();
    var EnCounterStartDate = Ext.getCmp('PriorClaims-EncounterStartDate');
    var EncounterEndDate = Ext.getCmp('PriorClaims-EncounterEndDate');
    var DenialCode = Ext.getCmp('PriorClaims-DenialCode');
    var PolicyID = Ext.getCmp('MEDPriorAuthorization-PolicyId').getValue();
    Ext.getCmp('PriorClaims-PolicyId').setValue(PolicyID);

    EnCounterStartDate.on('valid', onPriorValidStartDate, this);
    EncounterEndDate.on('valid', onPriorValidEndDate, this);

    Ext.getCmp('PriorClaims-DurationTypeCode').setComboValue(0);


    Ext.getCmp('PriorProcessActivityList').unrowclick = true;
    Ext.getCmp('PriorProcessDiagnosisList').unrowclick = true;

    var StatusCode = Ext.getCmp('PriorClaims-StatusCode');
    Ext.getCmp('PriorClaims-DenialCode').disable();
    if (StatusCode) StatusCode.setComboValue(1);
    if (StatusCode) StatusCode.on('select', function (combo, record, options) {
        if (combo.getValue() == 3) {
            Ext.getCmp('PriorClaims-DenialCode').enable();
        }
        else {
            Ext.getCmp('PriorClaims-DenialCode').disable();
            Ext.getCmp('PriorClaims-DenialCode').clearValue();
        }
    }, this)
    if (StatusCode) StatusCode.on('clear', function (evt) {
        Ext.getCmp('PriorClaims-DenialCode').disable();
        Ext.getCmp('PriorClaims-DenialCode').clearValue();
    }, this);
    var Drugs = Ext.getCmp('PriorClaims-Drugs');
    var Procedure = Ext.getCmp('PriorClaims-Procedure');
    var ServiceList = Ext.getCmp('PriorClaims-ServiceList');
    var HCPCS = Ext.getCmp('PriorClaims-HCPCS');
    var Diagnosis = Ext.getCmp('PriorClaims-Diagnosis');
    var DubaiUnknownVersion = Ext.getCmp('PriorClaims-DubaiUnknownVersion');
    var RequestAmount = Ext.getCmp('PriorClaims-RequestAmount');
    var TreatmentType = Ext.getCmp('PriorClaims-TreatmentTypeCode');
    if (Diagnosis) Diagnosis.setValue(true);
    TreatmentType.setComboValue(1);
    Duration.disable();
    Ext.getCmp('PriorClaims-EncounterEndDate').disable();
    if (TreatmentType) TreatmentType.on('select', function (combo, record, options) {
        if (combo.getValue() == 1) {
            Duration.disable();
            Ext.getCmp('PriorClaims-EncounterEndDate').disable();
        }
        else {
            Duration.enable();
            Ext.getCmp('PriorClaims-EncounterEndDate').enable();
        }
    }, this);
    if (Diagnosis) Diagnosis.on('check', CheckPriorProcessNewActivityTypes, this);
    if (Drugs) Drugs.on('check', CheckPriorProcessNewActivityTypes, this);
    if (Procedure) Procedure.on('check', CheckPriorProcessNewActivityTypes, this);
    if (ServiceList) ServiceList.on('check', CheckPriorProcessNewActivityTypes, this);
    if (HCPCS) HCPCS.on('check', CheckPriorProcessNewActivityTypes, this);
    if (DubaiUnknownVersion) DubaiUnknownVersion.on('check', CheckPriorProcessNewActivityTypes, this);
    if (BenefitIDCode) BenefitIDCode.on('beforequery', onPriorBeforeBenefitIDCodeProcessing, this);
    if (DenialCode) DenialCode.on('beforequery', OnPriorBeforeActivityDenialCode, this);
    //if(RequestAmount) RequestAmount.on('blur', onRequestAmountProcessChange, this);
    if (Ext.getCmp('PriorProcessActivityList')) Ext.getCmp('PriorProcessActivityList').getStore().on('load', onPriorLoadProcessActivityDtlList, this);
    if (Ext.getCmp('PriorRemarksList')) Ext.getCmp('PriorRemarksList').on('addrecord', OnPrioraddClaimsRemarks, this);
    if (Ext.getCmp('PriorProcessActivityDtlList')) Ext.getCmp('PriorProcessActivityDtlList').getStore().on('load', function (store, record, options) {
        Ext.getCmp('PriorProcessActivityDtlList').record = record;
    }, this);
    if (Ext.getCmp('PriorProcessDiagnosisRemarksList')) Ext.getCmp('PriorProcessDiagnosisRemarksList').getStore().on('load', function (store, record, options) {
        Ext.getCmp('PriorProcessDiagnosisRemarksList').record = record;
    }, this);
    if (Ext.getCmp('PriorProcessingActivityRemarksList')) Ext.getCmp('PriorProcessingActivityRemarksList').getStore().on('load', function (store, record, options) {
        Ext.getCmp('PriorProcessingActivityRemarksList').record = record;
    }, this);

    Ext.getCmp('PriorRemarksList').clicksToEdit = 1;
    Ext.getCmp('PriorProcessingRemarksList').clicksToEdit = 1

    PriorHideClaimsTrigger();


    var CurrencyCode = Ext.getCmp('PriorClaims-CurrencyCode');
    var Rate = Ext.getCmp('PriorClaims-Rate');
    if (CurrencyCode) CurrencyCode.on('select', PriorSelectClaimsCurrencyCodeEvt, this);
    if (CurrencyCode) CurrencyCode.setComboValue('100000000000000001');
    if (Rate) Rate.setValue(1);
    if (Ext.getCmp('PriorClaims-ReimbursementAmt')) Ext.getCmp('PriorClaims-ReimbursementAmt').on('change', onPriorChangeSetClaimInvoiceAmount, this);

    if (Ext.getCmp('PriorClaims-RequestAmount')) Ext.getCmp('PriorClaims-RequestAmount').on('change', onPriorChangeSetClaimOutStandingAmount, this);
}
function PriorSelectClaimsCurrencyCodeEvt(combo, record, options) {
    var Rate = Ext.getCmp('PriorClaims-Rate');
    var TransactionDate = Ext.getCmp('PriorClaims-TransactionDate');
    var Currency = Ext.getCmp('PriorClaims-CurrencyCode');

    var curdate = '';
    if (typeof (TransactionDate.getValue()) == 'string')
        curdate = TransactionDate.getValue();
    else curdate = TransactionDate.getValue();
    var curcode = Currency.getValue();

    if (curdate == '' || curdate == null) {
        Currency.clearValue();
        Date.setValue(null);
        Ext.MessageBox.alert(login.modulename, 'Please Enter the Date and Select the currency !');
        return;
    }

    if (Currency.getValue() == '' || Currency.getValue() == null) {
        Ext.MessageBox.alert(login.modulename, 'Please Enter the Date and Select the currency !');
        return;
    }


    Ext.Ajax.request({
        url: 'tools/FlexField/FlexFieldRequest.aspx',
        params: {
            action: 'getexchangerate',
            dateval: curdate,
            curcode: curcode,
            rateid: Rate.id
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', setPriorClaimsRateValueComplete, this);
}
function setPriorClaimsRateValueComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', setPriorClaimsRateValueComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    var RateField = Ext.getCmp(responseText.rateid);
    RateField.setValue(RateField.fixPrecision(responseText.exrate));

    var ReimbursementAmount = Number(Ext.getCmp('PriorClaims-ReimbursementAmt').getValue());
    var Rate = Number(Ext.getCmp('PriorClaims-Rate').getValue());
    var InvoiceAmount = Ext.getCmp('PriorClaims-RequestAmount');
    InvoiceAmount.setValue(ReimbursementAmount / Rate);
}

function PriorHideClaimsTrigger() {

    Ext.getCmp('PriorClaims-ProviderCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-Category_Code').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-GenderCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-RelationCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-ProvinceCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-MemberIDCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-ProvinceCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-MemberIDCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-CDCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-RequestTypeCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-RequestSourceCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-BatchCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-ParentClaimCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-BenefitIDCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-TreatmentTypeCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-DurationTypeCode').hideTrigger3 = true;
    Ext.getCmp('PriorClaims-DenialCode').hideTrigger3 = true;

}
function onPriorChangeSetClaimOutStandingAmount(field, newval, oldval) {

    var OutStanding = (newval - Number(Ext.getCmp('PriorClaims-ApprovedAmount').getValue()));
    Ext.getCmp('PriorClaims-OutStandingBalance').setValue(OutStanding * 1);
}
function OnPrioraddClaimsRemarks(evt) {
    evt.record.set('UserName', login.UserName.toUpperCase());
    evt.record.set('DateTime', new Date().format(login.jsdateformat + " " + (login.TimeFormat == 'hh:mm:ss tt' ? 'h:i:s a' : (login.TimeFormat == 'hh:mm tt' ? 'h:i a' : 'H:i'))));
}

function onPriorChangeSetClaimInvoiceAmount() {
    var Rate = Ext.getCmp('PriorClaims-Rate').getValue();
    var InvoiceAmount = Number(Ext.getCmp('PriorClaims-ReimbursementAmt').getValue()) * Rate;
    Ext.getCmp('PriorClaims-RequestAmount').setValue(InvoiceAmount);
    var OutStanding = (InvoiceAmount - Number(Ext.getCmp('PriorClaims-ApprovedAmount').getValue()));
    Ext.getCmp('PriorClaims-OutStandingBalance').setValue(OutStanding * 1);
}

function onPriorLoadProcessActivityDtlList(store, record, options) {

    var ActivityPriceTotal = Ext.getCmp('PriorClaims-ActivityPrice');
    var DiscountTotal = Ext.getCmp('PriorClaims-DiscountTotal');
    var DeductableValue = Ext.getCmp('PriorClaims-DeductableValue');
    var Co_Ins_Value = Ext.getCmp('PriorClaims-Co_Ins_Value');
    //var OutStandingBalance = Ext.getCmp('PriorClaims-OutStandingBalance');
    var DenailValue = Ext.getCmp('PriorClaims-DenailValue');
    var Total = Ext.getCmp('PriorClaims-Total');
    var ApprovedAmount = Ext.getCmp('PriorClaims-ApprovedAmount');
    var RequestAmountTotal = Ext.getCmp('PriorClaims-RequestAmountTotal');
    var ClaimRequestAmount = Number(Ext.getCmp('PriorClaims-RequestAmount').getValue());
    var TempNetPrcieTotal = 0, TempDiscountTotal = 0, TempRequestAmountTotal = 0, TempDeductableTotal = 0, ActivityRequestAmount = 0, TempCoInsuranceTotal = 0, TempTotal = 0, TempDenialAmountTotal = 0;
    for (var i = 0; i < store.getCount() ; i++) {
        var record = store.getAt(i);
        if (record.get('IsDeleted') == false) {
            var TempTotalDeductible = 0;
            if (record.get('DeductibleAmount') > record.get('Price')) {
                TempTotalDeductible = 0;
            }
            else {
                TempTotalDeductible = (record.get('Price') - record.get('DeductibleAmount'));
            }

            TempNetPrcieTotal += (1 * record.get('Price'));
            TempDeductableTotal += (1 * record.get('DeductibleAmount'));
            TempCoInsuranceTotal += (1 * (record.get('CoinsuranceAmount')));
            TempDiscountTotal += (1 * (record.get('DiscountAmount')));
            TempDenialAmountTotal += (1 * record.get('DenailValue'));
            ActivityRequestAmount += (1 * record.get('RequestAmount'));
            TempTotal += (1 * record.get('Total'));
        }
    }
    var TempOutstanding = (ClaimRequestAmount - ActivityRequestAmount);
    //OutStandingBalance.setValue(TempOutstanding);
    ActivityPriceTotal.setValue(TempNetPrcieTotal);
    DiscountTotal.setValue(TempDiscountTotal);
    DeductableValue.setValue(TempDeductableTotal);
    DenailValue.setValue(TempDenialAmountTotal);
    Co_Ins_Value.setValue(TempCoInsuranceTotal);
    RequestAmountTotal.setValue(ActivityRequestAmount);
    Total.setValue(TempTotal);
    ApprovedAmount.setValue(TempTotal);

    if (ApprovedAmount.getValue() > 0) {
        Ext.getCmp('PriorClaims-StatusCode').setComboValue(2);
    }
        //Ext.getCmp('PriorNewActivity-OutStandingBalance').setValue(TempOutstanding);
        //if (Number(Ext.getCmp('PriorClaims-OutStandingBalance').getValue()) > 0) {
        //    Ext.getCmp('PriorClaims-OutStandingBalance').addClass('approve-editor');
        //}
    else {
        Ext.getCmp('PriorClaims-OutStandingBalance').removeClass('approve-editor');
    }

    //if (Number(Ext.getCmp('PriorNewActivity-OutStandingBalance').getValue()) > 0) {
    //    Ext.getCmp('PriorNewActivity-OutStandingBalance').addClass('approve-editor');
    //}
    //else {
    //    Ext.getCmp('PriorNewActivity-OutStandingBalance').removeClass('approve-editor');
    //}
}
function CheckPriorProcessNewActivityTypes(checkBox, checked) {

    var Drugs = Ext.getCmp('PriorClaims-Drugs');
    var Procedure = Ext.getCmp('PriorClaims-Procedure');
    var ServiceList = Ext.getCmp('PriorClaims-ServiceList');
    var HCPCS = Ext.getCmp('PriorClaims-HCPCS');
    var Diagnosis = Ext.getCmp('PriorClaims-Diagnosis');
    var DubaiUnknownVersion = Ext.getCmp('PriorClaims-DubaiUnknownVersion');

    Drugs.un('check', CheckPriorProcessNewActivityTypes, this);
    Procedure.un('check', CheckPriorProcessNewActivityTypes, this);
    ServiceList.un('check', CheckPriorProcessNewActivityTypes, this);
    HCPCS.un('check', CheckPriorProcessNewActivityTypes, this);
    Diagnosis.un('check', CheckPriorProcessNewActivityTypes, this);
    DubaiUnknownVersion.un('check', CheckPriorProcessNewActivityTypes, this);
    if (checked) {
        if (checkBox.id != Drugs.id) Drugs.setValue(false);
        if (checkBox.id != Procedure.id) Procedure.setValue(false);
        if (checkBox.id != ServiceList.id) ServiceList.setValue(false);
        if (checkBox.id != HCPCS.id) HCPCS.setValue(false);
        if (checkBox.id != Diagnosis.id) Diagnosis.setValue(false);
        if (checkBox.id != DubaiUnknownVersion.id) DubaiUnknownVersion.setValue(false);
    }
    else
        checkBox.setValue(true);

    Drugs.on('check', CheckPriorProcessNewActivityTypes, this);
    Procedure.on('check', CheckPriorProcessNewActivityTypes, this);
    ServiceList.on('check', CheckPriorProcessNewActivityTypes, this);
    HCPCS.on('check', CheckPriorProcessNewActivityTypes, this);
    Diagnosis.on('check', CheckPriorProcessNewActivityTypes, this);
    DubaiUnknownVersion.on('check', CheckPriorProcessNewActivityTypes, this);
}

function OnPriorClinicianFilterByProvider(evt) {
    var Primkey = Ext.getCmp('PriorClaims').selectedIndex;
    var ProviderCode = 0;
    if (Primkey == undefined || Primkey == -1) {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').getValue();
    }
    else {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').editValue;
    }
    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = "ProviderCode =" + ProviderCode + "";
}


function OnPriorClaimsPolicyFilterByMember(evt) {

    var MemberCode = 0;
    var PrimKey = Ext.getCmp('Claims').selectedIndex;
    if (PrimKey == -1 || PrimKey == undefined) {
        MemberCode = Ext.getCmp('Claims-MemberIDCode').getValue();
    }
    else {
        MemberCode = Ext.getCmp('Claims-MemberIDCode').editValue;
    }

    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = "Pro.MemberCode=" + MemberCode + " ";
}

function OnPriorClaimsPolicyCodeChange(combo, record, index) {
    var FilterQry = '';
    JProviderTariffType = record.get('ProviderTariffType');
}

function onPriorValidStartDate(field) {
    var StartDate = Ext.getCmp('PriorClaims-EncounterStartDate').getValue();
    if (typeof (StartDate) == 'string') var StartDate = Date.parseDate(StartDate, login.jsdateformat).format('d/m/Y');
    else StartDate = StartDate.format('d/m/Y');
    if (Ext.getCmp('PriorClaims-TreatmentTypeCode').getValue() == 1) {
        Ext.getCmp('PriorClaims-EncounterEndDate').setValue(StartDate);
    }
}

function onPriorValidEndDate(field) {
    var EndDate = Ext.getCmp('PriorClaims-EncounterEndDate');
    var StartDate = Ext.getCmp('PriorClaims-EncounterStartDate');
    var DurationTypeCode = Ext.getCmp('PriorClaims-DurationTypeCode').getValue();
    var Days = 1;
    /*if (DurationTypeCode == 1) {
        Days = Days
    }
    else if (DurationTypeCode == 2){
    }*/
    var t1 = new Date(StartDate.getValue());
    var t2 = new Date(EndDate.getValue());
    var diff = (Math.abs(t1 - t2) / (1000 * 60 * 60 * 24)) + Days;
    Ext.getCmp('PriorClaims-Duration').setValue(diff);
}

function onPriorBeforeBenefitIDCodeProcessing(evt) {
    var TransactionDate = Ext.getCmp('PriorClaims-EncounterStartDate').getValue();
    var ProviderCode = 0, MemberCode = 0;
    var MasterPrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (MasterPrimKey == undefined || MasterPrimKey == -1) {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').getValue();
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').getValue();
    }
    else {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').editValue;
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').editValue;
    }

    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = "ICV.Member_Code=" + MemberCode + " and TO_DATE('" + TransactionDate.format('d-m-y') + "','dd/mm/RR') between ICV.MemberStartDate and ICV.MemberEndDate";
}


function OnPriorBeforeActivityDenialCode(evt) {
    //var SourceProvider = Ext.getCmp('Claims-ProviderSource').getValue();
    //SourceProvider = (SourceProvider == '' ? 0 : SourceProvider);
    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.Version_Code from IM_VERSION_FILTER_TYPE IAD where IAD.FILTER_CODE in (Select FILTER_CODE from IM_VERSION_FILTER where FILTER_ID = 2))";

}
function afterSaveProcessForm(form, action) {
    hideMask();
    Ext.MessageBox.show({
        title: login.modulename,
        msg: (isRTL ? 'تم الحفظ بنجاح' : 'Save Process completed Successfully !'),
        buttons: Ext.MessageBox.OK,
        fn: aftersaveLoadHistoryDetail,
        icon: Ext.MessageBox.INFO
    });
}
function failedSaveProcessForm(form, action) {
    hideMask();
    IsAjaxRequestmade = false;
    form = Ext.getCmp('PriorClaims');
    var result = eval(action.result);
    var ErrMsg = '<b>This Claim have following alerts. Are you sure you want to continue</b> ? <br><br><br>';
    try {
        for (var errorcnt = 0 ; errorcnt < result.error.split(',').length; errorcnt++) {
            ErrMsg = ErrMsg + result.error.split(',')[errorcnt] + '<br>';
        }
    }
    catch (Exception) {
        ErrMsg = result.error;
    }

    if (result) if (result.error) {
        var details = form.findByType('detailgrid');
        for (var j = 0, lenj = details.length; j < lenj; j++) {
            details[j].loadData = true;
        }
        Ext.MessageBox.confirm(login.modulename, ErrMsg, function (button) {
            if (button == 'yes') {
                Ext.getCmp('PriorClaims-Continuewithwarnings').setValue(true);
                ClaimSearchFinishBtnHandlerConfirm(TempFinishButtonCard);
            }
        }, this);
    }
}

function onBeforecloseClaimProcessWindow(win) {
}

function ClaimSearchFinishBtnHandlerConfirm(TempFinishButtonCard) {

    card = TempFinishButtonCard;
    var RequestAmount = Number(Ext.getCmp('PriorClaims-RequestAmount').getValue());
    var ApprovedAmount = Number(Ext.getCmp('PriorClaims-ApprovedAmount').getValue());

    if (ApprovedAmount > RequestAmount) {
        Ext.MessageBox.alert('Prior Authorization Processing', 'Approved Amount should not be less than or Equal to Request Amount !');
        return;
    }

    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);

                Ext.MessageBox.show({
                    title: GlobalTerminologies.LBLERROR,
                    msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });

    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }



    ClaimProcessForm = Ext.getCmp('PriorClaims');
    var params = {};
    ClaimProcessForm.form.items.each(function (f) {
        if (f.isValid && !f.isValid(true)) {
            Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, f.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return;
        }

        if (f.disabled) {
            params[f.id + 'DISVAL'] = f.getValue();
        }

        if (f.dataColumn && f.editValue && f.editValue != 0 && f.editValue != f.getValue() && f.value != '') {
            f.setValue(f.editValue);
        }

        //to get the invisible tab values
        if (!f.rendered) {
            if (f.editValue) {
                params[f.id + 'DISVAL'] = f.editValue;
            }
            else {
                params[f.id + 'DISVAL'] = f.getValue();
            }
        }

        if (f.xtype == 'htmleditor') {
            f.value = Ext.util.Format.htmlEncode(f.getValue());
            f.el.dom.value = Ext.util.Format.htmlEncode(f.getValue());
        }

    });

    if (ClaimProcessForm.form.isValid() == true) {
        var detailNames = [];
        var detailData = [];
        var details = ClaimProcessForm.findByType('detailgrid');
        for (var i = 0, len = details.length; i < len; i++) {
            if (!details[i].isValid(true)) return;
            var tempData = [];
            var ds = details[i].getStore();
            var editedRecords = ds.getModifiedRecords();
            if (details[i].mustHaveChild) {
                showError = false;
                if (ClaimProcessForm.selectedIndex == -1 && ds && ds.getCount() == 0) {
                    showError = true;
                } else if ((ClaimProcessForm.selectedIndex != -1) && (details[i].rendered) && (ds.getCount() == 0) && !(details[i].masterName)) {
                    showError = true;
                }
                if (showError) {
                    Ext.MessageBox.show({
                        title: GlobalTerminologies.LBLERROR,
                        msg: details[i].title + ' ' + GlobalTerminologies.MSGCOMMON011,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    return;
                }
            }
            for (var j = 0, count = editedRecords.length; j < count; j++) {
                var record = editedRecords[j];
                if (record.get('IsNew') == false) {
                    var recordData = Ext.apply({}, editedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            var addedRecords = ds.getAddedRecords();
            for (var j = 0, count = addedRecords.length; j < count; j++) {
                var record = addedRecords[j];
                if (record.get('IsDeleted') == false) {
                    var recordData = Ext.apply({}, addedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            if (tempData.length > 0) {
                var temp = '[' + tempData.join(',') + ']';
                detailData.push(temp);
                var detailName = details[i].getBOName();
                if (detailName) detailName = detailName.substr(detailName.lastIndexOf('.') + 1);
                detailNames.push(detailName);
            }
        }
        for (var j = 0, lenj = details.length; j < lenj; j++) {
            details[j].loadData = true;
        }
        //var params = {};
        if (detailNames.length > 0 && detailData.length > 0) {
            params.detailnames = detailNames.join(',');
            params.detaildata = '[' + detailData.join(',') + ']';
        }

        params.action = 'save';
        params.id = 'SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorClaims';
        params.index = Ext.getCmp('PriorClaims').selectedIndex ? Ext.getCmp('PriorClaims').selectedIndex : -1;
        ClaimProcessForm.form.baseParams = params;
        showMask(GlobalTerminologies.MSGSAVEWIDGET);
        ClaimProcessForm.form.submit({});
    }

}


function ClaimsSearchCancelBtnHandler(card, btnID, direction) {
    closeClaimWindow.close();
}
// Edit Claims
function MedPriorAuthorizationProcessEdit(record) {
    JMailHistoryDetLoad = true;
    Ext.getCmp('PriorAuthorizationHistoryDtlList').selectedProcessID = record.get('ID');
    Ext.getCmp('PriorAuthorizationHistoryDtlList').selectedClaimType = record.get('RequestTypeCode');
    Ext.getCmp('PriorAuthorizationHistoryDtlList').selectedClaimReSubmitted = record.get('ISResubmission');

}

function MedPriorAuthorizationProcessView(record) {

    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEPriorApprovedClaims', Url = '/forms/Medical/MEPriorApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}


function MedPriorAuthorizationProcessEdit(record) {

    if (record.get('IsClaimSubmitted') == true) {
        Ext.MessageBox.alert(login.modulename, "Claim Submitted Record Can't Allow to Edit");
        return;
    }
    else {

        var NewCase = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.Medical.General.MEPriorApprovedClaims', Url = '/forms/Medical/MEPriorApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
        NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
    }
}
function MedPriorAuthorizationProcessHandler(record) {

}


// Add Remark to Activiyt in Prior Authorization

function PriorAddRemarksbyDoctorHandler(record) {
}

function PriorViewActivityObservationBtnHandler(record) {

    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewActivity', Url = '/forms/Medical/MEDPriorClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}

function PriorEditActivityObservationBtnHandler(record) {

    if (record.get('ClaimStatus') == true) {
        Ext.MessageBox.alert(login.modulename, "Claim Submitted Record Can't Allow to Edit");
        return;
    }
    else {
        var NewCase = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewActivity', Url = '/forms/Medical/MEDPriorClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
        NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
    }

}
function PriorViewDiagnosisObservationBtnHandler(record) {

    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewDiagnosis', Url = '/forms/Medical/MEDPriorClaimViewDiagnosis.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}
function PriorEditDiagnosisObservationBtnHandler(record) {

    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewDiagnosis', Url = '/forms/Medical/MEDPriorClaimViewDiagnosis.xml', PKey = record.get('ID'), WidgetTitle = 'New Calim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function PriorAuthorizationMailRecordOpen(record) {
}


// Prior claims
// View Prior Authorization Member Info
function ViewPriorMemberBtnHandler(button, options) {
    var MemberProvider = new Ext.biz.WidgetInfo();
    var MemberCode = 0;
    var PrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (PrimKey == undefined || PrimKey == -1) {
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').getValue();
    }
    else {
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').editValue;
    }
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.NGIMember', Url = '/forms/HumanResources/NGI/Claims/ViewMemberInfo.xml', PKey = MemberCode, WidgetTitle = 'View Member Information';
    MemberProvider.ViewTemplateOpen(ClassName, Url, MemberCode, WidgetTitle);
}
// View Prior Authorization Provider Info

function ViewPriorProviderBtnHandler(button, options) {
    var ClaimsProvider = new Ext.biz.WidgetInfo();
    var ProviderCode = 0;
    var PrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (PrimKey == undefined || PrimKey == -1) {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').getValue();
    }
    else {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').editValue;
    }
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Provider.NGIProvider', Url = '/forms/HumanResources/NGI/Claims/ViewProviderInfo.xml', PKey = ProviderCode, WidgetTitle = 'View Provider Information';
    ClaimsProvider.ViewTemplateOpen(ClassName, Url, ProviderCode, WidgetTitle);
}

// View Policy Info

function ViewPriorMemberPolicyBtnHandler(button, options) {
    var MemberPolicy = new Ext.biz.WidgetInfo();
    var PolicyCode = 0;
    var PrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (PrimKey == undefined || PrimKey == -1) {
        PolicyCode = Ext.getCmp('PriorClaims-PolicyCode').getValue();
    }
    else {
        PolicyCode = Ext.getCmp('PriorClaims-PolicyCode').editValue;
    }
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.Policies.NGIPolicy', Url = '/forms/HumanResources/NGI/Claims/ViewMemberInfo.xml', PKey = PolicyCode, WidgetTitle = 'View Policy Information';
    MemberPolicy.ViewTemplateOpen(ClassName, Url, PolicyCode, WidgetTitle);
}
function PriorAppProcessReqAddActivity(form, login) {

    JAddtoRemarksList = '';
    TempCoInsuranceBalance = 0;
    TempCoInsuranceType = 0;
    TempEligibleBalSave = 0;
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Claim Processing', 'Please wait until the Activity Detail loads !');
        return;
    }

    ClaimActivityMode = 1;
    var ProviderCode = 0, MemberCode = 0, TreatmentTypeCode = 0, BenefitIDCode = 0, ClaimTypeCode = 0;
    var PrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (PrimKey == undefined || PrimKey == -1) {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').getValue();
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').getValue();
        TreatmentTypeCode = Ext.getCmp('PriorClaims-TreatmentTypeCode').getValue();
        BenefitIDCode = Ext.getCmp('PriorClaims-BenefitIDCode').getValue();
        ClaimTypeCode = Ext.getCmp('PriorClaims-RequestTypeCode').getValue();
    }
    else {
        ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').editValue;
        MemberCode = Ext.getCmp('PriorClaims-MemberIDCode').editValue;
        TreatmentTypeCode = Ext.getCmp('PriorClaims-TreatmentTypeCode').editValue;
        BenefitIDCode = Ext.getCmp('PriorClaims-BenefitIDCode').editValue;
        ClaimTypeCode = Ext.getCmp('PriorClaims-RequestTypeCode').editValue;
    }
    var TransactionDate = Ext.getCmp('PriorClaims-EncounterStartDate').getValue();

    var Drugs = Ext.getCmp('PriorClaims-Drugs');
    var Procedure = Ext.getCmp('PriorClaims-Procedure');
    var ServiceList = Ext.getCmp('PriorClaims-ServiceList');
    var HCPCS = Ext.getCmp('PriorClaims-HCPCS');
    var Diagnosis = Ext.getCmp('PriorClaims-Diagnosis');
    var DubaiUnknownVersion = Ext.getCmp('PriorClaims-DubaiUnknownVersion');
    if (Drugs.checked == true) {
        JActivityTypeChecked = 5;
    }
    if (Procedure.checked == true) {
        JActivityTypeChecked = 3;
    }
    if (ServiceList.checked == true) {
        JActivityTypeChecked = 8;
    }
    if (HCPCS.checked == true) {
        JActivityTypeChecked = 4;
    }
    if (Diagnosis.checked == true) {
        JActivityTypeChecked = -1;
    }
    if (DubaiUnknownVersion.checked == true) {
        JActivityTypeChecked = -2;
    }
    JClaimActiviyType = JActivityTypeChecked,
    closeActivityWindow = '';
    showMask();
    var ClaimTypeCode = 0;
    var PrimKey = Ext.getCmp('PriorClaims').selectedIndex;
    if (PrimKey == undefined || PrimKey == -1) {
        ClaimTypeCode = Ext.getCmp('PriorClaims-RequestTypeCode').getValue();
    }
    else {
        ClaimTypeCode = Ext.getCmp('PriorClaims-RequestTypeCode').editValue;
    }
    if (JActivityTypeChecked == -1) {
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'AddDiagnosisPriorProcessingActivity',
                ActivityTypeChecked: JActivityTypeChecked,
                ProviderCode: ProviderCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', PriorAddDiagnosisActivityComplete, this);
    }
    else {

        Ext.Ajax.request({
            url: 'tools/HumanResources/ClaimProcessing.aspx',
            params: {
                action: 'AddClaimProcessingActivity',
                ActivityTypeChecked: JActivityTypeChecked,
                MemberCode: MemberCode,
                ProviderCode: ProviderCode,
                TreatmentTypeCode: TreatmentTypeCode,
                TransactionDate: TransactionDate,
                BenefitIDCode: (BenefitIDCode == '' ? 0 : BenefitIDCode),
                ClaimTypeCode: (ClaimTypeCode == '' ? 0 : ClaimTypeCode)
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', AddPriorNewActivityComplete, this);
    }

}
function PriorAddDiagnosisActivityComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PriorAddDiagnosisActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddDiagnosisActivityForm = new Ext.form.FormPanel(responseText.PriorAddDiagnosisActivityConfig);
    JClaimActiviyType = responseText.ActivityTypeCode;
    JClaimActiviyName = responseText.ActivityTypeName;
    var versionDetailName = '';
    var ActivityStatus = '';
    this.AddDiagnosisActivityForm.addButton({
        text: 'Save',
        handler: function () {
            JCloseDiagnosisWindow = 1;
            SaveClaimDiagnosis();
        },
        scope: this,
        formBind: true,
        tabIndex: this.AddDiagnosisActivityForm.FormFieldsCount + 2
    });
    this.AddDiagnosisActivityForm.addButton({
        text: 'Save and Close',
        handler: function () {
            JCloseDiagnosisWindow = 2;
            SaveClaimDiagnosis();
        },
        scope: this,
        formBind: true,
        tabIndex: this.AddDiagnosisActivityForm.FormFieldsCount + 2
    });

    this.AddDiagnosisActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddDiagnosisActivityFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddDiagnosisActivityForm.FormFieldsCount + 2
    });

    this.AddDiagnosisActivityFormWindow = new Ext.Window({
        id: 'AddDiagnosisActivityFormWindow',
        title: 'Prior New Activity',
        closable: true,
        minimizable: false,
        width: this.AddDiagnosisActivityForm.width + 10,
        height: this.AddDiagnosisActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddDiagnosisActivityForm]
    });
    closeActivityWindow = this.AddDiagnosisActivityFormWindow;
    this.AddDiagnosisActivityForm.on('render', onPriorDiagnosisClaimActivity, this);
    this.AddDiagnosisActivityFormWindow.show();
}

function onPriorDiagnosisClaimActivity(form, login) {
    var detail = Ext.getCmp('PriorNewActivity-DetailCode');
    //var VersionCode = Ext.getCmp('NewActivity-VersionCode'); 
    var TypeCode = Ext.getCmp('PriorNewActivity-TypeCode');
    var Primkey = Ext.getCmp('PriorClaims').selectedIndex;
    var PriorProcessActivityDtlList = Ext.getCmp('PriorProcessActivityDtlList');
    Ext.getCmp('PriorNewActivity-CheckExclusion').setValue(true);
    var status = Ext.getCmp('PriorNewActivity-ActivityStatusCode');
    var DenialCode = Ext.getCmp('PriorNewActivity-DenialCode');
    status.setComboValue(1);
    DenialCode.disable();
    Ext.getCmp('PriorEditProcessDiagnosisList').clicksToEdit = 1;
    if (status) status.on('select', PriorSelectClaimStatusCodeEvt, this);
    if (detail) detail.on('beforequery', PriorOnBeforeClaimdiagnosisDetailCode, this);
    if (DenialCode) DenialCode.on('beforequery', OnBeforeActivityDenialCode, this);
    if (TypeCode) TypeCode.on('beforequery', OnBeforeTypeCode, this);
    var PriorReviewDiagnosisList = Ext.getCmp('PriorReviewDiagnosisList');
    if (PriorReviewDiagnosisList.store.getCount() == 0) {
        TypeCode.setComboValue(1);
    }
    if (PriorReviewDiagnosisList.store.getCount() > 0) {
        TypeCode.setComboValue(2);
    }
    ClaimReviewDiagnosisLoad();
    if (Ext.getCmp('PriorReviewDiagnosisList')) Ext.getCmp('PriorReviewDiagnosisList').getSelectionModel().on('rowselect', onSelectClaimProcessDiagnosis, this);

}
function PriorSelectClaimStatusCodeEvt(combo, record, options) {
    ActivityStatus = record.data.ConstantName;
    var DenialCode = Ext.getCmp('PriorNewActivity-DenialCode');
    if (combo.getValue() == 1) {
        DenialCode.clearValue();
        DenialCode.disable();
        DenialCode.clearInvalid();
    }
    else if (combo.getValue() == 2) {
        DenialCode.enable();
        DenialCode.isValid();
    }

}
function PriorOnBeforeClaimdiagnosisDetailCode(evt) {
    evt.combo.lastQuery = '1=2';
    evt.combo.store.baseParams.filter = "ivd.VersionCode in (Select IAD.VersionCode from IM_ACTIVITY_DETAILS IAD where IAD.TypeCode in  (" + JClaimActiviyType + "))";
}

function AddPriorNewActivityComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddPriorNewActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddPriorNewActivityForm = new Ext.form.FormPanel(responseText.AddNewActivityCofig);

    TempCoInsuranceType = responseText.CoInsurancePercentage;
    TempCoInsuranceBalance = responseText.CoInsuranceAmount

    JClaimActiviyType = responseText.ActivityTypeCode;
    JClaimActiviyName = responseText.ActivityTypeName;
    var versionDetailName = '';
    var ActivityStatus = '';
    this.AddNewActivityForm.addButton({
        text: 'Save',
        handler: function () {
            JCloseActivityWindow = 1;
            SaveClaimActivities();
        },
        scope: this,
        formBind: true,
        tabIndex: this.AddPriorNewActivityForm.FormFieldsCount + 2
    });
    this.AddPriorNewActivityForm.addButton({
        text: 'Save and Close',
        handler: function () {
            JCloseActivityWindow = 2;
            SaveClaimActivities();
        },
        scope: this,
        formBind: true,
        tabIndex: this.AddPriorNewActivityForm.FormFieldsCount + 2
    });

    this.AddPriorNewActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewActivityFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddNewActivityForm.FormFieldsCount + 2
    });
    this.AddNewActivityForm.addButton({
        text: 'Send to Network',
        handler: function () {
            this.AddNewActivityFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddNewActivityForm.FormFieldsCount + 2
    });
    this.AddNewActivityForm.addButton({
        text: 'Add to Exclusion',
        handler: function () {
            AddtoMemberExclusionBtnHandler();
        },
        scope: this,
        tabIndex: this.AddNewActivityForm.FormFieldsCount + 2
    });
    this.AddNewActivityFormWindow = new Ext.Window({
        id: 'AddNewActivityFormWindow',
        title: 'Claims New Activity',
        closable: true,
        minimizable: false,
        width: this.AddNewActivityForm.width + 10,
        height: this.AddNewActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewActivityForm]
    });
    closeActivityWindow = this.AddNewActivityFormWindow;
    this.AddNewActivityForm.on('render', onClaimProcessingAddActivity, this);
    this.AddNewActivityFormWindow.show();
}

function PriorProcessActivityEditBtn(record) {
    ClaimActivityMode = 2;
    Ext.getCmp('PriorProcessActivityList').record = record;
    closeActivityWindow = '';
    PriorActivityEditFnc();
}

function PriorActivityEditFnc() {
}

function PriorViewActivityObservationBtn(record) {
}

function PriorProcessActivityDeleteBtn(button, options) {
}

function PriorProcessActivityDtlRemarkDeleteBtn(button, options) {
}

function PriorProcessActivityRemarkDeleteBtn(button, options) {
}


function PriorSearchNextBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);
    // for checking wizard errors
    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);
                /*
                Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
                });
                */
            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });
    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }
    if (card.actItemInd == 0) {
        var PolicyStartDate = Ext.getCmp('PriorClaims-PolicyStartDate').getValue();
        var PolicyEndDate = Ext.getCmp('PriorClaims-Validtodate').getValue();
        var EncounterStartDate = Ext.getCmp('PriorClaims-EncounterStartDate').getValue();
        var ProviderCode = Ext.getCmp('PriorClaims-ProviderCode').getValue();

        var FromDate, EndDate, EncounterDate;
        FromDate = Date.parse(PolicyStartDate);
        EndDate = Date.parse(PolicyEndDate);
        EncounterDate = Date.parse(EncounterStartDate);

        if ((EncounterDate <= EndDate && EncounterDate >= FromDate)) {

        }
        else {
            Ext.MessageBox.alert('Claim Processing', 'Policy Expired for the Select Member ! EncounterStartDate should be between Policy StartDate and EndDate');
            return;
        }
        if (ProviderCode == null || ProviderCode == '' || ProviderCode == undefined) {
            Ext.MessageBox.alert('Claim Processing', 'Please Select the Provider !');
            return;
        }

        card.actItemInd = 1;
    }
    else if (card.actItemInd == 1) {
        card.actItemInd = 2;
    }
    else if (card.actItemInd == 2) {
        card.actItemInd = 3;
    }

    else if (card.actItemInd == 3) {
        card.actItemInd = 4;
    }

    else
        card.actItemInd = card.actItemInd + direction;

    if (card.actItemInd != 0) {
        card.getLayout().setActiveItem(card.actItemInd); // show the next wizard   

        // Disable or enable the Button
        if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
        else Ext.getCmp(btnID + 'move-prev').disable();

        if (card.actItemInd == (card.MaxItems - 1)) {
            Ext.getCmp(btnID + 'move-next').disable();
            Ext.getCmp(btnID + 'move-finish').enable();
        }
        else {
            Ext.getCmp(btnID + 'move-next').enable();
            Ext.getCmp(btnID + 'move-finish').disable();
        }

        if (card.actItemInd == (card.MinItems - 1)) {
            Ext.getCmp(btnID + 'move-prev').disable();
        }
        else {
            Ext.getCmp(btnID + 'move-prev').enable();
        }
    }

}

function PriorSearchBackBtHandler(card, btnID, direction) {
    card = Ext.getCmp(card);

    if (card.actItemInd == 2) {
        card.actItemInd = 1;
    }
    else if (card.actItemInd == 1) {
        card.actItemInd = 0;
    }
    else
        card.actItemInd = card.actItemInd + direction;

    card.getLayout().setActiveItem(card.actItemInd); //card.activeItem);

    if (card.actItemInd > 0) Ext.getCmp(btnID + 'move-prev').enable();
    else Ext.getCmp(btnID + 'move-prev').disable();

    if (card.actItemInd == (card.MaxItems - 1)) {
        Ext.getCmp(btnID + 'move-next').disable();
        Ext.getCmp(btnID + 'move-finish').enable();
    }
    else {
        Ext.getCmp(btnID + 'move-next').enable();
        Ext.getCmp(btnID + 'move-finish').disable();
    }

    if (card.actItemInd == (card.MinItems - 1)) {
        Ext.getCmp(btnID + 'move-prev').disable();
    }
    else {
        Ext.getCmp(btnID + 'move-prev').enable();
    }
}

function PriorSearchFinishBtHandler(card, btnID, direction) {
    TempFinishButtonCard = Ext.getCmp(card);
    PriorSearchFinishBtnHandlerConfirm(TempFinishButtonCard);
}

function PriorSearchFinishBtnHandlerConfirm(TempFinishButtonCard) {

    card = TempFinishButtonCard;
    var RequestAmount = Number(Ext.getCmp('PriorClaims-RequestAmount').getValue());
    var ApprovedAmount = Number(Ext.getCmp('PriorClaims-ApprovedAmount').getValue());

    if (ApprovedAmount > RequestAmount) {
        Ext.MessageBox.alert('Claim Processing', 'Approved Amount should not be less than or Equal to Request Amount !');
        return;
    }

    var isvalidField = true;
    var isFieldInvlaid = false;
    var FieldInvlaidMsg = '';
    card.getLayout().activeItem.cascade(function (item) {
        if (item.isFormField && !item.isValid()) {
            if (!isFieldInvlaid) {
                isFieldInvlaid = true;
                FieldInvlaidMsg = String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel);

                Ext.MessageBox.show({
                    title: GlobalTerminologies.LBLERROR,
                    msg: String.format(GlobalTerminologies.LBLISVALIDMSG, item.fieldLabel),
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }
            isvalidField = false;
            return;
        }
        if (item.xtype == 'detailgrid') {
            if (!item.isValid(true)) {
                if (!isFieldInvlaid) {
                    isFieldInvlaid = true;
                    FieldInvlaidMsg = item.isValidMsg; // String.format(GlobalTerminologies.LBLISVALIDMSG, item.Name);
                }
                isvalidField = false;
                return;
            }
        }
    });

    if (!isvalidField) {
        Ext.MessageBox.show({
            title: GlobalTerminologies.LBLERROR,
            msg: FieldInvlaidMsg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
        });
        return;
    }



    ClaimProcessForm = Ext.getCmp('PriorClaims');
    var params = {};
    ClaimProcessForm.form.items.each(function (f) {
        if (f.isValid && !f.isValid(true)) {
            Ext.MessageBox.show({
                title: GlobalTerminologies.LBLERROR,
                msg: String.format(GlobalTerminologies.LBLISVALIDMSG, f.fieldLabel),
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
            return;
        }

        if (f.disabled) {
            params[f.id + 'DISVAL'] = f.getValue();
        }

        if (f.dataColumn && f.editValue && f.editValue != 0 && f.editValue != f.getValue() && f.value != '') {
            f.setValue(f.editValue);
        }

        //to get the invisible tab values
        if (!f.rendered) {
            if (f.editValue) {
                params[f.id + 'DISVAL'] = f.editValue;
            }
            else {
                params[f.id + 'DISVAL'] = f.getValue();
            }
        }

        if (f.xtype == 'htmleditor') {
            f.value = Ext.util.Format.htmlEncode(f.getValue());
            f.el.dom.value = Ext.util.Format.htmlEncode(f.getValue());
        }

    });

    if (ClaimProcessForm.form.isValid() == true) {
        var detailNames = [];
        var detailData = [];
        var details = ClaimProcessForm.findByType('detailgrid');
        for (var i = 0, len = details.length; i < len; i++) {
            if (!details[i].isValid(true)) return;
            var tempData = [];
            var ds = details[i].getStore();
            var editedRecords = ds.getModifiedRecords();
            if (details[i].mustHaveChild) {
                showError = false;
                if (ClaimProcessForm.selectedIndex == -1 && ds && ds.getCount() == 0) {
                    showError = true;
                } else if ((ClaimProcessForm.selectedIndex != -1) && (details[i].rendered) && (ds.getCount() == 0) && !(details[i].masterName)) {
                    showError = true;
                }
                if (showError) {
                    Ext.MessageBox.show({
                        title: GlobalTerminologies.LBLERROR,
                        msg: details[i].title + ' ' + GlobalTerminologies.MSGCOMMON011,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    return;
                }
            }
            for (var j = 0, count = editedRecords.length; j < count; j++) {
                var record = editedRecords[j];
                if (record.get('IsNew') == false) {
                    var recordData = Ext.apply({}, editedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            var addedRecords = ds.getAddedRecords();
            for (var j = 0, count = addedRecords.length; j < count; j++) {
                var record = addedRecords[j];
                if (record.get('IsDeleted') == false) {
                    var recordData = Ext.apply({}, addedRecords[j].data);
                    var jsonData = Ext.encode(recordData);
                    tempData.push(jsonData);
                }
            }
            if (tempData.length > 0) {
                var temp = '[' + tempData.join(',') + ']';
                detailData.push(temp);
                var detailName = details[i].getBOName();
                if (detailName) detailName = detailName.substr(detailName.lastIndexOf('.') + 1);
                detailNames.push(detailName);
            }
        }
        for (var j = 0, lenj = details.length; j < lenj; j++) {
            details[j].loadData = true;
        }
        //var params = {};
        if (detailNames.length > 0 && detailData.length > 0) {
            params.detailnames = detailNames.join(',');
            params.detaildata = '[' + detailData.join(',') + ']';
        }

        params.action = 'save';
        params.id = 'SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorClaims';
        params.index = Ext.getCmp('PriorClaims').selectedIndex ? Ext.getCmp('PriorClaims').selectedIndex : -1;
        ClaimProcessForm.form.baseParams = params;
        showMask(GlobalTerminologies.MSGSAVEWIDGET);
        ClaimProcessForm.form.submit({});
    }

}

function PriorSearchCancelBtnHandler(card, btnID, direction) {
    closeClaimWindow.close();
}

var ActivityTypeChecked = '', CliamRequestActivityDummy = '', CliamRequestDiagnosisDummy = '';


function MEDPriorClaimViewDiagnosis(form, login) {

}

function MEDPriorClaimAppProcessReqAddActivity(form, login) {

    var Diagnosis = Ext.getCmp('MEPriorApprovedClaims-Diagnosis');
    var Drugs = Ext.getCmp('MEPriorApprovedClaims-Drugs');
    var Procedure = Ext.getCmp('MEPriorApprovedClaims-Procedures');
    var ServiceList = Ext.getCmp('MEPriorApprovedClaims-DubaiServiceList');
    var HCPCS = Ext.getCmp('MEPriorApprovedClaims-HCPCS');

    if (Drugs.checked == false && Procedure.checked == false && ServiceList.checked == false && HCPCS.checked == false && Diagnosis.checked == false) {
        Ext.MessageBox.alert(login.modulename, 'Please Choose checkbox');
        return;
    }
    else {
        if (Drugs.checked == true) {
            ActivityTypeChecked = 5;
            ACActivityTypeCode = '100000000000000003';
        }
        if (Procedure.checked == true) {
            ActivityTypeChecked = 3;
            ACActivityTypeCode = '100000000000000002';
        }
        if (ServiceList.checked == true) {
            ActivityTypeChecked = 8;
            ACActivityTypeCode = '100000000000000004';
        }
        if (HCPCS.checked == true) {
            ActivityTypeChecked = 4;
            ACActivityTypeCode = '100000000000000006';

        }

        if (Diagnosis.checked == true) {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PriorAddClaimRequestDiagnosis'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PriorAddClaimRequestDiagnosisComplete, this);
        }
        else {

            var Provider_Code = Ext.getCmp('MEPriorApprovedClaims-Provider_Code');
            var PayerCode = Ext.getCmp('MEPriorApprovedClaims-PayerCode');

            if (Provider_Code.getValue() == '' || Provider_Code.editValue == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select the Provider !');
                return;

            }

            if (PayerCode.getValue() == '' || PayerCode.editValue == 0) {
                Ext.MessageBox.alert(login.modulename, 'Please Select the Insurance !');
                return;

            }

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'PriorAddClaimRequestActivity',
                    ActivityTypeChecked: ActivityTypeChecked
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PriorAddClaimRequestActivityComplete, this);
        }
    }
}


function PriorAddClaimRequestDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PriorAddClaimRequestDiagnosisComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddClaimRequestDiagnosisForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Save',
        handler: function () {
            var TypeCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-TypeCode');
            var DetailCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-DetailCode');
            var Description = Ext.getCmp('MEDPriorClaimViewDiagnosis-Description');
            var LongDescription = Ext.getCmp('MEDPriorClaimViewDiagnosis-LongDescription');
            var MEDPriorClaimViewDiagnosisList = Ext.getCmp('MEDPriorClaimViewDiagnosisDtlList');
            var Primary = Ext.getCmp('MEPriorApprovedClaims').selectedIndex;

            MEDPriorClaimViewDiagnosisList.storeId += 1;
            var StoreID = MEDPriorClaimViewDiagnosisList.storeId;
            var newRecord = new MEDPriorClaimViewDiagnosisList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                LongDescription: LongDescription.getValue(),
                Activity_Code: '100000000000000001',
                TypeCode: TypeCode.getValue(),
                TypeName: TypeCode.lastSelectionText,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                MEDPriorClaimViewDiagnosisObservationList: null,
                MEDPriorClaimViewDiagnosisRemarksList: null,
                MEDPriorClaimViewDiagnosisObservationPopUpList: null,
                MEDPriorClaimViewDiagnosisRemarksPopUpList: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MEDPriorClaimViewDiagnosisList.stopEditing();
            MEDPriorClaimViewDiagnosisList.store.add(newRecord);
            MEDPriorClaimViewDiagnosisList.store.totalLength = MEDPriorClaimViewDiagnosisList.store.getTotalCount() + 1;
            MEDPriorClaimViewDiagnosisList.pageBar.updateInfo();


            var MEDPriorClaimViewDiagnosisRemarksList = Ext.getCmp('MEDPriorClaimViewDiagnosisRemarksList');
            var Count = Ext.getCmp('MEDPriorClaimViewDiagnosisRemarksPopUpList').store.getCount();
            for (cnt = 0; cnt < Count ; cnt++) {
                MEDPriorClaimViewDiagnosisRemarksList.storeId += 1;
                var remarkstoreId = MEDPriorClaimViewDiagnosisRemarksList.storeId;
                var record = Ext.getCmp('MEDPriorClaimViewDiagnosisRemarksPopUpList').store.getAt(cnt);
                if (StoreID.ID != remarkstoreId.Activity_Detail_Code) continue;
                var newRecord = new MEDPriorClaimViewDiagnosisRemarksList.recordType({
                    ID: remarkstoreId,
                    SerialNo: remarkstoreId,
                    Activity_Detail_Code: StoreID,
                    ISAdded: 0,
                    Remarks: record.get('Remarks'),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MEDPriorClaimViewDiagnosisRemarksList.stopEditing();
                MEDPriorClaimViewDiagnosisRemarksList.store.add(newRecord);
                MEDPriorClaimViewDiagnosisRemarksList.store.totalLength = MEDPriorClaimViewDiagnosisRemarksList.store.getTotalCount() + 1;
                MEDPriorClaimViewDiagnosisRemarksList.pageBar.updateInfo();

            }
            /* var MEDPriorClaimViewDiagnosisObservationList = Ext.getCmp('MEDPriorClaimViewDiagnosisObservationList');
             var Count = Ext.getCmp('MEDPriorClaimViewDiagnosisObservationPopUpList').store.getCount();
             for (cnt = 0; cnt < Count ; cnt++) {
                 MEDPriorClaimViewDiagnosisObservationList.storeId += 1;
                 var ObsstoreId = MEDPriorClaimViewDiagnosisObservationList.storeId;
                 var record = Ext.getCmp('MEDPriorClaimViewDiagnosisObservationPopUpList').store.getAt(cnt);
                 if (StoreID.ID != ObsstoreId.Activity_Detail_Code) continue;
                 var newRecord = new MEDPriorClaimViewDiagnosisObservationList.recordType({
                     ID: ObsstoreId,
                     SerialNo: ObsstoreId,
                     Activity_Detail_Code: StoreID,
                     TypeCode: record.get('TypeCode'),
                     TypeName: record.get('TypeName'),
                     Code: record.get('Code'),
                     Value: record.get('Value'),
                     ValueTypeCode: record.get('ValueTypeCode'),
                     ValueTypeName: record.get('ValueTypeName'),
                     CompanyCode: login.CompanyCode,
                     LocationCode: login.LocationCode,
                     IsNew: true,
                     IsDirty: true,
                     IsDeleted: false,
                     IsSavable: true,
                     IsValid: true
                 });
                 MEDPriorClaimViewDiagnosisObservationList.stopEditing();
                 MEDPriorClaimViewDiagnosisObservationList.store.add(newRecord);
                 MEDPriorClaimViewDiagnosisObservationList.store.totalLength = MEDPriorClaimViewDiagnosisObservationList.store.getTotalCount() + 1;
                 MEDPriorClaimViewDiagnosisObservationList.pageBar.updateInfo();
             }
             */
            this.AddClaimRequestDiagnosisFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestDiagnosisFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisFormWindow = new Ext.Window({
        id: 'AddClaimRequestDiagnosisForm',
        title: 'Diagnosis',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestDiagnosisForm.width + 10,
        height: this.AddClaimRequestDiagnosisForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestDiagnosisForm]
    });

    this.AddClaimRequestDiagnosisForm.on('render', MEDPriorRequestDiagnosisFormRender, this);
    this.AddClaimRequestDiagnosisFormWindow.show();

}

function MEDPriorRequestDiagnosisFormRender(form, login) {

    var VersionCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-TypeCode');
    var VersionDtlCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-DetailCode');
    var ShortDesc = Ext.getCmp('MEDPriorClaimViewDiagnosis-Description');

    //if (VersionCode) VersionCode.on('beforequery', function (evt) {
    //    evt.combo.lastQuery = '1=2';
    //    var filterQry = '1=1';
    //    if (IsDHA == 0) {
    //        filterQry = " ACTIVITYTYPE=0 "
    //    }
    //    if (IsDHA == 1) {
    //        filterQry = " ACTIVITYTYPE=1 "
    //    }
    //    evt.combo.store.baseParams.filter = " VersionCode in (Select IAD.VersionCode from IM_ACTIVITY_DETAILS IAD where " + filterQry + " and IAD.TypeCode in (Select TypeCode from IM_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    //}, this);
    //if (VersionCode) VersionCode.on('select', function (combo, record, index) {
    //    VersionDtlCode.enable();
    //    VersionDtlCode.clearValue();
    //    ShortDesc.setValue('');
    //}, this);

    var ProviderActivityType = Ext.getCmp('MEPriorApprovedClaims-ProviderActivityType').getValue();
    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " ivd.VersionCode  in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =-1))";
    }, this);

}

function PriorAddClaimRequestActivityComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PriorAddClaimRequestActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    var ActivityName = responseText.ActivityName
    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            var ActivityStartDate = Ext.getCmp('MEDPriorClaimViewActivity-ActivityStartDate');
            var VersionCode = Ext.getCmp('MEDPriorClaimViewActivity-VersionCode');
            var DetailCode = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode');
            var Description = Ext.getCmp('MEDPriorClaimViewActivity-Description');
            var LongDescription = Ext.getCmp('MEDPriorClaimViewActivity-LongDescription');
            var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
            var NetPrice = Ext.getCmp('MEDPriorClaimViewActivity-NetPrice');
            var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
            var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');

            var List = Ext.getCmp('MEDPriorClaimViewActivity-List');
            var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
            var PaymentAmount = Ext.getCmp('MEDPriorClaimViewActivity-PaymentAmount');
            var DenialCode = Ext.getCmp('MEDPriorClaimViewActivity-DenialCode');
            var DenialLongDesc = Ext.getCmp('MEDPriorClaimViewActivity-DenialLongDesc');
            var StatusCode = Ext.getCmp('MEDPriorClaimViewActivity-StatusCode');
            var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');
            var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');

            var DiscountValue = Ext.getCmp('MEDPriorClaimViewActivity-DiscountValue');

            var MEDPriorClaimViewActivityList = Ext.getCmp('MEDPriorClaimViewActivityDtlList');
            var Primary = Ext.getCmp('MEPriorApprovedClaims').selectedIndex;

            MEDPriorClaimViewActivityList.storeId += 1;
            var StoreID = MEDPriorClaimViewActivityList.storeId;
            var newRecord = new MEDPriorClaimViewActivityList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                ActivityTypeCode: ACActivityTypeCode,
                ActivityTypeName: ActivityName,
                VersionCode: VersionCode.getValue(),
                VersionName: null,
                ProviderName: null,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                LongDescription: LongDescription.getValue(),
                DiscountValue: DiscountValue.getValue(),
                NetPrice: NetPrice.getValue(),
                CDCode: 0,
                CDName: null,
                ClinicianName: null,
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                Total: Total.getValue(),
                ActivityStartDate: ActivityStartDate.getValue(),
                Deductible_Amount: Deductible_Amount.getValue(),

                List: List.getValue(),
                PatientShare: PatientShare.getValue(),
                PatientSharePercent: PatientSharePercent.getValue(),
                PaymentAmount: PaymentAmount.getValue(),
                DenialCode: DenialCode.getValue(),
                DenialName: DenialCode.lastSelectionText,
                DenialLongDesc: DenialCode.lastSelectionText,
                StatusCode: StatusCode.getValue(),
                StatusName: StatusCode.lastSelectionText,

                ActivityEndDate: null,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                MEDPriorClaimViewActivityObservationList: null,
                MEDPriorClaimViewActivityRemarksList: null,
                MEDPriorClaimViewActivityRemarksPopUpList: null,
                MEDPriorClaimViewActivityObservationPopUpList: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            MEDPriorClaimViewActivityList.stopEditing();
            MEDPriorClaimViewActivityList.store.add(newRecord);
            MEDPriorClaimViewActivityList.store.totalLength = MEDPriorClaimViewActivityList.store.getTotalCount() + 1;
            MEDPriorClaimViewActivityList.pageBar.updateInfo();


            var MEDPriorClaimViewActivityRemarksList = Ext.getCmp('MEDPriorClaimViewActivityRemarksList');
            var Count = Ext.getCmp('MEDPriorClaimViewActivityRemarksPopUpList').store.getCount();
            for (cnt = 0; cnt < Count ; cnt++) {
                MEDPriorClaimViewActivityRemarksList.storeId += 1;
                var remarkstoreId = MEDPriorClaimViewActivityRemarksList.storeId;
                var record = Ext.getCmp('MEDPriorClaimViewActivityRemarksPopUpList').store.getAt(cnt);
                if (StoreID.ID != remarkstoreId.Activity_Detail_Code) continue;
                var newRecord = new MEDPriorClaimViewActivityRemarksList.recordType({
                    ID: remarkstoreId,
                    SerialNo: remarkstoreId,
                    Activity_Detail_Code: StoreID,
                    ISAdded: 0,
                    Remarks: record.get('Remarks'),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MEDPriorClaimViewActivityRemarksList.stopEditing();
                MEDPriorClaimViewActivityRemarksList.store.add(newRecord);
                MEDPriorClaimViewActivityRemarksList.store.totalLength = MEDPriorClaimViewActivityRemarksList.store.getTotalCount() + 1;
                MEDPriorClaimViewActivityRemarksList.pageBar.updateInfo();

            }
            var MEDPriorClaimViewActivityObservationList = Ext.getCmp('MEDPriorClaimViewActivityObservationList');
            var Count = Ext.getCmp('MEDPriorClaimViewActivityObservationPopUpList').store.getCount();
            for (cnt = 0; cnt < Count ; cnt++) {
                MEDPriorClaimViewActivityObservationList.storeId += 1;
                var ObsstoreId = MEDPriorClaimViewActivityObservationList.storeId;
                var record = Ext.getCmp('MEDPriorClaimViewActivityObservationPopUpList').store.getAt(cnt);
                if (StoreID.ID != ObsstoreId.Activity_Detail_Code) continue;
                var newRecord = new MEDPriorClaimViewActivityObservationList.recordType({
                    ID: ObsstoreId,
                    SerialNo: ObsstoreId,
                    Activity_Detail_Code: StoreID,
                    TypeCode: record.get('TypeCode'),
                    TypeName: record.get('TypeName'),
                    Code: record.get('Code'),
                    Value: record.get('Value'),
                    ValueTypeCode: record.get('ValueTypeCode'),
                    ValueTypeName: record.get('ValueTypeName'),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MEDPriorClaimViewActivityObservationList.stopEditing();
                MEDPriorClaimViewActivityObservationList.store.add(newRecord);
                MEDPriorClaimViewActivityObservationList.store.totalLength = MEDPriorClaimViewActivityObservationList.store.getTotalCount() + 1;
                MEDPriorClaimViewActivityObservationList.pageBar.updateInfo();
            }
            onReActivityDetialLoad();
            this.AddClaimRequestActivityFormWindow.close();

            /*var MEDPriorClaimViewActivityList = Ext.getCmp('MEDPriorClaimViewActivityList');
            MEDPriorClaimViewActivityList.store.load({
                params: {
                    start: 0,
                    limit: MEDPriorClaimViewActivityList.pageSize
                }
            });*/
        },

        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Activity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', MEDPriorRequestActivityFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();


}


function MEDPriorRequestActivityFormRender(form, login) {

    var VersionCode = Ext.getCmp('MEDPriorClaimViewActivity-VersionCode');
    var VersionDtlCode = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode');
    var LongDesc = Ext.getCmp('MEDPriorClaimViewActivity-LongDescription');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');

    var OrginalPatientShare = Ext.getCmp('MEPriorApprovedClaims-OrginalPatientShare');
    var DeductableValue = Ext.getCmp('MEPriorApprovedClaims-DeductableValue');

    Deductible_Amount.setValue(DeductableValue.getValue());
    PatientShare.setValue(OrginalPatientShare.getValue());

    //  VersionDtlCode.disable();
    var providercode = Ext.getCmp('MEPriorApprovedClaims-Provider_Code');
    var ProviderActivityType = Ext.getCmp('MEPriorApprovedClaims-ProviderActivityType').getValue();
    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);
    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        VersionDtlCode.enable();
        VersionDtlCode.clearValue();
        LongDesc.setValue('');
        ShortDesc.setValue('');
    }, this);

    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ivd.VersionCode in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);



    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
    RequestQty.setValue(1);
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    if (Deductible_Amount) Deductible_Amount.on('valid', onReSubmissionRequestAmountValid, this);
    if (RequestAmount) RequestAmount.on('valid', onReSubmissionRequestAmountValid, this);
    if (RequestQty) RequestQty.on('valid', onReSubmissionRequestAmountValid, this);
    if (PatientSharePercent) PatientSharePercent.on('valid', onReSubmissionPatientSharePercentVaild, this);
    //if (PatientShare) PatientShare.on('valid', onReSubmissionPatientSharePercentVaild, this);



    var providercode = Ext.getCmp('MEPriorApprovedClaims-Provider_Code');
    var PayerCode = Ext.getCmp('MEPriorApprovedClaims-PayerCode');

    var DetailCode = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode');
    if (DetailCode) DetailCode.on('select', function (combo, record, index) {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ClaimActivityPriceLoad',
                DetailCode: DetailCode.getValue(),
                ProviderCode: providercode.editValue,
                PayerCode: PayerCode.editValue

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ReClaimActivityPriceLoadComplete, this);
    }, this);

}

function ReClaimActivityPriceLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ReClaimActivityPriceLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var NetPrice = Ext.getCmp('MEDPriorClaimViewActivity-NetPrice');
    var DiscountValue = Ext.getCmp('MEDPriorClaimViewActivity-DiscountValue');
    NetPrice.setValue(responseText.Netvalue);
    DiscountValue.setValue(responseText.DiscountValue);

}

function onReSubmissionDeductibleAmountBlur(field) {
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');

    tot = (1 * PatientShare.getValue()) + (1 * Deductible_Amount.getValue());

    Total.setValue((1 * RequestAmount.getValue()) - (1 * tot));
}
function onReSubmissionPatientSharePercentBlur(field) {
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');

    tot = (((1 * RequestAmount.getValue()) * (1 * PatientSharePercent.getValue())) / 100);
    PatientShare.setValue(tot);

    Total.setValue(((1 * RequestAmount.getValue()) - (1 * tot)) - (1 * Deductible_Amount.getValue()));
}

function onReSubmissionPatientSharePercentVaild(field) {
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');

    var ReqAmt = ((1 * RequestAmount.getValue()) * RequestQty.getValue());
    tot = ((ReqAmt * (1 * PatientSharePercent.getValue())) / 100);
    PatientShare.setValue(tot);

    var Tota = 0;
    var Reqamt = (RequestAmount.getValue() * RequestQty.getValue());
    Tota = ((1 * Reqamt) - ((1 * tot) + (1 * Deductible_Amount.getValue())));
    Total.setValue(Tota);
}

function onReSubmissionPatientShareBlur(field) {
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');

    tot = ((((1 * PatientShare.getValue()) * 100)) / (1 * RequestAmount.getValue()));
    PatientSharePercent.setValue(Math.round(tot.toFixed(4)));

    Total.setValue(((1 * RequestAmount.getValue()) - (1 * tot)) - (1 * Deductible_Amount.getValue()));
}

function onReSubmissionRequestQtyValid(Field) {

    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');

    var Tot_Amounts = (RequestAmount.getValue() * Field.getValue());
    Total.setValue(Tot_Amounts);


}
function onReSubmissionRequestAmountBlur(field) {
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');

    //if (RequestQty.getValue() == '') {
    //    var InitialAmount = RequestAmount.getValue();
    //    Total.setValue(InitialAmount);
    //}

    Total.setValue((RequestAmount.getValue() - (1 * PatientShare.getValue())) - (1 * Deductible_Amount.getValue()));
}

function onReSubmissionRequestAmountValid(field) {
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
    var Total = Ext.getCmp('MEDPriorClaimViewActivity-Total');
    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var PatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare');
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');

    var ReqAmt = ((1 * RequestAmount.getValue()) * RequestQty.getValue());
    tot = ((ReqAmt * (1 * PatientSharePercent.getValue())) / 100);
    PatientShare.setValue(tot);

    var Tota = 0;
    var Reqamt = (RequestAmount.getValue() * RequestQty.getValue());
    Tota = ((1 * Reqamt) - ((1 * tot) + (1 * Deductible_Amount.getValue())));
    Total.setValue(Tota);
}

function MEDPriorClaimViewActivityDelete(record) {
}
function MEDPriorClaimViewDiagnosisDelete(record) {
}

var ActivityTypeChecked = '';
function MEDPriorClaimViewActivityEdit(record) {
    showMask();
    var Diagnosis = Ext.getCmp('MEPriorApprovedClaims-Diagnosis');
    var Drugs = Ext.getCmp('MEPriorApprovedClaims-Drugs');
    var Procedure = Ext.getCmp('MEPriorApprovedClaims-Procedures');
    var ServiceList = Ext.getCmp('MEPriorApprovedClaims-DubaiServiceList');
    var HCPCS = Ext.getCmp('MEPriorApprovedClaims-HCPCS');
    /*
    if (Drugs.checked == true) {
        ActivityTypeChecked = 5;
        ACActivityTypeCode = '100000000000000003';
    }
    if (Procedure.checked == true) {
        ActivityTypeChecked = 3;
        ACActivityTypeCode = '100000000000000002';
    }
    if (ServiceList.checked == true) {
        ActivityTypeChecked = 8;
        ACActivityTypeCode = '100000000000000004';
    }
    if (HCPCS.checked == true) {
        ActivityTypeChecked = 4;
        ACActivityTypeCode = '100000000000000006';

    }*/
    ACActivityTypeCode = record.get('ActivityTypeCode');
    if (ACActivityTypeCode == '100000000000000003')
        ActivityTypeChecked = 5;
    if (ACActivityTypeCode == '100000000000000002')
        ActivityTypeChecked = 3;
    if (ACActivityTypeCode == '100000000000000004')
        ActivityTypeChecked = 8;
    if (ACActivityTypeCode == '100000000000000006')
        ActivityTypeChecked = 4;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorAddClaimRequestActivityEdit',
            ActivityTypeChecked: ActivityTypeChecked
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEDPriorClaimViewActivityEditComplete, this);
    CliamRequestActivityDummy = record;
}

var MEActivityStartDate = '', MEVersionCode = '', MEVersionName = '', MEDetailCode = '', MEDetailName = '', MEDescription = '', MELongDescription = '', MERequestQty = '';
var MENetPrice = '', MERequestAmount = ''.METotal = '', MECDCode = '', MECDName = '', MEClinicianName = '', MEActivityStartDate = '', MEActivityTypeCode = '', MEActivityTypeName = '',
    MEPatientShare = '', MEPaymentAmount = '', MEStatusCode = '', MEStatusName = '', MEDenialCode = '', MEDenialName = '', MEDiscountValue = '', MEDeductibleAmount = '', MEPatientSharePercent = '';
function MEDPriorClaimViewActivityEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEDPriorClaimViewActivityEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var ActivityTypeCode = responseText.ActivityCode
    var ActivityName = responseText.ActivityName
    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            MEActivityStartDate = Ext.getCmp('MEDPriorClaimViewActivity-ActivityStartDate').getValue();
            MEVersionCode = Ext.getCmp('MEDPriorClaimViewActivity-VersionCode').getValue();
            MEVersionName = Ext.getCmp('MEDPriorClaimViewActivity-VersionCode');
            MEDetailCode = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode').getValue();
            MEDetailName = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('MEDPriorClaimViewActivity-Description').getValue();
            MELongDescription = Ext.getCmp('MEDPriorClaimViewActivity-LongDescription').getValue();
            MERequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount').getValue();
            MEDeductibleAmount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount').getValue();
            MERequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty').getValue();
            MENetPrice = Ext.getCmp('MEDPriorClaimViewActivity-NetPrice').getValue();
            MEList = Ext.getCmp('MEDPriorClaimViewActivity-List').getValue();
            MEPatientShare = Ext.getCmp('MEDPriorClaimViewActivity-PatientShare').getValue();
            MEPatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent').getValue();
            METotal = Ext.getCmp('MEDPriorClaimViewActivity-Total').getValue();
            MEPaymentAmount = Ext.getCmp('MEDPriorClaimViewActivity-PaymentAmount').getValue();
            MEStatusCode = Ext.getCmp('MEDPriorClaimViewActivity-StatusCode').getValue();
            MEStatusName = Ext.getCmp('MEDPriorClaimViewActivity-StatusCode').lastSelectionText;
            MEDenialCode = Ext.getCmp('MEDPriorClaimViewActivity-DenialCode').getValue();
            MEDenialName = Ext.getCmp('MEDPriorClaimViewActivity-DenialCode').lastSelectionText;

            MEDiscountValue = Ext.getCmp('MEDPriorClaimViewActivity-DiscountValue').getValue();
            MELoadMEDPriorRequestAcitvityNewMode();
            this.AddClaimRequestActivityFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', MEDPriorRequestActivityEditFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

function MEDPriorRequestActivityEditFormRender(form, login) {

    var record = CliamRequestActivityDummy;
    Ext.getCmp('MEDPriorClaimViewActivity-ActivityStartDate').setValue(record.get('ActivityStartDate'));
    //Ext.getCmp('MEDPriorClaimViewActivity-VersionCode').setComboValue(record.get('VersionCode'));
    Ext.getCmp('MEDPriorClaimViewActivity-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('MEDPriorClaimViewActivity-Description').setValue(record.get('Description'));
    Ext.getCmp('MEDPriorClaimViewActivity-LongDescription').setValue(record.get('LongDescription'));
    Ext.getCmp('MEDPriorClaimViewActivity-NetPrice').setValue(record.get('NetPrice'));
    Ext.getCmp('MEDPriorClaimViewActivity-RequestQty').setValue(record.get('RequestQty'));
    Ext.getCmp('MEDPriorClaimViewActivity-List').setValue(record.get('List'));
    Ext.getCmp('MEDPriorClaimViewActivity-PatientShare').setValue(record.get('PatientShare'));
    Ext.getCmp('MEDPriorClaimViewActivity-PaymentAmount').setValue(record.get('PaymentAmount'));
    Ext.getCmp('MEDPriorClaimViewActivity-StatusCode').setValue(record.get('StatusCode'));
    Ext.getCmp('MEDPriorClaimViewActivity-DenialCode').setValue(record.get('DenialCode'));
    Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent').setValue(record.get('PatientSharePercent'));
    Ext.getCmp('MEDPriorClaimViewActivity-Total').setValue(record.get('Total'));
    Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount').setValue(record.get('RequestAmount'));
    Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount').setValue(record.get('Deductible_Amount'));

    METotal = Ext.getCmp('MEDPriorClaimViewActivity-Total').getValue();
    var VersionCode = Ext.getCmp('MEDPriorClaimViewActivity-VersionCode');
    var VersionDtlCode = Ext.getCmp('MEDPriorClaimViewActivity-DetailCode');
    var LongDesc = Ext.getCmp('MEDPriorClaimViewActivity-LongDescription');
    var ShortDesc = Ext.getCmp('MEDPriorClaimViewActivity-Description');

    var Deductible_Amount = Ext.getCmp('MEDPriorClaimViewActivity-Deductible_Amount');
    var RequestAmount = Ext.getCmp('MEDPriorClaimViewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('MEDPriorClaimViewActivity-RequestQty');
    var PatientSharePercent = Ext.getCmp('MEDPriorClaimViewActivity-PatientSharePercent');


    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.VersionCode from IM_ACTIVITY_DETAILS IAD where IAD.TypeCode in (Select TypeCode from IM_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);
    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        VersionDtlCode.enable();
        VersionDtlCode.clearValue();
        LongDesc.setValue('');
        ShortDesc.setValue('');
    }, this);

    var ProviderActivityType = Ext.getCmp('MEPriorApprovedClaims-ProviderActivityType').getValue();

    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ivd.VersionCode  in (Select IAD.VersionCode from ME_ACTIVITY_DETAILS IAD where nvl(ACTIVE,0)=1 and ACTIVITYTYPE=" + ProviderActivityType + " and IAD.TypeCode in (Select TypeCode from ME_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);

    if (Deductible_Amount) Deductible_Amount.on('valid', onReSubmissionRequestAmountValid, this);
    if (RequestAmount) RequestAmount.on('valid', onReSubmissionRequestAmountValid, this);
    if (RequestQty) RequestQty.on('valid', onReSubmissionRequestAmountValid, this);
    if (PatientSharePercent) PatientSharePercent.on('valid', onReSubmissionPatientSharePercentVaild, this);
    //if (PatientShare) PatientShare.on('valid', onReSubmissionPatientSharePercentVaild, this);
}
function MELoadMEDPriorRequestAcitvityNewMode(form, login) {

    record = CliamRequestActivityDummy;
    record.set('VersionCode', MEVersionCode);
    record.set('VersionName', MEVersionCode);
    record.set('ActivityStartDate', MEActivityStartDate);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);
    record.set('RequestQty', MERequestQty);
    record.set('NetPrice', MENetPrice);
    record.set('List', MEList);
    record.set('DiscountValue', MEDiscountValue);
    record.set('PatientShare', MEPatientShare);
    record.set('PaymentAmount', MEPaymentAmount);
    record.set('StatusCode', MEStatusCode);
    record.set('StatusName', MEStatusName);
    record.set('DenialCode', MEDenialCode);
    record.set('DenialName', MEDenialName);
    record.set('DenialName', MEDenialName);
    record.set('DenialName', MEDenialName);
    record.set('DenialName', MEDenialName);
    record.set('RequestAmount', MERequestAmount);
    record.set('Deductible_Amount', MEDeductibleAmount);
    record.set('PatientSharePercent', MEPatientSharePercent);
    record.set('Total', METotal);

}


function MEPriorClaimViewDiagnosisEdit(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PriorAddClaimRequestDiagnosisEdit'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEPriorClaimViewDiagnosisEditComplete, this);
    MEClaimRequestDiagnosis = record;
}

var METypeCode = '', METypeName = '', MEDetailCode = '', MEDetailName = '', MEDescription = '', MELongDescription = '';

function MEPriorClaimViewDiagnosisEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEPriorClaimViewDiagnosisEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var TypeCode = responseText.TypeCode
    var TypeName = responseText.TypeName
    this.AddMEClaimRequestDiagnosisForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddMEClaimRequestDiagnosisForm.addButton({
        text: 'Save',
        handler: function () {
            METypeCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-TypeCode').getValue();
            METypeName = Ext.getCmp('MEDPriorClaimViewDiagnosis-TypeCode').lastSelectionText;
            MEDetailCode = Ext.getCmp('MEDPriorClaimViewDiagnosis-DetailCode').getValue();
            MEDetailName = Ext.getCmp('MEDPriorClaimViewDiagnosis-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('MEDPriorClaimViewDiagnosis-Description').getValue();
            MELongDescription = Ext.getCmp('MEDPriorClaimViewDiagnosis-LongDescription').getValue();
            AddClaimRequestDiagnosisNewMode();
            this.AddMEClaimRequestDiagnosisFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddMEClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddMEClaimRequestDiagnosisForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddMEClaimRequestDiagnosisFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddMEClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddMEClaimRequestDiagnosisFormWindow = new Ext.Window({
        id: 'MEAddClaimRequestDiagnosisForm',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddMEClaimRequestDiagnosisForm.width + 10,
        height: this.AddMEClaimRequestDiagnosisForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddMEClaimRequestDiagnosisForm]
    });
    this.AddMEClaimRequestDiagnosisForm.on('render', MEDClaimRequestDiagnosisFormRender, this);
    this.AddMEClaimRequestDiagnosisFormWindow.show();

}

function AddClaimRequestDiagnosisNewMode(form, login) {
    MEClaimRequestDiagnosis = record;
    record.set('TypeCode', METypeCode);
    record.set('TypeName', METypeName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);

}

function MEDClaimRequestDiagnosisFormRender(form, login) {

    var record = MEClaimRequestDiagnosis;
    Ext.getCmp('MEDPriorClaimViewDiagnosis-TypeCode').setComboValue(record.get('TypeCode'));
    Ext.getCmp('MEDPriorClaimViewDiagnosis-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('MEDPriorClaimViewDiagnosis-Description').setValue(record.get('Description'));
    Ext.getCmp('MEDPriorClaimViewDiagnosis-LongDescription').setValue(record.get('LongDescription'));

}

function MEPriorClaimViewDiagnosisEdit(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewDiagnosis', Url = '/forms/Medical/MEDPriorClaimViewDiagnosis.xml', PKey = record.get('ID'), WidgetTitle = 'Activity';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

//function MEDPriorClaimViewActivityEdit(record) {
//    var NewCase = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.MEDPriorClaimViewActivity', Url = '/forms/Medical/MEDPriorClaimViewActivity.xml', PKey = record.get('ID'), WidgetTitle = 'Activity';
//    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
//}
function ChangePolicyPlan(form, login) {
    if (!form.isview) {
        var IndividualpolicyCode = Ext.getCmp('ChangePolicyPlan-IPPolicyIDCode');
        var PolicyCode = Ext.getCmp('ChangePolicyPlan-PolicyIDCode');
        var StartDate = Ext.getCmp('ChangePolicyPlan-StartDate');
        var EndDate = Ext.getCmp('ChangePolicyPlan-EndDate');
        var TypeCode = Ext.getCmp('ChangePolicyPlan-PolicyTypeCode');
        var PolicyPlanCode = Ext.getCmp('ChangePolicyPlan-PlanCode');
        var Category_Code = Ext.getCmp('ChangePolicyPlan-CategoryCode');

        IndividualpolicyCode.disable(); PolicyCode.disable(); StartDate.disable(); EndDate.disable();

        TypeCode.on('select', function (combo, record, index) {
            if (TypeCode.editValue == 1) {  //policy
                PolicyCode.enable(); PolicyCode.allowBlank = false; PolicyCode.isValid();
                IndividualpolicyCode.disable(); IndividualpolicyCode.clearValue(); IndividualpolicyCode.allowBlank = true; IndividualpolicyCode.isValid();
            }
            if (TypeCode.editValue == 2) { //Individual Policy
                IndividualpolicyCode.enable(); IndividualpolicyCode.allowBlank = false; IndividualpolicyCode.isValid();
                PolicyCode.disable(); PolicyCode.clearValue(); PolicyCode.allowBlank = true; PolicyCode.isValid();
            }
            Ext.getCmp('ChangePolicyPlan-PolicyName').setValue(null);
            Ext.getCmp('ChangePolicyPlan-StartDate').setValue(null);
            Ext.getCmp('ChangePolicyPlan-EndDate').setValue(null);
        }, this);


        if (Category_Code) Category_Code.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            if (TypeCode.editValue == 1) {
                evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE  in (select CATEGORYCODE from IM_POLICY_CATEGORYDTL  where policycode=" + PolicyCode.editValue + " ) ";
            }
            else {
                evt.combo.store.baseParams.filter = " Cat.CATEGORY_CODE  in (select CATEGORYCODE from IM_NGIINDPOLICYCATEGORY  where INDIVIDUALPOLICYCODE=" + IndividualpolicyCode.editValue + " )";
            }
        }, this);

        //var ElementTemplateCode = Ext.getCmp('ChangePolicyPlan-ElementTemplateCode');

        //if (ElementTemplateCode) ElementTemplateCode.on('beforequery', function (evt) {
        //    evt.combo.lastQuery = '1=2';
        //    if (ElementTemplateCode != '')
        //        evt.combo.store.baseParams.filter = " TEM.ISINDIVIDUAL=0";
        //    else
        //        evt.combo.store.baseParams.filter = "1=2";
        //}, this);

        //ElementTemplateCode.on('select', ChangePolicyPlanElementTemplate, this);

        PolicyPlanCode.on('select', OnCPPPolicyPlanCodeChange, this);
    }
}

function ChangePolicyPlanElementTemplate(combo, record, index) {

    onBusinessTypeclear('ChangePolicyPlanElementDltList');

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ElementTemplate',
            Template: combo.getValue()

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ChangePolicyPlanElementTemplateComplete, this);

}

function ChangePolicyPlanElementTemplateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ChangePolicyPlanElementTemplateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }


    var PrimKey = Ext.getCmp('ChangePolicyPlan').selectedIndex;

    var PolicyElementDChangePolicyPlanElementDltListltList = Ext.getCmp('ChangePolicyPlanElementDltList');

    for (cnt = 0; cnt < responseText.datum.length; cnt++) { //Element Detalis
        var Record = responseText.datum[cnt];
        ChangePolicyPlanElementDltList.storeId += 1;
        var newRecord = new ChangePolicyPlanElementDltList.recordType({
            ID: ChangePolicyPlanElementDltList.storeId,
            Serialno: ChangePolicyPlanElementDltList.storeId,
            Element_Code: Record.ElementCode,
            Element_Name: Record.ElementName,
            ChangePolicyPlanCode: (PrimKey == -1 ? 1 : PrimKey),
            Description: Record.Remarks,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            CustomerCode: 0,
            LegalentityCode: 0,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        ChangePolicyPlanElementDltList.stopEditing();
        ChangePolicyPlanElementDltList.store.add(newRecord);
        ChangePolicyPlanElementDltList.store.totalLength = ChangePolicyPlanElementDltList.store.getTotalCount() + 1;
        ChangePolicyPlanElementDltList.pageBar.updateInfo();

    }


}

function OnCPPPolicyPlanCodeChange(combo, record, index) {

    onBusinessTypeclear('ChangePolicyPlanCoveredNetowrksDtlList');
    onBusinessTypeclear('ChangePolicyPlanExcludedGeograficAreasDtlList');
    onBusinessTypeclear('ChangePolicyPlanExcludedCountriesDtlList');
    onBusinessTypeclear('ChangePolicyPlanExcludedStatesDtlList');
    onBusinessTypeclear('ChangePolicyPlanExcludedCitiesDtlList');
    onBusinessTypeclear('ChangePolicyBenefitsDtlList');

    var PlanCode = Ext.getCmp('ChangePolicyPlan-PlanCode').editValue;

    var CategoryCode = Ext.getCmp('ChangePolicyPlan-CategoryCode').getValue();

    if (CategoryCode == '') {
        Ext.MessageBox.alert(login.modulename, 'Select the Category Name to Proceed!');
        Ext.getCmp('ChangePolicyPlan-PlanCode').clearValue();
        return true;
    }

    var polCode = 0, regtype = 0;
    var CategoryCode = Ext.getCmp('ChangePolicyPlan-CategoryCode').editValue;
    var PolicyCode = Ext.getCmp('ChangePolicyPlan-PolicyIDCode').editValue;//
    var IPPolicyIDCode = Ext.getCmp('ChangePolicyPlan-IPPolicyIDCode').editValue;
    var PolicyTypeCode = Ext.getCmp('ChangePolicyPlan-PolicyTypeCode').editValue;//

    if (PolicyTypeCode == 1) {
        polCode = PolicyCode;
        regtype = 0;
    }
    else {
        polCode = IPPolicyIDCode;
        regtype = 1;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PolicyLoad',
            PlanCode: PlanCode,
            CategoryCode: CategoryCode,
            PolicyCode: polCode,
            TypeCode: regtype,
            PolicyType: 0,
            IsChangePlan: 1,
            EmirateCode: 0
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CPPLoadReqComplete, this);

}

function CPPLoadReqComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CPPLoadReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var ChangePolicyPlanIncludeProvidersDtlList = Ext.getCmp('ChangePolicyPlanIncludeProvidersDtlList');

        for (cnt = 0; cnt < responseText.providertotalCount; cnt++) { //Provider
            var ProviderRecord = responseText.providerdatum[cnt];
            ChangePolicyPlanIncludeProvidersDtlList.storeId += 1;
            var newRecord = new ChangePolicyPlanIncludeProvidersDtlList.recordType({
                ID: ChangePolicyPlanIncludeProvidersDtlList.storeId,
                Serialno: ChangePolicyPlanIncludeProvidersDtlList.storeId,
                ProviderCode: ProviderRecord.ProviderCode,
                ProviderName: ProviderRecord.ProviderName,
                Active: 1,
                ChangePolicyPlanCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangePolicyPlanIncludeProvidersDtlList.stopEditing();
            ChangePolicyPlanIncludeProvidersDtlList.store.add(newRecord);
            ChangePolicyPlanIncludeProvidersDtlList.store.totalLength = ChangePolicyPlanIncludeProvidersDtlList.store.getTotalCount() + 1;
            ChangePolicyPlanIncludeProvidersDtlList.pageBar.updateInfo();

        }

        var ChangePolicyPlanExcludedGeograficAreasDtlList = Ext.getCmp('ChangePolicyPlanExcludedGeograficAreasDtlList');

        for (cnt = 0; cnt < responseText.geographictotalCount; cnt++) {   //Gerograhpic Area
            var Geographicrec = responseText.geographicdatum[cnt];

            ChangePolicyPlanExcludedGeograficAreasDtlList.storeId += 1;

            var newRecord = new ChangePolicyPlanExcludedGeograficAreasDtlList.recordType({
                ID: ChangePolicyPlanExcludedGeograficAreasDtlList.storeId,
                Serialno: ChangePolicyPlanExcludedGeograficAreasDtlList.storeId,
                GaIDName: Geographicrec.GeoGraphicName,
                GaIDCode: Geographicrec.GeoGraphicCode,
                GaName: Geographicrec.GAName,
                ChangePolicyPlanCode: 1,
                Active: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangePolicyPlanExcludedGeograficAreasDtlList.stopEditing();
            ChangePolicyPlanExcludedGeograficAreasDtlList.store.add(newRecord);
            ChangePolicyPlanExcludedGeograficAreasDtlList.store.totalLength = ChangePolicyPlanExcludedGeograficAreasDtlList.store.getTotalCount() + 1;
            ChangePolicyPlanExcludedGeograficAreasDtlList.pageBar.updateInfo();
            //Geographicrec.CompanyCode

        }


        var ChangePolicyPlanCoveredNetowrksDtlList = Ext.getCmp('ChangePolicyPlanCoveredNetowrksDtlList');

        for (cnt = 0; cnt < responseText.networktotalCount; cnt++) { //Network
            var NetworkRecord = responseText.networkdatum[cnt];
            ChangePolicyPlanCoveredNetowrksDtlList.storeId += 1;
            var newRecord = new ChangePolicyPlanCoveredNetowrksDtlList.recordType({
                ID: ChangePolicyPlanCoveredNetowrksDtlList.storeId,
                Serialno: ChangePolicyPlanCoveredNetowrksDtlList.storeId,
                NetworkIDCode: NetworkRecord.NetworkIDCode,
                NetworkIDName: NetworkRecord.NetworkIDName,
                NetworkName: NetworkRecord.NetworkName,
                ApplicableForCode: NetworkRecord.ApplicableForCode,
                ApplicableForName: NetworkRecord.ApplicableForName,
                Active: 1,
                ChangePolicyPlanCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangePolicyPlanCoveredNetowrksDtlList.stopEditing();
            ChangePolicyPlanCoveredNetowrksDtlList.store.add(newRecord);
            ChangePolicyPlanCoveredNetowrksDtlList.store.totalLength = ChangePolicyPlanCoveredNetowrksDtlList.store.getTotalCount() + 1;
            ChangePolicyPlanCoveredNetowrksDtlList.pageBar.updateInfo();

        }
        var total = 0;
        var ChangePolicyBenefitsDtlList = Ext.getCmp('ChangePolicyBenefitsDtlList');
        for (cnt = 0; cnt < responseText.benifittotalCount; cnt++) {  //Benefit Detail
            var BenefitRecord = responseText.benifitdatum[cnt];
            ChangePolicyBenefitsDtlList.storeId += 1;
            var newRecord = new ChangePolicyBenefitsDtlList.recordType({
                ID: ChangePolicyBenefitsDtlList.storeId,
                Serialno: ChangePolicyBenefitsDtlList.storeId,
                BenefitIDCode: BenefitRecord.BenefitIDCode,
                BenefitIDName: BenefitRecord.BenefitIDName,
                BenefitName: BenefitRecord.BenefitName,
                ParentName: BenefitRecord.ParentName,
                DefaultPremium: BenefitRecord.DefaultPremium,
                TypeCode: BenefitRecord.BenefitTypeCode,
                TypeName: BenefitRecord.BenefitTypeName,
                CardText: BenefitRecord.CardText,
                ApplySettingPremium: BenefitRecord.ApplySettingPremium,
                ApplyFullPermiumRefund: BenefitRecord.ApplyFullPermiumRefund,
                Active: 1,
                ChangePolicyPlanCode: 1,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            total += BenefitRecord.DefaultPremium;
            ChangePolicyBenefitsDtlList.stopEditing();
            ChangePolicyBenefitsDtlList.store.add(newRecord);
            ChangePolicyBenefitsDtlList.store.totalLength = ChangePolicyBenefitsDtlList.store.getTotalCount() + 1;
            ChangePolicyBenefitsDtlList.pageBar.updateInfo();

        }

        var ChangePolicyBenefitsDtlList = Ext.getCmp('ChangePolicyBenefitsDtlList');
        ChangePolicyBenefitsDtlList.store.load({
            params: {
                start: 0,
                limit: ChangePolicyBenefitsDtlList.pageSize
            }
        });


        var ChangePolicyPlanExcludedCountriesDtlList = Ext.getCmp('ChangePolicyPlanExcludedCountriesDtlList');
        for (cnt = 0; cnt < responseText.countrytotalCount; cnt++) { //Country Detail
            var CountryRecord = responseText.countrydatum[cnt];
            ChangePolicyPlanExcludedCountriesDtlList.storeId += 1;
            var newRecord = new ChangePolicyPlanExcludedCountriesDtlList.recordType({
                ID: ChangePolicyPlanExcludedCountriesDtlList.storeId,
                Serialno: ChangePolicyPlanExcludedCountriesDtlList.storeId,
                CountryCode: CountryRecord.CountryCode,
                CountryName: CountryRecord.CountryName,
                ChangePolicyPlanCode: 1,
                Active: 1,
                ChangePolicyPlanExcludedStatesDtlList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            ChangePolicyPlanExcludedCountriesDtlList.stopEditing();
            ChangePolicyPlanExcludedCountriesDtlList.store.add(newRecord);
            ChangePolicyPlanExcludedCountriesDtlList.store.totalLength = ChangePolicyPlanExcludedCountriesDtlList.store.getTotalCount() + 1;
            ChangePolicyPlanExcludedCountriesDtlList.pageBar.updateInfo();

            var ChangePolicyPlanExcludedStatesDtlList = Ext.getCmp('ChangePolicyPlanExcludedStatesDtlList');

            for (subcnt = 0; subcnt < responseText.statetotalCount; subcnt++) { //State 
                var StateRecord = responseText.statedatum[subcnt];

                if (CountryRecord.ID != StateRecord.GACountryCode) continue;

                ChangePolicyPlanExcludedStatesDtlList.storeId += 1;
                var subnewRecord = new ChangePolicyPlanExcludedStatesDtlList.recordType({
                    ID: ChangePolicyPlanExcludedStatesDtlList.storeId,
                    Serialno: ChangePolicyPlanExcludedStatesDtlList.storeId,
                    ProvinceCode: StateRecord.ProvinceCode,
                    ProvinceName: StateRecord.ProvinceName,
                    PecCode: ChangePolicyPlanExcludedCountriesDtlList.storeId,
                    Active: 1,
                    ChangePolicyPlanExcludedCitiesDtlList: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                ChangePolicyPlanExcludedStatesDtlList.stopEditing();
                ChangePolicyPlanExcludedStatesDtlList.store.add(subnewRecord);
                ChangePolicyPlanExcludedStatesDtlList.store.totalLength = ChangePolicyPlanExcludedStatesDtlList.store.getTotalCount() + 1;
                ChangePolicyPlanExcludedStatesDtlList.pageBar.updateInfo();

                var ChangePolicyPlanExcludedCitiesDtlList = Ext.getCmp('ChangePolicyPlanExcludedCitiesDtlList');

                for (subsubcnt = 0; subsubcnt < responseText.citytotalCount; subsubcnt++) { //City Detail
                    var CityRecord = responseText.citydatum[subsubcnt];

                    if (StateRecord.ID != CityRecord.GAEmirateCode) continue;

                    ChangePolicyPlanExcludedCitiesDtlList.storeId += 1;
                    var SubsubnewRecord = new ChangePolicyPlanExcludedCitiesDtlList.recordType({
                        ID: ChangePolicyPlanExcludedCitiesDtlList.storeId,
                        Serialno: ChangePolicyPlanExcludedCitiesDtlList.storeId,
                        PlaceCode: CityRecord.PlaceCode,
                        PlaceName: CityRecord.PlaceName,
                        ChangePolicyPlanCode: 1,
                        PESCode: ChangePolicyPlanExcludedStatesDtlList.storeId,
                        Active: 1,
                        //PolicyExcludedCitiesDtlList: null,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    ChangePolicyPlanExcludedCitiesDtlList.stopEditing();
                    ChangePolicyPlanExcludedCitiesDtlList.store.add(SubsubnewRecord);
                    ChangePolicyPlanExcludedCitiesDtlList.store.totalLength = ChangePolicyPlanExcludedCitiesDtlList.store.getTotalCount() + 1;
                    ChangePolicyPlanExcludedCitiesDtlList.pageBar.updateInfo();
                }
            }
        }
        var ChangePolicyPlanExcludedCountriesDtlList = Ext.getCmp('ChangePolicyPlanExcludedCountriesDtlList');
        ChangePolicyPlanExcludedCountriesDtlList.store.load({
            params: {
                start: 0,
                limit: ChangePolicyPlanExcludedCountriesDtlList.pageSize
            }
        });
    }
}

function MEClinicians(form, login) {



    if (!form.isView) {

        var StaffTypeCode = Ext.getCmp('MEClinicians-StaffTypeCode');
        StaffTypeCode.setComboValue(0);
        StaffTypeCode.disable();

        var SpecialtyCode = Ext.getCmp('MEClinicians-SpecialtyCode');
        if (SpecialtyCode) SpecialtyCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "active=1";
        }, this);

        //State filter based on Country 
        var StateCode = Ext.getCmp('MEClinicianProvider-StateCode');
        if (StateCode) StateCode.on('beforequery', function (evt) {
            var CountryCode = Ext.getCmp('MEClinicianProvider-CountryCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.COUNTRYCODE=" + CountryCode + "";
        }, this);

        //City filtered based on State

        var CityCode = Ext.getCmp('MEClinicianProvider-CityCode');
        if (CityCode) CityCode.on('beforequery', function (evt) {
            var StateCode = Ext.getCmp('MEClinicianProvider-StateCode').getValue();
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "gp.PROVINCECODE=" + StateCode + "";
        }, this);

        //var NGIClinicianProviderList = Ext.getCmp('MEClinicianProviderList');
        //NGIClinicianProviderList.getColumnModel().setHidden(6, true);

        //NGIClinicianProviderList.on('addrecord', function (evt) {
        //    if (form.selectedIndex == -1) {
        //        onBusinessTypeclear('MEClinicianProviderList');
        //        Ext.MessageBox.alert(login.modulename, 'Please save before add new Provider detail');
        //        return;
        //    }

        //}, this);

        var LicenceIDCode = Ext.getCmp('MEClinicians-LicenceIDCode');
        var ActivityTypeCode = Ext.getCmp('MEClinicians-ActivityTypeCode');
        if (LicenceIDCode) LicenceIDCode.on('beforequery', function (evt) {

            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "ACTIVITYTYPE=" + ActivityTypeCode.editValue + " and FILTERTYPE=0";
        }, this);


        var MEClinicianProviderList = Ext.getCmp('MEClinicianProviderList');
        MEClinicianProviderList.on('beforeedit', function (evt) {

            var ProviderIDCode = Ext.getCmp('MEClinicianProvider-ProviderIDCode');
            if (ProviderIDCode) {
                ProviderIDCode.lastQuery = '1=2';
                ProviderIDCode.store.baseParams.filter = "IM.PROVIDERTYPE=0";
            }

            var ProviderCode = evt.record.get('ProviderIDCode');
            var LicenceIDCode = Ext.getCmp('MEClinicianProvider-LicenceIDCode');
            if (ProviderCode == null || ProviderCode == 0) {
                LicenceIDCode.lastQuery = '1=2';
                LicenceIDCode.store.baseParams.filter = "1=2";
            }
            else {
                LicenceIDCodelastQuery = '1=2';
                LicenceIDCode.store.baseParams.filter = "ACTIVITYTYPE in (select ACTIVITYTYPE  from me_providers where PROVIDERCODE=" + ProviderCode + ") and FILTERTYPE=0";
            }

        }, this);

    }
}




function OnlineClaimProcessClear(button, options) {

    Ext.getCmp('OnlineClaimSearch-Claimref').setValue(null);
    Ext.getCmp('OnlineClaimSearch-CardNo').setValue(null);
    Ext.getCmp('OnlineClaimSearch-Member_Name').setValue(null);
    Ext.getCmp('OnlineClaimSearch-ClinicianName').setValue(null);
    Ext.getCmp('OnlineClaimSearch-RequestFromDate').setValue(null);
    Ext.getCmp('OnlineClaimSearch-RequestToDate').setValue(null);
    //Ext.getCmp('OnlineClaimSearch-EmiratesID').setValue(null);
    //Ext.getCmp('OnlineClaimSearch-RelationCode').clearValue();
    //Ext.getCmp('OnlineClaimSearch-Providermobileno').setValue(null);
    Ext.getCmp('OnlineClaimSearch-TreatmentTypeCode').clearValue();
    Ext.getCmp('OnlineClaimSearch-MedicalFile').setValue(null);
    Ext.getCmp('OnlineClaimSearch-CDCode').clearValue();
    Ext.getCmp('OnlineClaimSearch-ClaimstatusCode').clearValue();
    Ext.getCmp('OnlineClaimSearch-Provider_Code').clearValue();
    //Ext.getCmp('OnlineClaimSearch-PayerCode').clearValue();
    Ext.getCmp('OnlineClaimSearch-ProviderName').setValue(null);
    //Ext.getCmp('MEOnlineClaimSearch-PolicyStartDate').setValue(null);
    //Ext.getCmp('MEOnlineClaimSearch-Validtodate').setValue(null);
    //Ext.getCmp('MEOnlineClaimSearch-ProviderCode').setValue(null);

    FilterQry = '1=2';
    DetailStore = Ext.getCmp('OnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }


}


function OnlineClaimsSearchShowMemberHistory(button, options) {

    var FilterQry = '1=1';

    //var ClaimCode = Ext.getCmp('OnlineClaimSearch-ClaimCode');

    //if (ClaimCode.getValue() != '' && ClaimCode.getValue() != null) {
    //    if (FilterQry == '')
    //        FilterQry += " CPH.Member_Code in (Select Member_Code from IM_Claim_Process_Header where (ACR_Form_No) like ('" + ClaimCode.getValue() + "%')) ";
    //    else
    //        FilterQry += " and CPH.Member_Code in (Select Member_Code from IM_Claim_Process_Header where (ACR_Form_No) like ('" + ClaimCode.getValue() + "%')) ";
    //}

    DetailStore = Ext.getCmp('OnlineClaimReqApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineClaimReqApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 1000,
            }
        });
    }

    DetailStore = Ext.getCmp('OnlineClaimMemberExclusionList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineClaimMemberExclusion&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}


var ACActivityTypeCode = '', ActivityTypeChecked = '', CliamRequestActivityDummy = '', CliamRequestDiagnosisDummy = '';
function OnlineClaimAppProcessReqAddActivity(form, login) {

    var Diagnosis = Ext.getCmp('OnlineApprovedClaims-Diagnosis');
    var Drugs = Ext.getCmp('OnlineApprovedClaims-Drugs');
    var Procedure = Ext.getCmp('OnlineApprovedClaims-Procedures');
    var ServiceList = Ext.getCmp('OnlineApprovedClaims-DubaiServiceList');
    var HCPCS = Ext.getCmp('OnlineApprovedClaims-HCPCS');
    if (Drugs.checked == false && Procedure.checked == false && ServiceList.checked == false && HCPCS.checked == false && Diagnosis.checked == false) {
        Ext.MessageBox.alert(login.modulename, 'Please Choose checkbox');
        return;
    }
    else {
        if (Drugs.checked == true) {
            ActivityTypeChecked = 5;
            ACActivityTypeCode = '100000000000000003';
        }
        if (Procedure.checked == true) {
            ActivityTypeChecked = 3;
            ACActivityTypeCode = '100000000000000002';
        }
        if (ServiceList.checked == true) {
            ActivityTypeChecked = 8;
            ACActivityTypeCode = '100000000000000004';
        }
        if (HCPCS.checked == true) {
            ActivityTypeChecked = 4;
            ACActivityTypeCode = '100000000000000006';

        }
        if (Diagnosis.checked == true) {
            ActivityTypeChecked = 1;
            ACActivityTypeCode = '100000000000000001';
        }
        if (Diagnosis.checked == true) {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/ClaimProcessing.aspx',
                params: {
                    action: 'OnlineDiagnosisClaimProcessingActivity'
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', OnlineAddNewActivityDiagnosisComplete, this);
        }
        else {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/ClaimProcessing.aspx',
                params: {
                    action: 'OnlineAddClaimProcessingActivity',
                    ActivityTypeChecked: ActivityTypeChecked,
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', OnlineAddNewActivityComplete, this);
        }
    }
}

var NewActivityWindow = '';
var actycode = '', net = 0;
function OnlineAddNewActivityComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnlineAddNewActivityComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var ActivityTypeCode = responseText.ActivityCode
    var ActivityName = responseText.ActivityName
    this.AddOnlineClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddOnlineClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            var ActivityStartDate = Ext.getCmp('OnlineNewActivity-ActivityStartDate');
            var TreatmentTypeCode = Ext.getCmp('OnlineNewActivity-TreatmentTypeCode');
            var VersionCode = Ext.getCmp('OnlineNewActivity-VersionCode');
            var DetailCode = Ext.getCmp('OnlineNewActivity-DetailCode');
            var Description = Ext.getCmp('OnlineNewActivity-Description');
            var LongDescription = Ext.getCmp('OnlineNewActivity-ShtDescription');
            var RequestQty = Ext.getCmp('OnlineNewActivity-RequestQty');
            var NetPrice = Ext.getCmp('OnlineNewActivity-NetPrice');
            var RequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount');
            var Total = Ext.getCmp('OnlineNewActivity-Total');
            var PatientSharepercentage = Ext.getCmp('OnlineNewActivity-PatientSharepercentage');
            var PatientShare = Ext.getCmp('OnlineNewActivity-PatientShare');
            var CDCode = Ext.getCmp('OnlineNewActivity-CDCode');
            var ClinicianName = Ext.getCmp('OnlineNewActivity-ClinicianName');
            //net = (1 * RequestAmount.getValue()) * (1 * RequestQty.getValue())
            //NetPrice.setValue(net);
            var OnlineNewActivityList = Ext.getCmp('OnlineClaimViewActivityList');
            var Primary = Ext.getCmp('OnlineApprovedClaims').selectedIndex;

            OnlineNewActivityList.storeId += 1;
            var StoreID = OnlineNewActivityList.storeId;
            var newRecord = new OnlineNewActivityList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                ActivityTypeCode: ACActivityTypeCode,
                ActivityTypeName: ActivityName,
                TreatmentTypeCode: TreatmentTypeCode.getValue(),
                TreatmentTypeName: TreatmentTypeCode.lastSelectionText,
                VersionCode: VersionCode.getValue(),
                VersionName: VersionCode.lastSelectionText,
                ProviderName: null,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                ShtDescription: LongDescription.getValue(),
                LongDescription: LongDescription.getValue(),
                NetPrice: NetPrice.getValue(),
                CDCode: CDCode.getValue(),
                CDName: CDCode.lastSelectionText,
                ClinicianName: ClinicianName.getValue(),
                RequestAmount: RequestAmount.getValue(),
                RequestQty: RequestQty.getValue(),
                PatientSharepercentage: PatientSharepercentage.getValue(),
                PatientShare: PatientShare.getValue(),
                Total: Total.getValue(),
                ActivityStartDate: ActivityStartDate.getValue(),
                ActivityEndDate: null,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            OnlineNewActivityList.stopEditing();
            OnlineNewActivityList.store.add(newRecord);
            OnlineNewActivityList.store.totalLength = OnlineNewActivityList.store.getTotalCount() + 1;
            OnlineNewActivityList.pageBar.updateInfo();

            this.AddOnlineClaimRequestActivityFormWindow.close();
            /*var OnlineClaimViewActivityList = Ext.getCmp('OnlineClaimViewActivityList');
            OnlineClaimViewActivityList.store.load({
                params: {
                    start: 0,
                    limit: OnlineClaimViewActivityList.pageSize
                }
            });*/

        },

        scope: this,
        tabIndex: this.AddOnlineClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddOnlineClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddOnlineClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddOnlineClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddOnlineClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddOnlineClaimRequestActivityForm',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddOnlineClaimRequestActivityForm.width + 10,
        height: this.AddOnlineClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddOnlineClaimRequestActivityForm]
    });

    this.AddOnlineClaimRequestActivityForm.on('render', OnlineClaimViewActivityRender, this);
    this.AddOnlineClaimRequestActivityFormWindow.show();

}

function OnlineClaimViewActivityRender(form, login) {
    var VersionCode = Ext.getCmp('OnlineNewActivity-VersionCode');
    var VersionDtlCode = Ext.getCmp('OnlineNewActivity-DetailCode');
    // var LongDesc = Ext.getCmp('MEOnlineClaimViewActivity-LongDesc');
    //  var ShortDesc = Ext.getCmp('MEOnlineClaimViewActivity-ShortDesc');
    var ClinicianCode = Ext.getCmp('OnlineNewActivity-CDCode');
    // var CProvider = Ext.getCmp('PriorRequestActivity-ProviderName');
    //VersionDtlCode.disable();

    if (VersionCode) VersionCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.VersionCode from IM_ACTIVITY_DETAILS IAD where IAD.TypeCode in (Select TypeCode from IM_ACTIVITY_TYPES where Value =" + ActivityTypeChecked + "))";
    }, this);
    if (VersionCode) VersionCode.on('select', function (combo, record, index) {
        VersionDtlCode.enable();
        VersionDtlCode.clearValue();
        // LongDesc.setValue('');
        // ShortDesc.setValue('');
    }, this);
    if (VersionDtlCode) VersionDtlCode.on('beforequery', function (evt) {
        var VersCode = VersionCode.getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "ivd.VersionCode =" + VersCode + "";
    }, this);

    /* if (ClinicianCode) ClinicianCode.on('beforequery', function (evt) {
         evt.combo.lastQuery = '1=2';
         evt.combo.store.baseParams.filter = "VersionCode in (Select IAD.Version_Code from IM_VERSION_FILTER_TYPE IAD where IAD.SourceProvider = " + ReqSourceProvider + " and IAD.FILTER_CODE in (Select FILTER_CODE from IM_VERSION_FILTER where FILTER_ID = 0))";
 
     }, this);*/

    var RequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('OnlineNewActivity-RequestQty');
    var Total = Ext.getCmp('OnlineNewActivity-Total');
    var PatientSharePercent = Ext.getCmp('OnlineNewActivity-PatientSharepercentage');
    var PatientShare = Ext.getCmp('OnlineNewActivity-PatientShare');
    var tot = 0;

    if (PatientSharePercent) PatientSharePercent.on('blur', onOnlineatientSharePercentBlur, this);
    if (PatientShare) PatientShare.on('blur', onOnlinePatientShareBlur, this);
    if (RequestAmount) RequestAmount.on('blur', onOnlineRequestAmountBlur, this);
    RequestQty.on('valid', onOnlineRequestQtyValid, this);

}

function onOnlineatientSharePercentBlur(field) {
    var PatientSharePercent = Ext.getCmp('OnlineNewActivity-PatientSharepercentage');
    var PatientShare = Ext.getCmp('OnlineNewActivity-PatientShare');
    var Total = Ext.getCmp('OnlineNewActivity-Total');

    tot = ((1 * Total.getValue()) * ((1 * PatientSharePercent.getValue()) / 100));
    PatientShare.setValue(tot);
}

function onOnlinePatientShareBlur(field) {
    var PatientSharePercent = Ext.getCmp('OnlineNewActivity-PatientSharepercentage');
    var PatientShare = Ext.getCmp('OnlineNewActivity-PatientShare');
    var Total = Ext.getCmp('OnlineNewActivity-Total');

    tot = (((1 * PatientShare.getValue()) / (1 * Total.getValue())) * 100)
    //tot = (((1 * Total.getValue()) / (1 * PatientShare.getValue()))*100);
    PatientSharePercent.setValue(Math.round(tot.toFixed(4)));

}

function onOnlineRequestAmountBlur(field) {
    var RequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('OnlineNewActivity-RequestQty');
    var Total = Ext.getCmp('OnlineNewActivity-Total');
    if (RequestQty.getValue() == '') {
        var InitialAmount = RequestAmount.getValue();
        Total.setValue(InitialAmount);
    }
}

function onOnlineRequestQtyValid(Field) {

    var RequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('OnlineNewActivity-RequestQty');
    var Total = Ext.getCmp('OnlineNewActivity-Total');

    var Tot_Amounts = (RequestAmount.getValue() * Field.getValue());
    Total.setValue(Tot_Amounts);


}

function OnlineAddNewActivityDiagnosisComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', OnlineAddNewActivityDiagnosisComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.AddOnlineDiagnosisActivityForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddOnlineDiagnosisActivityForm.addButton({
        text: 'Save',
        handler: function () {
            var TypeCode = Ext.getCmp('OnlineClaimViewDiagnosis-TypeCode');
            var DetailCode = Ext.getCmp('OnlineClaimViewDiagnosis-DetailCode');
            var Description = Ext.getCmp('OnlineClaimViewDiagnosis-Description');
            var LongDescription = Ext.getCmp('OnlineClaimViewDiagnosis-LongDescription');
            var OnlineClaimViewDiagnosisList = Ext.getCmp('OnlineClaimViewDiagnosisList');
            var Primary = Ext.getCmp('OnlineApprovedClaims').selectedIndex;

            OnlineClaimViewDiagnosisList.storeId += 1;
            var StoreID = OnlineClaimViewDiagnosisList.storeId;
            var newRecord = new OnlineClaimViewDiagnosisList.recordType({
                ID: StoreID,
                SerialNo: StoreID,
                Claim_Code: Primary == -1 ? 1 : Primary,
                DetailCode: DetailCode.getValue(),
                DetailName: DetailCode.lastSelectionText,
                Description: Description.getValue(),
                LongDescription: LongDescription.getValue(),
                Activity_Code: ACActivityTypeCode,
                TypeCode: TypeCode.getValue(),
                TypeName: TypeCode.lastSelectionText,
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            OnlineClaimViewDiagnosisList.stopEditing();
            OnlineClaimViewDiagnosisList.store.add(newRecord);
            OnlineClaimViewDiagnosisList.store.totalLength = OnlineClaimViewDiagnosisList.store.getTotalCount() + 1;
            OnlineClaimViewDiagnosisList.pageBar.updateInfo();

            this.AddOnlineDiagnosisActivityFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddOnlineDiagnosisActivityForm.FormFieldsCount + 2
    });
    this.AddOnlineDiagnosisActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddOnlineDiagnosisActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddOnlineDiagnosisActivityForm.FormFieldsCount + 2
    });
    this.AddOnlineDiagnosisActivityFormWindow = new Ext.Window({
        id: 'AddOnlineDiagnosisActivityForm',
        title: 'Diagnosis',
        closable: true,
        minimizable: false,
        width: this.AddOnlineDiagnosisActivityForm.width + 10,
        height: this.AddOnlineDiagnosisActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddOnlineDiagnosisActivityForm]
    });

    this.AddOnlineDiagnosisActivityFormWindow.show();
}
/*
function OnlineNGIClaimsProcessEdit(record) {

    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineApprovedClaims', Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/OnlineApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'Request Claim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function OnlineNGIClaimsProcessView(record) {
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineApprovedClaims', Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/OnlineApprovedClaims.xml', PKey = record.get('ID'), WidgetTitle = 'Request Claim';
    NewCase.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);

}
*/
var ACActivityTypeCode = '', ActivityTypeChecked = '', CliamRequestActivityDummy = '', CliamRequestDiagnosisDummy = '';

function OnlineClaimViewActivityEdit(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/ClaimProcessing.aspx',
        params: {
            action: 'OnlineAddClaimProcessingActivity',
            ActivityTypeChecked: ActivityTypeChecked
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', OnlineClaimViewActivityEditComplete, this);
    CliamRequestActivityDummy = record;
}

function OnlineClaimViewDiagnosisEdit(record) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/ClaimProcessing.aspx',
        params: {
            action: 'OnlineDiagnosisClaimProcessingActivity'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddClaimRequestDiagnosisComplete, this);
    MEClaimRequestDiagnosis = record;
}
var MEActivityStartDate = '', MEVersionCode = '', MEVersionName = '', MEDetailCode = '', MEDetailName = '', MEDescription = '', MELongDescription = '', MERequestQty = '', METreatmentTypeCode = '', METreatmentTypeName = '';
var MENetPrice = '', MERequestAmount = '', METotal = '', MECDCode = '', MECDName = '', MEClinicianName = '', MEActivityStartDate = '', MEActivityTypeCode = '', MEActivityTypeName = '', MEPatientSharepercentage = '', MEPatientShare = '';

function OnlineClaimViewActivityEditComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', OnlineClaimViewActivityEditComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var ActivityTypeCode = responseText.ActivityTypeCode
    var ActivityName = responseText.ActivityName
    this.AddClaimRequestActivityForm = new Ext.form.FormPanel(responseText.PriorRequestActivityCofig);
    this.AddClaimRequestActivityForm.addButton({
        text: 'Save',
        handler: function () {
            MEActivityStartDate = Ext.getCmp('OnlineNewActivity-ActivityStartDate').getValue();
            MEVersionCode = Ext.getCmp('OnlineNewActivity-VersionCode').getValue();
            MEVersionName = Ext.getCmp('OnlineNewActivity-VersionCode').lastSelectionText;
            METreatmentTypeCode = Ext.getCmp('OnlineNewActivity-TreatmentTypeCode').getValue();
            METreatmentTypeName = Ext.getCmp('OnlineNewActivity-TreatmentTypeCode').lastSelectionText;
            MEDetailCode = Ext.getCmp('OnlineNewActivity-DetailCode').getValue();
            MEDetailName = Ext.getCmp('OnlineNewActivity-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('OnlineNewActivity-Description').getValue();
            //MELongDescription = Ext.getCmp('MEOnlineClaimViewActivity-LongDescription').getValue();
            MERequestQty = Ext.getCmp('OnlineNewActivity-RequestQty').getValue();
            MENetPrice = Ext.getCmp('OnlineNewActivity-NetPrice').getValue();
            MERequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount').getValue();
            METotal = Ext.getCmp('OnlineNewActivity-Total').getValue();
            MECDCode = Ext.getCmp('OnlineNewActivity-CDCode').getValue();
            MEPatientSharepercentage = Ext.getCmp('OnlineNewActivity-PatientSharepercentage').getValue();
            MEPatientShare = Ext.getCmp('OnlineNewActivity-PatientShare').getValue();
            MEClinicianName = Ext.getCmp('OnlineNewActivity-ClinicianName').getValue();
            AddOnlineClaimRequestActivityNewMode();
            this.AddClaimRequestActivityFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestActivityFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestActivityForm.FormFieldsCount + 2
    });
    this.AddClaimRequestActivityFormWindow = new Ext.Window({
        id: 'AddClaimRequestActivityFormWindow',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestActivityForm.width + 10,
        height: this.AddClaimRequestActivityForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestActivityForm]
    });
    this.AddClaimRequestActivityForm.on('render', AddOnlineClaimRequestActivityEditFormRender, this);
    this.AddClaimRequestActivityFormWindow.show();

}

var METypeCode = '', METypeName = '';
//var MENetPrice = '', MERequestAmount = ''.METotal = '', MECDCode = '', MECDName = '', MEClinicianName = '', MEActivityStartDate = '', MEActivityTypeCode = '', MEActivityTypeName = '';

function AddClaimRequestDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddClaimRequestDiagnosisComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    var TypeCode = responseText.TypeCode
    var TypeName = responseText.TypeName
    this.AddClaimRequestDiagnosisForm = new Ext.form.FormPanel(responseText.PriorRequestDiagnosisCofig);
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Save',
        handler: function () {
            METypeCode = Ext.getCmp('OnlineClaimViewDiagnosis-TypeCode').getValue();
            METypeName = Ext.getCmp('OnlineClaimViewDiagnosis-TypeCode').lastSelectionText;
            MEDetailCode = Ext.getCmp('OnlineClaimViewDiagnosis-DetailCode').getValue();
            MEDetailName = Ext.getCmp('OnlineClaimViewDiagnosis-DetailCode').lastSelectionText;
            MEDescription = Ext.getCmp('OnlineClaimViewDiagnosis-Description').getValue();
            MELongDescription = Ext.getCmp('OnlineClaimViewDiagnosis-LongDescription').getValue();
            //var MEOnlineClaimViewDiagnosisList = Ext.getCmp('MEOnlineClaimViewDiagnosisList');
            //var Primary = Ext.getCmp('MEOnlineApprovedClaims').selectedIndex;
            AddClaimRequestDiagnosisNewMode();
            this.AddMEClaimRequestDiagnosisFormWindow.close();
        },

        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddClaimRequestDiagnosisFormWindow.close();

        },
        scope: this,
        tabIndex: this.AddClaimRequestDiagnosisForm.FormFieldsCount + 2
    });
    this.AddClaimRequestDiagnosisFormWindow = new Ext.Window({
        id: 'AddClaimRequestDiagnosisForm',
        title: 'Activiity',
        closable: true,
        minimizable: false,
        width: this.AddClaimRequestDiagnosisForm.width + 10,
        height: this.AddClaimRequestDiagnosisForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddClaimRequestDiagnosisForm]
    });
    this.AddClaimRequestDiagnosisForm.on('render', AddClaimRequestDiagnosisFormRender, this);
    this.AddClaimRequestDiagnosisFormWindow.show();

}

function AddClaimRequestDiagnosisFormRender(form, login) {
    var record = MEClaimRequestDiagnosis;
    Ext.getCmp('OnlineClaimViewDiagnosis-TypeCode').setComboValue(record.get('TypeCode'));
    Ext.getCmp('OnlineClaimViewDiagnosis-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('OnlineClaimViewDiagnosis-Description').setValue(record.get('Description'));
    Ext.getCmp('OnlineClaimViewDiagnosis-LongDescription').setValue(record.get('LongDescription'));
}

function AddOnlineClaimRequestActivityEditFormRender(form, login) {
    var record = CliamRequestActivityDummy;
    Ext.getCmp('OnlineNewActivity-ActivityStartDate').setValue(record.get('ActivityStartDate'));
    Ext.getCmp('OnlineNewActivity-VersionCode').setComboValue(record.get('VersionCode'));
    Ext.getCmp('OnlineNewActivity-TreatmentTypeCode').setComboValue(record.get('TreatmentTypeCode'));
    Ext.getCmp('OnlineNewActivity-DetailCode').setComboValue(record.get('DetailCode'));
    Ext.getCmp('OnlineNewActivity-Description').setValue(record.get('Description'));
    //Ext.getCmp('MEOnlineClaimViewActivity-LongDescription').setValue(record.get('LongDescription'));
    Ext.getCmp('OnlineNewActivity-NetPrice').setValue(record.get('NetPrice'));
    Ext.getCmp('OnlineNewActivity-RequestAmount').setValue(record.get('RequestAmount'));
    Ext.getCmp('OnlineNewActivity-RequestQty').setValue(record.get('RequestQty'));
    Ext.getCmp('OnlineNewActivity-Total').setValue(record.get('Total'));
    Ext.getCmp('OnlineNewActivity-CDCode').setComboValue(record.get('CDCode'));
    Ext.getCmp('OnlineNewActivity-ClinicianName').setValue(record.get('ClinicianName'));
    Ext.getCmp('OnlineNewActivity-PatientSharepercentage').setValue(record.get('PatientSharepercentage'));
    Ext.getCmp('OnlineNewActivity-PatientShare').setValue(record.get('PatientShare'));
    // Ext.getCmp('MEOnlineClaimViewActivity-ProviderName').setValue(record.get('ProviderName'));

    var RequestAmount = Ext.getCmp('OnlineNewActivity-RequestAmount');
    var RequestQty = Ext.getCmp('OnlineNewActivity-RequestQty');
    var Total = Ext.getCmp('OnlineNewActivity-Total');
    var PatientSharePercent = Ext.getCmp('OnlineNewActivity-PatientSharepercentage');
    var PatientShare = Ext.getCmp('OnlineNewActivity-PatientShare');

    var tot = 0;

    if (PatientSharePercent) PatientSharePercent.on('blur', onOnlineatientSharePercentBlur, this);
    if (PatientShare) PatientShare.on('blur', onOnlinePatientShareBlur, this);
    if (RequestAmount) RequestAmount.on('blur', onOnlineRequestAmountBlur, this);
    RequestQty.on('valid', onOnlineRequestQtyValid, this);
}


function AddOnlineClaimRequestActivityNewMode(form, login) {

    var record = CliamRequestActivityDummy;
    record.set('VersionCode', MEVersionCode);
    record.set('VersionName', MEVersionName);
    record.set('TreatmentTypeCode', METreatmentTypeCode);
    record.set('TreatmentTypeName', METreatmentTypeName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);
    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);
    record.set('RequestQty', MERequestQty);
    record.set('CDCode', MECDCode);
    record.set('CDName', MECDName);
    record.set('ClinicianName', MEClinicianName);
    record.set('RequestAmount', MERequestAmount);
    record.set('Total', METotal);
    record.set('PatientSharepercentage', MEPatientSharepercentage);
    record.set('PatientShare', MEPatientShare);
    //record.set('Total', METotal);
}

function AddClaimRequestDiagnosisNewMode(form, login) {
    var record = MEClaimRequestDiagnosis;
    record.set('TypeCode', METypeCode);
    record.set('TypeName', METypeName);
    record.set('DetailCode', MEDetailCode);
    record.set('DetailName', MEDetailName);

    record.set('Description', MEDescription);
    record.set('LongDescription', MELongDescription);
    //record.set('RequestQty', MERequestQty);apda 
    //record.set('CDCode', MECDCode);
    //record.set('CDName', MECDName);
    //record.set('ClinicianName', MEClinicianName);
    //record.set('RequestAmount', MERequestAmount);
    //record.set('Total', METotal);
    //record.set('Total', METotal);
}



function ShowPriorAuthorizationRA(form, login) {

    var FilterQry = '';
    if (FilterQry == '')
        FilterQry += " Gen12.Constantvalue  =2";
    else
        FilterQry += " and Gen12.Constantvalue  =2";

    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }
}

function ShowPriorAuthorizationReSubmission(form, login) {

    PriorSearchHistory();
    var FilterQry = ClaimFilterQry;

    if (FilterQry == '')
        FilterQry += " CRH.IsClaimSubmitted=1 ";
    else
        FilterQry += " and CRH.IsClaimSubmitted=1 ";

    FilterQry = encodeURIComponent(FilterQry);
    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.Medical.Network.PriorAuthorization.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 100,
            }
        });
    }
}

function onOnlineDeductableValueValid(Field) {

    var DeductableValue = Ext.getCmp('OnlineApprovedClaims-DeductableValue');
    var OrginalPatientShare = Ext.getCmp('OnlineApprovedClaims-PatientShare');
    var RequestAmount = Ext.getCmp('OnlineApprovedClaims-RequestAmount');
    var Total = Ext.getCmp('OnlineApprovedClaims-NetAmount');


    var Tot_Amounts = ((RequestAmount.getValue() * 1) - ((OrginalPatientShare.getValue() * 1) + (Field.getValue() * 1)));
    Total.setValue(Tot_Amounts);

}

function onOnlinePatientShareValueValid(Field) {

    var DeductableValue = Ext.getCmp('OnlineApprovedClaims-DeductableValue');
    var PatientShare = Ext.getCmp('OnlineApprovedClaims-PatientShare');
    var NetAmount = Ext.getCmp('OnlineApprovedClaims-NetAmount');
    var InvoiceNumber = Ext.getCmp('OnlineApprovedClaims-RequestAmount');
    //var DeductableValue = Ext.getCmp('OnlineApprovedClaims-DeductableValue');
    //var OrginalPatientShare = Ext.getCmp('OnlineApprovedClaims-OrginalPatientShare');
    //var RequestAmount = Ext.getCmp('OnlineApprovedClaims-RequestAmount');
    //var Total = Ext.getCmp('OnlineApprovedClaims-Total');


    var Tot_Amounts = ((InvoiceNumber.getValue() * 1) - ((Field.getValue() * 1) + (DeductableValue.getValue() * 1)));
    NetAmount.setValue(Tot_Amounts);

}

function onOnlineInvoiceNumberValueValid(Field) {

    var DeductableValue = Ext.getCmp('OnlineApprovedClaims-DeductableValue');
    var PatientShare = Ext.getCmp('OnlineApprovedClaims-PatientShare');
    var NetAmount = Ext.getCmp('OnlineApprovedClaims-NetAmount');
    var InvoiceNumber = Ext.getCmp('OnlineApprovedClaims-RequestAmount');
    //var DeductableValue = Ext.getCmp('OnlineApprovedClaims-DeductableValue');
    //var OrginalPatientShare = Ext.getCmp('OnlineApprovedClaims-OrginalPatientShare');
    //var RequestAmount = Ext.getCmp('OnlineApprovedClaims-RequestAmount');
    //var Total = Ext.getCmp('OnlineApprovedClaims-Total');


    var Tot_Amounts = ((Field.getValue() * 1) - ((PatientShare.getValue() * 1) + (DeductableValue.getValue() * 1)));
    NetAmount.setValue(Tot_Amounts);

}

function OnlineClaimsSearchShowResubmission(form, login) {
}
function OnlineClaimsSearchShowRa(form, login) {
}





function OnlineClaimsProcessView(record) {
    var NewClaims = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.PortalClaims.NGIPriorApprovedClaims';
    var Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/NGIPriorApprovedClaims.xml';
    var WidgetTitle = 'New Claims';
    PKey = record.get('ID'),
    NewClaims.ViewTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}
function OnlineClaimsProcessEdit(record) {
    var NewClaims = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.PortalClaims.NGIPriorApprovedClaims';
    var Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/NGIPriorApprovedClaims.xml';
    var WidgetTitle = 'New Claims';
    PKey = record.get('ID'),
    NewClaims.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
}
function OnlineClaimsProcessApproved(record) {
    var selectIndex = record.get('ID');
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'SubmissionStatusChange',
            selectIndex: selectIndex,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', SubmissionStatusChangeComplete, this);
}
function SubmissionStatusChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', SubmissionStatusChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        var store = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();
        store.reload();
    }

}

function OnlineClaimsProcessSubmission(record) {

    var selectIndex = record.get('ID');
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ProcessReSubmission',
            selectIndex: selectIndex,
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ProcessReSubmissionComplete, this);
}

function ProcessReSubmissionComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ProcessReSubmissionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        //Ext.getCmp('ID_MEDPRIORAUTHORIZATION_editform').close();
        var NewClaims = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.OnlineApprovedClaims';
        var Url = '/forms/HumanResources/NGI/Claims/ClaimProcessing/OnlineApprovedClaims.xml';
        var WidgetTitle = 'New Claims';
        NewClaims.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);
    }

}
function MedOnlineClaimProcessApproved(record) {
    var Status = record.get('AuthorizedStatus');
    if (Status != 0) {
        Ext.MessageBox.alert(login.modulename, 'Pending record only allow to Approve');
        return;
    }
    else {
        Ext.MessageBox.confirm('Information', 'Do you want to Approve this Record?', function (button) {
            var selectIndex = record.get('ID');
            if (button == 'yes') {
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'MedOnlineSubmissionStatusChange',
                        selectIndex: selectIndex,
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', MedOnlineSubmissionStatusChangeComplete, this);
            }
            else {
                return true;
            }
        }, this);
    }
}
function MedOnlineSubmissionStatusChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineSubmissionStatusChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
        MEOnlineClaimReqApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: MEOnlineClaimReqApprovalHistoryDtlList.pageSize
            }
        });
    }

}

function MedPriorAuthorizationProcessApproved(record) {
    var Status = record.get('AuthorizedStatus');
    if (Status != 0) {
        Ext.MessageBox.alert(login.modulename, 'Pending record only allow to approve');
        return;
    }
    else {
        Ext.MessageBox.confirm('Information', 'Do you want to Approve this Record?', function (button) {
            var selectIndex = record.get('ID');
            if (button == 'yes') {
                showMask();
                Ext.Ajax.request({
                    url: 'tools/HumanResources/HRGeneralRequest.aspx',
                    params: {
                        action: 'MedSubmissionStatusChange',
                        selectIndex: selectIndex,
                    },
                    method: 'POST',
                    failure: function (result, request) {
                        Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                    },
                    timeout: 1200000,
                    scope: this
                });
                Ext.Ajax.on('requestcomplete', MedSubmissionStatusChangeComplete, this);
            }
            else {
                return true;
            }
        }, this);
    }
}
function MedSubmissionStatusChangeComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedSubmissionStatusChangeComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        if (Ext.getCmp('PriorAuthApprovalHistoryDtlList')) {
            var PriorAuthApprovalHistoryDtlList = Ext.getCmp('PriorAuthApprovalHistoryDtlList');
            PriorAuthApprovalHistoryDtlList.store.load({
                params: {
                    start: 0,
                    limit: PriorAuthApprovalHistoryDtlList.pageSize
                }
            });

        }
    }

}

function MedPriorAuthorizationProcessSubmission(record) {

    var selectIndex = record.get('ID');
    var Status = record.get('AuthorizedStatus');
    if (Status == 3) {
        Ext.MessageBox.alert(login.modulename, 'The record is Already Resubmitted');
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MedProcessReSubmission',
                selectIndex: selectIndex,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MedProcessReSubmissionComplete, this);
    }
}

function MedProcessReSubmissionComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedProcessReSubmissionComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {

        //Ext.getCmp('ID_MEDPRIORAUTHORIZATION_editform').close();
        var NewClaims = new Ext.biz.WidgetInfo();
        var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims';
        var Url = '/forms/Medical/MEOnlineApprovedClaims.xml';
        var WidgetTitle = 'New Claims';
        NewClaims.EditTemplateOpenBottonBts(ClassName, Url, responseText.Primary, WidgetTitle);

        var PriorAuthApprovalHistoryDtlList = Ext.getCmp('PriorAuthApprovalHistoryDtlList');
        PriorAuthApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: PriorAuthApprovalHistoryDtlList.pageSize
            }
        });
    }

}
function NGIPriorSearchShowRa(from, login) {

    var FilterQry = '';
    if (FilterQry == '')
        FilterQry += " Gen.Constantvalue  =2";
    else
        FilterQry += " and Gen.Constantvalue  =2";

    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.PortalClaims.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }
}
function NGIPriorSearchShowResubmission(from, login) {
    var FilterQry = '';
    if (FilterQry == '')
        FilterQry += " Gen.Constantvalue  =3";
    else
        FilterQry += " and Gen.Constantvalue  =3";

    DetailStore = Ext.getCmp('PriorAuthApprovalHistoryDtlList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.Claims.ClaimProcessing.PortalClaims.PriorAuthApprovalHistoryDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }
}

function PlanLoadParentBenefits(form, login) {
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'LoadParentBenefits',

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PlanLoadParentBenefitsComplete, this);
}

function PlanLoadParentBenefitsComplete(conn, response) {
    hideMask();

    Ext.Ajax.un('requestcomplete', PlanLoadParentBenefitsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.LoadParentBenefitsForm = new Ext.form.FormPanel(responseText.LoadParentBenefitsCofig);

    this.LoadParentBenefitsForm.addButton({
        text: 'Load',
        handler: function () {

            var BenefitCode = Ext.getCmp('PolicyLoadParentBenefitsPopUp-BenefitIDCode');

            if (BenefitCode.editValue == '' || BenefitCode.editValue == 0) {
                Ext.MessageBox.alert(login.modulename, "Please Select Parent Benefit  !");
                return true;
            }
            var PolicyLoadParentBenefitsPopUpDtlList = Ext.getCmp('PolicyLoadParentBenefitsPopUpDtlList');
            var BenCode = '';
            var Count = PolicyLoadParentBenefitsPopUpDtlList.store.getCount();
            var NoOfSelect = 0;
            for (i = 0; i < Count; i++) {
                var record = PolicyLoadParentBenefitsPopUpDtlList.store.getAt(i);
                if (record.get('Selectcheck') == true) {
                    NoOfSelect++;
                    BenCode += PolicyLoadParentBenefitsPopUpDtlList.store.getAt(i).get('ID') + ',';
                }
            }

            if (BenCode != '') {
                BenCode = BenCode.substring(0, BenCode.length - 1);
            }
            var BenefitCode = BenCode;

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'LoadLoadingParentBenefit',
                    BenefitCode: (BenefitCode == '' ? 0 : BenefitCode)

                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });

            Ext.Ajax.on('requestcomplete', LoadLoadingPlanParentBenefitCompleted, this);
        },
        scope: this,
        tabIndex: this.LoadParentBenefitsForm.FormFieldsCount + 2
    });

    this.LoadParentBenefitsForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.LoadParentBenefitsFormWindow.close();
        },
        scope: this,
        tabIndex: this.LoadParentBenefitsForm.FormFieldsCount + 2
    });

    this.LoadParentBenefitsFormWindow = new Ext.Window({
        id: 'LoadParentBenefitsFormWindow',
        title: 'Load Parent Benefits',
        closable: true,
        minimizable: false,
        width: this.LoadParentBenefitsForm.width + 10,
        height: this.LoadParentBenefitsForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.LoadParentBenefitsForm]
    });
    this.LoadParentBenefitsForm.on('render', PolicyLoadParentBenefitsPopUp, this);
    this.LoadParentBenefitsFormWindow.show();
}

function LoadLoadingPlanParentBenefitCompleted(conn, response) {
    Ext.Ajax.un('requestcomplete', LoadLoadingPlanParentBenefitCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {

        var PrimKey = Ext.getCmp('NGIPlanMaster').selectedIndex;
        var Parent = Ext.getCmp('PolicyLoadParentBenefitsPopUp-BenefitName').getValue();
        var PolicyLoadParentBenefitsPopUpDtlList = Ext.getCmp('PolicyLoadParentBenefitsPopUpDtlList');
        var NGIPlanBenefitDtlList = Ext.getCmp('NGIPlanBenefitDtlList');

        var BenefitCode = Ext.getCmp('PolicyLoadParentBenefitsPopUp-BenefitIDCode');


        var IsAvailable = false;
        for (var ben = 0; ben < NGIPlanBenefitDtlList.store.getCount() ; ben++) {
            var BenDtl = NGIPlanBenefitDtlList.store.getAt(ben);

            if (BenefitCode.editValue == BenDtl.get('BenefitIDCode'))
                IsAvailable = true;
        }
        if (!IsAvailable) {

            NGIPlanBenefitDtlList.storeId += 1;
            var MemberID = NGIPlanBenefitDtlList.storeId;
            var newRecord = new NGIPlanBenefitDtlList.recordType({
                ID: MemberID,
                Serialno: MemberID,
                Plan_Code: (PrimKey == -1 ? 1 : PrimKey),
                BenefitIDCode: BenefitCode.editValue,
                BenefitIDName: BenefitCode.lastSelectionText,
                BenefitName: Parent,
                ParentName: '',
                DefaultPremium: 0,
                BenefitTypeCode: '',
                BenefitTypeName: '',
                ApplySettingPremium: '',
                ApplyFullPermiumRefund: '',
                StatusCode: '',
                StatusName: '',
                Remarks: '',
                LegalentityCode: '',
                CardText: '',
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,

                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            NGIPlanBenefitDtlList.stopEditing();
            NGIPlanBenefitDtlList.store.add(newRecord);
            NGIPlanBenefitDtlList.store.totalLength = NGIPlanBenefitDtlList.store.getTotalCount() + 1;
            NGIPlanBenefitDtlList.pageBar.updateInfo();
        }



        for (var pcnt = 0; pcnt < PolicyLoadParentBenefitsPopUpDtlList.store.getCount() ; pcnt++) {

            var PopupRecord = PolicyLoadParentBenefitsPopUpDtlList.store.getAt(pcnt);

            if (!PopupRecord.get('Selectcheck')) continue;
            var IsAvailable = false;
            for (var ben = 0; ben < NGIPlanBenefitDtlList.store.getCount() ; ben++) {
                var BenDtl = NGIPlanBenefitDtlList.store.getAt(ben);

                if (PopupRecord.get('SubBenefitCode') == BenDtl.get('BenefitIDCode'))
                    IsAvailable = true;
            }

            if (IsAvailable)
                continue;

            NGIPlanBenefitDtlList.storeId += 1;
            var MemberID = NGIPlanBenefitDtlList.storeId;
            var newRecord = new NGIPlanBenefitDtlList.recordType({
                ID: MemberID,
                Serialno: MemberID,
                Plan_Code: (PrimKey == -1 ? 1 : PrimKey),
                BenefitIDCode: PopupRecord.get('SubBenefitCode'),
                BenefitIDName: PopupRecord.get('SubBenefitName'),
                BenefitName: PopupRecord.get('BenefitName'),
                ParentName: '',
                DefaultPremium: 0,
                BenefitTypeCode: '',
                BenefitTypeName: '',
                ApplySettingPremium: '',
                ApplyFullPermiumRefund: '',
                StatusCode: '',
                StatusName: '',
                Remarks: '',
                LegalentityCode: '',
                CardText: '',
                CustomerCode: 0,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,

                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });

            NGIPlanBenefitDtlList.stopEditing();
            NGIPlanBenefitDtlList.store.add(newRecord);
            NGIPlanBenefitDtlList.store.totalLength = NGIPlanBenefitDtlList.store.getTotalCount() + 1;
            NGIPlanBenefitDtlList.pageBar.updateInfo();
        }
    }
    this.LoadParentBenefitsFormWindow.close();

}

function AddNewClinicInjcetionBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewInjectionDrug',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddNewClinicInjcetionComplete, this);
}

function AddNewClinicInjcetionComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewClinicInjcetionComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewinjectionTemplateForm = new Ext.form.FormPanel(responseText.AddNewInjectionCofig);

    this.AddNewinjectionTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginClinicInjectionDtlList');
            var selectcnt = 0;
            var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');
            var count = LoginClinicInjectionDtlList.store.getCount();

            var PKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

            for (var pcnt = 0; pcnt < AddNewInjectionSelectedRecord.length ; pcnt++) {

                var PopupRecord = AddNewInjectionSelectedRecord[pcnt];


                PatientLoginClinicEntryDetGrid.storeId += 1;
                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                    Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                    Drug_Code: PopupRecord.ID,
                    Drug_Name: PopupRecord.Drug_No,
                    DrugName: PopupRecord.Drug_Name,
                    Doze: null,
                    No_of_days: 1,
                    StatusCode: 0,
                    StatusName: 'Open',
                    Times_Per_DayCode: null,
                    Times_Per_DayName: null,
                    Quantity: 1,
                    Itm_Qtys: null,
                    Avg_Cost: PopupRecord.Avg_Cost,
                    DiscountAmount: 0,
                    Drug_Total: 1 * PopupRecord.Avg_Cost,
                    Drug_NetTotal: 0,
                    IsDrugPrepaid: 0,
                    IsPosted: 0,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    Isliquid: 1,
                    // Note: null,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginClinicEntryDetGrid.stopEditing();
                PatientLoginClinicEntryDetGrid.store.add(newRecord);
                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
            }
            this.AddNewinjectionTemplateFormWindow.close();
            AddNewDrugSelectedRecord = [];
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
    });



    this.AddNewinjectionTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewinjectionTemplateFormWindow.close();
            AddNewInjectionSelectedRecord = [];
        },
        scope: this,
        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
    });

    this.AddNewinjectionTemplateFormWindow = new Ext.Window({
        id: 'AddNewinjectionTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewinjectionTemplateForm.width + 10,
        height: this.AddNewinjectionTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewinjectionTemplateForm]
    });
    this.AddNewinjectionTemplateFormWindow.show();
    AddNewInjectionPopup(Ext.getCmp('AddNewinjectionTemplateForm'), login);
    // SelectedClinicHitoryID1 = '';

}

function AddNewInjectionPopup(form, login) {


    Ext.getCmp('AddNewInjectionPopupDtlList').getColumnModel().getColumnById('SelectCheck').on('click', function (column, e, record, dataindex) {

        var AddNewInjectionPopupDtlList = Ext.getCmp('AddNewInjectionPopupDtlList');

        if (record.get('SelectCheck') == true) {
            AddNewInjectionSelectedRecord.push(record.data);

        }
        if (record.get('SelectCheck') == false) {
            for (var pcnt = 0; pcnt < AddNewInjectionSelectedRecord.length ; pcnt++) {
                if (record.get('ID') == AddNewInjectionSelectedRecord[pcnt].ID) {
                    AddNewInjectionSelectedRecord.splice(pcnt, 1);
                }
            }
        }

    }, this);

    Ext.getCmp('AddNewinjectionTemplateForm').on('beforeclose', function (e) {

        AddNewInjectionSelectedRecord = [];

    }, this);
}

function AddNewAidDrugBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewDrug',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddNewAidDrugBtnComplete, this);
}

function AddNewAidDrugBtnComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewAidDrugBtnComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewDrugTemplateForm = new Ext.form.FormPanel(responseText.AddNewDrugCofig);


    this.AddNewDrugTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('PrepaidAidDrugDetailList');
            var selectcnt = 0;
            var NewDrugPopupDtlList = Ext.getCmp('NewDrugPopupDtlList');
            var PatientLoginClinicDtlList = Ext.getCmp('PrepaidAidDrugDetailList');
            var count = PatientLoginClinicDtlList.store.getCount();
            var store = Ext.getCmp('PrepaidAidDrugDetailList').getStore();

            var PKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

            for (var pcnt = 0; pcnt < AddNewDrugSelectedRecord.length ; pcnt++) {

                var PopupRecord = AddNewDrugSelectedRecord[pcnt];


                PatientLoginClinicEntryDetGrid.storeId += 1;
                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                    Patient_Login_Clinic_Code: Ext.getCmp('PatientLoginClinic').selectedIndex,
                    Drug_Code: PopupRecord.ID,
                    Drug_Name: PopupRecord.Drug_Name,
                    Doze: null,
                    No_of_days: 1,
                    NoOfTimeCode: null,
                    NoOfTimeName: null,
                    Times_Per_DayCode: null,
                    Times_Per_DayName: null,
                    Quantity: 1,
                    Itm_Qtys: null,
                    Avg_Cost: PopupRecord.Avg_Cost,
                    DiscountAmount: 0,
                    Drug_Total: 1 * PopupRecord.Avg_Cost,
                    Drug_NetTotal: 0,
                    // IsDrugPrepaid: 0,
                    IsPosted: 0,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    Isliquid: 1,
                    // Note: null,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginClinicEntryDetGrid.stopEditing();
                PatientLoginClinicEntryDetGrid.store.add(newRecord);
                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
            }
            this.AddNewDrugTemplateFormWindow.close();
            AddNewDrugSelectedRecord = [];
        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });



    this.AddNewDrugTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewDrugTemplateFormWindow.close();
            AddNewDrugSelectedRecord = [];
        },
        scope: this,
        tabIndex: this.AddNewDrugTemplateForm.FormFieldsCount + 2
    });

    this.AddNewDrugTemplateFormWindow = new Ext.Window({
        id: 'AddNewDrugTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewDrugTemplateForm.width + 10,
        height: this.AddNewDrugTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewDrugTemplateForm]
    });
    this.AddNewDrugTemplateFormWindow.show();
    NewDrugPopup(Ext.getCmp('AddNewDrugTemplateForm'), login);
    // SelectedClinicHitoryID1 = '';

}

//function AddNewNurseInjcetionBtnHandler(form, login) {
//    var PrimKey = 3;
//    showMask();
//    Ext.Ajax.request({
//        url: 'tools/PropertyManagement/General.aspx',
//        params: {
//            action: 'AddNewInjectionDrug',
//            PrimKey: PrimKey
//        },
//        method: 'POST',
//        failure: function (result, request) {
//            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
//        },
//        timeout: 1200000,
//        scope: this
//    });
//    Ext.Ajax.on('requestcomplete', AddNewNurseInjcetionComplete, this);
//}

//function AddNewNurseInjcetionComplete(conn, response) {
//    hideMask();
//    Ext.Ajax.un('requestcomplete', AddNewNurseInjcetionComplete, this);

//    var responseText = Ext.util.JSON.decode(response.responseText);
//    this.AddNewinjectionTemplateForm = new Ext.form.FormPanel(responseText.AddNewInjectionCofig);

//    this.AddNewinjectionTemplateForm.addButton({
//        text: 'Load',
//        handler: function ()
//        {
//            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseInjectionDtlList');
//            var selectcnt = 0;
//            var LoginClinicInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
//            var count = LoginClinicInjectionDtlList.store.getCount();
//         //   var store = Ext.getCmp('PrepaidAidDrugDetailList').getStore();

//            var PKey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();

//            for (var pcnt = 0; pcnt < AddNewInjectionSelectedRecord.length ; pcnt++) {

//                var PopupRecord = AddNewInjectionSelectedRecord[pcnt];


//                PatientLoginClinicEntryDetGrid.storeId += 1;
//                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
//                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

//                    ID: ServiceID,
//                    SerialNo: ServiceID,
//                    Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
//                    Login_Nursery_Code: Ext.getCmp('LoginNursery').selectedIndex,
//                    Drug_Code: PopupRecord.ID,
//                    Drug_Name: PopupRecord.Drug_Name,
//                    Doze: null,
//                    No_of_days: 1,
//                    // NoOfTimeCode: null,
//                    //  NoOfTimeName: null,
//                    Times_Per_DayCode: null,
//                    Times_Per_DayName: null,
//                    Quantity: 1,
//                    Itm_Qtys: null,
//                    Avg_Cost: PopupRecord.Avg_Cost,
//                    DiscountAmount: 0,
//                    Drug_Total: 1 * PopupRecord.Avg_Cost,
//                    Drug_NetTotal: 0,
//                    IsDrugPrepaid: 0,
//                    IsPosted: 0,
//                    CompanyCode: login.CompanyCode,
//                    LocationCode: login.LocationCode,
//                    Isliquid: 1,
//                    // Note: null,
//                    CreatedBy: null,
//                    LastmodifiedBy: null,
//                    CreatedOn: null,
//                    LastmodifiedOn: null,
//                    IsNew: true,
//                    IsDirty: true,
//                    IsDeleted: false,
//                    IsSavable: true,
//                    IsValid: true
//                });
//                PatientLoginClinicEntryDetGrid.stopEditing();
//                PatientLoginClinicEntryDetGrid.store.add(newRecord);
//                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
//                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
//            }
//            this.AddNewinjectionTemplateFormWindow.close();
//            AddNewDrugSelectedRecord = [];
//        },

//        scope: this,
//        formBind: true,
//        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
//    });



//    this.AddNewinjectionTemplateForm.addButton({
//        text: 'Cancel',
//        handler: function () {
//            this.AddNewinjectionTemplateFormWindow.close();
//            AddNewInjectionSelectedRecord = [];
//        },
//        scope: this,
//        tabIndex: this.AddNewinjectionTemplateForm.FormFieldsCount + 2
//    });

//    this.AddNewinjectionTemplateFormWindow = new Ext.Window({
//        id: 'AddNewinjectionTemplateForm',
//        title: 'Add Service',
//        closable: true,
//        minimizable: false,
//        width: this.AddNewinjectionTemplateForm.width + 10,
//        height: this.AddNewinjectionTemplateForm.height + 10,
//        plain: true,
//        layout: 'fit',
//        resizable: false,
//        bodyStyle: 'padding:5px',
//        modal: true,
//        items: [this.AddNewinjectionTemplateForm]
//    });
//    this.AddNewinjectionTemplateFormWindow.show();
//    AddNewInjectionPopup(Ext.getCmp('AddNewinjectionTemplateForm'), login);
//}
//  raja
function LoadExtraButtonHandler(form, login) {
    var PrimKey = Ext.getCmp('HR_ExtraOverTime').selectedIndex;

    if (PrimKey == null || PrimKey == "") {
        Ext.MessageBox.alert(login.modulename, "Please Save Record Before Load!");
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ExtraOvertimeLoadButton',

            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', LoadExtraButtonComplete, this);
    }

}

function LoadExtraButtonComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoadExtraButtonComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.LoadButtonClickForm = new Ext.form.FormPanel(responseText.LoadButtonClickCofig);
    this.LoadButtonClickForm.addButton({
        text: 'Load',
        handler: function () {

            var OverTimeDetailsList = Ext.getCmp('OverTime_DetailsList');
            var selectcnt = 0;
            var EmployeePopUpDetList = Ext.getCmp('EmployeePopUpDetList');
            //var PatientLoginReceptionDetailList = Ext.getCmp('PatientRefundDtlList');
            var count = EmployeePopUpDetList.store.getCount();
            var store = Ext.getCmp('EmployeePopUpDetList').getStore();

            var PKey = Ext.getCmp('HR_ExtraOverTime').selectedIndex;
            //  var Pl_Reception_Code = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();


            var MasExtrahours = Ext.getCmp('EmployeePopUp-Extrahours').getValue();

            for (var pcnt = 0; pcnt < EmployeePopUpDetList.store.getCount() ; pcnt++) {

                var PopupRecord = EmployeePopUpDetList.store.getAt(pcnt);

                if (!PopupRecord.get('Selectbutton')) continue;

                OverTimeDetailsList.storeId += 1;
                var ServiceID = OverTimeDetailsList.storeId;
                var newRecord = new OverTimeDetailsList.recordType({

                    ID: ServiceID,
                    OverTimeSerialno: ServiceID,
                    Extra_Overtime_Code: (PKey == -1 ? 1 : PKey),
                    EmployeeCode: PopupRecord.get('ID'),
                    EmployeeName: PopupRecord.get('Employee_Number'),
                    EmployeeFullName: PopupRecord.get('EmployeeFullName'),
                    ExtraHours: MasExtrahours > 0 ? MasExtrahours : PopupRecord.get('Extrahours'),
                    Amount: 0,
                    FirstName: null,
                    MiddleName: null,
                    LastName: null,
                    Period_ID: null,
                    Load: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,

                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                OverTimeDetailsList.stopEditing();
                OverTimeDetailsList.store.add(newRecord);
                OverTimeDetailsList.store.totalLength = OverTimeDetailsList.store.getTotalCount() + 1;
                OverTimeDetailsList.pageBar.updateInfo();
            }

            this.LoadButtonClickFormWindow.close();

        },

        scope: this,
        formBind: true,
        tabIndex: this.LoadButtonClickForm.FormFieldsCount + 2
    });

    this.LoadButtonClickForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.LoadButtonClickFormWindow.close();
        },
        scope: this,
        tabIndex: this.LoadButtonClickForm.FormFieldsCount + 2
    });


    this.LoadButtonClickFormWindow = new Ext.Window({
        id: 'LoadButtonClickFormWindow',
        title: 'Service Detail',
        closable: true,
        minimizable: false,
        width: this.LoadButtonClickForm.width + 10,
        height: this.LoadButtonClickForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.LoadButtonClickForm]
    });
    this.LoadButtonClickFormWindow.show();
}

//function LoadButtonHandler(form, login) {
//    var PrimKey = Ext.getCmp('HR_ExtraOverTime').selectedIndex;

//    var NewCase = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.HumanResource.HR.EmployeePopUp', Url = '/forms/HumanResources/EmployeePopUp.xml', PKey = PrimKey, WidgetTitle = 'EmployeePopUp';
//    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
//}
function EmployeePopUp(form, login) {

}
function EmployeeSearchbuttonhandler(form, login) {

    var OrgCode = Ext.getCmp('EmployeePopUp-OrgCode');
    var LocationsCode = Ext.getCmp('EmployeePopUp-LocationsCode');
    var GradeCode = Ext.getCmp('EmployeePopUp-GradeCode');
    var DepartmentCode = Ext.getCmp('EmployeePopUp-DepartmentCode');
    var Assignment_Set_Code = Ext.getCmp('EmployeePopUp-Assignment_Set_Code');

    var FilterQry = '';

    if (OrgCode.getValue() !== null && OrgCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " ORG.ORGANIZATIONS_CODE =" + OrgCode.editValue + "";
        else
            FilterQry += " and ORG.ORGANIZATIONS_CODE =" + OrgCode.editValue + "";
    }
    if (LocationsCode.getValue() !== null && LocationsCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.LOCATIONCODE =" + LocationsCode.editValue + "";
        else
            FilterQry += " and gen.LOCATIONCODE =" + LocationsCode.editValue + "";
    }
    if (GradeCode.getValue() !== null && GradeCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.GRADE_CODE =" + GradeCode.editValue + "";
        else
            FilterQry += " and gen.GRADE_CODE =" + GradeCode.editValue + "";
    }
    if (DepartmentCode.getValue() !== null && DepartmentCode.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " gen.DEPARTMENTCODE =" + DepartmentCode.editValue + "";
        else
            FilterQry += " and gen.DEPARTMENTCODE =" + DepartmentCode.editValue + "";
    }

    if (Assignment_Set_Code.getValue() !== null && Assignment_Set_Code.getValue() != 0) {
        if (FilterQry == '')
            FilterQry += " py.ASSIGNMENT_SET_CODE =" + Assignment_Set_Code.editValue + "";
        else
            FilterQry += " and py.ASSIGNMENT_SET_CODE =" + Assignment_Set_Code.editValue + "";
    }

    DetailStore = Ext.getCmp('EmployeePopUpDetList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.EmployeePopUpDet&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }

}
function EmployeeClearbuttonhandler(form, login) {

    var OrgCode = Ext.getCmp('EmployeePopUp-OrgCode');
    var LocationsCode = Ext.getCmp('EmployeePopUp-LocationsCode');
    var GradeCode = Ext.getCmp('EmployeePopUp-GradeCode');
    var DepartmentCode = Ext.getCmp('EmployeePopUp-DepartmentCode');
    var Assignment_Set_Code = Ext.getCmp('EmployeePopUp-Assignment_Set_Code');


    OrgCode.setValue(null);
    LocationsCode.setValue(null);
    GradeCode.setValue(null);
    DepartmentCode.setValue(null);
    Assignment_Set_Code.setValue(null);

    var FilterQry = '';
    DetailStore = Ext.getCmp('EmployeePopUpDetList').getStore();

    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.HR.EmployeePopUpDet&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 25,
            }
        });
    }

}

var NewServiceSelectedID = '';

function ClinicianServiceHandler(form, login) {

    var PrimKey = 3;
    showMask();
    Ext.Ajax.request({
        //   url: 'tools/HumanResources/HRGeneralRequest.aspx',
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewService',
            PrimKey: PrimKey,
            Patient_NoCode: 0,
            Patient_Type: 0
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicianServiceHandlerComplete, this);
}

function ClinicianServiceHandlerComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ClinicianServiceHandlerComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewServiceTemplateForm = new Ext.form.FormPanel(responseText.AddNewServiceCofig);



    this.AddNewServiceTemplateForm.addButton({
        text: 'Load',
        handler: function () {


            var MECliniciansServiceList = Ext.getCmp('MECliniciansServiceList');
            var selectcnt = 0;
            var AddNewServicePopupDtlList = Ext.getCmp('NewServicePopupDetailList');

            var Physician_Code = Ext.getCmp('NewServicePopup-Physician_Code');

            var PKey = Ext.getCmp('MEClinicians').selectedIndex;

            for (var pcnt = 0; pcnt < AddSelectedServiceSelectedRecord.length ; pcnt++) {

                var PopupRecord = AddSelectedServiceSelectedRecord[pcnt];
                var PhysicianCode = Physician_Code.getValue();
                var PhysicianName = Physician_Code.lastSelectionText;

                MECliniciansServiceList.storeId += 1;
                var ServiceID = MECliniciansServiceList.storeId;
                var newRecord = new MECliniciansServiceList.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    CdCode: (PKey == -1 ? 1 : PKey),
                    ServiceprovidertypeCode: 1,
                    ServiceprovidertypeName: 'Nursary',
                    Service_ProviderCode: PopupRecord.Service_ProviderCode,
                    Service_ProviderName: PopupRecord.Service_ProviderName,
                    ServiceTypeCode: PopupRecord.ID,
                    ServiceTypeName: PopupRecord.Service_Code,
                    Service_Name: PopupRecord.Service_Name,
                    Service_Alternate_Name: PopupRecord.Service_Alternate_Name,
                    Service_Price: PopupRecord.Service_Price,
                    StatusCode: 0,
                    StatusName: "Open",
                    SampleTime: "00:00",
                    ISProvider: 0,
                    Physician_Code: PhysicianCode,
                    Physician_Name: PhysicianName,
                    SubServiceCode: PopupRecord.MC_Sub_ServiceCode,
                    SubServiceName: PopupRecord.MC_Sub_ServiceName,
                    ReceptionServiceTemplateDtlList: null,
                    DeliveryDate: new Date().format(login.jsdateformat),
                    Revenue_Account: "",
                    Emirates_ID_No: null,
                    Amount: 0,
                    IsCashier: 0,
                    OldService: 0,
                    Description: "",
                    SelectCheck: 0,
                    Discountpercentage: 0,
                    Total: PopupRecord.Service_Price,
                    IsPrepaid: 0,
                    TemplateText: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                MECliniciansServiceList.stopEditing();
                MECliniciansServiceList.store.add(newRecord);
                MECliniciansServiceList.store.totalLength = MECliniciansServiceList.store.getTotalCount() + 1;
                MECliniciansServiceList.pageBar.updateInfo();
            }
            this.AddNewServiceTemplateFormWindow.close();
            AddSelectedServiceSelectedRecord = [];
            SelectedServicePhysiciansCode = [];
            SelectedServicePhysiciansName = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewServiceTemplateForm.FormFieldsCount + 2
    });


    this.AddNewServiceTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewServiceTemplateFormWindow.close();
            AddSelectedServiceSelectedRecord = [];
            SelectedServicePhysiciansCode = [];
            SelectedServicePhysiciansName = [];
        },
        scope: this,
        tabIndex: this.AddNewServiceTemplateForm.FormFieldsCount + 2
    });

    this.AddNewServiceTemplateFormWindow = new Ext.Window({
        id: 'AddNewServiceTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewServiceTemplateForm.width + 10,
        height: this.AddNewServiceTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewServiceTemplateForm]
    });
    this.AddNewServiceTemplateFormWindow.show();
    NewServicePopup(Ext.getCmp('AddNewServiceTemplateForm'), login);
}


var Type = '';
function TypeVersionUploadCodeType(form, login) {

    var TypeCode = Ext.getCmp('TypeVersions-TypeCode').getValue();
    if (TypeCode == '' || TypeCode == null) {
        Ext.MessageBox.alert(login.modulename, 'Please select Type first !');
        return true;
    }
    else
        Type = TypeCode;

    var UploadCodeType = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.UploadVersionDetail';
    var Url = '/forms/Medical/UploadVersionDetail.xml';
    var PKey = -1;
    var WidgetTitle = 'Upload Version Type';
    UploadCodeType.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, 'Import Data', 'MECodeTypeImportData');
}

function UploadVersionDetail(form, login) {

    var UploadCode = Ext.getCmp('UploadVersionDetail-UploadCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_MEUPLOADVERSION')";
    }, this);

    if (!form.isView) {
        var VersionCode = Ext.getCmp('UploadVersionDetail-VersionCode');
        if (Type != null || Type != '') {
            VersionCode.setComboValue(Type);
        }
        Type = '';
    }
}

function MECodeTypeImportData(form, login) {

    var SelectedIndex = Ext.getCmp('UploadVersionDetail').selectedIndex;

    if (SelectedIndex != -1) {

        var FileName = Ext.getCmp('UploadVersionDetail-ImageFileName').getValue();
        if (FileName == '') {
            Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
            return;
        }
        else if (FileName.lastIndexOf('.xl') < 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
            return;
        }

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MECodeVersionImportData',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MECodeVersionImportComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
        return true;
    }
}

function MECodeVersionImportComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', MECodeVersionImportComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        var PrimaryKey = Ext.getCmp('UploadVersionDetail').selectedIndex;
        var MenuID = 'ID_MEUPLOADVERSION';
        var TemplateCode = Ext.getCmp('UploadVersionDetail-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MECodeVersionImportPrcComplete, this);

    }

}

function MECodeVersionImportPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MECodeVersionImportPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('UploadVersionDetail').selectedIndex;
        var MenuID = 'ID_MEUPLOADVERSION';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);

    }
}


var Provider = '', VersionCode = '';
function MEProviderTariffAddStdCode(form, login) {
    Provider = Ext.getCmp('MEDProviderTariff-ProviderCode').getValue();
    if (Provider == null || Provider == '') {
        Ext.MessageBox.alert(login.modulename, 'Select the Provider first !');
        return;
    }
    var CodePriceDet = Ext.getCmp('MEDProviderTariffDtlList');
    if (CodePriceDet.getSelectionModel().getSelected() == undefined) {
        Ext.MessageBox.alert(login.modulename, 'Select the type version detail reocrd !');
        return;
    }
    else
        VersionCode = CodePriceDet.getSelectionModel().getSelected().get('ID');
    var Standardcode = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.ProviderTraiff.MEDProviderTariffPopup';
    var Url = '/forms/Medical/Network/ProviderTraiff/MEDProviderTariffPopup.xml';
    var PKey = -1;
    var WidgetTitle = 'Add Provider Standard Code';
    Standardcode.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle);
}

function MEDProviderTariffPopup(form, login) {
    if (!form.isView) {

        var ProviderCode = Ext.getCmp('MEDProviderTariffPopup-ProviderCode');
        var StandardCode = Ext.getCmp('MEDProviderTariffPopup-StandardCode');
        var VersionCodes = Ext.getCmp('MEDProviderTariffPopup-VersionCode');
        var TypeCode = Ext.getCmp('MEDProviderTariffPopup-TypeCode');

        if (TypeCode) TypeCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " TARIFFAPPLICABLE = 1";
        }, this);

        if (VersionCode != null || VersionCode != '') {
            if (StandardCode) StandardCode.on('beforequery', function (evt) {
                evt.combo.lastQuery = '1=2';
                evt.combo.store.baseParams.filter = " IVD.VERSIONCODE in (select VERSIONCODE from  ME_TYPE_VERSIONS where VERSIONCODE in(" + VersionCode + ")) ";
                //VersionCode = '';
            }, this);

        }

        if (VersionCodes) VersionCodes.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " itv.TYPECODE=" + TypeCode.editValue;
        }, this);



        var CodePriceDet = Ext.getCmp('MEDProviderTariffPopupDetList');
        CodePriceDet.on('afteredit', function (e) {

            for (var i = 0; i < e.grid.store.getCount() ; i++) {
                var TotalAmount = 0;
                var Record = e.grid.store.getAt(i);
                if (Record.get('DiscountTypeCode') == 0 || Record.get('DiscountTypeCode') == null) {
                    TotalAmount += (Record.get('GrossPrice') - Record.get('DiscountValue'));
                }
                else if (Record.get('DiscountTypeCode') == 1) {
                    TotalAmount += (Record.get('GrossPrice') - ((Record.get('GrossPrice') * Record.get('DiscountValue')) / 100));
                }
                e.grid.store.getAt(i).set('Net', TotalAmount);
            }

        }, this);

        if (Provider != null || Provider != '') {
            ProviderCode.setValue(Provider);

            if (form.selectedIndex == -1) {
                var StandardCode = Ext.getCmp('MEDProviderTariffPopup-StandardCode');
                if (StandardCode) StandardCode.on('select', function (combo, record, index) {
                    showMask();
                    Ext.Ajax.request({
                        url: 'tools/HumanResources/HRGeneralRequest.aspx',
                        params: {
                            action: 'MEDLoadProvidertariffPopupDet',
                            StandardCode: StandardCode.getValue(),
                            ProviderCode: Provider

                        },
                        method: 'POST',
                        failure: function (result, request) {
                            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                        },
                        timeout: 1200000,
                        scope: this
                    });
                    Ext.Ajax.on('requestcomplete', MEDLoadProvidertariffPopupDetComplete, this);
                }, this);
            }
        }
        Ext.getCmp('MEDProviderTariffPopup_editform').on('close', onBeforecloseMEDProviderTariffPopup, this);

    }
}

function onBeforecloseMEDProviderTariffPopup(form, action) {

    var detailGrid = Ext.getCmp('MEDProviderTariffCodepriceMapDtlList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}
function MEDLoadProvidertariffPopupDetComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MEDLoadProvidertariffPopupDetComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }

    var PrimKey = Ext.getCmp('MEDProviderTariffPopup').selectedIndex;
    var grdFunctionality = Ext.getCmp('MEDProviderTariffPopupDetList');

    for (cnt = 0; cnt < responseText.totalCount; cnt++) {

        var StandardCordDetRecords = responseText.datum[cnt];

        var docavail = false;

        for (vcnt = 0; vcnt < grdFunctionality.store.getCount() ; vcnt++) {
            if (grdFunctionality.store.getAt(vcnt).get('ProviderinternalCode') == StandardCordDetRecords.ProviderinternalCode) {
                docavail = true;
                break;
            }
        }
        if (docavail) continue;

        grdFunctionality.storeId += 1;
        var newRecord = new grdFunctionality.recordType({

            ID: grdFunctionality.storeId,
            Tariffdetailserialno: grdFunctionality.storeId,
            TariffCode: (PrimKey == -1 ? 1 : PrimKey), // Foregin Key From Master  
            ProviderinternalCode: StandardCordDetRecords.ProviderinternalCode,
            Comments: StandardCordDetRecords.Comments,
            GrossPrice: StandardCordDetRecords.GrossPrice,
            DiscountValue: StandardCordDetRecords.DiscountValue,
            GrossPrice: StandardCordDetRecords.GrossPrice,
            DiscountTypeCode: StandardCordDetRecords.DiscountTypeCode,
            DiscountTypeName: StandardCordDetRecords.DiscountTypeName,
            Net: StandardCordDetRecords.Net,
            EffectiveFrom: StandardCordDetRecords.EffectiveFrom,
            EffectiveTo: StandardCordDetRecords.EffectiveTo,
            Active: true,
            Net: StandardCordDetRecords.Net,
            Active: true,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        grdFunctionality.stopEditing();
        grdFunctionality.store.add(newRecord);

        grdFunctionality.store.totalLength = grdFunctionality.store.getTotalCount() + 1;
        grdFunctionality.pageBar.updateInfo();
    }

}



// ------------------------------  Provider Portal for winsoft medical module----------------------------------

function MEAdditionOfService(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('MEAdditionOfService-ProviderType');
        var GroupName = Ext.getCmp('MEAdditionOfService-GroupName');
        var ProviderName = Ext.getCmp('MEAdditionOfService-ProviderName');
        var AlternateName = Ext.getCmp('MEAdditionOfService-AlternateName');
        var CountryName = Ext.getCmp('MEAdditionOfService-CountryName');
        var StateName = Ext.getCmp('MEAdditionOfService-StateName');
        var CityName = Ext.getCmp('MEAdditionOfService-CityName');
        var ProviderCode = Ext.getCmp('MEAdditionOfService-ProviderCode');


        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);

    }
}

function METarriffRevision(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('METarriffRevision-ProviderType');
        var GroupName = Ext.getCmp('METarriffRevision-GroupName');
        var ProviderName = Ext.getCmp('METarriffRevision-ProviderName');
        var AlternateName = Ext.getCmp('METarriffRevision-AlternateName');
        var CountryName = Ext.getCmp('METarriffRevision-CountryName');
        var StateName = Ext.getCmp('METarriffRevision-StateName');
        var CityName = Ext.getCmp('METarriffRevision-CityName');
        var CompanyCode = Ext.getCmp('METarriffRevision-CompanyCode');
        CompanyCode.text = 'Download';
        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);
    }
}


function MEPhysicianEmpanelment(form, login) {
    if (!form.isView) {
        var ProviderType = Ext.getCmp('MEPhysicianEmpanelment-ProviderType');
        var GroupName = Ext.getCmp('MEPhysicianEmpanelment-GroupName');
        var ProviderName = Ext.getCmp('MEPhysicianEmpanelment-ProviderName');
        var AlternateName = Ext.getCmp('MEPhysicianEmpanelment-AlternateName');
        var CountryName = Ext.getCmp('MEPhysicianEmpanelment-CountryName');
        var StateName = Ext.getCmp('MEPhysicianEmpanelment-StateName');
        var CityName = Ext.getCmp('MEPhysicianEmpanelment-CityName');


        ProviderType.setValue(login.portalprovider.ProviderTypeName);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        ProviderName.setValue(login.portalprovider.ProviderName);
        AlternateName.setValue(login.portalprovider.ProviderAlternativeName);
        CountryName.setValue(login.portalprovider.CountryName);
        StateName.setValue(login.portalprovider.CityName);
        CityName.setValue(login.portalprovider.ProviderArea);
    }
}


function MEHealthNetForm(form, login) {
    if (!form.isView) {
        var ProviderTypeCode = Ext.getCmp('MEHealthNetForm-ProviderTypeCode');
        var GroupName = Ext.getCmp('MEHealthNetForm-GroupAssociatedwith');
        var SubmissionTypeCode = Ext.getCmp('MEHealthNetForm-SubmissionTypeCode');
        //var EmirateCode = Ext.getCmp('MEHealthNetForm-EmirateCode');
        var CompleteAddress = Ext.getCmp('MEHealthNetForm-CompleteAddress');
        var MainMobile = Ext.getCmp('MEHealthNetForm-TelephoneNo');
        var EMail = Ext.getCmp('MEHealthNetForm-EMail');
        var FaxNo = Ext.getCmp('MEHealthNetForm-FaxNo');


        ProviderTypeCode.setComboValue(login.portalprovider.ProviderTypeCode);
        GroupName.setValue(login.portalprovider.HeadOfficeName);
        SubmissionTypeCode.setComboValue(login.portalprovider.ClaimQuoteTypeCode);
        // EmirateCode.setComboValue(login.portalprovider.StateCode);
        CompleteAddress.setValue(login.portalprovider.Address);
        MainMobile.setValue(login.portalprovider.MobileNo);
        EMail.setValue(login.portalprovider.EMail);
        FaxNo.setValue(login.portalprovider.FaxNumber);
    }
}


function MEChangeInAccountDetails(form, login) {
    if (!form.isview) {
        var pkey = Ext.getCmp('MEChangeInAccountDetails').selectedIndex;
        var Status = Ext.getCmp('MEChangeInAccountDetails-AuthorizedStatusCode');
        Status.disable();
        if (pkey == -1) {
            Status.setComboValue(0);
        }
    }
}

function MEPhysicianDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPortalRequest.MEPhysicianEmpanelment';

    var Primary = Ext.getCmp('MEPhysicianEmpanelment').selectedIndex;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEPhysicianDownloadTemplateComplete, this);

}

function MEPhysicianDownloadTemplateComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEPhysicianDownloadTemplateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}



function METariffRevisionDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPortalRequest.METarriffRevision';

    var Primary = Ext.getCmp('METarriffRevision').selectedIndex;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', METariffRevisionDownloadTemplateComplete, this);

}

function METariffRevisionDownloadTemplateComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', METariffRevisionDownloadTemplateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function MEAdditionOfServiceDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPortalRequest.MEAdditionOfService';

    var Primary = Ext.getCmp('MEAdditionOfService').selectedIndex;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEAdditionOfServiceDownloadTemplateComplete, this);

}

function MEAdditionOfServiceDownloadTemplateComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEAdditionOfServiceDownloadTemplateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function GymMemPosting(form, login) {

    var PrimKey = Ext.getCmp('GymMemberSubscription').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot make Post before save !');
        return;
    }
    var status = Ext.getCmp('GymMemberSubscription-StatusCode');
    if (status.editValue == 1) {
        Ext.MessageBox.alert(login.modulename, 'Status should be New for post or unpost !'); // show message if the status is not new.
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'GymMemPosting',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', GymMemPostingComplete, this);
}


function GymMemPostingComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', GymMemPostingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('ID_GYMMEMBERSUBSCRIPTION_editform').close();
    }
}
function AddNewDiagnosisDtlBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'AddNewDiagnosisdtl',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', AddNewDiagnosisdtlComplete, this);
}

function AddNewDiagnosisdtlComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', AddNewDiagnosisdtlComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.AddNewDiagnosisTemplateForm = new Ext.form.FormPanel(responseText.DiagnosisdtlCofig);


    this.AddNewDiagnosisTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('PatientLoginClinicDiagnosisDtlList');
            var selectcnt = 0;
            var DiagnosisDtlPopUpList = Ext.getCmp('DiagnosisDtlPopUpList');
            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDiagnosisDtlList');
            var count = PatientLoginClinicDtlList.store.getCount();
            var store = Ext.getCmp('PatientLoginClinicDiagnosisDtlList').getStore();

            //var PKey = Ext.getCmp('PatientLoginClinic-Patient_Login_Clinic_Code').getValue();
            Primary = Ext.getCmp('PatientLoginClinic').selectedIndex;

            for (var pcnt = 0; pcnt < DiagnosisDtlPopUpList.store.getCount() ; pcnt++) {

                var PopupRecord = DiagnosisDtlPopUpList.store.getAt(pcnt);

                if (!PopupRecord.get('selectt')) continue;

                PatientLoginClinicEntryDetGrid.storeId += 1;
                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    Patient_Login_Clinic_Code: Primary == -1 ? 1 : Primary,
                    pl_Reception_Code: Primary == -1 ? 1 : Primary,
                    StandardCode: PopupRecord.get('ID'),
                    StandardName: PopupRecord.get('StandardName'),
                    ShortDesc: PopupRecord.get('ShortDesc'),
                    StatusCode: 0,
                    StatusName: 'Process',
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginClinicEntryDetGrid.stopEditing();
                PatientLoginClinicEntryDetGrid.store.add(newRecord);
                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
            }
            this.AddNewDiagnosisTemplateFormWindow.close();
            //DiagnosisDtlPopUpList = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.AddNewDiagnosisTemplateForm.FormFieldsCount + 2
    });



    this.AddNewDiagnosisTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.AddNewDiagnosisTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.AddNewDiagnosisTemplateForm.FormFieldsCount + 2
    });

    this.AddNewDiagnosisTemplateFormWindow = new Ext.Window({
        id: 'AddNewDiagnosisTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.AddNewDiagnosisTemplateForm.width + 10,
        height: this.AddNewDiagnosisTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.AddNewDiagnosisTemplateForm]
    });
    this.AddNewDiagnosisTemplateFormWindow.show();

}


function LoginNurseryDiagnosisBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoginNurseryDiagnosis',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoginNurseryDiagnosisComplete, this);
}

function LoginNurseryDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoginNurseryDiagnosisComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.LoginNurseryDiagnosisTemplateForm = new Ext.form.FormPanel(responseText.LoginNurseryDiaCofig);


    this.LoginNurseryDiagnosisTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseryDiagnosisDtlList');
            var selectcnt = 0;
            var DiagnosisDtlPopUpList = Ext.getCmp('DiagnosisDtlPopUpList');
            var LoginNurseryDiagnosisDtlList = Ext.getCmp('LoginNurseryDiagnosisDtlList');
            var count = LoginNurseryDiagnosisDtlList.store.getCount();
            var store = Ext.getCmp('LoginNurseryDiagnosisDtlList').getStore();

            //var PKey = Ext.getCmp('LoginNursery-Login_Nursery_Code').getValue();
            Primary = Ext.getCmp('LoginNursery').selectedIndex;

            for (var pcnt = 0; pcnt < DiagnosisDtlPopUpList.store.getCount() ; pcnt++) {

                var PopupRecord = DiagnosisDtlPopUpList.store.getAt(pcnt);

                if (!PopupRecord.get('selectt')) continue;

                PatientLoginClinicEntryDetGrid.storeId += 1;
                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    // Pl_Reception_Code: (PKey == -1 ? 1 : PKey),
                    Login_Nursery_Code: Primary == -1 ? 1 : Primary,
                    StandardCode: PopupRecord.get('ID'),
                    StandardName: PopupRecord.get('StandardName'),
                    ShortDesc: PopupRecord.get('ShortDesc'),
                    StatusCode: 0,
                    StatusName: 'Process',
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginClinicEntryDetGrid.stopEditing();
                PatientLoginClinicEntryDetGrid.store.add(newRecord);
                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
            }
            this.LoginNurseryDiagnosisTemplateFormWindow.close();

        },

        scope: this,
        formBind: true,
        tabIndex: this.LoginNurseryDiagnosisTemplateForm.FormFieldsCount + 2
    });



    this.LoginNurseryDiagnosisTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.LoginNurseryDiagnosisTemplateFormWindow.close();
            DiagnosisDtlPopUpSelectedRecord = [];
        },
        scope: this,
        tabIndex: this.LoginNurseryDiagnosisTemplateForm.FormFieldsCount + 2
    });

    this.LoginNurseryDiagnosisTemplateFormWindow = new Ext.Window({
        id: 'LoginNurseryDiagnosisTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.LoginNurseryDiagnosisTemplateForm.width + 10,
        height: this.LoginNurseryDiagnosisTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.LoginNurseryDiagnosisTemplateForm]
    });
    this.LoginNurseryDiagnosisTemplateFormWindow.show();


}

function ReceptionDiagnosisBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ReceptionDiagnosis',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ReceptionDiagnosisComplete, this);
}

function ReceptionDiagnosisComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ReceptionDiagnosisComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.ReceptionDiagnosisTemplateForm = new Ext.form.FormPanel(responseText.ReceptionDiaCofig);


    this.ReceptionDiagnosisTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('MEDiagnosisDtlList');
            var selectcnt = 0;
            var DiagnosisDtlPopUpList = Ext.getCmp('DiagnosisDtlPopUpList');
            var MEDiagnosisDtlList = Ext.getCmp('MEDiagnosisDtlList');
            var count = MEDiagnosisDtlList.store.getCount();
            var store = Ext.getCmp('MEDiagnosisDtlList').getStore();

            //var PKey = Ext.getCmp('PatientsLoginReception-Pl_Reception_Code').getValue();
            Primary = Ext.getCmp('PatientsLoginReception').selectedIndex;

            for (var pcnt = 0; pcnt < DiagnosisDtlPopUpList.store.getCount() ; pcnt++) {

                var PopupRecord = DiagnosisDtlPopUpList.store.getAt(pcnt);

                if (!PopupRecord.get('selectt')) continue;

                PatientLoginClinicEntryDetGrid.storeId += 1;
                var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
                var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                    ID: ServiceID,
                    SerialNo: ServiceID,
                    Pl_Reception_Code: Primary == -1 ? 1 : Primary,
                    StandardCode: PopupRecord.get('ID'),
                    StandardName: PopupRecord.get('StandardName'),
                    ShortDesc: PopupRecord.get('ShortDesc'),
                    StatusCode: 0,
                    StatusName: 'Process',
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    CreatedBy: null,
                    LastmodifiedBy: null,
                    CreatedOn: null,
                    LastmodifiedOn: null,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                PatientLoginClinicEntryDetGrid.stopEditing();
                PatientLoginClinicEntryDetGrid.store.add(newRecord);
                PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
                PatientLoginClinicEntryDetGrid.pageBar.updateInfo();
            }
            this.ReceptionDiagnosisTemplateFormWindow.close();
            //DiagnosisDtlPopUpList = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.ReceptionDiagnosisTemplateForm.FormFieldsCount + 2
    });



    this.ReceptionDiagnosisTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.ReceptionDiagnosisTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.ReceptionDiagnosisTemplateForm.FormFieldsCount + 2
    });

    this.ReceptionDiagnosisTemplateFormWindow = new Ext.Window({
        id: 'ReceptionDiagnosisTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.ReceptionDiagnosisTemplateForm.width + 10,
        height: this.ReceptionDiagnosisTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.ReceptionDiagnosisTemplateForm]
    });
    this.ReceptionDiagnosisTemplateFormWindow.show();

}


function PostReceptionToCashier(form, login) {

    var PrimKey = Ext.getCmp('PatientsLoginReception').selectedIndex;
    if (PrimKey < 1) {
        Ext.MessageBox.alert(login.modulename, 'You are not allow to post the record before save.Please save the record first'); // show message if the status is not new.
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostReceptionToCashierPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostReceptionToCashierPopupComplete, this);
}


function PostReceptionToCashierPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostReceptionToCashierPopupComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    this.CashierServicePopupForm = new Ext.form.FormPanel(responseText.CashierPopupCofig);

    this.CashierServicePopupForm.addButton({
        text: 'Select All',
        handler: function () {

            var PostToCashierPopupDetList = Ext.getCmp('PostToCashierPopupDetList');

            for (var pcnt = 0; pcnt < PostToCashierPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToCashierPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', true);
            }
        },
        scope: this,
        tabIndex: this.CashierServicePopupForm.FormFieldsCount + 2
    });

    this.CashierServicePopupForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var PostToCashierPopupDetList = Ext.getCmp('PostToCashierPopupDetList');

            for (var pcnt = 0; pcnt < PostToCashierPopupDetList.store.getCount() ; pcnt++) {

                var PopupRecord = PostToCashierPopupDetList.store.getAt(pcnt);
                PopupRecord.set('SelectCheck', false);
            }
        },
        scope: this,
        tabIndex: this.CashierServicePopupForm.FormFieldsCount + 2
    });

    this.CashierServicePopupForm.addButton({
        text: 'Post',
        handler: function () {

            var PrimKey = '';
            var PostToCashierPopupDetList = Ext.getCmp('PostToCashierPopupDetList');
            var PostToCashierRecords = [];
            var CheckCnt = 0;

            for (Cnt = 0; Cnt < PostToCashierPopupDetList.store.modified.length; Cnt++) {

                if (PostToCashierPopupDetList.store.modified[Cnt].get('SelectCheck') == true) {
                    PostToCashierRecords.push(Ext.encode(PostToCashierPopupDetList.store.modified[Cnt].data));
                    PrimKey = PostToCashierPopupDetList.store.modified[Cnt].get('Pl_Reception_Code');
                    CheckCnt++;
                }
            }
            if (CheckCnt == 0) {

                Ext.MessageBox.alert(login.modulename, 'There is no selected record.Please select the record before click to Post');
                return;
            }
            var PostToCashierRecordsRow = '[' + PostToCashierRecords.join(',') + ']';

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'PostReceptionToCashier',
                    PrimKey: PrimKey,
                    PostToCashierRecordsRow: PostToCashierRecordsRow
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', PostReceptionToCashierComplete, this);
        },
        scope: this,
        tabIndex: this.CashierServicePopupForm.FormFieldsCount + 2
    });


    this.CashierServicePopupForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.CashierServicePopupFormWindow.close();
        },
        scope: this,
        tabIndex: this.CashierServicePopupForm.FormFieldsCount + 2
    });

    this.CashierServicePopupFormWindow = new Ext.Window({
        id: 'CashierServicePopupFormWindow',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.CashierServicePopupForm.width + 10,
        height: this.CashierServicePopupForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.CashierServicePopupForm]
    });
    this.CashierServicePopupFormWindow.show();
}


function PostReceptionToCashierComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PostReceptionToCashierComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);

    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        this.CashierServicePopupFormWindow.close();

        if (Ext.getCmp('LoginNurseryServicedtlList')) {
            var LoginNurseryServicedtlList = Ext.getCmp('LoginNurseryServicedtlList');
            LoginNurseryServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseryServicedtlList.pageSize
                }
            });
            var LoginNurseryDrugDtlList = Ext.getCmp('LoginNurseryDrugDtlList');
            LoginNurseryDrugDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseryDrugDtlList.pageSize
                }
            });



            var LoginNurseInjectionDtlList = Ext.getCmp('LoginNurseInjectionDtlList');
            LoginNurseInjectionDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginNurseInjectionDtlList.pageSize
                }
            });
        }
        //clinic
        if (Ext.getCmp('LoginClinicServicedtlList')) {
            var LoginClinicServicedtlList = Ext.getCmp('LoginClinicServicedtlList');
            LoginClinicServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginClinicServicedtlList.pageSize
                }
            });
            var PatientLoginClinicDtlList = Ext.getCmp('PatientLoginClinicDtlList');
            PatientLoginClinicDtlList.store.load({
                params: {
                    start: 0,
                    limit: PatientLoginClinicDtlList.pageSize
                }
            });



            var LoginClinicInjectionDtlList = Ext.getCmp('LoginClinicInjectionDtlList');
            LoginClinicInjectionDtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginClinicInjectionDtlList.pageSize
                }
            });
        }
        //Lab
        if (Ext.getCmp('LoginDiagnosticClinicServicedtlList')) {
            var LoginDiagnosticClinicServicedtlList = Ext.getCmp('LoginDiagnosticClinicServicedtlList');
            LoginDiagnosticClinicServicedtlList.store.load({
                params: {
                    start: 0,
                    limit: LoginDiagnosticClinicServicedtlList.pageSize
                }
            });

        }
    }
}


function PostDiagnosisticToCashier(form, login) {

    var PrimKey = Ext.getCmp('LoginDiagnosticClinic-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostReceptionToCashierPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostReceptionToCashierPopupComplete, this);
}


function PostLoginClinicToCashier(form, login) {

    var PrimKey = Ext.getCmp('PatientLoginClinic-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostReceptionToCashierPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostReceptionToCashierPopupComplete, this);
}

function PostNurseryClinicToCashier(form, login) {

    var PrimKey = Ext.getCmp('LoginNursery-Pl_Reception_Code').getValue();

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PostReceptionToCashierPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PostReceptionToCashierPopupComplete, this);
}


function McPatientServicePost(form, login) {
    showMask();
    var PrimKey = Ext.getCmp('PatientService').selectedIndex;
    //var PostedCode = Ext.getCmp('PatientService-PostedCode').getValue();
    //if (PostedCode == 1) {
    //    Ext.MessageBox.alert(login.modulename, 'Already Data Posted !');
    //    return;
    //}
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Post before save !');
        return;
    }

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PatientServicePost',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', McPatientServicePostComp, this);
}
function McPatientServicePostComp(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', McPatientServicePostComp, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    }
}


function LoginNurseryDiaBtnHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'LoginNurseryDiagnosisPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', LoginNurseryDiagnosisPopupComplete, this);
}

function LoginNurseryDiagnosisPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoginNurseryDiagnosisPopupComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.LoginNurseryDiagnosisPopupTemplateForm = new Ext.form.FormPanel(responseText.LoginNurseryDiagnosisCofig);


    this.LoginNurseryDiagnosisPopupTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('LoginNurseryDiagnosisDtlList');
            //var selectcnt = 0;
            var MEDiagnosisPopupList = Ext.getCmp('MEDiagnosisPopupList');
            var LoginNurseryDiagnosisDtlList = Ext.getCmp('LoginNurseryDiagnosisDtlList');
            //var count = MEDiagnosisDtlList.store.getCount();
            var store = Ext.getCmp('LoginNurseryDiagnosisDtlList').getStore();

            var TypeCode = Ext.getCmp('MEDiagnosisPopup-TypeCode');
            var DetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode');
            var Description = Ext.getCmp('MEDiagnosisPopup-Description');

            Primary = Ext.getCmp('LoginNursery').selectedIndex;


            PatientLoginClinicEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
            var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Login_Nursery_Code: Primary == -1 ? 1 : Primary,
                StandardCode: DetailCode.editValue,
                StandardName: (DetailCode.editValue == 0 ? null : DetailCode.lastSelectionText),
                ShortDesc: Description.getValue(),
                StatusCode: 0,
                StatusName: 'Process',
                TypeCode: TypeCode.editValue,
                TypeName: (TypeCode.editValue == 0 ? null : TypeCode.lastSelectionText),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicEntryDetGrid.stopEditing();
            PatientLoginClinicEntryDetGrid.store.add(newRecord);
            PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginClinicEntryDetGrid.pageBar.updateInfo();

            this.LoginNurseryDiagnosisPopupTemplateFormWindow.close();
            //DiagnosisDtlPopUpList = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.LoginNurseryDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });



    this.LoginNurseryDiagnosisPopupTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.LoginNurseryDiagnosisPopupTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.LoginNurseryDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });

    this.LoginNurseryDiagnosisPopupTemplateFormWindow = new Ext.Window({
        id: 'LoginNurseryDiagnosisPopupTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.LoginNurseryDiagnosisPopupTemplateForm.width + 10,
        height: this.LoginNurseryDiagnosisPopupTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.LoginNurseryDiagnosisPopupTemplateForm]
    });

    this.LoginNurseryDiagnosisPopupTemplateForm.on('render', MEDiagnosisPopup, this);
    this.LoginNurseryDiagnosisPopupTemplateFormWindow.show();

}

function PatientLoginClinicDiagnosisHandler(form, login) {
    var PrimKey = 3;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'PatientLoginClinicDiagnosisPopup',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', PatientLoginClinicDiagnosisPopupComplete, this);
}

function PatientLoginClinicDiagnosisPopupComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', PatientLoginClinicDiagnosisPopupComplete, this);

    var responseText = Ext.util.JSON.decode(response.responseText);
    this.PatientLoginClinicDiagnosisPopupTemplateForm = new Ext.form.FormPanel(responseText.PatientLoginClinicDiagnosisCofig);


    this.PatientLoginClinicDiagnosisPopupTemplateForm.addButton({
        text: 'Load',
        handler: function () {

            var PatientLoginClinicEntryDetGrid = Ext.getCmp('PatientLoginClinicDiagnosisDtlList');
            //var selectcnt = 0;
            var MEDiagnosisPopupList = Ext.getCmp('MEDiagnosisPopupList');
            var PatientLoginClinicDiagnosisDtlList = Ext.getCmp('PatientLoginClinicDiagnosisDtlList');
            //var count = MEDiagnosisDtlList.store.getCount();
            var store = Ext.getCmp('PatientLoginClinicDiagnosisDtlList').getStore();

            var TypeCode = Ext.getCmp('MEDiagnosisPopup-TypeCode');
            var DetailCode = Ext.getCmp('MEDiagnosisPopup-DetailCode');
            var Description = Ext.getCmp('MEDiagnosisPopup-Description');

            Primary = Ext.getCmp('PatientLoginClinic').selectedIndex;


            PatientLoginClinicEntryDetGrid.storeId += 1;
            var ServiceID = PatientLoginClinicEntryDetGrid.storeId;
            var newRecord = new PatientLoginClinicEntryDetGrid.recordType({

                ID: ServiceID,
                SerialNo: ServiceID,
                Patient_Login_Clinic_Code: Primary == -1 ? 1 : Primary,
                pl_Reception_Code: 0,
                StandardCode: DetailCode.editValue,
                StandardName: (DetailCode.editValue == 0 ? null : DetailCode.lastSelectionText),
                ShortDesc: Description.getValue(),
                StatusCode: 0,
                StatusName: 'Process',
                TypeCode: TypeCode.editValue,
                TypeName: (TypeCode.editValue == 0 ? null : TypeCode.lastSelectionText),
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                CreatedBy: null,
                LastmodifiedBy: null,
                CreatedOn: null,
                LastmodifiedOn: null,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            PatientLoginClinicEntryDetGrid.stopEditing();
            PatientLoginClinicEntryDetGrid.store.add(newRecord);
            PatientLoginClinicEntryDetGrid.store.totalLength = PatientLoginClinicEntryDetGrid.store.getTotalCount() + 1;
            PatientLoginClinicEntryDetGrid.pageBar.updateInfo();

            this.PatientLoginClinicDiagnosisPopupTemplateFormWindow.close();
            //DiagnosisDtlPopUpList = [];

        },

        scope: this,
        formBind: true,
        tabIndex: this.PatientLoginClinicDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });



    this.PatientLoginClinicDiagnosisPopupTemplateForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PatientLoginClinicDiagnosisPopupTemplateFormWindow.close();
        },
        scope: this,
        tabIndex: this.PatientLoginClinicDiagnosisPopupTemplateForm.FormFieldsCount + 2
    });

    this.PatientLoginClinicDiagnosisPopupTemplateFormWindow = new Ext.Window({
        id: 'PatientLoginClinicDiagnosisPopupTemplateForm',
        title: 'Add Service',
        closable: true,
        minimizable: false,
        width: this.PatientLoginClinicDiagnosisPopupTemplateForm.width + 10,
        height: this.PatientLoginClinicDiagnosisPopupTemplateForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PatientLoginClinicDiagnosisPopupTemplateForm]
    });

    this.PatientLoginClinicDiagnosisPopupTemplateForm.on('render', MEDiagnosisPopup, this);
    this.PatientLoginClinicDiagnosisPopupTemplateFormWindow.show();

}


function MemberRegistration(form, login) {
    if (!form.isView) {
        var Patient_Type = Ext.getCmp('MemberRegistration-Patient_Type');
        var StatusCode = Ext.getCmp('MemberRegistration-StatusCode');
        Patient_Type.setComboValue(5);
        Patient_Type.disable();
        StatusCode.setComboValue(0);
        StatusCode.disable();



    }

}
function MECodeCatAssignDetailEdit(record) {

    PrimKey = record.get('ID');
    var MasterKey = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;

    if (MasterKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Edit  before save the Record! Save the Record');
        return;
    }

    var EditAssign = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPopupCodeCatAssignDetail', Url = 'forms/Medical/MEPopupCodeCatAssignDetail.xml', PKey = PrimKey, WidgetTitle = 'Categories Type';
    EditAssign.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);

}

function MEPopupCodeCatAssignDetail(form, login) {

    var FactorTypeCode = Ext.getCmp('MEPopupCodeCatAssignDetail-FactorTypeCode');
    var FactorValue = Ext.getCmp('MEPopupCodeCatAssignDetail-FactorValue');
    var BaseRate = Ext.getCmp('MEPopupCodeCatAssignDetail-BaseRate');


    if (form.selectedIndex != -1 && !form.isView) {//edit mode
        if (FactorTypeCode.editValue == 1) {
            FactorValue.setValue(0);
            FactorValue.disable();
            BaseRate.enable();
        }
        else {
            BaseRate.setValue(0);
            BaseRate.disable();
            FactorValue.enable();

        }

        FactorTypeCode.on('select', function (combo, record, index) {

            if (FactorTypeCode.editValue == 1) {
                FactorValue.setValue(0);
                FactorValue.disable();
                BaseRate.enable();
            }
            else {
                BaseRate.setValue(0);
                BaseRate.disable();
                FactorValue.enable();
            }
        }, this);
    }

    Ext.getCmp('MEPopupCodeCatAssignDetail_editform').on('close', OnBeforeMEPopupCodeCatAssignDetailClose, this);
}

function OnBeforeMEPopupCodeCatAssignDetailClose(win) {
    var detailGrid = Ext.getCmp('MECodeCatAssignDetailList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}


function MEPopUpCodeCatAssignSubDetail(form, login) {

    var FactorTypeCode = Ext.getCmp('MEPopUpCodeCatAssignSubDetail-FactorTypeCode');
    var FactorValue = Ext.getCmp('MEPopUpCodeCatAssignSubDetail-FactorValue');
    var BaseRate = Ext.getCmp('MEPopUpCodeCatAssignSubDetail-BaseRate');

    if (form.selectedIndex != -1 && !form.isView) {
        if (FactorTypeCode.editValue == 1) {
            FactorValue.setValue(0);
            FactorValue.disable();
            BaseRate.enable();
        }
        else {
            BaseRate.setValue(0);
            BaseRate.disable();
            FactorValue.enable();

        }
        FactorTypeCode.on('select', function (combo, record, index) {

            if (FactorTypeCode.editValue == 1) {
                FactorValue.setValue(0);
                FactorValue.disable();
                BaseRate.enable();
            }
            else {
                BaseRate.setValue(0);
                BaseRate.disable();
                FactorValue.enable();
            }
        }, this);
    }
    Ext.getCmp('MEPopUpCodeCatAssignSubDetail_editform').on('close', OnBeforeMEPopUpCodeCatAssignSubDetailClose, this);
}


function OnBeforeMEPopUpCodeCatAssignSubDetailClose(win) {
    var detailGrid = Ext.getCmp('MECodeCatAssignSubDetailList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}


function MEPopUpCodeCatAssignSubDetSub(form, login) {

    var FactorTypeCode = Ext.getCmp('MEPopUpCodeCatAssignSubDetSub-FactorTypeCode');
    var FactorValue = Ext.getCmp('MEPopUpCodeCatAssignSubDetSub-FactorValue');
    var BaseRate = Ext.getCmp('MEPopUpCodeCatAssignSubDetSub-BaseRate');

    if (form.selectedIndex != -1 && !form.isView) {
        if (FactorTypeCode.editValue == 1) {
            FactorValue.setValue(0);
            FactorValue.disable();
            BaseRate.enable();
        }
        else {
            BaseRate.setValue(0);
            BaseRate.disable();
            FactorValue.enable();

        }
        FactorTypeCode.on('select', function (combo, record, index) {

            if (FactorTypeCode.editValue == 1) {
                FactorValue.setValue(0);
                FactorValue.disable();
                BaseRate.enable();
            }
            else {
                BaseRate.setValue(0);
                BaseRate.disable();
                FactorValue.enable();
            }
        }, this);
    }
    Ext.getCmp('MEPopUpCodeCatAssignSubDetSub_editform').on('close', OnBeforeMEPopUpCodeCatAssignSubDetSubClose, this);
}


function OnBeforeMEPopUpCodeCatAssignSubDetSubClose(win) {
    var detailGrid = Ext.getCmp('MECodeCatAssignSubDetSubList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }
}

function MEPopUpCodeCategoriesAssign() {

    var CategoriesTemplateCode = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;



    if (CategoriesTemplateCode == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save the Record !');
        return;
    }
    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MEPopUpCodeCategoriesAssignRequest'
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEPopUpCodeCategoriesAssignComplete, this);
    }



}

function MEPopUpCodeCategoriesAssignComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEPopUpCodeCategoriesAssignComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.MEPopUpCodeCategoriesAssignForm = new Ext.form.FormPanel(responseText.CodeCategoriesAssignCofig);

    this.MEPopUpCodeCategoriesAssignForm.addButton({
        text: 'Save',
        handler: function () {

            var CodeCategoriesAssign = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;
            var CategoriesTemplateCode = Ext.getCmp('MECodeCategoriesAssign-Categories_Template_Code').editValue;

            var TreatmentTypeCode = Ext.getCmp('MECodeCategoriesAssignPopup-TreatmentTypeCode').editValue;
            var CalMethodCode = Ext.getCmp('MECodeCategoriesAssignPopup-CalMethodCode').editValue;
            var FactorTypeCode = Ext.getCmp('MECodeCategoriesAssignPopup-FactorTypeCode').editValue;
            var FactorValue = Ext.getCmp('MECodeCategoriesAssignPopup-FactorValue').getValue();
            var BaseRate = Ext.getCmp('MECodeCategoriesAssignPopup-BaseRate').getValue();


            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRGeneralRequest.aspx',
                params: {
                    action: 'MELoadCodeCategoriesAssignDtl',
                    CodeCategoriesAssign: CodeCategoriesAssign,
                    CategoriesTemplateCode: CategoriesTemplateCode,
                    TreatmentTypeCode: TreatmentTypeCode,
                    FactorTypeCode: FactorTypeCode,
                    CalMethodCode: CalMethodCode,
                    FactorValue: FactorValue,
                    BaseRate: BaseRate
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', MELoadCodeCategoriesAssignDtlComplete, this);




        },
        scope: this,
        tabIndex: this.MEPopUpCodeCategoriesAssignForm.FormFieldsCount + 2

    });

    this.MEPopUpCodeCategoriesAssignForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.MEPopUpCodeCategoriesAssignWindow.close();
        },
        scope: this,
        tabIndex: this.MEPopUpCodeCategoriesAssignForm.FormFieldsCount + 2

    });

    this.MEPopUpCodeCategoriesAssignWindow = new Ext.Window({
        id: 'MEPopUpCodeCategoriesAssignWindow',
        title: 'Code Categories Assign PopUp',
        closable: true,
        minimizable: false,
        width: this.MEPopUpCodeCategoriesAssignForm.width + 10,
        height: this.MEPopUpCodeCategoriesAssignForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.MEPopUpCodeCategoriesAssignForm]
    });
    this.MEPopUpCodeCategoriesAssignWindow.on('render', MEPopUpCodeCategoriesAssignRender, this);
    this.MEPopUpCodeCategoriesAssignWindow.on('beforeclose', onBeforecloseMECodeCategoriesAssignPopup, this);
    this.MEPopUpCodeCategoriesAssignWindow.show();
}
function MEPopUpCodeCategoriesAssignRender(form, login) {

    var TreatmentTypeCode = Ext.getCmp('MECodeCategoriesAssignPopup-TreatmentTypeCode');
    var CalMethodCode = Ext.getCmp('MECodeCategoriesAssignPopup-CalMethodCode');
    var FactorTypeCode = Ext.getCmp('MECodeCategoriesAssignPopup-FactorTypeCode');
    var FactorValue = Ext.getCmp('MECodeCategoriesAssignPopup-FactorValue');
    var BaseRate = Ext.getCmp('MECodeCategoriesAssignPopup-BaseRate');

    TreatmentTypeCode.setComboValue(0);
    CalMethodCode.setComboValue(0);
    FactorTypeCode.setComboValue(0);

    if (FactorTypeCode.editValue == 1) {
        FactorValue.setValue(0);
        FactorValue.disable();
        BaseRate.enable();
    }
    else {
        BaseRate.setValue(0);
        BaseRate.disable();
        FactorValue.enable();

    }

    FactorTypeCode.on('select', function (combo, record, index) {

        if (FactorTypeCode.editValue == 1) {
            FactorValue.setValue(0);
            FactorValue.disable();
            BaseRate.enable();
        }
        else {
            BaseRate.setValue(0);
            BaseRate.disable();
            FactorValue.enable();
        }
    }, this);

    //Ext.getCmp('CodeCategoriesAssignPopup_editform').on('close', onBeforecloseCodeCategoriesAssignPopup, this);

}


function onBeforecloseMECodeCategoriesAssignPopup(form, action) {
    var detailGrid = Ext.getCmp('MECodeCatAssignDetailList');
    if (detailGrid) {
        detailGrid.store.load({
            params: {

                start: 0,
                limit: detailGrid.pageSize
            }
        });
    }

}

function MELoadCodeCategoriesAssignDtlComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MELoadCodeCategoriesAssignDtlComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });


        //Ext.getCmp('MEPopUpCodeCategoriesAssignWindow_editform').close();



    }
}
function MECodeCatAssignSubDetailEdit(record) {

    PrimKey = record.get('ID');

    var MasterKey = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;

    if (MasterKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Edit  before save the Record! Save the Record');
        return;
    }

    var EditAssignSubDetail = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPopUpCodeCatAssignSubDetail', Url = 'forms/Medical/MEPopUpCodeCatAssignSubDetail.xml', PKey = PrimKey, WidgetTitle = 'Categories';
    EditAssignSubDetail.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);

}
function MECodeCatAssignSubDetSubEdit(record) {

    PrimKey = record.get('ID');

    var MasterKey = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;

    if (MasterKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'You cannot Edit  before save the Record! Save the Record');
        return;
    }

    var EditCodeCatAssignSubDetSub = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.Network.MEPopUpCodeCatAssignSubDetSub', Url = 'forms/Medical/MEPopUpCodeCatAssignSubDetSub.xml', PKey = PrimKey, WidgetTitle = 'Sub Categories';
    EditCodeCatAssignSubDetSub.EditTemplateOpenBottonBts(ClassName, Url, record.get('ID'), WidgetTitle);

}


function OnMECategoriesTemplateCodeChange(combo, record, index) {
    onBusinessTypeclear('MECodeCatAssignDetailList');
    onBusinessTypeclear('MECodeCatAssignSubDetailList');
    onBusinessTypeclear('MECodeCatAssignSubDetSubList');
    var CategoriesTemplateCode = Ext.getCmp('MECodeCategoriesAssign-Categories_Template_Code').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MECodeCategoriesLoad',
            CategoriesTemplateCode: CategoriesTemplateCode,
        },

        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEOnCodeCategoriesLoadComplete, this);

}

function MECodeCategoriesAssign(form, login) {
    if (!form.isView) {

        var Categories_Template_Code = Ext.getCmp('MECodeCategoriesAssign-Categories_Template_Code');

        //if (Categories_Template_Code) Categories_Template_Code.on('select', function (combo, record, index) {
        //    showMask();
        //    Ext.Ajax.request({
        //        url: 'tools/HumanResources/HRPosting.aspx',
        //        params: {
        //            action: 'LoadCodeCatergory',
        //            CategoriesTemplateCode: Categories_Template_Code.editValue,
        //        },

        //        method: 'POST',
        //        failure: function (result, request) {
        //            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        //        },
        //        timeout: 1200000,
        //        scope: this
        //    });
        //    Ext.Ajax.on('requestcomplete', LoadCodeCatergoryComplete, this);
        //}, this);


        var ProviderCode = Ext.getCmp('MECodeCategoriesAssign-ProviderCode');

        if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "im.PROVIDERTYPE=0";
        }, this);


        var CodeCatAssignDetail = Ext.getCmp('MECodeCatAssignDetailList');

        CodeCatAssignDetail.store.on('load', function (store, record, options) {
            Ext.getCmp('MECodeCatAssignDetailList_addNew').setVisible(false);
        }, this);

        var CodeCatAssignSubDetailList = Ext.getCmp('MECodeCatAssignSubDetailList');
        var CodeCatAssignSubDetSubList = Ext.getCmp('MECodeCatAssignSubDetSubList');
        var CodeCategoryMainTariffDetailList = Ext.getCmp('MECodeCategoryMainTariffDetailList');

        CodeCatAssignSubDetailList.on('addrecord', function (e) {
            if (CodeCatAssignSubDetailList.masterRecord != null) {
                e.record.set('FactorTypeCode', MECodeCatAssignSubDetailList.masterRecord.get('FactorTypeCode'));
                e.record.set('FactorTypeName', MECodeCatAssignSubDetailList.masterRecord.get('FactorTypeName'));
                e.record.set('CalMethodCode', MECodeCatAssignSubDetailList.masterRecord.get('CalMethodCode'));
                e.record.set('CalMethodName', MECodeCatAssignSubDetailList.masterRecord.get('CalMethodName'));
                e.record.set('FactorValue', MECodeCatAssignSubDetailList.masterRecord.get('FactorValue'));
                e.record.set('BaseRate', MECodeCatAssignSubDetailList.masterRecord.get('BaseRate'));
                e.record.set('TreatmentTypeCode', MECodeCatAssignSubDetailList.masterRecord.get('TreatmentTypeCode'));
                e.record.set('TreatmentTypeName', MECodeCatAssignSubDetailList.masterRecord.get('TreatmentTypeName'));
            }
        }, this);

        CodeCatAssignSubDetSubList.on('addrecord', function (e) {
            if (CodeCatAssignSubDetSubList.masterRecord != null) {
                e.record.set('FactorTypeCode', MECodeCatAssignSubDetSubList.masterRecord.get('FactorTypeCode'));
                e.record.set('FactorTypeName', MECodeCatAssignSubDetSubList.masterRecord.get('FactorTypeName'));
                e.record.set('CalMethodCode', MECodeCatAssignSubDetSubList.masterRecord.get('CalMethodCode'));
                e.record.set('CalMethodName', MECodeCatAssignSubDetSubList.masterRecord.get('CalMethodName'));
                e.record.set('FactorValue', MECodeCatAssignSubDetSubList.masterRecord.get('FactorValue'));
                e.record.set('BaseRate', MECodeCatAssignSubDetSubList.masterRecord.get('BaseRate'));
                e.record.set('TreatmentTypeCode', MECodeCatAssignSubDetSubList.masterRecord.get('TreatmentTypeCode'));
                e.record.set('TreatmentTypeName', MECodeCatAssignSubDetSubList.masterRecord.get('TreatmentTypeName'));
            }
        }, this);

        CodeCategoryMainTariffDetailList.on('rowclick', function (grid, rowIndex, e) {
            var record = grid.getStore().getAt(rowIndex);
            if (record.get('FactortypeCode') == 0) {
                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Baserate').editable = false;

                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Factorvalue').editable = true;
            }
            else {
                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Factorvalue').editable = false;
                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Baserate').editable = true;
            }
        }, this);

        CodeCategoryMainTariffDetailList.on('addrecord', function (evt) {
            evt.record.set('FactortypeCode', 0);
            evt.record.set('FactortypeName', 'By Factor');
            evt.record.set('Baserate', 0);
            evt.record.set('Factorvalue', null);
        }, this);

        CodeCategoryMainTariffDetailList.getStore().on('update', function (store, Record, options) {
            if (Record.get('FactortypeCode') == 0) {// Facter
                Record.set('Baserate', 0);

                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Baserate').editable = false;

                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Factorvalue').editable = true;
            }
            else {

                Record.set('Factorvalue', 0);
                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Factorvalue').editable = false;
                CodeCategoryMainTariffDetailList.getColumnModel().getColumnById('Baserate').editable = true;
            }
        }, this);

    }
}

function LoadCodeCatergoryComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', LoadCodeCatergoryComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {
        var Primary = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;
        var CodeCatAssignDetailList = Ext.getCmp('MECodeCatAssignDetailList');

        for (cnt = 0; cnt < responseText.codecategorydatum.length; cnt++) {

            var CodeCategoryRecord = responseText.codecategorydatum[cnt];

            CodeCatAssignDetailList.storeId += 1;
            var newRecord = new CodeCatAssignDetailList.recordType({
                ID: CodeCatAssignDetailList.storeId,
                SerialNo: CodeCatAssignDetailList.storeId,
                Categories_Name: CodeCategoryRecord.Categories_Name,
                Assign_Code: (Primary == -1 ? 1 : Primary),
                FromCode: CodeCategoryRecord.FromCode,
                ToCode: CodeCategoryRecord.ToCode,
                TreatmentTypeCode: 0,
                TreatmentTypeName: 'BOTH',
                FactorTypeCode: 0,
                FactorTypeName: 'By Factor',
                CalMethodCode: 0,
                CalMethodName: 'Amount',
                FactorValue: 0,
                BaseRate: 0,

                MECodeCatAssignSubDetailList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            CodeCatAssignDetailList.stopEditing();
            CodeCatAssignDetailList.store.add(newRecord);
            CodeCatAssignDetailList.store.totalLength = CodeCatAssignDetailList.store.getTotalCount() + 1;
            CodeCatAssignDetailList.pageBar.updateInfo();

            var CodeCatAssignSubDetailList = Ext.getCmp('MECodeCatAssignSubDetailList');
            for (var subcnt = 0; subcnt < CodeCategoryRecord.MECodeCatSubDetailList.length; subcnt++) {
                var CodeCategorySubDetRecord = CodeCategoryRecord.MECodeCatSubDetailList[subcnt];
                CodeCatAssignSubDetailList.storeId += 1;
                var subnewRecord = new CodeCatAssignSubDetailList.recordType({
                    ID: CodeCatAssignSubDetailList.storeId,
                    SerialNo: CodeCatAssignSubDetailList.storeId,
                    Categories_Name: CodeCategorySubDetRecord.Categories_Name,
                    Assign_Det_Code: CodeCatAssignDetailList.storeId,
                    FromCode: CodeCategorySubDetRecord.FromCode,
                    ToCode: CodeCategorySubDetRecord.ToCode,
                    TreatmentTypeCode: 0,
                    TreatmentTypeName: 'BOTH',
                    FactorTypeCode: 0,
                    FactorTypeName: 'By Factor',
                    CalMethodCode: 0,
                    CalMethodName: 'Amount',
                    FactorValue: 0,
                    BaseRate: 0,

                    MECodeCatAssignSubDetSubList: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                CodeCatAssignSubDetailList.stopEditing();
                CodeCatAssignSubDetailList.store.add(subnewRecord);
                CodeCatAssignSubDetailList.store.totalLength = CodeCatAssignSubDetailList.store.getTotalCount() + 1;
                CodeCatAssignSubDetailList.pageBar.updateInfo();

                var CodeCatAssignSubDetSubList = Ext.getCmp('MECodeCatAssignSubDetSubList');
                for (var subsubcnt = 0; subsubcnt < CodeCategorySubDetRecord.MECodeCatSubDetailSubList.length; subsubcnt++) {
                    var CodeCategorySubSubDetRecord = CodeCategorySubDetRecord.MECodeCatSubDetailSubList[subsubcnt];
                    CodeCatAssignSubDetSubList.storeId += 1;
                    var SubsubnewRecord = new CodeCatAssignSubDetSubList.recordType({
                        ID: CodeCatAssignSubDetSubList.storeId,
                        SerialNo: CodeCatAssignSubDetSubList.storeId,
                        Categories_Name: CodeCategorySubSubDetRecord.Categories_Name,
                        Assign_SubDet_Code: CodeCatAssignSubDetailList.storeId,
                        FromCode: CodeCategorySubSubDetRecord.FromCode,
                        ToCode: CodeCategorySubSubDetRecord.ToCode,
                        TreatmentTypeCode: 0,
                        TreatmentTypeName: 'BOTH',
                        FactorTypeCode: 0,
                        FactorTypeName: 'By Factor',
                        CalMethodCode: 0,
                        CalMethodName: 'Amount',
                        FactorValue: 0,
                        BaseRate: 0,


                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    CodeCatAssignSubDetSubList.stopEditing();
                    CodeCatAssignSubDetSubList.store.add(SubsubnewRecord);
                    CodeCatAssignSubDetSubList.store.totalLength = CodeCatAssignSubDetSubList.store.getTotalCount() + 1;
                    CodeCatAssignSubDetSubList.pageBar.updateInfo();

                }

            }

        }
        var CodeCatAssignDetailList = Ext.getCmp('MECodeCatAssignDetailList');
        CodeCatAssignDetailList.store.load({
            params: {
                start: 0,
                limit: CodeCatAssignDetailList.pageSize
            }
        });

    }
}


function MEOnCodeCategoriesLoadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEOnCodeCategoriesLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    }
    else {
        var Primary = Ext.getCmp('MECodeCategoriesAssign').selectedIndex;
        var CodeCatAssignDetailList = Ext.getCmp('MECodeCatAssignDetailList');

        for (cnt = 0; cnt < responseText.codecategorydatum.length; cnt++) {

            var CodeCategoryRecord = responseText.codecategorydatum[cnt];

            CodeCatAssignDetailList.storeId += 1;
            var newRecord = new CodeCatAssignDetailList.recordType({
                ID: CodeCatAssignDetailList.storeId,
                SerialNo: CodeCatAssignDetailList.storeId,
                Categories_Name: CodeCategoryRecord.Categories_Name,
                Assign_Code: (Primary == -1 ? 1 : Primary),
                FromCode: CodeCategoryRecord.FromCode,
                ToCode: CodeCategoryRecord.ToCode,
                TreatmentTypeCode: 0,
                TreatmentTypeName: 'BOTH',
                FactorTypeCode: 0,
                FactorTypeName: 'By Factor',
                CalMethodCode: 0,
                CalMethodName: 'Amount',
                FactorValue: 0,
                BaseRate: 0,

                CodeCatAssignSubDetailList: null,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            CodeCatAssignDetailList.stopEditing();
            CodeCatAssignDetailList.store.add(newRecord);
            CodeCatAssignDetailList.store.totalLength = CodeCatAssignDetailList.store.getTotalCount() + 1;
            CodeCatAssignDetailList.pageBar.updateInfo();

            var CodeCatAssignSubDetailList = Ext.getCmp('MECodeCatAssignSubDetailList');
            for (var subcnt = 0; subcnt < CodeCategoryRecord.CodeCatSubDetailList.length; subcnt++) {
                var CodeCategorySubDetRecord = CodeCategoryRecord.CodeCatSubDetailList[subcnt];
                CodeCatAssignSubDetailList.storeId += 1;
                var subnewRecord = new CodeCatAssignSubDetailList.recordType({
                    ID: CodeCatAssignSubDetailList.storeId,
                    SerialNo: CodeCatAssignSubDetailList.storeId,
                    Categories_Name: CodeCategorySubDetRecord.Categories_Name,
                    Assign_Det_Code: CodeCatAssignDetailList.storeId,
                    FromCode: CodeCategorySubDetRecord.FromCode,
                    ToCode: CodeCategorySubDetRecord.ToCode,
                    TreatmentTypeCode: 0,
                    TreatmentTypeName: 'BOTH',
                    FactorTypeCode: 0,
                    FactorTypeName: 'By Factor',
                    CalMethodCode: 0,
                    CalMethodName: 'Amount',
                    FactorValue: 0,
                    BaseRate: 0,

                    CodeCatAssignSubDetSubList: null,
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                CodeCatAssignSubDetailList.stopEditing();
                CodeCatAssignSubDetailList.store.add(subnewRecord);
                CodeCatAssignSubDetailList.store.totalLength = CodeCatAssignSubDetailList.store.getTotalCount() + 1;
                CodeCatAssignSubDetailList.pageBar.updateInfo();

                var CodeCatAssignSubDetSubList = Ext.getCmp('MECodeCatAssignSubDetSubList');
                for (var subsubcnt = 0; subsubcnt < CodeCategorySubDetRecord.CodeCatSubDetailSubList.length; subsubcnt++) {
                    var CodeCategorySubSubDetRecord = CodeCategorySubDetRecord.CodeCatSubDetailSubList[subsubcnt];
                    CodeCatAssignSubDetSubList.storeId += 1;
                    var SubsubnewRecord = new CodeCatAssignSubDetSubList.recordType({
                        ID: CodeCatAssignSubDetSubList.storeId,
                        SerialNo: CodeCatAssignSubDetSubList.storeId,
                        Categories_Name: CodeCategorySubSubDetRecord.Categories_Name,
                        Assign_SubDet_Code: CodeCatAssignSubDetailList.storeId,
                        FromCode: CodeCategorySubSubDetRecord.FromCode,
                        ToCode: CodeCategorySubSubDetRecord.ToCode,
                        TreatmentTypeCode: 0,
                        TreatmentTypeName: 'BOTH',
                        FactorTypeCode: 0,
                        FactorTypeName: 'By Factor',
                        CalMethodCode: 0,
                        CalMethodName: 'Amount',
                        FactorValue: 0,
                        BaseRate: 0,

                        CodeCatAssignSubDetSubList: null,
                        CompanyCode: login.CompanyCode,
                        LocationCode: login.LocationCode,
                        IsNew: true,
                        IsDirty: true,
                        IsDeleted: false,
                        IsSavable: true,
                        IsValid: true
                    });
                    CodeCatAssignSubDetSubList.stopEditing();
                    CodeCatAssignSubDetSubList.store.add(SubsubnewRecord);
                    CodeCatAssignSubDetSubList.store.totalLength = CodeCatAssignSubDetSubList.store.getTotalCount() + 1;
                    CodeCatAssignSubDetSubList.pageBar.updateInfo();

                }

            }

        }
        var CodeCatAssignDetailList = Ext.getCmp('MECodeCatAssignDetailList');
        CodeCatAssignDetailList.store.load({
            params: {
                start: 0,
                limit: CodeCatAssignDetailList.pageSize
            }
        });

    }
}

function MandatoryTariff(form, login) {

    if (!form.isView) {

        var active = Ext.getCmp('MandatoryTariff-Active');
        active.on('check', activeCheck, this);

        var MandatoryTariffDtlList = Ext.getCmp('MandatoryTariffDtlList');

        if (MandatoryTariffDtlList) MandatoryTariffDtlList.on('beforeedit', onStandardPackagesDtlbeforeedit, this);

        var VersionDescription = Ext.getCmp('MandatoryTariff-VersionDescription');
        var MandatoryTariffDtlList = Ext.getCmp('MandatoryTariffDtlList');
        MandatoryTariffDtlList.on('rowclick', function (grid, rowIndex, Record) {
            VersionDescription.setValue(grid.store.getAt(rowIndex).get('VersionDetail'));
            MandatoryTariffDtlList.lastSelectedRecord = grid.store.getAt(Index);
        }, this);

        MandatoryTariffDtlList.getSelectionModel().on('rowselect', function (SelectionModel, rowIndex, Record) {
            VersionDescription.setValue(Record.get('VersionDetail'));
            MandatoryTariffDtlList.lastSelectedRecord = Record;
        }, this);

        VersionDescription.on('change', function (field, newval, oldval) {
            if (MandatoryTariffDtlList.lastSelectedRecord)
                MandatoryTariffDtlList.lastSelectedRecord.set('VersionDetail', field.getValue());
        }, this);

    }

}


function onStandardPackagesDtlbeforeedit(e) {

    var cm = e.grid.getColumnModel();
    if (e.record.get('Validto') != '01-01-0001') {
        cm.getColumnById('Validfrom').editable = false;
    }
    else
        cm.getColumnById('Validfrom').editable = true;



}


function activeCheck(checkBox, checked) {

    if (checked) {
        var MandatoryTariffDtlList = Ext.getCmp('MandatoryTariffDtlList');
        for (var pcnt = 0; pcnt < MandatoryTariffDtlList.store.getCount() ; pcnt++) {
            var select = MandatoryTariffDtlList.store.getAt(pcnt);
            select.set('Active', true);
        }
    }
    else {
        var MandatoryTariffDtlList = Ext.getCmp('MandatoryTariffDtlList');
        for (var pcnt = 0; pcnt < MandatoryTariffDtlList.store.getCount() ; pcnt++) {
            var deselect = MandatoryTariffDtlList.store.getAt(pcnt);
            deselect.set('Active', false);
        }
    }
}
//Reception
function RecpAddNewServiceHandlerView(record) {

    var PatientService = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginReceptionDetailPopUp';
    var Url = '/forms/Medical/PatientLoginReceptionDetailPopUp.xml';
    var WidgetTitle = 'PatientService';
    PatientService.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}

//Clinic
function PatientLoginClinicview(record) {

    var Service = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginClinicDrugsPopUp';
    var Url = '/forms/Medical/PatientLoginClinicDrugsPopUp.xml';
    var WidgetTitle = 'Service';
    Service.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}

//Nursery
function LoginNurseInjectHandlerview(record) {

    var LoginNurseInjection = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.LoginNurseInjectPopup';
    var Url = '/forms/Medical/LoginNurseInjectPopup.xml';
    var WidgetTitle = 'LoginNurseInjection';
    LoginNurseInjection.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}

function LoginNurseInjectHandlerview(record) {

    var LoginNurseInjection = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.LoginClinicInjectPopup';
    var Url = '/forms/Medical/LoginClinicInjectPopup.xml';
    var WidgetTitle = 'LoginNurseInjection';
    LoginNurseInjection.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}

function PatientLoginNurseryview(record) {

    var Drug = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginClinicDrugsPopUp';
    var Url = '/forms/Medical/PatientLoginClinicDrugsPopUp.xml';
    var WidgetTitle = 'Drug';
    Drug.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}
//function RecpAddNewServiceHandlerview(record) {

//    var Service = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginReceptionDetailPopUp';
//    var Url = '/forms/Medical/PatientLoginReceptionDetailPopUp.xml';
//    var WidgetTitle = 'Service';
//    Service.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
//}
function RecDiagnosisHandlerview(record) {

    var Diagnosis = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEDiagnosisPopup';
    var Url = '/forms/Medical/MEDiagnosisPopup.xml';
    var WidgetTitle = 'Diagnosis';
    Diagnosis.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}
//function LoginNurseInjectHandlerview(record) {

//    var LoginNurseInjection = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.LoginNurseInjectPopup';
//    var Url = '/forms/Medical/LoginNurseInjectPopup.xml';
//    var WidgetTitle = 'LoginNurseInjection';
//    LoginNurseInjection.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
//}
//function PatientLoginClinicview(record) {

//    var Drug = new Ext.biz.WidgetInfo();
//    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginClinicDrugsPopUp';
//    var Url = '/forms/Medical/PatientLoginClinicDrugsPopUp.xml';
//    var WidgetTitle = 'Drug';
//    Drug.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
//}
function RecpAddNewServiceHandlerview(record) {

    var Service = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.PatientLoginReceptionDetailPopUp';
    var Url = '/forms/Medical/PatientLoginReceptionDetailPopUp.xml';
    var WidgetTitle = 'Service';
    Service.ViewTemplateOpen(ClassName, Url, record.get('ID'), WidgetTitle);
}




// MEUpload Mandatory Tariff 
function MEUploadMandatoryTariff(form, login) {

    var UploadCode = Ext.getCmp('MEUploadMandatoryTariff-UploadCode');
    if (UploadCode) UploadCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_MEUPLOADMANDATORIFFTARIFF')";
    }, this);

    if (!form.isView) {

    }
}

function MEMandatoryTariffDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('MEUploadMandatoryTariff-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEMandatoryTariffDownloadTemplateReqComplete, this);

}

function MEMandatoryTariffDownloadTemplateReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEMandatoryTariffDownloadTemplateReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function MEMandatoryTariffVieworDownload(form, alogin) {

    var ClassName = 'SBS.Business.Objects.Medical.Network.MEUploadMandatoryTariff';
    var Primary = Ext.getCmp('MEUploadMandatoryTariff').selectedIndex;

    var FileName = Ext.getCmp('MEUploadMandatoryTariff-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', MEMandatoryTariffVieworDownloadReqComplete, this);
}

function MEMandatoryTariffVieworDownloadReqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', MEMandatoryTariffVieworDownloadReqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function MEMandatoryTariffImportData(form, login) {

    var SelectedIndex = Ext.getCmp('MEUploadMandatoryTariff').selectedIndex;

    if (SelectedIndex != -1) {

        var FileName = Ext.getCmp('MEUploadMandatoryTariff-ImageFileName').getValue();
        if (FileName == '') {
            Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
            return;
        }
        else if (FileName.lastIndexOf('.xl') < 0) {
            Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
            return;
        }

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MECodeTypeImportMandatoryData',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEMandatoryTariffImportDataComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
        return true;
    }
}

function MEMandatoryTariffImportDataComplete(conn, response) {

    Ext.Ajax.un('requestcomplete', MEMandatoryTariffImportDataComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        var PrimaryKey = Ext.getCmp('MEUploadMandatoryTariff').selectedIndex;
        var MenuID = 'ID_MEUPLOADMANDATORIFFTARIFF';
        var TemplateCode = Ext.getCmp('MEUploadMandatoryTariff-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEMandatoryTariffImportDataPrcComplete, this);

    }

}

function MEMandatoryTariffImportDataPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MEMandatoryTariffImportDataPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Message,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    }
}

function UploadHRPersonData(form, login) {
    if (!form.isView) {

        var UploadCode = Ext.getCmp('UploadHRPersonData-UploadCode');

        if (UploadCode) UploadCode.on('beforequery', function (evt) {
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = " MENUCODE in(select  MENUCODE from  admmenu where menuid='ID_UPLOADPERSON')";
        }, this);
    }
}


function HRPersonDataDownloadTemplate(form, login) {

    var ClassName = 'SBS.Business.Objects.HumanResource.NGI.UnderWritting.GeneralSetting.ExcelUploadTemplate';

    var Primary = Ext.getCmp('UploadHRPersonData-UploadCode').editValue;

    var FileName = '99';

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'UploadViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRPersonDataDownloadTemplatereqComplete, this);

}

function HRPersonDataDownloadTemplatereqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRPersonDataDownloadTemplatereqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}

function HRPersonDataVieworDownload(form, login) {
    var ClassName = 'SBS.Business.Objects.HumanResource.HR.Persons.UploadHRPersonData';
    var Primary = Ext.getCmp('UploadHRPersonData').selectedIndex;

    var FileName = Ext.getCmp('UploadHRPersonData-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'UploadViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', HRPersonDataVieworDownloadreqComplete, this);
}

function HRPersonDataVieworDownloadreqComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', HRPersonDataVieworDownloadreqComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');


    }
}


function EmployeeUploadExcelColumn(form, login) {

    var FileName = Ext.getCmp('UploadHRPersonData-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('UploadHRPersonData').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'HREmployeeUploadLoadExcel',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', EmployeeUploadExcelColumnComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}

function EmployeeUploadExcelColumnComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', EmployeeUploadExcelColumnComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PrimaryKey = Ext.getCmp('UploadHRPersonData').selectedIndex;
        var MenuID = 'ID_HR_PERSONS_D';
        var TemplateCode = Ext.getCmp('UploadHRPersonData-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', EmployeeUploadExcelColumnPrcComplete, this);

    }

}

function EmployeeUploadExcelColumnPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', EmployeeUploadExcelColumnPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('UploadHRPersonData').selectedIndex;
        var MenuID = 'ID_HR_PERSONS_D';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);

    }
}

function ID_MC_CASHIERBILL_GridViewColorSetting(value, metaData, record, rowIndex, colIndex, store) {
    if (record.get('StatusCode') == 0)
        return '<span style="font-weight:bold; color:blue;">' + value + '</span>';
    if (record.get('StatusCode') == 1)
        return '<span style="font-weight:bold; color:green;">' + value + '</span>';

}

function PostToClaimPopUpHandler(form, login) {

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'PostToClaimPopUp'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', PostToClaimPopUpCompleted, this);
}

function PostToClaimPopUpCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', PostToClaimPopUpCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.PostToClaimPopUpForm = new Ext.form.FormPanel(responseText.PostToClaimPopUpCofig);

    this.PostToClaimPopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            /*
            var AddMemberPolicyMemberDetList = Ext.getCmp('AddMemberPolicyMemberDetList');
            for (var cnt = 0; cnt < AddMemberPolicyMemberDetList.store.getCount() ; cnt++) {

                AddMemberPolicyMemberDetList.store.getAt(cnt).set('Selectt', true);
            }
            */
        },
        scope: this,
        tabIndex: this.PostToClaimPopUpForm.FormFieldsCount + 2
    });
    this.PostToClaimPopUpForm.addButton({
        text: 'Post To Claim',
        handler: function () {

        },
        scope: this,
        tabIndex: this.PostToClaimPopUpForm.FormFieldsCount + 2

    });
    this.PostToClaimPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.PostToClaimPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.PostToClaimPopUpForm.FormFieldsCount + 2
    });
    this.PostToClaimPopUpFormWindow = new Ext.Window({
        id: 'PostToClaimPopUpFormWindow',
        title: 'Post To Claim',
        closable: true,
        minimizable: false,
        width: this.PostToClaimPopUpForm.width + 10,
        height: this.PostToClaimPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.PostToClaimPopUpForm]
    });
    //this.PostToClaimPopUpForm.on('render', AddMemberPolicyPopUp, this);
    this.PostToClaimPopUpFormWindow.show();
}


function MEUploadPharmacyLoadExcelColumns(form, login) {

    var FileName = Ext.getCmp('MEUploadPharmacyTariff-ImageFileName').getValue();
    if (FileName == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select the file !');
        return;
    }
    else if (FileName.lastIndexOf('.xl') < 0) {
        Ext.MessageBox.alert(login.modulename, 'Please Select exell file for uploading the columns !');
        return;
    }

    var SelectedIndex = Ext.getCmp('MEUploadPharmacyTariff').selectedIndex;
    if (SelectedIndex != -1) {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'MEUploadPharmacyLoadExcelColumns',
                filename: FileName,
                Primary: SelectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEUploadPharmacyLoadExcelColumnsComplete, this);
    }
    else {
        Ext.MessageBox.alert(login.modulename, "Please save the reord First !");
    }
}

function MEUploadPharmacyLoadExcelColumnsComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MEUploadPharmacyLoadExcelColumnsComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        /*
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        */

        var PrimaryKey = Ext.getCmp('MEUploadPharmacyTariff').selectedIndex;
        var MenuID = 'ID_PROVIDERPHARMACYTARIFF';
        var TemplateCode = Ext.getCmp('MEUploadPharmacyTariff-UploadCode').editValue;
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
                TemplateCode: TemplateCode
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', MEUploadPharmacyUploadPrcComplete, this);

    }

}

function MEUploadPharmacyUploadPrcComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', MEUploadPharmacyUploadPrcComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        //Ext.MessageBox.show({
        //    title: login.modulename,
        //    msg: responseText.Message,
        //    buttons: Ext.MessageBox.OK,
        //    icon: Ext.MessageBox.INFO
        //});

        var PrimaryKey = Ext.getCmp('MEUploadPharmacyTariff').selectedIndex;
        var MenuID = 'ID_PROVIDERPHARMACYTARIFF';
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRGeneralRequest.aspx',
            params: {
                action: 'ImportDataFunctionCall',
                PrimaryKey: PrimaryKey,
                MenuID: MenuID,
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', ProTariffImportDataPrcComplete, this);

    }
}

function NutritionPatientSession(from, login) {

    var FoodCategoryCode = Ext.getCmp('NutritionPatientSession-FoodCategoryCode');

    if (FoodCategoryCode) FoodCategoryCode.on('beforequery', function (evt) {
        var FoodTemplateCode = Ext.getCmp('NutritionPatientSession-FoodTemplateCode').editValue;
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = " FOODCATEGORYCODE in (select FOODCATEGORYCODE from ME_CATEGORYDTL  where FOODTEMPLATECODE=" + FoodTemplateCode + ")";
    }, this);

    FoodCategoryCode.on('select', FoodDescriptionSelect, this);
}

function FoodDescriptionSelect(combo, record, index) {

    var FoodTemplateCode = Ext.getCmp('NutritionPatientSession-FoodTemplateCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'FoodDescriptionSelecting',
            FoodTemplateCode: FoodTemplateCode
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', FoodDescriptionSelectingComplete, this);
}

function FoodDescriptionSelectingComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', FoodDescriptionSelectingComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    hideMask();
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
    } else {

        var NutritionPatientSessionDtlList = Ext.getCmp('NutritionPatientSessionDtlList');
        var PrimKey = Ext.getCmp('NutritionPatientSession').selectedIndex;
        var Prim = 1;
        for (cnt = 0; cnt < responseText.CategorytotalCount; cnt++) { //
            var CategoryRecord = responseText.Categorydatum[cnt];
            NutritionPatientSessionDtlList.storeId += 1;
            var newRecord = new NutritionPatientSessionDtlList.recordType({
                ID: NutritionPatientSessionDtlList.storeId,
                Serialno: NutritionPatientSessionDtlList.storeId,
                NutritionPatientSessionCode: PrimKey == -1 ? Prim : PrimKey,
                FoodDescriptionCode: CategoryRecord.Fooddescription,
                FoodDescriptionName: CategoryRecord.FooddescriptionName,
                Disposing: CategoryRecord.Disposing,
                Quantity: CategoryRecord.Qty,
                SequenceCode: CategoryRecord.SequenceCode,
                SequenceName: CategoryRecord.SequenceName,
                Description: CategoryRecord.Description,
                CompanyCode: login.CompanyCode,
                LocationCode: login.LocationCode,
                IsNew: true,
                IsDirty: true,
                IsDeleted: false,
                IsSavable: true,
                IsValid: true
            });
            NutritionPatientSessionDtlList.stopEditing();
            NutritionPatientSessionDtlList.store.add(newRecord);
            NutritionPatientSessionDtlList.store.totalLength = NutritionPatientSessionDtlList.store.getTotalCount() + 1;
            NutritionPatientSessionDtlList.pageBar.updateInfo();
            Prim++;
        }
    }
}


function PriorRequestOnlineClaimsSearchNew(form, login) {
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Claim Processing', 'Please wait until the Detail loads !');
        return;
    }
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/Network/PriorAuthorization/PriorRequestMEOnlineApprovedClaims.xml', PKey = -1, WidgetTitle = 'New Calim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}

function ERXRequestOnlineClaimsSearchNew(form, login) {
    if (IsAjaxRequestmade) {
        hideMask();
        Ext.MessageBox.alert('Claim Processing', 'Please wait until the Detail loads !');
        return;
    }
    var NewCase = new Ext.biz.WidgetInfo();
    var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims', Url = '/forms/Medical/Network/PriorAuthorization/ERXRequestMEOnlineApprovedClaims.xml', PKey = -1, WidgetTitle = 'New Calim';
    NewCase.EditTemplateOpen(ClassName, Url, PKey, WidgetTitle);
}



function PriorRequestInterfaceReProcess(form, login) {
}


function MedOnlineClaimProcessReApproved(record) {

    var Status = record.get('AuthorizedStatus');

    if (Status == 9 || Status == 10) {
        if (record.get('PaymentStatusName') == 'Rejected' || record.get('PaymentStatusName') == 'Partially Paid') {

            Ext.MessageBox.confirm('Information', 'Do you want to Re Submitted  this Record?', function (button) {
                var selectIndex = record.get('ID');
                if (button == 'yes') {
                    showMask();
                    Ext.Ajax.request({
                        url: 'tools/HumanResources/HRGeneralRequest.aspx',
                        params: {
                            action: 'MedOnlineClaimProcessReApproved',
                            selectIndex: selectIndex,
                        },
                        method: 'POST',
                        failure: function (result, request) {
                            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                        },
                        timeout: 1200000,
                        scope: this
                    });
                    Ext.Ajax.on('requestcomplete', MedOnlineClaimProcessReApprovedComplete, this);
                }
                else {
                    return true;
                }

            }, this);
        }
        else {
            Ext.MessageBox.alert(login.modulename, 'Rejected or Partially Paid record only allow to Re Submitted to the Post Office');
            return;
        }

    }
    else {
        Ext.MessageBox.alert(login.modulename, 'RA Received  record only allow to Re Submitted to the Post Office');
        return;
    }
}
function MedOnlineClaimProcessReApprovedComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedOnlineClaimProcessReApprovedComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {

        if (Number(responseText.ClaimCode) > 0) {
            var PriorReSubmitted = new Ext.biz.WidgetInfo();
            var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims';
            var Url = '/forms/Medical/MEOnlineApprovedClaims.xml';
            var PKey = responseText.ClaimCode;
            var WidgetTitle = 'New Claim Request';
            PriorReSubmitted.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, '', '');
        }
        else {
            Ext.MessageBox.show({
                title: login.modulename,
                msg: responseText.Message,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.INFO
            });
        }

        var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
        MEOnlineClaimReqApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: MEOnlineClaimReqApprovalHistoryDtlList.pageSize
            }
        });
    }

}



function MedPriorRequestReApproved(record) {
    var Status = record.get('AuthorizedStatus');

    if (Status == 4) {
        if (record.get('PaymentStatusName') == 'Rejected' || record.get('PaymentStatusName') == 'Partially Paid') {

            Ext.MessageBox.confirm('Information', 'Do you want to Re Submitted  this Record?', function (button) {
                var selectIndex = record.get('ID');
                if (button == 'yes') {
                    showMask();
                    Ext.Ajax.request({
                        url: 'tools/HumanResources/HRGeneralRequest.aspx',
                        params: {
                            action: 'MedPriorRequestReApproved',
                            selectIndex: selectIndex,
                        },
                        method: 'POST',
                        failure: function (result, request) {
                            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                        },
                        timeout: 1200000,
                        scope: this
                    });
                    Ext.Ajax.on('requestcomplete', MedPriorRequestReApprovedComplete, this);
                }
                else {
                    return true;
                }

            }, this);
        }

        else {
            Ext.MessageBox.alert(login.modulename, 'Rejected or Partially Paid record only allow to Re Submitted to the Post Office');
            return;
        }
    }
    else {
        Ext.MessageBox.alert(login.modulename, 'Prior Request Authorized record only allow to Re Submitted to the Post Office');
        return;
    }

}
function MedPriorRequestReApprovedComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MedPriorRequestReApprovedComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
        return;
    }
    else {

        if (Number(responseText.PriorCode) > 0) {
            var PriorReSubmitted = new Ext.biz.WidgetInfo();
            var ClassName = 'SBS.Business.Objects.Medical.General.MEOnlineApprovedClaims';
            var Url = '/forms/Medical/Network/PriorAuthorization/PriorRequestMEOnlineApprovedClaims.xml';
            var PKey = responseText.PriorCode;
            var WidgetTitle = 'New Prior Request';
            PriorReSubmitted.EditTemplateOpenBottonBts(ClassName, Url, PKey, WidgetTitle, '', '');
        }
        else {
            Ext.MessageBox.show({
                title: login.modulename,
                msg: responseText.Msg,
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.INFO
            });
        }

        var MEOnlineClaimReqApprovalHistoryDtlList = Ext.getCmp('MEOnlineClaimReqApprovalHistoryDtlList');
        MEOnlineClaimReqApprovalHistoryDtlList.store.load({
            params: {
                start: 0,
                limit: MEOnlineClaimReqApprovalHistoryDtlList.pageSize
            }
        });
    }

}



//-------------------------------MemberWaiveAmountCalculation-------

function MemberWaiveAmountCalculation(form, login) {

    if (!form.isView) {

        var PolicyIDCode = Ext.getCmp('MemberWaiveAmountCalculation-PolicyIDCode');
        var IPPolicyIDCode = Ext.getCmp('MemberWaiveAmountCalculation-IPPolicyIDCode');
        var MemberCode = Ext.getCmp('MemberWaiveAmountCalculation-MemberCode');
        PolicyIDCode.disable();
        IPPolicyIDCode.disable();

        if (MemberCode) MemberCode.on('select', function (combo, record, index) {
            onBusinessTypeclear('DependentMemberDetailList');
        }, this);

        var TypeCode = Ext.getCmp('MemberWaiveAmountCalculation-PolicyTypeCode');
        TypeCode.on('select', function (combo, record, index) {
            if (TypeCode.editValue == 1) {  //policy
                PolicyIDCode.enable(); PolicyIDCode.allowBlank = false; PolicyIDCode.isValid();
                IPPolicyIDCode.disable(); IPPolicyIDCode.clearValue(); IPPolicyIDCode.allowBlank = true; IPPolicyIDCode.isValid();
            }
            if (TypeCode.editValue == 2) { //Individual Policy
                IPPolicyIDCode.enable(); IPPolicyIDCode.allowBlank = false; IPPolicyIDCode.isValid();
                PolicyIDCode.disable(); PolicyIDCode.clearValue(); PolicyIDCode.allowBlank = true; PolicyIDCode.isValid();
            }
            Ext.getCmp('MemberWaiveAmountCalculation-PolicyName').setValue(null);
        }, this);
        var Policy = 0;
        if (MemberCode) MemberCode.on('beforequery', function (evt) {
            if (TypeCode.editValue == 1)
                Policy = PolicyIDCode.editValue;
            if (TypeCode.editValue == 2)
                Policy = IPPolicyIDCode.editValue;
            evt.combo.lastQuery = '1=2';
            evt.combo.store.baseParams.filter = "MEM.POLICYCODE=" + Policy + " AND MEM.MEMBER_TYPE=1";
        }, this);

    }
}

function MemberWaiveAmountCalculationLoading(form, login) {

    var MemberCode = Ext.getCmp('MemberWaiveAmountCalculation-MemberCode').editValue;
    if (MemberCode == 0 || MemberCode == null || MemberCode == '') {
        Ext.MessageBox.alert(login.modulename, 'Please Select Member ID');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'MemberWaiveAmtCalcPolicyPopUp'
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', MemberWaiveAmtCalcPolicyPopUpCompleted, this);

}

function MemberWaiveAmtCalcPolicyPopUpCompleted(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', MemberWaiveAmtCalcPolicyPopUpCompleted, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    this.MemberWaiveAmtPopUpForm = new Ext.form.FormPanel(responseText.MemberWaiveAmtCalcPolicyPopUpCofig);

    this.MemberWaiveAmtPopUpForm.addButton({
        text: 'Select All',
        handler: function () {
            var MemberWaiveAmountCalcMemberPopUpDtlList = Ext.getCmp('MemberWaiveAmountCalcMemberPopUpDtlList');
            for (var cnt = 0; cnt < MemberWaiveAmountCalcMemberPopUpDtlList.store.getCount() ; cnt++) {
                MemberWaiveAmountCalcMemberPopUpDtlList.store.getAt(cnt).set('Selectcheck', true);
            }
        },
        scope: this,
        tabIndex: this.MemberWaiveAmtPopUpForm.FormFieldsCount + 2
    });
    this.MemberWaiveAmtPopUpForm.addButton({
        text: 'UnSelect All',
        handler: function () {
            var MemberWaiveAmountCalcMemberPopUpDtlList = Ext.getCmp('MemberWaiveAmountCalcMemberPopUpDtlList');
            for (var cnt = 0; cnt < MemberWaiveAmountCalcMemberPopUpDtlList.store.getCount() ; cnt++) {
                MemberWaiveAmountCalcMemberPopUpDtlList.store.getAt(cnt).set('Selectcheck', false);
            }
        },
        scope: this,
        tabIndex: this.MemberWaiveAmtPopUpForm.FormFieldsCount + 2
    });
    this.MemberWaiveAmtPopUpForm.addButton({
        text: 'Load',
        handler: function () {

            var DependentMemberDetailList = Ext.getCmp('DependentMemberDetailList');
            var MemberWaiveAmountCalcMemberPopUpDtlList = Ext.getCmp('MemberWaiveAmountCalcMemberPopUpDtlList');
            var PKey = Ext.getCmp('MemberWaiveAmountCalculation').selectedIndex;

            for (var pcnt = 0; pcnt < MemberWaiveAmountCalcMemberPopUpDtlList.store.getCount() ; pcnt++) {

                var PopupRecord = MemberWaiveAmountCalcMemberPopUpDtlList.store.getAt(pcnt);

                var isavailable = false;
                for (var count = 0; count < DependentMemberDetailList.getStore().getCount() ; count++) {
                    if (PopupRecord.get('ID') == DependentMemberDetailList.getStore().getAt(count).get('MemberCode')) {
                        PopupRecord.set('Selectcheck', true);
                        isavailable = true;
                        break;
                    }
                }
                if (isavailable || !PopupRecord.get('Selectcheck')) continue;

                DependentMemberDetailList.storeId += 1;
                var ServiceID = DependentMemberDetailList.storeId;
                var newRecord = new DependentMemberDetailList.recordType({
                    ID: ServiceID,
                    SerialNo: ServiceID,
                    MemberWaiveAmtCalcCode: (PKey == -1 ? 1 : PKey),
                    MemberCode: PopupRecord.get('ID'),
                    CardNo: PopupRecord.get('CardNo'),
                    MemberName: PopupRecord.get('MemberName'),
                    FineAmount: PopupRecord.get('FineAmount'),
                    WaiveAmount: PopupRecord.get('WaiveAmount'),
                    CompanyCode: login.CompanyCode,
                    LocationCode: login.LocationCode,
                    IsNew: true,
                    IsDirty: true,
                    IsDeleted: false,
                    IsSavable: true,
                    IsValid: true
                });
                DependentMemberDetailList.stopEditing();
                DependentMemberDetailList.store.add(newRecord);
                DependentMemberDetailList.store.totalLength = DependentMemberDetailList.store.getTotalCount() + 1;
                DependentMemberDetailList.pageBar.updateInfo();
            }

            this.MemberWaiveAmtPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.MemberWaiveAmtPopUpForm.FormFieldsCount + 2

    });
    this.MemberWaiveAmtPopUpForm.addButton({
        text: 'Cancel',
        handler: function () {
            this.MemberWaiveAmtPopUpFormWindow.close();
        },
        scope: this,
        tabIndex: this.MemberWaiveAmtPopUpForm.FormFieldsCount + 2
    });
    this.MemberWaiveAmtPopUpFormWindow = new Ext.Window({
        id: 'MemberWaiveAmtPopUpFormWindow',
        title: 'Members',
        closable: true,
        minimizable: false,
        width: this.MemberWaiveAmtPopUpForm.width + 10,
        height: this.MemberWaiveAmtPopUpForm.height + 10,
        plain: true,
        layout: 'fit',
        resizable: false,
        bodyStyle: 'padding:5px',
        modal: true,
        items: [this.MemberWaiveAmtPopUpForm]
    });
    this.MemberWaiveAmtPopUpForm.on('render', MemberWaiveAmountCalcMemberPopUp, this);
    this.MemberWaiveAmtPopUpFormWindow.show();
}

function MemberWaiveAmountCalcMemberPopUp(form, login) {


    var Primary = Ext.getCmp('MemberWaiveAmountCalculation').selectedIndex;
    var MemberCode = Ext.getCmp('MemberWaiveAmountCalculation-MemberCode').editValue;
    var FilterQry = "im.PARENT_ID=" + MemberCode;

    if (Primary > 0)
        FilterQry += "AND im.MEMBER_CODE not in (SELECT  NVL(MEMBERCODE,0) FROM IM_DEPENDENTMEMBERDETAIL WHERE MEMBERWAIVEAMTCALCCODE=" + Primary + ")";

    DetailStore = Ext.getCmp('MemberWaiveAmountCalcMemberPopUpDtlList').getStore();
    var DetUrl = "widgethelper.aspx?action=getdata&id=SBS.Business.Objects.HumanResource.NGI.UnderWritting.MemberPolicy.MemberWaiveAmountCalcMemberPopUpDtl&filter=" + FilterQry;
    if (DetailStore) {
        DetailStore.proxy = new Ext.data.HttpProxy({
            url: DetUrl
        });
        DetailStore.load({
            params: {
                start: 0,
                limit: 20
            }
        });
    }
}


//----------------------------------------------------------------------- Endorsement Posting ---------------------------------------------------------------------



function ClinicianEndorsementPosting(form, login) {

    var CDIDCode = Ext.getCmp('ClinicianEndorsementPosting-CDIDCode');
    CDIDCode.on('select', OnClinicianChange, this);
    var ProviderCode = Ext.getCmp('ClinicianEndorsementPosting-ProviderIDCode');
    var ClinicianCode = Ext.getCmp('ClinicianEndorsementPosting-CDIDCode');
    var ClinicianName = Ext.getCmp('ClinicianEndorsementPosting-CDName');
    if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDERCODE from ME_PROVIDER_CLINICIAN_LINK )";
    }, this);

    if (ProviderCode) ProviderCode.on('select', function (combo, record, index) {
        ClinicianCode.clearValue();
        ClinicianName.setValue('');
        onBusinessTypeclear('ClinicianEndorsementPostingDtlList');
    }, this);

    if (ClinicianCode) ClinicianCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PCL.PROVIDERCODE=" + ProviderCode.editValue + "";
    }, this);

    var ClinicianEndorsementPostingDtlList = Ext.getCmp('ClinicianEndorsementPostingDtlList').getStore();
    ClinicianEndorsementPostingDtlList.on('load', function (store, records, options) {
        var TotalAmt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TotalAmt += (1 * record.get('Amount'));
        }
        Ext.getCmp('ClinicianEndorsementPosting-Totall').setValue(TotalAmt);
    }, this);
}

function OnClinicianChange(combo, record, index) {
    onBusinessTypeclear('ClinicianEndorsementPostingDtlList');

    var ClinicianCode = Ext.getCmp('ClinicianEndorsementPosting-CDIDCode').editValue;
    var ProviderCode = Ext.getCmp('ClinicianEndorsementPosting-ProviderIDCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ClinicianLoad',
            ClinicianCode: ClinicianCode,
            ProviderCode: ProviderCode
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', ClinicianLoadComplete, this);
}

function ClinicianLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', ClinicianLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
        return;
    }

    var PrimKey = Ext.getCmp('ClinicianEndorsementPosting').selectedIndex;
    var ClinicianShare = Ext.getCmp('ClinicianEndorsementPosting-ClinicianShare').getValue();
    var ClinicianEndorsementPostingDtlList = Ext.getCmp('ClinicianEndorsementPostingDtlList');

    for (cnt = 0; cnt < responseText.EndorsementDtldatum.length; cnt++) { //LoadEnddoresement Detalis
        var Record = responseText.EndorsementDtldatum[cnt];
        ClinicianEndorsementPostingDtlList.storeId += 1;
        var newSubRecord = new ClinicianEndorsementPostingDtlList.recordType({
            ID: ClinicianEndorsementPostingDtlList.storeId,
            SerialNo: ClinicianEndorsementPostingDtlList.storeId,
            EndoresmentCode: (PrimKey == -1 ? 1 : PrimKey),
            Pl_Reception_Dtlcode: Record.Pl_Reception_Dtlcode,
            Patient_No: Record.Patient_No,
            Patient_Name: Record.Patient_Name,
            ServiceTypeName: Record.ServiceTypeName,
            Service_Name: Record.Service_Name,
            RequestAmount: Record.RequestAmount,
            Amount: (Record.RequestAmount * ClinicianShare) / 100,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true
        });
        ClinicianEndorsementPostingDtlList.stopEditing();
        ClinicianEndorsementPostingDtlList.store.add(newSubRecord);
        ClinicianEndorsementPostingDtlList.store.totalLength = ClinicianEndorsementPostingDtlList.store.getTotalCount() + 1;
        ClinicianEndorsementPostingDtlList.pageBar.updateInfo();

    }
    DetailStore = Ext.getCmp('ClinicianEndorsementPostingDtlList').getStore();
    DetailStore.load({
        params: {
            start: 0,
            limit: 500
        }
    });
}


function InsurerEndorsementPosting(form, login) {
    var InsurerCode = Ext.getCmp('InsurerEndorsementPosting-InsurerCode');
    var ProviderCode = Ext.getCmp('InsurerEndorsementPosting-ProviderIDCode');

    if (ProviderCode) ProviderCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "PRO.PROVIDERCODE in (select PROVIDER_CODE from ME_CLAIM_REQUEST_HEADER )";
    }, this);

    if (ProviderCode) ProviderCode.on('select', function (combo, record, index) {
        InsurerCode.clearValue();
        onBusinessTypeclear('InsurerEndorsementPostingDtlList');
    }, this);

    if (InsurerCode) InsurerCode.on('beforequery', function (evt) {
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "INS.INSCODE in ( select PayerCode from ME_CLAIM_REQUEST_HEADER where PROVIDER_CODE=" + ProviderCode.editValue + ")";
    }, this);
    InsurerCode.on('select', OnInsurerChange, this);

    var InsurerEndorsementPostingDtlList = Ext.getCmp('InsurerEndorsementPostingDtlList').getStore();
    InsurerEndorsementPostingDtlList.on('load', function (store, records, options) {
        var TotalAmt = 0;
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            TotalAmt += (1 * record.get('Amount'));
        }
        Ext.getCmp('InsurerEndorsementPosting-Totall').setValue(TotalAmt);
    }, this);
}

function OnInsurerChange(combo, record, index) {

    onBusinessTypeclear('InsurerEndorsementPostingDtlList');

    var InsurerCode = Ext.getCmp('InsurerEndorsementPosting-InsurerCode').editValue;
    var ProviderCode = Ext.getCmp('InsurerEndorsementPosting-ProviderIDCode').editValue;

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'InsurerLoad',
            InsurerCode: InsurerCode,
            ProviderCode: ProviderCode
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', InsurerLoadComplete, this);
}

function InsurerLoadComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', InsurerLoadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Message);
        return;
    }

    var PrimKey = Ext.getCmp('InsurerEndorsementPosting').selectedIndex;

    var InsurerEndorsementPostingDtlList = Ext.getCmp('InsurerEndorsementPostingDtlList');
    var Total = 0;
    for (cnt = 0; cnt < responseText.InsurerEndorsementDtldatum.length; cnt++) { //LoadEnddoresement Detalis
        var Record = responseText.InsurerEndorsementDtldatum[cnt];
        InsurerEndorsementPostingDtlList.storeId += 1;
        var newSubRecord = new InsurerEndorsementPostingDtlList.recordType({
            ID: InsurerEndorsementPostingDtlList.storeId,
            SerialNo: InsurerEndorsementPostingDtlList.storeId,
            InsurerEndoresmentCode: (PrimKey == -1 ? 1 : PrimKey),
            Claim_Code: Record.Claim_Code,
            Claimref_No: Record.Claimref_No,
            CardId: Record.CardId,
            MemberName: Record.MemberName,
            ProviderName: Record.ProviderName,
            PaymentAmount: Record.PaymentAmount,
            Amount: Record.PaymentAmount,
            CompanyCode: login.CompanyCode,
            LocationCode: login.LocationCode,
            IsNew: true,
            IsDirty: true,
            IsDeleted: false,
            IsSavable: true,
            IsValid: true,
            //Total : (1 * Record.PaymentAmount),
        });
        InsurerEndorsementPostingDtlList.stopEditing();
        InsurerEndorsementPostingDtlList.store.add(newSubRecord);
        InsurerEndorsementPostingDtlList.store.totalLength = InsurerEndorsementPostingDtlList.store.getTotalCount() + 1;
        InsurerEndorsementPostingDtlList.pageBar.updateInfo();
    }

    DetailStore = Ext.getCmp('InsurerEndorsementPostingDtlList').getStore();
    DetailStore.load({
        params: {
            start: 0,
            limit: 500
        }
    });
}



//-----------------------------------------------------end endorsement Posting -----------------------------------------------------------------------------


//------------------------------------------------------------------------------Upload Claim Batch in XML --------------------------------------------------

function UploadClaimBatchInXML(form, login) {

}

function UploadClaimBatchXMLVieworDownload(form, login) {

    var ClassName = 'SBS.Business.Objects.Medical.Request.UploadClaimBatchInXML';
    var Primary = Ext.getCmp('UploadClaimBatchInXML').selectedIndex;

    var FileName = Ext.getCmp('UploadClaimBatchInXML-ImageFileName').getValue();

    if (Primary == -1) {
        Ext.MessageBox.alert(login.modulename, 'Cannot open file in new mode !');
        return;
    }

    if (FileName == '' || FileName == null) {
        Ext.MessageBox.alert(login.modulename, 'File Name should not be empty to view or download the file !');
        return;
    }

    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRGeneralRequest.aspx',
        params: {
            action: 'ViewUploadDataFile',
            Primary: Primary,
            BOPath: ClassName,
            ImageFileName: FileName
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', UploadClaimBatchXMLVieworDownloadComplete, this);
}

function UploadClaimBatchXMLVieworDownloadComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', UploadClaimBatchXMLVieworDownloadComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
    } else {
        window.open(responseText.Msg, 'Upload', 'width=700,height=450,scrollbars=yes,resizable=yes');

    }
}

function UploadClaimBatchXMLProcessHandler(form,login){

    var PrimKey = Ext.getCmp('UploadClaimBatchInXML').selectedIndex;
    if (PrimKey == -1) {
        Ext.MessageBox.alert(login.modulename, 'Please Save Before Process');
        return;
    }
    if (Ext.getCmp('UploadClaimBatchInXML-Is_Processed').getValue() == 1) {
        Ext.MessageBox.alert(login.modulename, 'This record already processed');
        return;
    }
   

    else {
        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'UploadClaimBatchXMLProcessPost',
                PrimKey: PrimKey
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', UploadClaimBatchXMLProcessPostComplete, this);
    }
}

function UploadClaimBatchXMLProcessPostComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', UploadClaimBatchXMLProcessPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.ErrorMsg);
        return;
    }
    else {

        showMask();
        Ext.Ajax.request({
            url: 'tools/HumanResources/HRPosting.aspx',
            params: {
                action: 'UploadClaimBatchXMLProcessPostProcess',
                PrimKey: Ext.getCmp('UploadClaimBatchInXML').selectedIndex
            },
            method: 'POST',
            failure: function (result, request) {
                Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
            },
            timeout: 1200000,
            scope: this
        });
        Ext.Ajax.on('requestcomplete', UploadClaimBatchXMLComplete, this);
    }

}

function UploadClaimBatchXMLComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', UploadClaimBatchXMLComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    else {
        if (Number(responseText.ProcessedCnt)==0 && Number(responseText.AcutalCnt)==0) {

            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'UploadClaimBatchXMLProcesUpdate',
                    PrimKey: Ext.getCmp('UploadClaimBatchInXML').selectedIndex
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', UploadClaimBatchXMLProcesUpdateComplete, this);
        }
        else {
            showMask();
            Ext.Ajax.request({
                url: 'tools/HumanResources/HRPosting.aspx',
                params: {
                    action: 'UploadClaimBatchXMLProcessPostProcess',
                    PrimKey: Ext.getCmp('UploadClaimBatchInXML').selectedIndex
                },
                method: 'POST',
                failure: function (result, request) {
                    Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
                },
                timeout: 1200000,
                scope: this
            });
            Ext.Ajax.on('requestcomplete', UploadClaimBatchXMLComplete, this);
        }
    }

}

function UploadClaimBatchXMLProcesUpdateComplete(conn, response) {

    hideMask();
    Ext.Ajax.un('requestcomplete', UploadClaimBatchXMLProcesUpdateComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);

    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Error);
        return;
    }
    else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

        Ext.getCmp('UploadClaimBatchInXML-Is_Processed').setValue(1);

        var UploadClaimBatchXMLPopupDetList = Ext.getCmp('UploadClaimBatchXMLPopupDetList');
        UploadClaimBatchXMLPopupDetList.store.load({
            params: {
                start: 0,
                limit: UploadClaimBatchXMLPopupDetList.pageSize
            }
        });

        //Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').un('beforeclose', Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').scope.closeWindow, Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').scope);
        //Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').on('close', Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').scope.afterCloseWind, Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').scope);
        //Ext.getCmp('ID_UPLOADCLAIMBATCHXML_editform').close();
    }

}


function CrmCustomerServiceClosedPost(form, login) {

    var PrimKey = Ext.getCmp('CrmCustomerServiceClosed').selectedIndex;

    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'CrmCustomerServiceClosedPost',
            PrimKey: PrimKey
        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });
    Ext.Ajax.on('requestcomplete', CrmCustomerServiceClosedPostComplete, this);
}

function CrmCustomerServiceClosedPostComplete(conn, response) {
    Ext.Ajax.un('requestcomplete', CrmCustomerServiceClosedPostComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.alert(login.modulename, responseText.Msg);
    } else {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CRMSERVICECLOSED_editform').close();
    }
}
function CrmCustomer(form, login) {
    var CountryCode = Ext.getCmp('CrmCustomer-CountryCode');

    var CityCode = Ext.getCmp('CrmCustomer-CityCode');
    if (CityCode) CityCode.on('beforequery', function (evt) {
        var CountryCode = Ext.getCmp('CrmCustomer-CountryCode').getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE= " + CountryCode + "";
    }, this);


    if (CountryCode) CountryCode.on('select', function (combo, record, index) {
        CityCode.clearValue();
    }, this);
}

function CrmVendor(form, login) {
    var CountryCode = Ext.getCmp('CrmVendor-CountryCode');

    var CityCode = Ext.getCmp('CrmVendor-CityCode');
    if (CityCode) CityCode.on('beforequery', function (evt) {
        var CountryCode = Ext.getCmp('CrmVendor-CountryCode').getValue();
        evt.combo.lastQuery = '1=2';
        evt.combo.store.baseParams.filter = "gp.Active=1 and gp.COUNTRYCODE= " + CountryCode + "";
    }, this);


    if (CountryCode) CountryCode.on('select', function (combo, record, index) {
        CityCode.clearValue();
    }, this);
}


function ClaimSubmissionInterfaceReProcess(form, login) {
    var PrimKey = Ext.getCmp('MEClaims').selectedIndex;
    
    showMask();
    Ext.Ajax.request({
        url: 'tools/HumanResources/HRPosting.aspx',
        params: {
            action: 'ClaimSubmissionInterfaceReProcess',
            PrimKey: PrimKey

        },
        method: 'POST',
        failure: function (result, request) {
            Ext.MessageBox.alert(login.tab.WidgetInstanceList[0].WidgetTitle, GlobalTerminologies.LBLREMOTEERROR);
        },
        timeout: 1200000,
        scope: this
    });

    Ext.Ajax.on('requestcomplete', ClaimSubmissionInterfaceReProcessComplete, this);
}

function ClaimSubmissionInterfaceReProcessComplete(conn, response) {
    hideMask();
    Ext.Ajax.un('requestcomplete', ClaimSubmissionInterfaceReProcessComplete, this);
    var responseText = Ext.util.JSON.decode(response.responseText);
    if (!responseText.success) {
        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });

    } else {

        Ext.MessageBox.show({
            title: login.modulename,
            msg: responseText.Msg,
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.INFO
        });
        Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').un('beforeclose', Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').scope.closeWindow, Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').scope);
        Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').on('close', Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').scope.afterCloseWind, Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').scope);
        Ext.getCmp('ID_CLAIMSUBMISSIONINTERFACE_editform').close();
    }
}