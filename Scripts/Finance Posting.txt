PROMPT CREATE OR REPLACE PACKAGE im_finance_posting
CREATE OR REPLACE PACKAGE im_finance_posting as
function  IM_TREATY_SESSION_DOCUMENT_FN (APRIMKEY NUMBER) return VARCHAR2;
--function  IM_FAC_SESSION_DOCUMENT_FN  (AREFNO VARCHAR2)  return VARCHAR2;
function  IM_RIMEDFINANCE_PAYMENT_FN (MED_PRIMARY_KEY NUMBER) return VARCHAR2;
function  IM_MEDFINANCE_PAYMENT_FN (MED_PRIMARY_KEY NUMBER) return VARCHAR2;
function  IM_HNM_PROVIDER_PAYMENT_FN (HNM_PRIMARY_KEY NUMBER,APROVIDERCODE NUMBER) return VARCHAR2;
function  IM_DATAWAREHOUSE_FN (DWE_PRIMARY_KEY NUMBER) return VARCHAR2;

end;
/

PROMPT CREATE OR REPLACE PACKAGE BODY im_finance_posting
CREATE OR REPLACE PACKAGE BODY im_finance_posting AS

function  IM_TREATY_SESSION_DOCUMENT_FN (APRIMKEY NUMBER) return VARCHAR2 AS
SDATE DATE;
EDATE DATE;
L_TOTALPREMIUM NUMBER(19,2);
L_INSURERCODE NUMBER;
L_DOCDTLCODE NUMBER;L_DOCSUBDTLCODE NUMBER;
L_DOCDTLSNO NUMBER;L_DOCSUBDTLSNO NUMBER;
BEGIN

 DELETE FROM IM_TREATY_POSTING_HDR;
 COMMIT;
 DELETE  FROM IM_TREATY_SESSION_DTL WHERE RIDOCUMENTCODE=APRIMKEY;
 COMMIT;
 --SELECT  MIN(INSURERCODE) INTO L_INSURERCODE FROM IM_RI_DOCUMENT_HDR WHERE RIDOCUMENTCODE=APRIMKEY;

 SELECT FROMDATE,TODATE INTO SDATE,EDATE FROM IM_TREATY_MONTH WHERE MONTHHDRCODE IN(
 SELECT MONTHCODE FROM IM_TREATY_SESSION_HDR WHERE RIDOCUMENTCODE=APRIMKEY);
 BEGIN
   SP_TREATY_SESSION_CREATION(0,SDATE,EDATE);
 END;

 FOR HDR IN(SELECT * FROM IM_TREATY_SESSION_HDR WHERE RIDOCUMENTCODE=APRIMKEY) LOOP

    IF L_INSURERCODE IS NULL OR L_INSURERCODE = 0 THEN
      FOR FP IN(SELECT * FROM IM_TREATY_POSTING_HDR WHERE REFDATE BETWEEN SDATE AND EDATE AND SOURCE = 1) LOOP



        select nvl(max(RIDOCUMENTDTLCODE),100000000000000000)+1 INTO L_DOCDTLCODE from IM_TREATY_SESSION_DTL;
        select nvl(max(SERIALNO),0)+1 INTO L_DOCDTLSNO from IM_TREATY_SESSION_DTL;

        INSERT INTO IM_TREATY_SESSION_DTL
        (RIDOCUMENTDTLCODE,RIDOCUMENTCODE,DOCUMENTNO,DOCUMENTDATE,PINCODE,POLICYCODE,PREMIUMAMOUNT,CLAIMAMOUNT,
        SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
        (L_DOCDTLCODE,APRIMKEY,FP.REF_NO,FP.REFDATE,FP.BINCODE,FP.POLICYCODE,NVL2(FP.REF_CODE,FP.AMOUNT,0),NVL2(FP.CLAIMREFCODE,FP.AMOUNT,0),
        L_DOCDTLSNO,HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);


        FOR TDTL IN(SELECT * FROM IM_TREATY_POSTING_DTL  WHERE RI_JVCODE =  FP.RI_JVCODE) LOOP

          select nvl(max(RIDOCUMENTSUBDTLCODE),100000000000000000)+1 INTO L_DOCSUBDTLCODE from IM_TREATY_SESSION_SUB_DTL;
          select nvl(max(SERIALNO),0)+1 INTO L_DOCSUBDTLSNO from IM_TREATY_SESSION_SUB_DTL;

          INSERT INTO IM_TREATY_SESSION_SUB_DTL
          (RIDOCUMENTDTLCODE,RIDOCUMENTSUBDTLCODE,TREATYCODE,PREMIUMTYPE,
          SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
          (L_DOCDTLCODE,L_DOCSUBDTLCODE,TDTL.TREATYCODE,TDTL.PREMIUMTYPE,L_DOCSUBDTLSNO,HDR.LOCATIONCODE,
          HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);

          FOR FPS IN(SELECT  Max(PERCENTAGE) PERCENTAGE,DTL.INSURERCODE,Sum(ADDPREMIUM) ADDPREMIUM,Sum(DELETEPREMIUM) DELETEPREMIUM,
          Sum(CLAIMAMOUNT) CLAIMAMOUNT FROM IM_TREATY_POSTING_SUB_DTL DTL
          WHERE DTL.RI_DTLCODE = TDTL.RI_DTLCODE AND NVL(DTL.INSURERCODE,0) <> 0 GROUP BY DTL.INSURERCODE) LOOP
            L_TOTALPREMIUM := NVL(FPS.ADDPREMIUM,0) - NVL(FPS.DELETEPREMIUM,0);
            INSERT INTO IM_TREATY_SESSION_PRE_DTL
            (RIDOCUMENTPREMIUMCODE,RIDOCUMENTSUBDTLCODE,REINSURERCODE,ADDPREMIUM,REFUNDPREMIUM,TOTALPREMIUM,CLAIMAMOUNT,
            SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY,PERCENTAGE,PINCODE,
            TREATYCODE,POLICYCODE,DOCUMENTNO,DOCUMENTDATE)VALUES
            ((select nvl(max(RIDOCUMENTPREMIUMCODE),100000000000000000)+1 from IM_TREATY_SESSION_PRE_DTL),L_DOCSUBDTLCODE,FPS.INSURERCODE,FPS.ADDPREMIUM,
            FPS.DELETEPREMIUM,L_TOTALPREMIUM,FPS.CLAIMAMOUNT,(select nvl(max(SERIALNO),0)+1 from IM_TREATY_SESSION_PRE_DTL),
            HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY,FPS.PERCENTAGE,
            (SELECT INSPINCODE FROM IM_INSURER_BILLING_DETAIL WHERE INSCODE = FPS.INSURERCODE),
            TDTL.TREATYCODE,FP.POLICYCODE,FP.REF_NO,FP.REFDATE);
          END LOOP;
        END LOOP;
      END LOOP;
    ELSE
      FOR FP IN(SELECT * FROM IM_TREATY_POSTING_HDR WHERE REFDATE BETWEEN SDATE AND EDATE AND RI_JVCODE IN
      (SELECT RI_JVCODE FROM IM_TREATY_POSTING_DTL WHERE INSURERCODE = L_INSURERCODE)) LOOP

        select nvl(max(RIDOCUMENTDTLCODE),100000000000000000)+1 INTO L_DOCDTLCODE from IM_TREATY_SESSION_DTL;
        select nvl(max(SERIALNO),0)+1 INTO L_DOCDTLSNO from IM_TREATY_SESSION_DTL;

        INSERT INTO IM_TREATY_SESSION_DTL
        (RIDOCUMENTDTLCODE,RIDOCUMENTCODE,DOCUMENTNO,DOCUMENTDATE,PINCODE,POLICYCODE,PREMIUMAMOUNT,CLAIMAMOUNT,
        SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
        (L_DOCDTLCODE,APRIMKEY,FP.REF_NO,FP.REFDATE,FP.BINCODE,FP.POLICYCODE,NVL2(FP.REF_CODE,FP.AMOUNT,0),NVL2(FP.CLAIMREFCODE,FP.AMOUNT,0),
        L_DOCDTLSNO,HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);


        FOR TDTL IN(SELECT * FROM IM_TREATY_POSTING_DTL  WHERE RI_JVCODE =  FP.RI_JVCODE) LOOP

          select nvl(max(RIDOCUMENTSUBDTLCODE),100000000000000000)+1 INTO L_DOCSUBDTLCODE from IM_TREATY_SESSION_SUB_DTL;
          select nvl(max(SERIALNO),0)+1 INTO L_DOCSUBDTLSNO from IM_TREATY_SESSION_SUB_DTL;

          INSERT INTO IM_TREATY_SESSION_SUB_DTL
          (RIDOCUMENTDTLCODE,RIDOCUMENTSUBDTLCODE,TREATYCODE,PREMIUMTYPE,
          SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
          (L_DOCDTLCODE,L_DOCSUBDTLCODE,TDTL.TREATYCODE,TDTL.PREMIUMTYPE,L_DOCSUBDTLSNO,HDR.LOCATIONCODE,
          HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);

          FOR FPS IN(SELECT  PERCENTAGE,DTL.INSURERCODE,ADDPREMIUM,DELETEPREMIUM,CLAIMAMOUNT FROM IM_TREATY_POSTING_SUB_DTL DTL
          WHERE DTL.RI_DTLCODE = TDTL.RI_DTLCODE AND NVL(DTL.INSURERCODE,0) <> 0) LOOP
            L_TOTALPREMIUM := NVL(FPS.ADDPREMIUM,0) - NVL(FPS.DELETEPREMIUM,0);
            INSERT INTO IM_TREATY_SESSION_PRE_DTL
            (RIDOCUMENTPREMIUMCODE,RIDOCUMENTSUBDTLCODE,REINSURERCODE,ADDPREMIUM,REFUNDPREMIUM,TOTALPREMIUM,CLAIMAMOUNT,
            SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY,PERCENTAGE,PINCODE,
            TREATYCODE,POLICYCODE)VALUES
            ((select nvl(max(RIDOCUMENTPREMIUMCODE),100000000000000000)+1 from IM_TREATY_SESSION_PRE_DTL),L_DOCSUBDTLCODE,FPS.INSURERCODE,FPS.ADDPREMIUM,
            FPS.DELETEPREMIUM,L_TOTALPREMIUM,FPS.CLAIMAMOUNT,(select nvl(max(SERIALNO),0)+1 from IM_TREATY_SESSION_PRE_DTL),
            HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY,FPS.PERCENTAGE,0,
            TDTL.TREATYCODE,FP.POLICYCODE);
          END LOOP;
        END LOOP;
      END LOOP;
    END IF;

 END LOOP;

COMMIT;
RETURN 'OK';
END;
/*
function  IM_FAC_SESSION_DOCUMENT_FN  (AREFNO VARCHAR2) return VARCHAR2 AS
SDATE DATE;
EDATE DATE;
APRIMKEY NUMBER;
ASERIALNO NUMBER;
L_TOTALPREMIUM NUMBER(19,2);
L_INSURERCODE NUMBER;
L_DOCDTLCODE NUMBER;
L_DOCDTLSNO NUMBER;
L_JVHDRSNO NUMBER;
L_JVHDRCODE NUMBER;
L_REFNO VARCHAR2(1000);
L_HDRREFNO   VARCHAR2(1000);
L_INSNAME VARCHAR2(1000);
L_INSPINCODE VARCHAR2(1000);
L_TOTALDEBIT NUMBER;
L_TOTALCOMISSION NUMBER;

BEGIN

  DELETE FROM IM_TREATY_POSTING_HDR;
  COMMIT;
  L_TOTALDEBIT := 0; L_TOTALCOMISSION := 0;
  select nvl(max(RIDOCUMENTCODE),100000000000000000)+1 INTO APRIMKEY from IM_FAC_SESSION_HDR;
  select nvl(max(SERIALNO),0)+1 INTO ASERIALNO from IM_FAC_SESSION_HDR;

        BEGIN
           L_REFNO := SF_GETJVREFNO_FNC('03'||'NGIRIJV');
           L_REFNO := '03' || SUBSTR(EXTRACT(YEAR FROM SYSDATE),3) || '1' || LPAD(L_REFNO,5,'0');
        END;

  INSERT INTO IM_FAC_SESSION_HDR(RIDOCUMENTCODE,SERIALNO,SOURCETYPE,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY,REFDATE,REFNO)
  VALUES(APRIMKEY,ASERIALNO,2,1,1,SYSDATE,SYSDATE,100000000000000002,100000000000000002,SYSDATE,L_REFNO);
  COMMIT;
 --SELECT  MIN(INSURERCODE) INTO L_INSURERCODE FROM IM_RI_DOCUMENT_HDR WHERE RIDOCUMENTCODE=APRIMKEY;

 BEGIN
   SP_FAC_SESSION_CREATION(0,SDATE,EDATE,AREFNO);
 END;

 FOR HDR IN(SELECT * FROM IM_FAC_SESSION_HDR WHERE RIDOCUMENTCODE=APRIMKEY) LOOP

    IF L_INSURERCODE IS NULL OR L_INSURERCODE = 0 THEN
      FOR FP IN(SELECT * FROM IM_FAC_POSTING_HDR WHERE REF_NO = AREFNO) LOOP



        select nvl(max(RIDOCUMENTDTLCODE),100000000000000000)+1 INTO L_DOCDTLCODE from IM_FAC_SESSION_DTL;
        select nvl(max(SERIALNO),0)+1 INTO L_DOCDTLSNO from IM_FAC_SESSION_DTL;


        INSERT INTO IM_FAC_SESSION_DTL
        (RIDOCUMENTDTLCODE,RIDOCUMENTCODE,DOCUMENTNO,DOCUMENTDATE,PINCODE,POLICYCODE,PREMIUMAMOUNT,CLAIMAMOUNT,
        SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
        (L_DOCDTLCODE,APRIMKEY,FP.REF_NO,FP.REFDATE,FP.BINCODE,FP.POLICYCODE,NVL2(FP.REF_CODE,FP.AMOUNT,0),NVL2(FP.CLAIMREFCODE,FP.AMOUNT,0),
        L_DOCDTLSNO,HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);


        FOR FPS IN(SELECT Max(COMISSION)COMISSION,MAX(PERCENTAGE) PERCENTAGE,DTL.INSURERCODE,SUM(NVL(ADDPREMIUM,0)) ADDPREMIUM,SUM(NVL(DELETEPREMIUM,0)) REFUNDPREMIUM,
        SUM(NVL(CLAIMAMOUNT,0)) CLAIMAMOUNT FROM IM_FAC_POSTING_HDR HDR,IM_FAC_POSTING_DTL DTL WHERE HDR.RI_JVCODE = HDR.RI_JVCODE
        AND HDR.SOURCE = 2 AND   HDR.REF_NO = FP.REF_NO AND NVL(DTL.INSURERCODE,0) <> 0 GROUP BY DTL.INSURERCODE) LOOP
          L_TOTALPREMIUM := NVL(FPS.ADDPREMIUM,0) - NVL(FPS.REFUNDPREMIUM,0);
          L_TOTALDEBIT := L_TOTALDEBIT + L_TOTALPREMIUM;
          INSERT INTO IM_FAC_SESSION_SUB_DTL
          (RIDOCUMENTSUBDTLCODE,RIDOCUMENTDTLCODE,REINSURERCODE,ADDPREMIUM,REFUNDPREMIUM,TOTALPREMIUM,CLAIMAMOUNT,
          SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY,PERCENTAGE)VALUES
          ((select nvl(max(RIDOCUMENTSUBDTLCODE),100000000000000000)+1 from IM_FAC_SESSION_SUB_DTL),L_DOCDTLCODE,FPS.INSURERCODE,FPS.ADDPREMIUM,
          FPS.REFUNDPREMIUM,L_TOTALPREMIUM,FPS.CLAIMAMOUNT,(select nvl(max(SERIALNO),0)+1 from IM_FAC_SESSION_SUB_DTL),
          HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY,FPS.PERCENTAGE);

        END LOOP;
      END LOOP;


    ELSE
      FOR FP IN(SELECT * FROM IM_FAC_POSTING_HDR WHERE REFDATE BETWEEN SDATE AND EDATE AND RI_JVCODE IN
      (SELECT RI_JVCODE FROM IM_FAC_POSTING_DTL WHERE INSURERCODE = L_INSURERCODE)) LOOP



        select nvl(max(RIDOCUMENTDTLCODE),100000000000000000)+1 INTO L_DOCDTLCODE from IM_FAC_SESSION_DTL;
        select nvl(max(SERIALNO),0)+1 INTO L_DOCDTLSNO from IM_FAC_SESSION_DTL;

        INSERT INTO IM_FAC_SESSION_DTL
        (RIDOCUMENTDTLCODE,RIDOCUMENTCODE,DOCUMENTNO,DOCUMENTDATE,PINCODE,POLICYCODE,PREMIUMAMOUNT,CLAIMAMOUNT,
        SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
        (L_DOCDTLCODE,APRIMKEY,FP.REF_NO,FP.REFDATE,FP.BINCODE,FP.POLICYCODE,NVL2(FP.REF_CODE,FP.AMOUNT,0),NVL2(FP.CLAIMREFCODE,FP.AMOUNT,0),
        L_DOCDTLSNO,HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);

        FOR FPS IN(SELECT DTL.INSURERCODE,SUM(NVL(ADDPREMIUM,0)) ADDPREMIUM,SUM(NVL(DELETEPREMIUM,0)) REFUNDPREMIUM,
        SUM(NVL(CLAIMAMOUNT,0)) CLAIMAMOUNT FROM IM_FAC_POSTING_DTL DTL,IM_FAC_POSTING_HDR HDR WHERE HDR.RI_JVCODE = HDR.RI_JVCODE
        AND HDR.REFDATE BETWEEN SDATE AND EDATE AND NVL(DTL.INSURERCODE,0) = L_INSURERCODE GROUP BY DTL.INSURERCODE) LOOP
          L_TOTALPREMIUM := NVL(FPS.ADDPREMIUM,0) - NVL(FPS.REFUNDPREMIUM,0);
          INSERT INTO IM_FAC_SESSION_SUB_DTL
          (RIDOCUMENTSUBDTLCODE,RIDOCUMENTDTLCODE,REINSURERCODE,ADDPREMIUM,REFUNDPREMIUM,TOTALPREMIUM,CLAIMAMOUNT,
          SERIALNO,LOCATIONCODE,COMPANYCODE,LASTMODIFIEDON,CREATEDON,LASTMODIFIEDBY,CREATEDBY)VALUES
          ((select nvl(max(RIDOCUMENTSUBDTLCODE),100000000000000000)+1 from IM_FAC_SESSION_SUB_DTL),L_DOCDTLCODE,FPS.INSURERCODE,FPS.ADDPREMIUM,
          FPS.REFUNDPREMIUM,L_TOTALPREMIUM,FPS.CLAIMAMOUNT,(select nvl(max(SERIALNO),0)+1 from IM_FAC_SESSION_SUB_DTL),
          HDR.LOCATIONCODE,HDR.COMPANYCODE,HDR.LASTMODIFIEDON,HDR.CREATEDON,HDR.LASTMODIFIEDBY,HDR.CREATEDBY);
        END LOOP;
      END LOOP;
    END IF;

 END LOOP;

 COMMIT;
 RETURN 'OK';
END;*/
function IM_RIMEDFINANCE_PAYMENT_FN (MED_PRIMARY_KEY NUMBER) return VARCHAR2 AS
--L_UPDATE_DATE DATE;
AREFDATE DATE;
ATILLTODATE DATE;
AIBNRMONTH varchar2(10);
BEGIN

     delete  from IM_RI_MEDFINANCEPOSTINGDTL where RIMEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;
     select REFDATE,FETCHTILLDATE into AREFDATE,ATILLTODATE from IM_RI_MEDFINANCEPOSTING where RIMEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;

     update IM_RI_MEDFINANCEPOSTING set GENERATEFILENAME=('meddet'||to_char(AREFDATE,'RRRR')||lpad(to_char(AREFDATE,'MM'),2,'0')||lpad(to_char(AREFDATE,'DD'),2,'0')||'-'||(select count(*)+1 from IM_RI_MEDFINANCEPOSTING where RIMEDFINANCEPOSTINGCODE<>MED_PRIMARY_KEY and to_date(REFDATE,'dd/MM/RRRR')=to_date(AREFDATE,'dd/MM/RRRR'))) where RIMEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;

          FOR FP IN (
   SELECT
          'med-'||REPLACE(to_char(AREFDATE,'RRRR/MM/DD'), '/', null )||'-'||(select count(*)+1 from IM_RI_MEDFINANCEPOSTING where RIMEDFINANCEPOSTINGCODE<>MED_PRIMARY_KEY and to_date(REFDATE,'dd/MM/RRRR')=to_date(AREFDATE,'dd/MM/RRRR')) as FileName,
          --decode(JV.MEMOTYPE,0,'02',1,'01','04')||to_char(JV.REFDATE,'YY')||'1'||lpad(substr(JV.REF_NO,0,instr(JV.REF_NO,'/')-1),5,'0') DocumentNo,
          JV.REF_NO DocumentNo,
          JV.REFDATE REFDATE ,
          --nvl(decode(JV.MEMBERTYPE,0,AgeBil.PINCODE,1,BroBil.PROVIDERPINCODE,2,GroBil.PINCODE,3,MemBil.PINCODE,6,InsBil.INSPINCODE,JV.BINCODE),'1234'||rownum) as PinCode,
          (case
            when  nvl(ENPOS.TPATYPE,0)<>0 and  ENPOS.TPATYPE = 2 AND ENPOS.PROVIDERCODE IS NULL then
                PAYSETT.OUTNETWORKACCOUNTNO
            when  nvl(ENPOS.TPATYPE,0)<>0 and  ENPOS.TPATYPE = 1 AND ENPOS.PROVIDERCODE IS NULL then
                PAYSETT.INNETWORKACCOUNTNO
            else
                nvl(JV.BINCODE,nvl(JV.ACCOUNTNO,'1234'||rownum))
          end) as PinCode,
          --nvl(JV.BINCODE,'1234'||rownum) as PinCode,
          (JV.REF_NO ||' '||
          (
          case
          when JV.MEMOTYPE = 1 and JV.JVPREMIUMTYPE=0 then--0 - credit,1 - Debit\
                    'BP'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE=0 then--0 - credit,1 - Debit\
                    'RP'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE=1 then--0 - credit,1 - Debit\
                    'AC'
          when JV.MEMOTYPE = 1 and JV.JVPREMIUMTYPE=1 then--0 - credit,1 - Debit\
                    'ACR'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE>1 then--0 - credit,1 - Debit\
                    'CLP'
          when JV.MEMOTYPE=1 and  JV.JVPREMIUMTYPE>1 then--0 - credit,1 - Debit\
                    'REC'
          else
                     'BP'
          end
          )||' BR-'||
--          decode(JV.JVPREMIUMTYPE,0,'BP',1,'AC',2,'CLP',3,'REC')||' BR-'||
           --decode(JV.MEMBERTYPE,0,AgeBil.BANKBRANCH,1,BroBil.BANKBRANCH,2,GroBil.BANKBRANCH,3,MemBil.BANKBRANCH,6,InsBil.BANKBRANCH ) ||' '||
           (case when JV.REVERSEJVCODE is not null then org1.short_name
           else org.SHORT_NAME end)||' '||
           nvl(Gro.Group_Name,(Mem.First_Name||' '||Mem.Last_Name||' '||(nvl(Mem.CARDNO, Mem.CARDID))))||' '||
           SUBSTR(nvl(Pol.policyid,IndPol.policyid),0,INSTR(nvl(Pol.policyid,IndPol.policyid),'-')-1)||' '||lpad(SUBSTR(nvl(Pol.policyid,IndPol.policyid),INSTR(nvl(Pol.policyid,IndPol.policyid),'-')+1),2,'0')||''
           --||nvl(Pol.FINAL_PREMIUM,IndPol.FINAL_PREMIUM)
           ) as  Narration,
          --JV.Amount Amount1,

           decode(JV.MEMOTYPE,0,((case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end) * -1),(case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end)) Amount1,
          0 as Amount2,
             (
              case
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 1 and nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=0 then--0 - credit,1 - Debit\
                        '70180716'  --- Premium Receivables
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=0 then--0 - credit,1 - Debit\
                        '70180716' -- Premium Payable
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=1 then--0 - credit,1 - Debit\
                        '60570710'  -- commision payable
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 1 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=1 then--0 - credit,1 - Debit\
                        '60570710' -- commision recivable
              /*
              when JV.MEMOTYPE = 2  then--0 - credit,1 - Debit\
                        '60170719'     --- Claims payable
              when JV.JVPREMIUMTYPE=3 then--0 - credit,1 - Debit\
                        '60270717'       --- Medical Claims Recoveries
              */
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)>1 then--0 - credit,1 - Debit\
                    '60170719'
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE)=1 and   nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)>1 then--0 - credit,1 - Debit\
                    '60270717'
              else
                          '70180716'  --- Premium Receivables
              end
              )
            GL1,
            0 as GL2,
            JV.JVPOSTINGCODE

      FROM IM_NGI_JVPOSTING JV
      left join IM_NGI_JVPOSTING REVJV on REVJV.JVPOSTINGCODE = JV.REVERSEJVCODE and JV.memotype<>REVJV.memotype
      left join IM_ENDORSEMENTPOSTING ENPOS on ENPOS.ENDORESMENTCODE =JV.CLAIMREFCODE
      left join IM_CLAIMPAYMENTSETTING PAYSETT on PAYSETT.ADMINISTRATEDBY = ENPOS.ADMINISTEREDBY and nvl(ENPOS.TPATYPE,0)<>0
      left  join  IM_Policy Pol on Pol.PolicyCode=JV.PolicyCode and JV.POLICYTYPE=0
      left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=JV.PolicyCode and JV.POLICYTYPE=1
        left JOIN IM_GROUPS Gro ON Gro.GROUP_CODE = nvl(Pol.GROUPCODE,JV.GROUPCODE)
        left join IM_GROUP_BILLING_DETAIL GroBil on GroBil.GROUPCODE=nvl(Pol.GROUPCODE,JV.GROUPCODE) and GroBil.ENDDATE is null
         left join Im_agents agnt on agnt.AgentCode=nvl(JV.AgentCode,nvl(Pol.AgentCode,IndPol.AgentCode))
         left join IM_AGENTS_BILLING_DETAIL AgeBil on AgeBil.AgentCode=JV.AgentCode and AgeBil.ENDDATE is null
        left join Im_Brokers Bro on Bro.BrokerCode=nvl(JV.BrokerCode,nvl(Pol.BrokerCode,IndPol.BrokerCode))
        left join IM_BROKER_BILLING_DETAIL BroBil on BroBil.BROKERCODE=JV.BrokerCode and BroBil.ENDDATE is null
        left join Im_INsurer Ins on Ins.INSCODE=JV.InsurerCode
        left join IM_INSURER_BILLING_DETAIL InsBil on InsBil.INSCODE=JV.InsurerCode and InsBil.ENDDATE is null
        left join Im_Members Mem on Mem.Member_Code=IndPol.MemberCode
        left join IM_MEMBER_BILLING_DETAIL MemBil on MemBil.Member_Code=JV.BrokerCode and MemBil.ENDDATE is null
        left join HR_ORGANIZATIONS_D org1 on org1.short_name = JV.BranchName
        left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE =
        (nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))
        /*
        decode(decode(JV.sourcecode,1,JV.JVPREMIUMTYPE,2,Jv.MEMOTYPE,Jv.MEMOTYPE),decode(JV.sourcecode,1,0,2,1,1),(nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))
                                    ,decode(JV.sourcecode,1,1,2,0,0),decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE))))))
        */
        --decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))--decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,2,nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),null) --  --nvl(nvl(Bro.BranchCode,agnt.BranchCode),nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE)) -- org.SHORT_NAME
        where NVL(JV.MEMBERTYPE,0) = 8 AND JV.MEDPOSTINGDONE=0 AND JV.REFDATE<=ATILLTODATE and round(nvl(decode(JV.MEMOTYPE,0,((case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end) * -1),(case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end)),0))<>0

) LOOP
         INSERT INTO IM_RI_MEDFINANCEPOSTINGDTL D
         (D.RIMEDDETAILCODE, D.RIMEDFINANCEPOSTINGCODE, D.FILENAME,
         D.DOCUMENTNO, D.DETAILDATE, D.PIN_NO, D.NARRATION,
         D.AMOUNT1, D.AMOUNT2, D.GL1, D.GL2,
         D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
         D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.JVCODE)
         VALUES
        ((select nvl(max(RIMEDDETAILCODE),100000000000000000)+1 from IM_RI_MEDFINANCEPOSTINGDTL), MED_PRIMARY_KEY, FP.FILENAME,
         FP.DOCUMENTNO,FP.REFDATE,FP.PINCODE,FP.NARRATION,
         FP.AMOUNT1,FP.AMOUNT2,FP.GL1,FP.GL2,
         SYSDATE,  '100000000000000002', SYSDATE,
          '100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_RI_MEDFINANCEPOSTINGDTL),FP.JVPOSTINGCODE);

  end loop;

COMMIT;
RETURN 'OK';

END;

function IM_MEDFINANCE_PAYMENT_FN (MED_PRIMARY_KEY NUMBER) return VARCHAR2 AS
--L_UPDATE_DATE DATE;
AREFDATE DATE;
ATILLTODATE DATE;
AIBNRMONTH varchar2(10);
BEGIN
    --SELECT FETCHTILLDATE INTO ATILLTODATE FROM IM_MEDFINANCEPOSTING WHERE MEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;

     delete  from IM_MEDFINANCEPOSTINGDTL where MEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;
     select REFDATE,FETCHTILLDATE into AREFDATE,ATILLTODATE from IM_MEDFINANCEPOSTING where MEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;

     update IM_MEDFINANCEPOSTING set GENERATEFILENAME=('meddet'||to_char(AREFDATE,'RRRR')||lpad(to_char(AREFDATE,'MM'),2,'0')||lpad(to_char(AREFDATE,'DD'),2,'0')||'-'||(select count(*)+1 from IM_MEDFINANCEPOSTING where MEDFINANCEPOSTINGCODE<>MED_PRIMARY_KEY and to_date(REFDATE,'dd/MM/RRRR')=to_date(AREFDATE,'dd/MM/RRRR'))) where MEDFINANCEPOSTINGCODE=MED_PRIMARY_KEY;

          FOR FP IN (
   SELECT
          'med-'||REPLACE(to_char(AREFDATE,'RRRR/MM/DD'), '/', null )||'-'||(select count(*)+1 from IM_MEDFINANCEPOSTING where MEDFINANCEPOSTINGCODE<>MED_PRIMARY_KEY and to_date(REFDATE,'dd/MM/RRRR')=to_date(AREFDATE,'dd/MM/RRRR')) as FileName,
          --decode(JV.MEMOTYPE,0,'02',1,'01','04')||to_char(JV.REFDATE,'YY')||'1'||lpad(substr(JV.REF_NO,0,instr(JV.REF_NO,'/')-1),5,'0') DocumentNo,
          JV.REF_NO DocumentNo,
          JV.REFDATE REFDATE ,
          --nvl(decode(JV.MEMBERTYPE,0,AgeBil.PINCODE,1,BroBil.PROVIDERPINCODE,2,GroBil.PINCODE,3,MemBil.PINCODE,6,InsBil.INSPINCODE,JV.BINCODE),'1234'||rownum) as PinCode,
          /*(case
            when  nvl(ENPOS.TPATYPE,0)<>0 and  ENPOS.TPATYPE = 2 AND ENPOS.PROVIDERCODE IS NULL then
                 NULL
            when  nvl(ENPOS.TPATYPE,0)<>0 and  ENPOS.TPATYPE = 1 AND ENPOS.PROVIDERCODE IS NULL then
                NULL
            else
                nvl(JV.BINCODE,nvl(JV.ACCOUNTNO,'1234'||rownum))
          end) as PinCode,  */
          nvl(JV.BINCODE,nvl(JV.ACCOUNTNO,'1234'||rownum)) PinCode,
          --nvl(JV.BINCODE,'1234'||rownum) as PinCode,
          (JV.REF_NO ||' '||
          (
          case
          when JV.MEMOTYPE = 1 and JV.JVPREMIUMTYPE=0 then--0 - credit,1 - Debit\
                    'BP'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE=0 then--0 - credit,1 - Debit\
                    'RP'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE=1 then--0 - credit,1 - Debit\
                    'AC'
          when JV.MEMOTYPE = 1 and JV.JVPREMIUMTYPE=1 then--0 - credit,1 - Debit\
                    'ACR'
          when JV.MEMOTYPE = 0 and JV.JVPREMIUMTYPE>1 then--0 - credit,1 - Debit\
                    'CLP'
          when JV.MEMOTYPE=1 and  JV.JVPREMIUMTYPE>1 then--0 - credit,1 - Debit\
                    'REC'
          else
                     'BP'
          end
          )||' BR-'||
--          decode(JV.JVPREMIUMTYPE,0,'BP',1,'AC',2,'CLP',3,'REC')||' BR-'||
           --decode(JV.MEMBERTYPE,0,AgeBil.BANKBRANCH,1,BroBil.BANKBRANCH,2,GroBil.BANKBRANCH,3,MemBil.BANKBRANCH,6,InsBil.BANKBRANCH ) ||' '||
           (case when JV.REVERSEJVCODE is not null then org1.short_name
           else org.SHORT_NAME end)||' '||
           SUBSTR(nvl(Gro.Group_Name,(Mem.First_Name||' '||Mem.Last_Name||' '||(nvl(Mem.CARDNO, Mem.CARDID))))||' '||
           SUBSTR(nvl(Pol.policyid,IndPol.policyid),0,INSTR(nvl(Pol.policyid,IndPol.policyid),'-')-1)||' '||lpad(SUBSTR(nvl(Pol.policyid,IndPol.policyid),INSTR(nvl(Pol.policyid,IndPol.policyid),'-')+1),2,'0')||'',0,35)
           --||nvl(Pol.FINAL_PREMIUM,IndPol.FINAL_PREMIUM)
           ) as  Narration,
          --JV.Amount Amount1,

           decode(JV.MEMOTYPE,0,((case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end) * -1),(case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end)) Amount1,
          0 as Amount2,
             (
              case
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 1 and nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=0 then--0 - credit,1 - Debit\
                        '70180716'  --- Premium Receivables
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=0 then--0 - credit,1 - Debit\
                        '70180716' -- Premium Payable
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=1 then--0 - credit,1 - Debit\
                        '60570710'  -- commision payable
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 1 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)=1 then--0 - credit,1 - Debit\
                        '60570710' -- commision recivable
              /*
              when JV.MEMOTYPE = 2  then--0 - credit,1 - Debit\
                        '60170719'     --- Claims payable
              when JV.JVPREMIUMTYPE=3 then--0 - credit,1 - Debit\
                        '60270717'       --- Medical Claims Recoveries
              */
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE) = 0 and  nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)>1 then--0 - credit,1 - Debit\
                    '60170719'
              when nvl(REVJV.MEMOTYPE , JV.MEMOTYPE)=1 and   nvl(REVJV.JVPREMIUMTYPE, JV.JVPREMIUMTYPE)>1 then--0 - credit,1 - Debit\
                    '60270717'
              else
                          '70180716'  --- Premium Receivables
              end
              )
            GL1,
            0 as GL2,
            JV.JVPOSTINGCODE

      FROM IM_NGI_JVPOSTING JV
      left join IM_NGI_JVPOSTING REVJV on REVJV.JVPOSTINGCODE = JV.REVERSEJVCODE and JV.memotype<>REVJV.memotype
      left join IM_ENDORSEMENTPOSTING ENPOS on ENPOS.ENDORESMENTCODE =JV.CLAIMREFCODE
      left join IM_CLAIMPAYMENTSETTING PAYSETT on PAYSETT.ADMINISTRATEDBY = ENPOS.ADMINISTEREDBY and nvl(ENPOS.TPATYPE,0)<>0
      left  join  IM_Policy Pol on Pol.PolicyCode=JV.PolicyCode and JV.POLICYTYPE=0
      left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=JV.PolicyCode and JV.POLICYTYPE=1
        left JOIN IM_GROUPS Gro ON Gro.GROUP_CODE = nvl(Pol.GROUPCODE,JV.GROUPCODE)
        left join IM_GROUP_BILLING_DETAIL GroBil on GroBil.GROUPCODE=nvl(Pol.GROUPCODE,JV.GROUPCODE) and GroBil.ENDDATE is null
         left join Im_agents agnt on agnt.AgentCode=nvl(JV.AgentCode,nvl(Pol.AgentCode,IndPol.AgentCode))
         left join IM_AGENTS_BILLING_DETAIL AgeBil on AgeBil.AgentCode=JV.AgentCode and AgeBil.ENDDATE is null
        left join Im_Brokers Bro on Bro.BrokerCode=nvl(JV.BrokerCode,nvl(Pol.BrokerCode,IndPol.BrokerCode))
        left join IM_BROKER_BILLING_DETAIL BroBil on BroBil.BROKERCODE=JV.BrokerCode and BroBil.ENDDATE is null
        left join Im_INsurer Ins on Ins.INSCODE=JV.InsurerCode
        left join IM_INSURER_BILLING_DETAIL InsBil on InsBil.INSCODE=JV.InsurerCode and InsBil.ENDDATE is null
        left join Im_Members Mem on Mem.Member_Code=IndPol.MemberCode
        left join IM_MEMBER_BILLING_DETAIL MemBil on MemBil.Member_Code=JV.BrokerCode and MemBil.ENDDATE is null
        left join HR_ORGANIZATIONS_D org1 on org1.short_name = JV.BranchName
        left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE =
        (nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))
        /*
        decode(decode(JV.sourcecode,1,JV.JVPREMIUMTYPE,2,Jv.MEMOTYPE,Jv.MEMOTYPE),decode(JV.sourcecode,1,0,2,1,1),(nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))
                                    ,decode(JV.sourcecode,1,1,2,0,0),decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE))))))
        */
        --decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))--decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,2,nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),null) --  --nvl(nvl(Bro.BranchCode,agnt.BranchCode),nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE)) -- org.SHORT_NAME
        where NVL(JV.MEMBERTYPE,0) <> 8 AND   JV.MEDPOSTINGDONE=0 AND To_Date(JV.REFDATE,'DD/MM/RRRR')<=To_Date(ATILLTODATE,'DD/MM/RRRR')
         and round(nvl(decode(JV.MEMOTYPE,0,((case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end) * -1),(case when JV.Amount > 0 then JV.Amount  else JV.Amount*-1 end)),0))<>0

) LOOP
         INSERT INTO IM_MEDFINANCEPOSTINGDTL D
         (D.MEDDETAILCODE, D.MEDFINANCEPOSTINGCODE, D.FILENAME,
         D.DOCUMENTNO, D.DETAILDATE, D.PIN_NO, D.NARRATION,
         D.AMOUNT1, D.AMOUNT2, D.GL1, D.GL2,
         D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
         D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE, D.SERIALNO,D.JVCODE)
         VALUES
        ((select nvl(max(MEDDETAILCODE),100000000000000000)+1 from IM_MEDFINANCEPOSTINGDTL), MED_PRIMARY_KEY, FP.FILENAME,
         FP.DOCUMENTNO,FP.REFDATE,FP.PINCODE,FP.NARRATION,
         FP.AMOUNT1,FP.AMOUNT2,FP.GL1,FP.GL2,
         SYSDATE,  '100000000000000002', SYSDATE,
          '100000000000000002', 1, 1, (select nvl(max(SERIALNO),0)+1 from IM_MEDFINANCEPOSTINGDTL),FP.JVPOSTINGCODE);

  end loop;

COMMIT;
RETURN 'OK';

END;
function IM_HNM_PROVIDER_PAYMENT_FN (HNM_PRIMARY_KEY NUMBER,APROVIDERCODE NUMBER) return VARCHAR2 AS
--L_UPDATE_DATE DATE;
AFETCHTILLDATE DATE;
L_PAYMODE NUMBER;
L_BANKCODE NVARCHAR2(100);
BEGIN
--if(APROVIDERCODE>0) then

select nvl(max(FETCHTILLDATE),null),PAYMODE into AFETCHTILLDATE,L_PAYMODE from IM_HNMPROVIDERPAYMENT where PROVIDERPAYMENTCODE=HNM_PRIMARY_KEY;

SELECT Max(Value) INTO L_BANKCODE FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IM_FN_BANKPAYMODE' AND To_Char(LOOKUP_CODE)=To_Char(L_PAYMODE);

insert into IM_HNM_PROVIDERPAYMENT_EXC D (D.DETAILCODE, D.PROVIDERPAYMENTCODE, D.CODE, D.PROVIDERNAME, D.CURRENCY,
          D.AMOUNT, D.IBAN, D.BANKCODE, D.NARRATION,
          D.COMPANYCODE, D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
          D.LASTMODIFIEDBY, D.SERIALNO, D.LOCATIONCODE,D.JVCODE)   (select
           10000000000000000+IM_HNM_PROVIDERPAYMENT_EXCPKY.nextval DETAILCODE, D.PROVIDERPAYMENTCODE, D.CODE, D.PROVIDERNAME, D.CURRENCY,
          D.AMOUNT, D.IBAN, D.BANKCODE, D.NARRATION,
          D.COMPANYCODE, D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
          D.LASTMODIFIEDBY, D.SERIALNO, D.LOCATIONCODE,D.JVCODE
           from IM_HNM_PROVIDERPAYMENTDTLS D where D.PROVIDERPAYMENTCODE=HNM_PRIMARY_KEY and D.Selectt=1);

update IM_HNMPROVIDERPAYMENT set GENERATEFILENAME=('hnm-'||to_char(REFDATE,'RRRR')||lpad(to_char(REFDATE,'MM'),2,'0')||lpad(to_char(REFDATE,'DD'),2,'0')) where  PROVIDERPAYMENTCODE=HNM_PRIMARY_KEY;

delete  from IM_HNM_PROVIDERPAYMENTDTLS where PROVIDERPAYMENTCODE=HNM_PRIMARY_KEY;
FOR FP IN (
        select L_BANKCODE  as Code,nvl(Bill.BENEFICIARYNAME,Pro.ProviderName) ProviderName,
        Nvl(Curr.SHORTNAME,'AED') CURRENCY,/*( ABS(JV.AMOUNT)*decode(JV.MEMOTYPE,1,1,-1)) AMOUNT*/ABS(JV.AMOUNT) AMOUNT,Bill.IBANCODE,gen.Shortname BankCode,
        /*case when (  ABS(JV.AMOUNT)*decode(JV.MEMOTYPE,1,1,-1))<0 then
        ('Payment for the document ' || JV.REF_NO||' Pin ' || PROVIDERPINCODE )
        else
        ('Receipt for the document ' || JV.REF_NO||' Pin ' || PROVIDERPINCODE )
        end*/ JV.REF_NO
        as Narration,
        JV.JVPOSTINGCODE
         from IM_NGI_JVPOSTING JV
        join IM_ENDORSEMENTPOSTING ENDD on ENDD.ENDORESMENTCODE= JV.CLAIMREFCODE AND AUTHORIZEDSTATUS = 1
        join im_providers Pro on ENDD.ProviderCode=Pro.ProviderCode  and JV.HNMPOSTINGDONE=0 -- and JV.MemberType=4
        left join IM_PROVIDER_BILLING_DETAIL Bill on Bill.ProviderCode=Pro.ProviderCode and ( to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(Bill.STARTDATE,'DD/MM/RRRR') and to_date(nvl(Bill.ENDDATE,sysdate),'DD/MM/RRRR'))
        left join genconstant gen on gen.category='SP_BANKS' and gen.ConstantValue=Bill.BANKCODE and gen.LanguageCode='en-US'
        left join gencurrency Curr on Curr.CURRENCYCODE=nvl(Bill.CURRENCYCODE,Pro.CURRENCYCODE )
        where Bill.PAYMODE=L_PAYMODE AND pro.providercode NOT IN
        (SELECT Nvl(provider_Code,0) FROM im_claim_process_header WHERE isnextcare = 1) AND jv.jvpostingcode not in (select reversejvcode from IM_NGI_JVPOSTING where reversejvcode is not null)
        and nvl(jv.reversejvcode,0) = 0 and jv.JVPOSTINGCODE not in
        (select JVCODE from IM_HNM_PROVIDERPAYMENT_EXC where PROVIDERPAYMENTCODE=HNM_PRIMARY_KEY ) and
        nvl(ENDD.PAYMENTCODE,0)=2 and  Pro.ProviderCode=decode(nvl(APROVIDERCODE,0),0,Pro.ProviderCode,nvl(APROVIDERCODE,0)) and
        to_date(JV.REFDATE,'DD/MM/RRRR') <= nvl(to_date(AFETCHTILLDATE,'DD/MM/RRRR'),to_date(JV.REFDATE,'DD/MM/RRRR'))
)
LOOP
    --IM_HNM_PROVIDERPAYMENT_EXC_PK
         INSERT INTO IM_HNM_PROVIDERPAYMENTDTLS D
         (D.DETAILCODE, D.PROVIDERPAYMENTCODE, D.CODE, D.PROVIDERNAME, D.CURRENCY,
          D.AMOUNT, D.IBAN, D.BANKCODE, D.NARRATION,
          D.COMPANYCODE, D.CREATEDON, D.CREATEDBY, D.LASTMODIFIEDON,
          D.LASTMODIFIEDBY, D.SERIALNO, D.LOCATIONCODE,D.JVCODE,D.SELECTT)
            VALUES
             ((10000000000000000+IM_HNM_PROVIDERPAYMENTDTLSPKY.nextval), HNM_PRIMARY_KEY , FP.CODE, FP.PROVIDERNAME,FP.CURRENCY,
             FP.AMOUNT, FP.IBANCODE, FP.BANKCODE, FP.NARRATION,
             1, SYSDATE, '100000000000000002', SYSDATE,
             '100000000000000002', (select nvl(max(SERIALNO),0)+1 from IM_HNM_PROVIDERPAYMENTDTLS), 1,FP.JVPOSTINGCODE,0);

END LOOP;



COMMIT;
RETURN 'OK';

END;

function IM_DATAWAREHOUSE_FN (DWE_PRIMARY_KEY NUMBER) return VARCHAR2 AS
--L_UPDATE_DATE DATE;
ADATAWHAREHOUSEROW  IM_DATAWAREHOUSE_EXT%rowtype;
AIBNRMONTH varchar2(10);
ALDATE date;
AProcessedCount number(10);
AUPRDETPKEY number(19);
L_RULES VARCHAR2(500);
L_COUNT NUMBER;
L_HDOAMOUNT NUMBER;
L_MATRIXCOUNT NUMBER;
L_PISHARE NUMBER;
BEGIN
select * into ADATAWHAREHOUSEROW from IM_DATAWAREHOUSE_EXT where DATAWAREHOUSE_EXT_CODE=DWE_PRIMARY_KEY;

delete  from IM_DATAWAREHOUSE_DTL where DATAWAREHOUSE_EXT_CODE=DWE_PRIMARY_KEY;

        if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=0) then --Paid Claims

            FOR DW IN (
                select rownum MatrixCode,TST.* from (
                select FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,
                sum(Amount) Amount,RISHARE
                from (
                select  'M03' FormulaCode,'Paid Claims' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH, CHANGE BY AHMED 25-11-2015
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                nvl(org.Short_Name,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(a.APPROVED_AMOUNT) Amount,0 RISHARE
                from im_claim_process_header a
                --left join im_claim_process_detail b on a.claim_code = b.claim_code and a.request_type in (1,2) and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_ENDPOSTCLAIMDTL edet on edet.claimcode=a.claim_code
                join im_endorsementposting epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE  --and
                join IM_NGI_JVPOSTING JV on JV.CLAIMREFCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE = 2 and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                and JV.ref_no not in (select distinct pos.ref_no from IM_NGI_JVPOSTING pos
                        join im_endorsementposting epos on epos.ENDORESMENTCODE = pos.CLAIMREFCODE  and to_date(pos.REFDATE,'DD/MM/RRRR') between  to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                        join IM_ENDPOSTCLAIMDTL edet  on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                        join im_claim_process_header a on a.claim_code = edet.claimcode
                        group by pos.ref_no,pos.amount,pos.MEMOTYPE
                        having  round(abs(pos.amount))<>round(sum(a.APPROVED_AMOUNT)) or pos.MEMOTYPE=1)
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group by
                  NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                  to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name
                  having sum(a.APPROVED_AMOUNT)<>0

                  union all


                --with JVPOSTDET as ()
                select  'M03' FormulaCode,'Paid Claims' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                nvl(org.Short_Name,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,(sum(ABS(JV.Amount)*decode(JV.MEMOTYPE,0,1,1,-1))) Amount,0 RISHARE
                from im_endorsementposting epos
                join IM_NGI_JVPOSTING JV on JV.CLAIMREFCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE=2 and  --JV.MEMOTYPE=0 and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                and (JV.ref_no in (select distinct pos.ref_no from IM_NGI_JVPOSTING pos
                        join im_endorsementposting epos on epos.ENDORESMENTCODE = pos.CLAIMREFCODE  and to_date(pos.REFDATE,'DD/MM/RRRR') between  to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                        join IM_ENDPOSTCLAIMDTL edet  on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                        join im_claim_process_header a on a.claim_code = edet.claimcode
                        group by pos.ref_no,pos.amount,pos.MEMOTYPE
                        having round(abs(pos.amount))<>round(sum(a.APPROVED_AMOUNT)) or pos.MEMOTYPE=1))
                join im_claim_process_header a on a.claim_code = (select max(edet.claimcode) from   IM_ENDPOSTCLAIMDTL   edet where edet.ENDORESMENTCODE = epos.ENDORESMENTCODE)
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group by
                  NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                  to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name
                  having (sum(ABS(JV.Amount)*decode(JV.MEMOTYPE,0,1,1,-1)))<>0

               /*   union all

              select  'M03' FormulaCode,'Paid Claims' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                nvl(org.Short_Name,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(
                NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)*-1
                ) Amount,0 RISHARE
                from im_claim_process_header a
                --left join im_claim_process_detail b on a.claim_code = b.claim_code and a.request_type in (1,2) and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_NONPAYCLAIMDTL edet on edet.claimcode=a.claim_code
                join IM_NONPAYCLAIM epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE  --and
                join IM_NGI_JVPOSTING JV on JV.NONPAYCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE = 3 and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group by decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD'),to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name
              */

                  )
                  --where Amount<>0
                  group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,RISHARE
                  ) TST
            )

            loop

              if(DW.Amount=0) then continue ; end if;


                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;

       if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=1) then --Paid Claims R/I
            FOR DW IN (
            SELECT  rownum MatrixCode,TST.* FROM(
            SELECT  FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,
            SUM(AMOUNT) AMOUNT,SUM(RISHARE) RISHARE FROM(
                select  TST.* from (

                select FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,
                sum(Amount) Amount,GETPAIDCLAIMRISHARE(CLAIM_CODE,RISHARE,POLICYCODE,POLICYTYPE,Sum(AMOUNT)) RISHARE from
                (
                select  'M03' FormulaCode,'Paid Claims R/I' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                org.Short_Name BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(a.APPROVED_AMOUNT) Amount,A.CLAIM_CODE,
                Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE) POLICYCODE,nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE) POLICYTYPE,
                /*
                (case
                    when max(nvl(Pol.OWNERCODE,IndPol.OWNERCODE)) in (1,5) then  ---NEXT CARE
                       round( (70/100)* sum(a.APPROVED_AMOUNT) ,2)
                    when  max(nvl(Pol.OWNERCODE,IndPol.OWNERCODE)) = 4 then   --ESDB
                        round((80/100)* sum(a.APPROVED_AMOUNT) ,2)
                    else    -- NGI
                        round((2.15/100)* sum(a.APPROVED_AMOUNT) ,2)
                end) RISHARE
                */
                nvl(Pol.OWNERCODE,IndPol.OWNERCODE) RISHARE
                from im_claim_process_header a
                --left join im_claim_process_detail b on a.claim_code = b.claim_code and a.request_type in (1,2) and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_ENDPOSTCLAIMDTL edet on edet.claimcode=a.claim_code
                join im_endorsementposting epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE  --and
                join IM_NGI_JVPOSTING JV on JV.CLAIMREFCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE in (2) and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                and JV.ref_no not in  (select distinct pos.ref_no from IM_NGI_JVPOSTING pos
                        join im_endorsementposting epos on epos.ENDORESMENTCODE = pos.CLAIMREFCODE  and to_date(pos.REFDATE,'DD/MM/RRRR') between  to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                        join IM_ENDPOSTCLAIMDTL edet  on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                        join im_claim_process_header a on a.claim_code = edet.claimcode
                        group by pos.ref_no,pos.amount,pos.MEMOTYPE
                        having  round(abs(pos.amount))<>round(sum(a.APPROVED_AMOUNT)) or pos.MEMOTYPE=1)
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group BY
                  A.CLAIM_CODE,Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE),
                  NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                  to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name,nvl(Pol.OWNERCODE,IndPol.OWNERCODE)
                  having sum(a.APPROVED_AMOUNT)<>0

                  union all

                --with JVPOSTDET as ()
                select  'M03' FormulaCode,'Paid Claims R/I' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                org.Short_Name BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,(sum(ABS(JV.Amount)*decode(JV.MEMOTYPE,0,1,1,-1))) Amount,
                A.CLAIM_CODE,
                Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE) POLICYCODE,nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE) POLICYTYPE,
                /*
                (case
                    when max(nvl(Pol.OWNERCODE,IndPol.OWNERCODE)) in (1,5) then  ---NEXT CARE
                       round( (70/100)* sum(ABS(JV.Amount)) ,2)
                    when  max(nvl(Pol.OWNERCODE,IndPol.OWNERCODE)) = 4 then   --ESDB
                        round((80/100)* sum(ABS(JV.Amount)) ,2)
                    else    -- NGI
                        round((2.15/100)* sum(ABS(JV.Amount)) ,2)
                end) RISHARE
                */
                nvl(Pol.OWNERCODE,IndPol.OWNERCODE) RISHARE
                from im_endorsementposting epos
                join IM_NGI_JVPOSTING JV on JV.CLAIMREFCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE in (2) and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                and JV.ref_no in  (select distinct pos.ref_no from IM_NGI_JVPOSTING pos
                        join im_endorsementposting epos on epos.ENDORESMENTCODE = pos.CLAIMREFCODE  and to_date(pos.REFDATE,'DD/MM/RRRR') between  to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                        join IM_ENDPOSTCLAIMDTL edet  on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                        join im_claim_process_header a on a.claim_code = edet.claimcode
                        group by pos.ref_no,pos.amount,pos.MEMOTYPE
                        having  round(abs(pos.amount))<>round(sum(a.APPROVED_AMOUNT)) or pos.MEMOTYPE=1)
                join im_claim_process_header a on a.claim_code = (select max(edet.claimcode) from   IM_ENDPOSTCLAIMDTL   edet where edet.ENDORESMENTCODE = epos.ENDORESMENTCODE)
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group BY
                  A.CLAIM_CODE,Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE),
                  NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                  to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name,
                  nvl(Pol.OWNERCODE,IndPol.OWNERCODE)
                  having (sum(ABS(JV.Amount)*decode(JV.MEMOTYPE,0,1,1,-1)))<>0


                  /*union all

                select  'M03' FormulaCode,'Paid Claims' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                nvl(org.Short_Name,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(
                NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)*-1
                ) Amount,nvl(Pol.OWNERCODE,IndPol.OWNERCODE) RISHARE
                from im_claim_process_header a
                --left join im_claim_process_detail b on a.claim_code = b.claim_code and a.request_type in (1,2) and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_NONPAYCLAIMDTL edet on edet.claimcode=a.claim_code
                join IM_NONPAYCLAIM epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE  --and
                join IM_NGI_JVPOSTING JV on JV.NONPAYCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE = 3 and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
                left join im_members mem on mem.member_code=a.member_code
                left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group by decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD'),to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name,
                  nvl(Pol.OWNERCODE,IndPol.OWNERCODE)
                 */

                  )
                  group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,RISHARE,
                  CLAIM_CODE,RISHARE,POLICYCODE,POLICYTYPE
                  ) TST)group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP)TST
            )

            loop

              if(DW.Amount=0) then continue ;end if;

                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;

       if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=2) then --Recovery Paid

            FOR DW IN (
                   select rownum MatrixCode,TST.* from (
                   SELECT M.FormulaCode,M.DESCRIPTION,M.YEARNAME,M.MONTHNAME,M.SCH,M.CUSTOMERTYPE,M.BRN,M.PRO,M.LOB,M.CST,M.DEP
                    ,SUM(M.AMOUNT) AMOUNT,SUM(M.RISHARE) RISHARE FROM(
                   select 'M06' FormulaCode,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                   NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                   --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                org.Short_Name BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,
                sum(
                NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)
                ) Amount,
--                sum(nvl(b.DEDUCTIBLE_AMOUNT,0)) Amount,
                GETRECOVERYCLAIMRISHARE(CLAIM_CODE,NVL(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),0),NVL(M.POLICYCODE,A.POLICYCODE),NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),Sum(AMOUNT)) RISHARE

                from im_claim_process_header a
                --join im_claim_process_detail b on a.claim_code = b.claim_code and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_NONPAYCLAIMDTL edet on edet.claimcode=a.claim_code
                join IM_NONPAYCLAIM epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                --join IM_NONPAYCLAIMDTL ERT on   ERT.ENDORESMENTCODE = epos.ENDORESMENTCODE
                join IM_NGI_JVPOSTING JV on JV.NONPAYCODE= epos.ENDORESMENTCODE  and JV.SOURCECODE in (3) and
                to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
               left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
               left join im_members mem on mem.member_code=a.member_code
                 left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                 group BY
                 CLAIM_CODE,NVL(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),0),NVL(M.POLICYCODE,A.POLICYCODE),NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),
                 NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2))
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD')
                  ,to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name
                  UNION
                  select 'M06' FormulaCode,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,
                   NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                   --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                --decode(Pol.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
                decode(nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),1,'Corporate',2,'Individual') CustomerType,
                org.Short_Name BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,
                sum(A.APPROVED_AMOUNT) Amount,
--                sum(nvl(b.DEDUCTIBLE_AMOUNT,0)) Amount,
                GETRECOVERYCLAIMRISHARE(A.CLAIM_CODE,NVL(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),0),NVL(M.POLICYCODE,A.POLICYCODE),NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),Sum(A.APPROVED_AMOUNT)) RISHARE
                from im_claim_process_header a
                --join im_claim_process_detail b on a.claim_code = b.claim_code and A.TRANSACTIONDATE >= to_Date('01/01/2015','DD/MM/RRRR')
                join IM_ENDPOSTCLAIMDTL edet on edet.claimcode=a.claim_code
                join IM_ENDORSEMENTPOSTING epos on edet.ENDORESMENTCODE = epos.ENDORESMENTCODE
                --join IM_NONPAYCLAIMDTL ERT on   ERT.ENDORESMENTCODE = epos.ENDORESMENTCODE
                join IM_NGI_JVPOSTING JV on JV.CLAIMREFCODE= epos.ENDORESMENTCODE  and JV.REF_NO in ('0115100854' ,'0115100536')
                AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                --to_date(epos.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
               left join im_memberpolicy m on m.membercode=a.member_code and a.category_code=m.CATEGORYCODE and a.policycode=m.policycode
               left join im_members mem on mem.member_code=a.member_code
                 left  join  IM_Policy Pol on Pol.PolicyCode=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=1
                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(m.PolicyCode,a.policycode) and nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE)=2
                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                 left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                  group BY
                  CLAIM_CODE,NVL(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),0),NVL(M.POLICYCODE,A.POLICYCODE),NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),
                  NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2))
                  --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD')
                  ,to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM'),nvl(nvl(m.typee,a.POLICYTYPECODE),mem.POLICYTYPE),org.Short_Name
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,'COD' SCH,
                  'CORPORATE' CUSTOMERTYPE,'HDO' BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(JV.AMOUNT) AMOUNT,round((2.15/100)* sum(Amount) ,2) RISHARE
                  FROM IM_NGI_JVPOSTING JV WHERE REF_NO IN ('0115100730','0115100792','0115100812')
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  GROUP BY to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM')
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,'COD' SCH,
                  'CORPORATE' CUSTOMERTYPE,'HDO' BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(JV.AMOUNT*-1) AMOUNT,round((2.15/100)* sum(Amount) ,2)*-1 RISHARE
                  FROM IM_NGI_JVPOSTING JV WHERE REF_NO IN ('0415107700')
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  GROUP BY to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM')
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,'SLS' SCH,
                  'CORPORATE' CUSTOMERTYPE,'SZK' BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(JV.AMOUNT) AMOUNT,round((2.15/100)* sum(Amount) ,2) RISHARE
                  FROM IM_NGI_JVPOSTING JV WHERE REF_NO IN ('0115102782')
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                 GROUP BY to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM')
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,'SLS' SCH,
                  'CORPORATE' CUSTOMERTYPE,'HDO' BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(JV.AMOUNT) AMOUNT,round((2.15/100)* sum(Amount) ,2) RISHARE
                  FROM IM_NGI_JVPOSTING JV WHERE REF_NO IN ('0115100697')
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  GROUP BY to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM')
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' Description,to_char(JV.REFDATE,'RRRR')  YearName,to_char(JV.REFDATE,'MM') MonthName,'SLS' SCH,
                  'CORPORATE' CUSTOMERTYPE,'HDO' BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(JV.AMOUNT) AMOUNT,round((2.15/100)* sum(Amount) ,2) RISHARE
                  FROM IM_NGI_JVPOSTING JV WHERE REF_NO IN ('0115100718')
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  GROUP BY to_char(JV.REFDATE,'RRRR') ,to_char(JV.REFDATE,'MM')
                  UNION
                  SELECT 'M06' FORMULACODE,'Recovery Paid' DESCRIPTION,TO_CHAR(JV.REFDATE,'RRRR')  YEARNAME,TO_CHAR(JV.REFDATE,'MM') MONTHNAME,
                  NVL(GET_DWBILLINGTYPE_FNC(POL.POLICYCODE,1),GET_DWBILLINGTYPE_FNC(INDPOL.INDIVIDUALPOLICYCODE,2)) SCH,
                  DECODE(NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),1,'CORPORATE',2,'INDIVIDUAL') CUSTOMERTYPE,
                  ORG.SHORT_NAME BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,
                  SUM(NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)) AMOUNT,
                  (CASE
                  WHEN MAX(NVL(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),0)) IN (1,5) THEN  ---NEXT CARE
                  ROUND( (70/100)* SUM(NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)*-1),2)*-1
                  WHEN  MAX(NVL(POL.OWNERCODE,INDPOL.OWNERCODE)) = 4 THEN   --ESDB
                  ROUND((80/100)* SUM(NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)*-1) ,2)*-1
                  ELSE    -- NGI
                  ROUND((2.15/100)* SUM(NVL((SELECT SUM(DENIEDAMOUNT) FROM IM_DECLINEAMOUNT_VW V WHERE V.CLAIM_CODE = a.CLAIM_CODE),0)*-1) ,2)*-1
                  END) RISHARE
                  FROM IM_CLAIM_PROCESS_HEADER A
                  JOIN IM_ENDPOSTCLAIMDTL EDET ON EDET.CLAIMCODE=A.CLAIM_CODE
                  JOIN IM_ENDORSEMENTPOSTING EPOS ON EDET.ENDORESMENTCODE = EPOS.ENDORESMENTCODE
                  JOIN IM_NGI_JVPOSTING JV ON JV.CLAIMREFCODE= EPOS.ENDORESMENTCODE  AND
                  JV.REF_NO = '0115100696'
                  AND to_date(JV.REFDATE,'DD/MM/RRRR') between to_date(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  --TO_DATE(EPOS.REFDATE,'DD/MM/RRRR') BETWEEN TO_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') AND TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                  LEFT JOIN IM_MEMBERPOLICY M ON M.MEMBERCODE=A.MEMBER_CODE AND A.CATEGORY_CODE=M.CATEGORYCODE AND A.POLICYCODE=M.POLICYCODE
                  LEFT JOIN IM_MEMBERS MEM ON MEM.MEMBER_CODE=A.MEMBER_CODE
                  LEFT  JOIN  IM_POLICY POL ON POL.POLICYCODE=NVL(M.POLICYCODE,A.POLICYCODE) AND NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE)=1
                  LEFT  JOIN  IM_INDIVIDUALPOLICY INDPOL ON INDPOL.INDIVIDUALPOLICYCODE=NVL(M.POLICYCODE,A.POLICYCODE) AND NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE)=2
                  LEFT JOIN IM_AGENTS AGNT ON AGNT.AGENTCODE=NVL(POL.AGENTCODE,INDPOL.AGENTCODE)
                  LEFT JOIN IM_BROKERS BRO ON BRO.BROKERCODE=NVL(POL.BROKERCODE,INDPOL.BROKERCODE)
                  LEFT JOIN HR_ORGANIZATIONS_D ORG ON ORG.ORGANIZATIONS_CODE=NVL(POL.BRANCHCODE,NVL(INDPOL.BRANCHCODE,NVL(BRO.BRANCHCODE,AGNT.BRANCHCODE)))
                  GROUP BY
                  NVL(GET_DWBILLINGTYPE_FNC(POL.POLICYCODE,1),GET_DWBILLINGTYPE_FNC(INDPOL.INDIVIDUALPOLICYCODE,2))
                  --DECODE(NVL(POL.BILLINGTYPE,INDPOL.BILLINGTYPE),0,'SLS',1,'BRO','COD')
                 ,TO_CHAR(JV.REFDATE,'RRRR') ,TO_CHAR(JV.REFDATE,'MM'),NVL(NVL(M.TYPEE,A.POLICYTYPECODE),MEM.POLICYTYPE),ORG.SHORT_NAME) M
                  GROUP BY M.FormulaCode,M.DESCRIPTION,M.YEARNAME,M.MONTHNAME,M.SCH,M.CUSTOMERTYPE,M.BRN,M.PRO,M.LOB,M.CST,M.DEP
                  ) TST
                  --having sum(nvl(b.DEDUCTIBLE_AMOUNT,0))<>0) TST
            )

            loop

            if(Dw.Amount=0) then continue ;end if;

                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;

       if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=3) then --Commission

            FOR DW IN (

                            select rownum MatrixCode,com.* from (select com.FormulaCode ,com.DESCRIPTION, com.YearName ,com.MonthName,com.SCH,com.CUSTOMERTYPE,
                        com.BRN, com.PRO, com.LOB, com.CST, com.DEP, sum(com.AMOUNT) AMOUNT, com.RISHARE
                            from
                                ( select 'M02' FormulaCode,'Commission' Description,to_char(JV.REFDATE,'RRRR') YearName,to_char(JV.REFDATE,'MM') MonthName,
                                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                                decode(jv.agentcode,null,decode(jv.brokercode,null,'BKA','BRO'),DECODE(AGNT.AGENT_TYPE,0,'SLS','COD')) SCH,
                            --decode(JV.MEMBERTYPE,0,'BRO',1,'BRO',3,'SLS','COD') SCH,
                            decode(Endo.POLICYTYPECODE,1,'Corporate',2,'Individual') CustomerType,
                            org.Short_Name BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(ABS(JV.amount)*decode(JV.MEMOTYPE,0,-1,1)) Amount,0 RISHARE
                            from  im_ngi_jvposting JV
                                join IM_POLICYFINANCEPOSTING  Endo on Endo.POLICYFINANCEPOSTINGCODE=JV.ref_code
                                   --join IM_POLICYFINANCEPOSTINGDTL Det on Det.POLICYFINANCEPOSTINGCODE=Endo.POLICYFINANCEPOSTINGCODE
                                  left  join  IM_Policy Pol on Pol.PolicyCode=Endo.PolicyCode and Endo.POLICYTYPECODE=1
                                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=Endo.INDIVIDUALPOLICYCODE and Endo.POLICYTYPECODE=2
                                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                               left join HR_ORGANIZATIONS_D org on ORG.SHORT_NAME=JV.BRANCHNAME
                               WHERE jv.sourcecode=1 and JV.JVPREMIUMTYPE=1 and
                                to_DATE(JV.REFDATE,'DD/MM/RRRR') between to_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                               --org.ORGANIZATIONS_CODE=decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))  --nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                                   group by decode(jv.agentcode,null,decode(jv.brokercode,null,'BKA','BRO'),DECODE(AGNT.AGENT_TYPE,0,'SLS','COD'))  ,
                                   to_char(JV.REFDATE,'RRRR'),to_char(JV.REFDATE,'MM'),Endo.POLICYTYPECODE,org.Short_Name) Com
                                   where AMOUNT<>0
                                   group by
                         com.FormulaCode ,com.DESCRIPTION, com.YearName ,com.MonthName,com.SCH,com.CUSTOMERTYPE,
                        com.BRN, com.PRO, com.LOB, com.CST, com.DEP,  com.RISHARE )com

            )

            loop

            if(Dw.Amount=0) then continue ;end if;

                     if(Dw.Amount=0) then continue ;end if;
                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;

       if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=4) then --IBNR

       begin

            ALDATE := to_date(trunc(ADATAWHAREHOUSEROW.STARTDATE,'mm'),'DD/MM/RRRR');

           -- LOOP

                --select to_char(ALDATE,'RRRRMM') into AIBNRMONTH from dual;

                FOR DW IN (
                        select  rownum MatrixCode,com.* from(
                        select FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,
                        sum(Amount+NETAMOUNT) Amount,RISHARE from (
                                    SELECT H.* FROM (
                                            select 'M13' FormulaCode,'IBNR' Description,to_char(to_Date(HDR.REFDATE,'DD/MM/RRRR') ,'RRRR')   YearName,to_char(HDR.REFDATE,'MM') MonthName,
                                            --substr(AIBNRMONTH,0,4)   YearName,substr(AIBNRMONTH,5,2) MonthName,
                                            --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                                            NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                                            --decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),1,'BRO',1,'SLS',3,'SLS','COD') SCH,
                                            decode(Endo.typee,1,'Corporate',2,'Individual','Corporate') CustomerType,
                                            nvl(org.Short_Name,'HOD') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,
                                            /*
                                            DECODE(SIGN((HDR.REQUEST_AMOUNT - NVL(HDR.APPROVED_AMOUNT,0)- NVL(HDR.DENAILVALUE,0)

                                            - NVL(HDR.DISCOUNTTOTAL,0) - NVL(HDR.DEDUCTABLEVALUE,0) - NVL(HDR.CO_INS_VALUE,0))), -1, 0, (HDR.REQUEST_AMOUNT - NVL(HDR.APPROVED_AMOUNT,0)- NVL(HDR.DENAILVALUE,0)

                                            - NVL(HDR.DISCOUNTTOTAL,0) - NVL(HDR.DEDUCTABLEVALUE,0) - NVL(HDR.CO_INS_VALUE,0)))
                                            */
                                            nvl( (HDR.Approved_Amount),0)+(SELECT NVL(SUM(NVL(VW.DENIEDAMOUNT,0)),0) DENIEDAMOUNT FROM IM_DECLINEAMOUNT_VW VW
                                            WHERE VW.CLAIM_CODE = HDR.CLAIM_CODE  AND HDR.CLAIM_CODE NOT IN (SELECT CLAIM_CODE FROM REJDEC) AND REQUEST_TYPE IN (1,2)) Amount,0 RISHARE,0 NETAMOUNT  --NVL(HDR.APPROVED_AMOUNT,0) NETAMOUNT

                                            FROM
                                            (
                                            /*
                                                select distinct HDR.* from IM_CLAIM_PROCESS_HEADER HDR
                                                join IM_ENDPOSTCLAIMDTL  DTL on   HDR.CLAIM_CODE=DTL.CLAIMCODE   and nvl(DTL.INCLUDE_CLAIM,0)=0
                                                join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE and TO_DATE(POS.REFDATE,'DD/MM/RRRR') between TO_DATE(ALDATE,'DD/MM/RRRR') AND TO_DATE(last_day(ALDATE),'DD/MM/RRRR')
                                                and to_date(HDR.ENCOUNTER_START_DATE,'DD/MM/RRRR') < TO_DATE(ALDATE,'DD/MM/RRRR')*/

                                                select distinct HDR.*,DTL.REFDATE from
                                                (select  DTL.CLAIMCODE,max(JVPOS.REFDATE) REFDATE  from
                                                IM_ENDPOSTCLAIMDTL  DTL -- on   HDR.CLAIM_CODE=DTL.CLAIMCODE   and nvl(DTL.INCLUDE_CLAIM,0)=0
                                                join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE  and nvl(DTL.INCLUDE_CLAIM,0)=0
                                                join im_ngi_jvposting jvpos on jvpos.CLAIMREFCODE = POS.ENDORESMENTCODE and jvpos.memotype=0 and  NVL(JVPOS.REVERSEJVDONE,0) = 0
                                                where TO_DATE(jvpos.REFDATE,'DD/MM/RRRR') between TO_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') AND TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                                                group by  DTL.CLAIMCODE) DTL
                                                join IM_CLAIM_PROCESS_HEADER HDR on HDR.CLAIM_CODE=DTL.CLAIMCODE
                                                and to_date(HDR.ENCOUNTER_START_DATE,'DD/MM/RRRR') <= TO_DATE('31/12/'||(to_number(to_char(ADATAWHAREHOUSEROW.STARTDATE,'RRRR'))-1),'DD/MM/RRRR')

                                                /*
                                                select HDR.* from IM_CLAIM_PROCESS_HEADER HDR
                                                join IM_ENDPOSTCLAIMDTL  DTL on   HDR.CLAIM_CODE=DTL.CLAIMCODE
                                                join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE and TO_DATE(POS.REFDATE,'DD/MM/RRRR') between TO_DATE(ALDATE,'DD/MM/RRRR') AND TO_DATE(last_day(ALDATE),'DD/MM/RRRR')
                                                and extract(year from HDR.ENCOUNTER_START_DATE)  < extract(year from TO_DATE(ALDATE,'DD/MM/RRRR'))  AND HDR.REQUEST_TYPE = 2
                                                union all
                                                select HDR.* from IM_CLAIM_PROCESS_HEADER HDR
                                                join IM_ENDPOSTCLAIMDTL  DTL on   HDR.CLAIM_CODE=DTL.CLAIMCODE
                                                join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE and TO_DATE(POS.REFDATE,'DD/MM/RRRR') between TO_DATE(ALDATE,'DD/MM/RRRR') AND TO_DATE(last_day(ALDATE),'DD/MM/RRRR')
                                                AND SOURCEPROVIDER = 2 and HDR.REQUEST_TYPE = 1 AND to_date(HDR.ENCOUNTER_START_DATE,'DD/MM/RRRR') < TO_DATE(ALDATE,'DD/MM/RRRR')
                                                union all
                                                select HDR.* from IM_CLAIM_PROCESS_HEADER HDR
                                                join IM_ENDPOSTCLAIMDTL  DTL on   HDR.CLAIM_CODE=DTL.CLAIMCODE
                                                join IM_ENDORSEMENTPOSTING POS on POS.ENDORESMENTCODE=DTL.ENDORESMENTCODE and TO_DATE(POS.REFDATE,'DD/MM/RRRR') between TO_DATE(ALDATE,'DD/MM/RRRR') AND TO_DATE(last_day(ALDATE),'DD/MM/RRRR')
                                                AND SOURCEPROVIDER = 1 and HDR.REQUEST_TYPE = 1 AND to_date(HDR.ENCOUNTER_START_DATE,'DD/MM/RRRR') < TO_DATE(ALDATE,'DD/MM/RRRR')
                                                */
                                            ) HDR

                                            left JOIN IM_MEMBERS IM ON IM.MEMBER_CODE = HDR.MEMBER_CODE

                                            --JOIN IM_CORDPRINT IMC ON IMC.MEMBERCODE = HDR.MEMBER_CODE AND HDR.POLICYCODE = IMC.POLICYCODE AND HDR.CATEGORY_CODE = IMC.CATEGORYCODE

                                            left JOIN IM_PROVIDERS IMP ON IMP.PROVIDERCODE =HDR.PROVIDER_CODE

                                            left join im_memberpolicy Endo on Endo.membercode=HDR.member_code and HDR.category_code=Endo.CATEGORYCODE and HDR.policycode=Endo.policycode
                                            --left join im_members mem on mem.member_code=HDR.member_code
                                            left  join  IM_Policy Pol on Pol.PolicyCode=nvl(nvl(Endo.PolicyCode,HDR.policycode),IM.POLICYCODE) and nvl(nvl(Endo.typee,HDR.POLICYTYPECODE),IM.POLICYTYPE)=1
                                            left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=nvl(nvl(Endo.PolicyCode,HDR.policycode),IM.POLICYCODE) and nvl(nvl(Endo.typee,HDR.POLICYTYPECODE),IM.POLICYTYPE)=2
                                            left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                                            left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                                            left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                                            left join genconstant gen10 on GEN10.CONSTANTVALUE=nvl(pol.OWNERCODE,IndPol.OWNERCODE)  and GEN10.CATEGORY='NGIQUOTATIONTYPE' and GEN10.LANGUAGECODE='en-US'
                                            where nvl(Pol.OWNERCODE,IndPol.OWNERCODE) =3
                                            --where nvl(HDR.policycode,0)=0 or nvl(Pol.PolicyCode,IndPol.INDIVIDUALPOLICYCODE) is not null
                                    ) H
                            )
                            group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,RISHARE
                        ) com
                )


                loop

                        if(Dw.Amount=0) then continue ;end if;

                         INSERT INTO IM_DATAWAREHOUSE_DTL D
                         (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                          D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                          D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                          D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                            VALUES
                             ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                             DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                            DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                            '100000000000000002', SYSDATE, '100000000000000002',1,1);

                end loop;

                --ALDATE:=to_date(add_months(ALDATE,1),'DD/MM/RRRR') ;

           -- EXIT WHEN to_date(ALDATE,'DD/MM/RRRR')>to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR');

           -- end loop;


        end;

    end if;

       if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=5) then --Production

            FOR DW IN (

                             select rownum MatrixCode,Com.* from (select 'M01' FormulaCode,'Production' Description,to_char(JV.REFDATE,'RRRR') YearName,to_char(JV.REFDATE,'MM') MonthName,
                             --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                             NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                                --decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),1,'BRO',0,'SLS',6,'SLS','COD')  SCH,
                                decode(Endo.POLICYTYPECODE,1,'Corporate',2,'Individual') CustomerType,
                                JV.BRANCHNAME BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(ABS(JV.amount)*decode(JV.MEMOTYPE,0,-1,1)) Amount,0 RISHARE
                                from IM_POLICYFINANCEPOSTING  Endo
                                join im_ngi_jvposting JV on JV.ref_code=Endo.POLICYFINANCEPOSTINGCODE and sourcecode=1 and JV.JVPREMIUMTYPE=0 and
                                to_DATE(JV.REFDATE,'DD/MM/RRRR') between to_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                                   --join IM_POLICYFINANCEPOSTINGDTL Det on Det.POLICYFINANCEPOSTINGCODE=Endo.POLICYFINANCEPOSTINGCODE
                                  left  join  IM_Policy Pol on Pol.PolicyCode=Endo.PolicyCode and Endo.POLICYTYPECODE=1
                                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=Endo.INDIVIDUALPOLICYCODE and Endo.POLICYTYPECODE=2
                                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                               left join HR_ORGANIZATIONS_D org on ORG.SHORT_NAME=JV.BRANCHNAME
                               --ORG.SHORT_NAME=JV.BRANCHNAME
                               --org.ORGANIZATIONS_CODE=decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))  --nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                                --where
                                   group by
                                   --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                                   NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                                   to_char(JV.REFDATE,'RRRR'),to_char(JV.REFDATE,'MM'),Endo.POLICYTYPECODE,JV.BRANCHNAME)  com


            )

            loop

            if(Dw.Amount=0) then continue ;end if;

                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;

      if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=6) then --RI Treaty Premium

            FOR DW IN (

                    select rownum MatrixCode,Com.* from
                    (select
                    DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP,sum(DW.Amount) Amount,sum(DW.RISHARE) RISHARE
                     from (select
                     DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP,DW.Amount,DW.OWNERCODE,
                        GETRIPREMIUMSHARE(POLICYFINANCEPOSTINGCODE,OWNERCODE,POLICYCODE,POLICYTYPE,AMOUNT) RISHARE from (select 'M01' FormulaCode,'Production' Description,to_char(JV.REFDATE,'RRRR') YearName,to_char(JV.REFDATE,'MM') MonthName,
                                NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                                --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
                                --decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),1,'BRO',0,'SLS',6,'SLS','COD')  SCH,
                                decode(Endo.POLICYTYPECODE,1,'Corporate',2,'Individual') CustomerType,
                               JV.BRANCHNAME  BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,sum(ABS(JV.amount)*decode(JV.MEMOTYPE,0,-1,1)) Amount,
                                (nvl(Pol.OWNERCODE,IndPol.OWNERCODE)) OWNERCODE,ENDO.POLICYFINANCEPOSTINGCODE,
                                Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE) POLICYCODE,ENDO.POLICYTYPECODE POLICYTYPE
                                from IM_POLICYFINANCEPOSTING  Endo
                                join im_ngi_jvposting JV on JV.ref_code=Endo.POLICYFINANCEPOSTINGCODE and sourcecode=1 and JV.JVPREMIUMTYPE=0 and
                                to_DATE(JV.REFDATE,'DD/MM/RRRR') between to_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD/MM/RRRR') and to_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                                   --join IM_POLICYFINANCEPOSTINGDTL Det on Det.POLICYFINANCEPOSTINGCODE=Endo.POLICYFINANCEPOSTINGCODE
                                  left  join  IM_Policy Pol on Pol.PolicyCode=Endo.PolicyCode and Endo.POLICYTYPECODE=1
                                left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=Endo.INDIVIDUALPOLICYCODE and Endo.POLICYTYPECODE=2
                                 left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
                                left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
                               left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=decode(JV.MEMBERTYPE,0,agnt.BranchCode,1,Bro.BranchCode,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0, agnt.BRANCHCODE,1,Bro.BRANCHCODE,nvl(nvl(Pol.BRANCHCODE,IndPol.BRANCHCODE),nvl(agnt.BRANCHCODE,Bro.BRANCHCODE)))))  --nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
                                --where
                                   group by
                                   --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
                                   NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
                                   ENDO.POLICYFINANCEPOSTINGCODE,ENDO.POLICYTYPECODE,Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE),
                                    to_char(JV.REFDATE,'RRRR'),to_char(JV.REFDATE,'MM'),Endo.POLICYTYPECODE,JV.BRANCHNAME,(nvl(Pol.OWNERCODE,IndPol.OWNERCODE))
                                   ) DW

                                  ) DW
                                  group by
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP
                                  ) com WHERE BRN IS NOT NULL
            )

            loop

            if(Dw.Amount=0) then continue ;end if;

                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;



      if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=7) then --UPR

--            FOR DW IN (
--                    select rownum MatrixCode,Com.* from (
--                    select FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,sum(Amount) Amount,RISHARE from
--                    (
--                    select 'M16' FormulaCode,'UPR' Description,to_char(sysdate ,'RRRR')  YearName,to_char(sysdate,'MM') MonthName,
--                    decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),1,'BRO',1,'SLS',3,'SLS','COD') SCH,decode( IM.Policytype,1,'Corporate',2,'Individual') CustomerType,
--                    nvl(org.Short_Name,'N/A') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,round((prdet.Amount / decode(round(to_date(sysdate,'DD/MM/RRRR') - to_Date(nvl(mpol.MEMBERSTARTDATE,mpol.POLICYSTARTDDATE),'DD/MM/RRRR')),0,1,round(to_date(sysdate,'DD/MM/RRRR') - to_Date(nvl(mpol.MEMBERSTARTDATE,mpol.POLICYSTARTDDATE),'DD/MM/RRRR'))))*round(to_Date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') - to_date(sysdate,'DD/MM/RRRR')),2) Amount,0 RISHARE
--                    from im_members IM
--                    join im_memberpolicy mpol on mpol.membercode=IM.member_code and im.policycode=mpol.policycode and im.category_code=mpol.categorycode
--                    join (select prdet.memberpolicycode,sum(prdet.PREMIUM_VALUE) Amount from IM_MEMBERPOLICYPREMIUMDTL prdet group by prdet.memberpolicycode) prdet on mpol.memberpolicycode=prdet.memberpolicycode
--                    left  join  IM_Policy Pol on Pol.PolicyCode=IM.PolicyCode and IM.Policytype=1
--                    left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.IndividualPolicyCode=IM.PolicyCode and IM.Policytype=2
--                    left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
--                    left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
--                    left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
--                    where nvl(mpol.MEMBERSTARTDATE,mpol.POLICYSTARTDDATE) is not null and IM.status=0 and to_date(sysdate,'DD/MM/RRRR') between to_date(mpol.MEMBERSTARTDATE,'DD/MM/RRRR') and to_date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') and IM.memberpolicycode is not null
--                    )
--                    group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,RISHARE  having sum(Amount)<>0) Com
--            )


        begin
            delete from UPR_DETAILLIST where DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY;

            select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000) into AUPRDETPKEY from IM_DATAWAREHOUSE_DTL ;

            insert into UPR_DETAILLIST
            select AUPRDETPKEY+rownum DATAWAREHOIUSE_CODE, DWE_PRIMARY_KEY DATAWAREHOUSE_EXT_CODE, IM.CARDID CARDNO, nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE) BILLINGTYPE, IM.Policytype,nvl(Pol.PolicyCode,IndPol.IndividualPolicyCode) Policycode,
            (to_Date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') -  to_Date(nvl(mpol.MEMBERSTARTDATE,mpol.POLICYSTARTDDATE),'DD/MM/RRRR'))+1 INSUREDDAYS,
            (prdet.Amount-((GET_UPRERTPERCENTAGE(IM.Policytype,nvl(Pol.PolicyCode,IndPol.IndividualPolicyCode),prdet.Amount)/100) *prdet.Amount)) TOTALPREMIUM,

           -- TOTALPREMIUM,

            GETUPRRETENTIONPERCENT(nvl(Pol.OWNERCODE,IndPol.OWNERCODE),nvl(Pol.PolicyCode,IndPol.IndividualPolicyCode),IM.Policytype) RETENTIONPERCENT,
            (case when nvl(Pol.OWNERCODE,IndPol.OWNERCODE) IN (1,5,7,8) then
                'NEXTCARE'
            when nvl(Pol.OWNERCODE,IndPol.OWNERCODE) =4 then --
                        'ESDB'
            when nvl(Pol.OWNERCODE,IndPol.OWNERCODE) =11 then --
                        'FMC'
            else
                'NGI' end)
            TREATYTYPENAME,

            GETUPRAMOUNT(prdet.BENEFITCODE,nvl(Pol.OWNERCODE,IndPol.OWNERCODE),nvl(Pol.PolicyCode,IndPol.IndividualPolicyCode),IM.Policytype,prdet.AMOUNT)
            --round(( mpol.UPRAMOUNT / decode(INSUREDDAYS,0,365,INSUREDDAYS))
            --*round(to_Date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') - to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')),2)

             UPRAMOUNT,0 COSTPAYABLE,
            round(to_Date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') - to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')) UPRDAYS,
            GET_UPRERTPERCENTAGE(IM.Policytype,nvl(Pol.PolicyCode,IndPol.IndividualPolicyCode),prdet.Amount) COMMPERCENTAGE,
            mpol.MEMBERSTARTDATE INCEPTIONDATE,mpol.POLICYSTARTDDATE,mpol.MEMBERENDDATE,mpol.POLICYENDDDATE,
            nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE) EXPIRYDATE,
            nvl(org.Short_Name,'HDO') Short_Name,nvl(Pol.PolicyName,IndPol.POLICYNAME) PolicyName,
            prdet.Amount Grosspremium
            from (select member_code,policycode,category_code,Policytype,memberpolicycode,status,CARDID from im_members) IM
            join im_memberpolicy mpol on mpol.membercode=IM.member_code and im.policycode=mpol.policycode and im.category_code=mpol.categorycode
            join (select prdet.memberpolicycode,prdet.BenefitCode,sum(prdet.PREMIUM_VALUE) Amount from IM_MEMBERPOLICYPREMIUMDTL prdet group by prdet.memberpolicycode,prdet.BenefitCode) prdet on mpol.memberpolicycode=prdet.memberpolicycode
            left  join  IM_Policy Pol on Pol.PolicyCode=IM.PolicyCode and IM.Policytype=1
            left  join  IM_INDIVIDUALPOLICY IndPol on IndPol.IndividualPolicyCode=IM.PolicyCode and IM.Policytype=2
            left join Im_agents agnt on agnt.AgentCode=nvl(Pol.AgentCode,IndPol.AgentCode)
            left join Im_Brokers Bro on Bro.BrokerCode=nvl(Pol.BrokerCode,IndPol.BrokerCode)
            left join HR_ORGANIZATIONS_D org on org.ORGANIZATIONS_CODE=nvl(Pol.BRANCHCODE,nvl(IndPol.BRANCHCODE,nvl(Bro.BranchCode,agnt.BranchCode)))
            where nvl(mpol.MEMBERSTARTDATE,mpol.POLICYSTARTDDATE) is not null and (IM.status=0 or to_date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR')>to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')) and to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') between to_date(mpol.MEMBERSTARTDATE,'DD/MM/RRRR') and to_date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') and IM.memberpolicycode is not null;

        end;

  FOR DW IN (
                   select rownum MatrixCode,Com.* from (
                   select FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,sum(Amount) Amount,RISHARE from
                   (
                   select 'M16' FormulaCode,'UPR' Description,to_char(ADATAWHAREHOUSEROW.ENDDATE ,'RRRR')  YearName,to_char(ADATAWHAREHOUSEROW.ENDDATE,'MM') MonthName,
                   --Decode(mpol.BILLINGTYPE,0,'SLS',1,'BRO','COD') SCH,
                   --NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
                   decode(mpol.BILLINGTYPE,1,'BRO',1,'SLS',3,'SLS','COD') SCH,
                   decode( mpol.Policytype,1,'Corporate',2,'Individual') CustomerType,
                   nvl(mpol.Short_Name,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,
                   --round(( mpol.UPRAMOUNT / decode(INSUREDDAYS,0,365,INSUREDDAYS))
                   --*round(to_Date(nvl(mpol.MEMBERENDDATE,mpol.POLICYENDDDATE),'DD/MM/RRRR') - to_date(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')),2) Amount,
                   UPRAMOUNT Amount,
                   0 RISHARE
                   from UPR_DETAILLIST mpol  where DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY
                   )
                group by FormulaCode,Description,YearName,MonthName,SCH,CustomerType,BRN,PRO,LOB,CST,DEP,RISHARE  having sum(Amount)<>0) Com
            )

            loop

            if(Dw.Amount=0) then continue ;end if;

                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

    end if;


    if(ADATAWHAREHOUSEROW.EXTRACTIONTYPE=8) then --Outstanding Claims


            BEGIN

                L_COUNT := 0;
                DELETE FROM IM_DWOUTSTANDING_RPT WHERE TO_DATE(REPORTENDDATE,'DD/MM/YYYY') = TO_DATE(SYSDATE,'DD/MM/YYYY');
                COMMIT;
                SELECT COUNT(*) INTO L_COUNT FROM IM_DWOUTSTANDING_RPT WHERE TO_DATE(REPORTENDDATE,'DD\MM\YYYY') = TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD\MM\YYYY');

                IF L_COUNT = 0 THEN


                L_RULES := SF_RESUBMISSIONAMOUNT_FNC(TO_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD\MM\YYYY'),TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD\MM\YYYY'));

                INSERT INTO IM_DWOUTSTANDING_RPT(PROVIDERCODE,MEMBERCODE,POLICYCODE,CATEGORYCODE,MEMBERPOLICYCODE,OUTSTANDINGAMOUNT,REPORTDATE,
                TRANSACTIONDATE,TREATMENTSTARTDATE,REPORTSTARTDATE,REPORTENDDATE)
                SELECT
                PROVIDER_CODE PROVIDERCODE,MEMBER_cODE MEMBERCODE,POLICYCODE,CATEGORYCODE,MEMBERPOLICYCODE,
                OSAMOUNT OUTSTANDINGAMOUNT,TO_DATE(SYSDATE,'DD\MM\YYYY') REPORTDATE,TRANSACTIONDATE,TREATMENTSTARTDATE,
                TO_DATE(ADATAWHAREHOUSEROW.STARTDATE,'DD\MM\YYYY'),TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD\MM\YYYY')
                FROM (

                -- CLAIMS PROCESSED NOT PAID
                SELECT (DECODE(CLAIM_STATUS,1,REQUEST_AMOUNT,2,APPROVED_AMOUNT)) OSAMOUNT,PROVIDER_CODE,MEMBER_CODE,POLICYCODE,
                CATEGORY_CODE CATEGORYCODE,MEMBERPOLICYCODE,TRANSACTIONDATE,ENCOUNTER_START_DATE TREATMENTSTARTDATE
                FROM IM_CLAIM_PROCESS_HEADER  RPT WHERE
                TO_DATE(LASTMODIFIEDON,'DD/MM/RRRR') <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') AND
                TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR') <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                AND  ACR_SERIAL_NO IS NULL AND REQUEST_TYPE = 1
                AND NVL(ISRESUBMISSION,0) = 0 AND CLAIM_CODE NOT IN
                (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
                (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING WHERE REFDATE <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')))

                UNION ALL

                 -- CLAIMS PROCESSED NOT PAID
                SELECT REQUEST_AMOUNT OSAMOUNT,PROVIDER_CODE,MEMBER_CODE,POLICYCODE,
                CATEGORY_CODE CATEGORYCODE,MEMBERPOLICYCODE,TRANSACTIONDATE,ENCOUNTER_START_DATE TREATMENTSTARTDATE
                FROM IM_CLAIM_PROCESS_HEADER  RPT WHERE
                TO_DATE(LASTMODIFIEDON,'DD/MM/RRRR') > TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') AND
                TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR')<= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                AND  ACR_SERIAL_NO IS NULL AND REQUEST_TYPE = 1
                AND NVL(ISRESUBMISSION,0) = 0 AND CLAIM_CODE NOT IN
                (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
                (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING WHERE REFDATE <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') ))


                UNION ALL
                -- CLAIMS PROCESSED NOT PAID
                SELECT (DECODE(CLAIM_STATUS,2,APPROVED_AMOUNT)) OSAMOUNT,PROVIDER_CODE,MEMBER_CODE,POLICYCODE,
                CATEGORY_CODE CATEGORYCODE,MEMBERPOLICYCODE,TRANSACTIONDATE,ENCOUNTER_START_DATE TREATMENTSTARTDATE
                FROM IM_CLAIM_PROCESS_HEADER  RPT WHERE
                TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR') <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                AND  ACR_SERIAL_NO IS NULL  AND REQUEST_TYPE = 1
                AND NVL(FINANCE,0) = 0 AND NVL(MEDPOSTINGDONE,0) = 0
                AND NVL(ISRESUBMISSION,0) = 1 AND CLAIM_STATUS = 2 AND CLAIM_CODE NOT IN
                (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
                (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING))

                UNION ALL
                -- PAPER CLAIM PROCESSED NOT PAID
                SELECT  (APPROVED_AMOUNT) OSAMOUNT,PROVIDER_CODE,MEMBER_CODE,POLICYCODE,
                CATEGORY_CODE CATEGORYCODE,MEMBERPOLICYCODE,TRANSACTIONDATE,ENCOUNTER_START_DATE
                FROM IM_CLAIM_PROCESS_HEADER  RPT WHERE
                TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR') <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                AND  ACR_SERIAL_NO IS NULL   AND REQUEST_TYPE IN (2)
                AND NVL(FINANCE,0) = 0 AND NVL(MEDPOSTINGDONE,0) = 0  AND CLAIM_STATUS IN (2,3)
                AND  NVL(ISRESUBMISSION,0) = 0  AND CLAIM_CODE NOT IN
                (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
                (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING WHERE REFDATE <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') ))

                UNION ALL
                -- RESUBMISSION OUTSTANDING
                SELECT OUTSTANDINGAMOUNT OSAMOUNT,PROVIDERCODE PROVIDER_CODE,MEMBERCODE,POLICYCODE,
                CATEGORYCODE,MEMBERPOLICYCODE,TRANSACTIONDATE,TREATMENTSTARTDATE FROM IM_DWRESUBMISSION_CLAIMS

                UNION ALL
                -- ECLAIM TABLE PENDING
                SELECT  (CLAIM_NET) OSAMOUNT,IPL.PROVIDERCODE PROVIDER_CODE,IMP.MEMBERCODE,IMP.POLICYCODE,
                IMP.CATEGORYCODE,IMP.MEMBERPOLICYCODE,EC.TRANSACTION_DATE TRANSACTIONDATE,EC.ENCOUNTER_START TREATMENTSTARTDATE FROM ECLAIMS EC
                JOIN IM_CORDPRINT IMC ON UPPER(TRIM(REPLACE(IMC.CARDNO,' ')))=UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ','')))
                JOIN IM_MEMBERPOLICY IMP ON IMP.MEMBERPOLICYCODE = IMC.MEMBERPOLICYCODE
                JOIN IM_PROVIDER_LICENCES IPL ON IPL.OTHERLICNECEID = EC.SENDER_ID
                JOIN IM_PROVIDERS PRO ON PRO.PROVIDERCODE = IPL.PROVIDERCODE
                WHERE SYS_CLAIM_ID NOT IN(SELECT MAP_VALUE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE IS NOT NULL) AND
                SYS_CLAIM_STATUS IN (-1) and
                TO_DATE(TRANSACTION_DATE,'DD/MM/RRRR') <= TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')
                ) CPH;
                COMMIT;
              END IF;
            END;

            FOR DW IN (
            SELECT ROWNUM MATRIXCODE,TST.* FROM (
            SELECT FORMULACODE,DESCRIPTION,YEARNAME,MONTHNAME,SCH,CUSTOMERTYPE,BRN,PRO,LOB,CST,DEP,
            SUM(AMOUNT) AMOUNT,Sum(RISHARE) RISHARE,OWNERCODE
            FROM (
            SELECT  'M04' FORMULACODE,'OUTSTANDING CLAIMS' DESCRIPTION,TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'RRRR')  YEARNAME,
            TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'MM') MONTHNAME,
            NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)) SCH,
            --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD') SCH,
            --DECODE(POL.BILLINGTYPE ,0,'BRO',1,'SLS','COD') SCH,
            DECODE(NVL(M.TYPEE,MEM.POLICYTYPE),1,'CORPORATE',2,'INDIVIDUAL') CUSTOMERTYPE,
            NVL(ORG.SHORT_NAME,'HDO') BRN,'MDL' PRO,'MDC' LOB,'NLF' CST,'MED' DEP,SUM(A.OUTSTANDINGAMOUNT) AMOUNT,
            Nvl(POL.OWNERCODE,INDPOL.OWNERCODE) OWNERCODE,
            GETOUTSTANDINGRISHARE(NVL(POL.OWNERCODE,INDPOL.OWNERCODE),NVL(POL.POLICYCODE,INDPOL.INDIVIDUALPOLICYCODE),
            NVL(M.TYPEE,MEM.POLICYTYPE),SUM(A.OUTSTANDINGAMOUNT)) RISHARE
            FROM IM_DWOUTSTANDING_RPT A
            LEFT JOIN IM_MEMBERPOLICY M ON M.MEMBERCODE=A.MEMBERCODE AND A.CATEGORYCODE=M.CATEGORYCODE AND A.POLICYCODE=M.POLICYCODE
            LEFT JOIN IM_MEMBERS MEM ON MEM.MEMBER_CODE=A.MEMBERCODE
            LEFT  JOIN  IM_POLICY POL ON POL.POLICYCODE=NVL(M.POLICYCODE,A.POLICYCODE) AND NVL(M.TYPEE,MEM.POLICYTYPE)=1
            LEFT  JOIN  IM_INDIVIDUALPOLICY INDPOL ON INDPOL.INDIVIDUALPOLICYCODE=NVL(M.POLICYCODE,A.POLICYCODE) AND NVL(M.TYPEE,MEM.POLICYTYPE)=2
            LEFT JOIN IM_AGENTS AGNT ON AGNT.AGENTCODE=NVL(POL.AGENTCODE,INDPOL.AGENTCODE)
            LEFT JOIN IM_BROKERS BRO ON BRO.BROKERCODE=NVL(POL.BROKERCODE,INDPOL.BROKERCODE)
            LEFT JOIN HR_ORGANIZATIONS_D ORG ON ORG.ORGANIZATIONS_CODE=NVL(POL.BRANCHCODE,NVL(INDPOL.BRANCHCODE,NVL(BRO.BRANCHCODE,AGNT.BRANCHCODE)))
            WHERE TO_DATE(A.REPORTENDDATE,'DD/MM/RRRR')  = TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR') AND A.MEMBERCODE IS NOT NULL
            GROUP BY
            --Decode(nvl(Pol.BILLINGTYPE,IndPol.BILLINGTYPE),0,'SLS',1,'BRO','COD'),
            NVL(POL.OWNERCODE,INDPOL.OWNERCODE),NVL(M.TYPEE,MEM.POLICYTYPE),Nvl(POL.POLICYCODE,INDPOL.INDIVIDUALpolicycode),
            NVL(get_dwbillingtype_fnc(POL.policycode,1),get_dwbillingtype_fnc(INDPOL.INDIVIDUALpolicycode,2)),
            TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'RRRR') ,TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'MM'),NVL(M.TYPEE,MEM.POLICYTYPE),ORG.SHORT_NAME
            HAVING SUM(A.OUTSTANDINGAMOUNT)<>0
            )
            GROUP BY FORMULACODE,DESCRIPTION,YEARNAME,MONTHNAME,SCH,CUSTOMERTYPE,BRN,PRO,LOB,CST,DEP,OWNERCODE
            ) TST
            )

            loop

              if(DW.Amount=0) then continue ; end if;

                     L_MATRIXCOUNT := DW.MatrixCode;
                     INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , DW.MatrixCode,
                         DW.FormulaCode ,DW.DESCRIPTION, DW.YearName ,DW.MonthName,DW.SCH,DW.CUSTOMERTYPE,
                        DW.BRN, DW.PRO, DW.LOB, DW.CST, DW.DEP, DW.AMOUNT, DW.RISHARE, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);

            end loop;

           -- SELECT (SELECT SUM(OUTSTANDINGAMOUNT) FROM TABLE(SF_HNMFINANCEOUTSTANDING_LIST('ALL',TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')))) -
            --(SELECT SUM(OUTSTANDINGAMOUNT) FROM IM_DWOUTSTANDING_RPT WHERE TO_DATE(REPORTENDDATE,'DD/MM/RRRR')  = TO_DATE(ADATAWHAREHOUSEROW.ENDDATE,'DD/MM/RRRR')) INTO L_HDOAMOUNT FROM DUAL;

IF L_HDOAMOUNT > 0 THEN

UPDATE IM_DATAWAREHOUSE_DTL SET AMOUNT = AMOUNT + L_HDOAMOUNT WHERE DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY
AND BRN = 'HDO' AND SCH = 'SLS'  AND CUSTOMERTYPE = 'CORPORATE';

UPDATE IM_DATAWAREHOUSE_DTL SET RISHARE =  ROUND((2.15/100)* (AMOUNT) ,2) WHERE DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY
AND BRN = 'HDO' AND SCH = 'SLS'  AND CUSTOMERTYPE = 'CORPORATE';


/*
  INSERT INTO IM_DATAWAREHOUSE_DTL D
                     (D.DATAWAREHOUSE_DTL_CODE, D.DATAWAREHOUSE_EXT_CODE, D.MATRIXCODE,
                      D.FORMULACODE, D.DESCRIPTION, D.DWYEAR, D.DWMONTH, D.SCH, D.CUSTOMERTYPE,
                      D.BRN, D.PRO, D.DWLOB, D.CST, D.DEP, D.AMOUNT, D.RISHARE, D.CREATEDON, D.SERIALNO,
                      D.CREATEDBY, D.LASTMODIFIEDON, D.LASTMODIFIEDBY, D.COMPANYCODE, D.LOCATIONCODE )
                        VALUES
                         ((select nvl(max(DATAWAREHOUSE_DTL_CODE),100000000000000000)+1 from IM_DATAWAREHOUSE_DTL), DWE_PRIMARY_KEY , L_MATRIXCOUNT + 1,
                         'M04' ,'OUTSTANDING CLAIMS', TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'RRRR') ,TO_CHAR(ADATAWHAREHOUSEROW.ENDDATE,'MM'),
                         'SLS','CORPORATE','HDO', 'MDL', 'MDC','NLF', 'MED', L_HDOAMOUNT,0, SYSDATE,  (select nvl(max(SERIALNO),0)+1 from IM_DATAWAREHOUSE_DTL),
                        '100000000000000002', SYSDATE, '100000000000000002',1,1);*/

END IF;

IF L_HDOAMOUNT < 0 THEN
    UPDATE IM_DATAWAREHOUSE_DTL SET AMOUNT = AMOUNT + L_HDOAMOUNT WHERE DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY
    AND BRN = 'HDO' AND SCH = 'SLS'  AND CUSTOMERTYPE = 'CORPORATE';

UPDATE IM_DATAWAREHOUSE_DTL SET RISHARE =  ROUND((2.15/100)* (AMOUNT) ,2) WHERE DATAWAREHOUSE_EXT_CODE = DWE_PRIMARY_KEY
AND BRN = 'HDO' AND SCH = 'SLS'  AND CUSTOMERTYPE = 'CORPORATE';
END IF;

end if;

COMMIT;
RETURN 'OK';

END;

end;
/

