CREATE OR REPLACE PACKAGE av_nxtproductiondata_upload AS

  FUNCTION IM_NXTCHECKMEMBEREXCEL_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

  FUNCTION IM_NXTUPLOADMEMBER_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

END av_nxtproductiondata_upload;
/

CREATE OR REPLACE PACKAGE BODY av_nxtproductiondata_upload AS

FUNCTION IM_NXTCHECKMEMBEREXCEL_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);
L_PRICE NUMBER;
L_COUNT NUMBER;
L_RECORDCOUNT NUMBER;
L_POLICYCOUNT NUMBER;
L_POLICYID NVARCHAR2(100);L_RESULT NUMBER;L_RULES NVARCHAR2(1000);
L_POLICYCODE NUMBER;L_CATEGORYCOUNT NUMBER;
L_POLICYCATEGORYCOUNT NUMBER;L_CATEGORYCODE NUMBER;
L_TREATYCOUNT NUMBER;L_BATCHNO NUMBER;
L_TOTALROWS NUMBER;L_MEMBERROWS NUMBER;
L_CARDCOUNT NUMBER;L_SUBGROUPCOUNT NUMBER;
BEGIN
L_RECORDCOUNT := 0;

DELETE FROM IM_EUT_NXT_PRODUCTION_TEMP;
COMMIT;
DELETE FROM IM_NEXTCAREMEMBERCARD_DTL WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY;
COMMIT;
INSERT INTO IM_EUT_NXT_PRODUCTION_TEMP SELECT * FROM IM_EUT_NEXTCARE_PRODUCTION;
COMMIT;
INSERT INTO IM_NEXTCAREMEMBERCARD_DTL SELECT H.*,P_PRIMKEY FROM IM_EUT_NEXTCARE_PRODUCTION H;
COMMIT;
DELETE FROM  INSUPLOADERRORLOG WHERE  REFERENCEKEY = P_PRIMKEY;
COMMIT;
DELETE FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY)));
DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY)));
DELETE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
UPDATE IM_MEMBERPOLICY SET REINSDELMEMBERPOLICY = NULL WHERE REINSDELMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
DELETE FROM IM_REINSADDMEMBERPREDETL WHERE REINSADDMEMBERDETCODE IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
DELETE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY);
DELETE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY;
COMMIT;
BEGIN
L_RULES:=IM_NXTUPLOADMEMBER_DATA(P_PRIMKEY,L_RESULT);
END;
IF L_RESULT = 2 THEN
DELETE FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY)));
DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY)));
DELETE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
UPDATE IM_MEMBERPOLICY SET REINSDELMEMBERPOLICY = NULL WHERE REINSDELMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
DELETE FROM IM_REINSADDMEMBERPREDETL WHERE REINSADDMEMBERDETCODE IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY));
DELETE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY);
DELETE FROM IM_REINS_ADDMEMBERPOLICY WHERE NEXTCAREPRODHDRCODE = P_PRIMKEY;
COMMIT;
END IF;
P_RESULT := L_RESULT;
RETURN L_RULES;
EXCEPTION WHEN OTHERS THEN
P_RESULT := L_RESULT;
L_ERROR:= SQLERRM;
INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_RECORDCOUNT ,L_ERROR);
COMMIT;
RETURN L_ERROR;
END;

FUNCTION IM_NXTUPLOADMEMBER_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);
L_POLICYID VARCHAR2(100);L_POLICYCODE NUMBER;L_POLICYNAME NVARCHAR2(500);L_GROUPCODE NUMBER;
L_ADDMEMBERPOLICYCODE NUMBER;L_ADDMEMBERSNO NUMBER;
L_STARTDATE DATE;L_ENDDATE DATE;L_MARITALSTATUS NUMBER;
L_MEMBERDETCODE NUMBER;L_MEMBERDETSNO NUMBER;L_EXISTMEMBER NUMBER;
L_PREMIUMDETCODE NUMBER;L_PREMIUMDETSNO NUMBER;L_MEMPOLICYCODE NUMBER;
L_MEMBERID NUMBER;L_CATEGORYCODE NUMBER;L_MEMPOLICYCOUNT NUMBER;
L_MEMBERCODE NUMBER;L_MEMBERSNO NUMBER;L_SUBGROUPCODE NUMBER;
L_MEMBERPOLICYCODE NUMBER;L_MEMBERPOLICYSNO NUMBER;L_CARDCOUNT NUMBER;
L_MEMBERNAME VARCHAR2(1000);L_MEMBERCOUNT NUMBER;L_MEMCODE NUMBER;
L_GENDER NUMBER;L_MEMBERRELATION NUMBER;L_NATIONALITY NUMBER;
L_WORKLOCATION NUMBER;L_RESIDENTLOCATION NUMBER;L_ADDMEMBERPOLICYCOUNT NUMBER;
L_EMIRATE NUMBER;L_SALARYBAND NUMBER;L_TREATYCOUNT NUMBER;
L_COMMISSION NUMBER;L_ENTITYTYPE NUMBER;L_POLICYCATEGORYCOUNT NUMBER;
L_POLICYCOUNT NUMBER;L_SUBGROUPCOUNT NUMBER;L_CATEGORYCOUNT NUMBER;
BEGIN

    DELETE FROM IM_NEXTCAREMEMBERCARD_DTL_TEMP;
    COMMIT;
    INSERT INTO IM_NEXTCAREMEMBERCARD_DTL_TEMP SELECT * FROM IM_NEXTCAREMEMBERCARD_DTL;
    COMMIT;
    L_MEMBERID := 0;
    FOR NXTDET IN(SELECT  * FROM IM_NEXTCAREMEMBERCARD_DTL_TEMP WHERE  NEXTCAREPRODHDRCODE = P_PRIMKEY ORDER BY GROSSPREMIUM DESC) LOOP
    L_MEMBERID := L_MEMBERID + 1;
    L_POLICYID := NXTDET.EXTERNALREF;
    L_ERROR := NXTDET.CARDNUMBER;
    L_SUBGROUPCODE := 0;
    IF To_Date(NXTDET.ISSUEDATE,'MM/DD/RRRR') < To_Date('09/16/2016','MM/DD/RRRR')  THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Endoresment Date Should not be less than 16/09/2016');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Relation Type '||Upper(NXTDET.DEPENDENCY)||' not found in the System ! Please make sure the Relation is available in the system.';
    END IF;


    SELECT Count(*) INTO L_POLICYCOUNT FROM IM_POLICY  WHERE POLICYID = L_POLICYID;

    SELECT Count(*) INTO L_SUBGROUPCOUNT FROM IM_GROUPS  WHERE UPPER(TRIM(GROUP_NAME)) = Upper(Trim(NXTDET.CONTRACTSHORTNAME));

    SELECT Count(*) INTO L_CATEGORYCOUNT FROM IM_CATEGORIES WHERE  CATEGORY_ID = NXTDET.CATEGORY;
    IF L_CATEGORYCOUNT = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S,No :' || L_MEMBERID,'Category '||NXTDET.CATEGORY||' does not exists in the system . Please check the Category ID');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Category does not exists in the system . Please check the Category ID.';
    ELSE
      SELECT CATEGORY_CODE INTO L_CATEGORYCODE FROM IM_CATEGORIES WHERE  CATEGORY_ID = NXTDET.CATEGORY;
    END IF;

    IF L_SUBGROUPCOUNT = 0 AND NXTDET.CONTRACTSHORTNAME IS NOT NULL AND NXTDET.CONTRACTSHORTNAME <> '0' THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Sub Group '||NXTDET.CONTRACTSHORTNAME||' does not exists in the system . Please check the subgroup name');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Sub Group does not exists in the system . Please check the subgroup name.';
    END IF;

    IF L_POLICYCOUNT > 0 THEN
      SELECT POLICYCODE,POLICYNAME,STARTDATE,ENDDATE,GROUPCODE INTO L_POLICYCODE,L_POLICYNAME,L_STARTDATE,L_ENDDATE,L_GROUPCODE
      FROM IM_POLICY WHERE   POLICYID = NXTDET.EXTERNALREF;

      SELECT POLICYCODE INTO L_POLICYCODE FROM IM_POLICY WHERE   POLICYID = L_POLICYID;
      SELECT Count(*) INTO L_POLICYCATEGORYCOUNT FROM IM_POLICY_CATEGORYDTL WHERE POLICYCODE = L_POLICYCODE AND CATEGORYCODE = L_CATEGORYCODE;
      IF L_POLICYCATEGORYCOUNT = 0 THEN
        INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
        ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID,'Category ID '||NXTDET.CATEGORY||' Not linked for the policy '||L_POLICYID||'. Please correct the category ID or Add the Category for this policy .');
        COMMIT;
        P_RESULT := 2;
        RETURN 'Category ID Not linked for this policy. Please correct the category ID or Add the Category for this policy.';
      END IF;
      SELECT Count(*) INTO L_TREATYCOUNT FROM IM_POLICY_INSURER_DTL WHERE POLICYCODE = L_POLICYCODE;
      IF L_TREATYCOUNT = 0 THEN
        INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
        ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Treaty not attached for the Policy '||L_POLICYID||'. Please attach the treaty and try to upload again .');
        COMMIT;
        P_RESULT := 2;
        RETURN 'Treaty not attached for this Policy. Please attach the treaty and try to upload again .';
      END IF;
    ELSE
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Policy ID '||L_POLICYID||' Cannot be found in the System ! Please make sure the following policy ID is available in the system '|| L_POLICYID ||'.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Policy ID Cannot be found in the System ! Please make sure the following policy ID is available in the system '|| L_POLICYID ||'.';
    END IF;

    SELECT Count(*) INTO L_GENDER FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(NXTDET.GENDER) AND (CATEGORY) = ('Gender') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_GENDER = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Gender Type '||Upper(NXTDET.GENDER)||' not found in the System ! Please make sure the Gender is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Gender Type '||Upper(NXTDET.GENDER)||' not found in the System ! Please make sure the Gender is available in the system.';
    ELSE
      SELECT CONSTANTVALUE INTO L_GENDER FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(NXTDET.GENDER) AND (CATEGORY) = ('Gender') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;

    SELECT Count(*) INTO L_MEMBERRELATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Decode(Upper(NXTDET.DEPENDENCY),'PRINCIPAL','SELF',Upper(NXTDET.DEPENDENCY)) AND Upper(CATEGORY) = Upper('MEMBERRELATION') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_MEMBERRELATION = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Relation Type '||Upper(NXTDET.DEPENDENCY)||' not found in the System ! Please make sure the Relation is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Relation Type '||Upper(NXTDET.DEPENDENCY)||' not found in the System ! Please make sure the Relation is available in the system.';
    ELSE
       SELECT CONSTANTVALUE INTO L_MEMBERRELATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Decode(Upper(NXTDET.DEPENDENCY),'PRINCIPAL','SELF',Upper(NXTDET.DEPENDENCY)) AND Upper(CATEGORY) = Upper('MEMBERRELATION') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;

    SELECT Count(*) INTO L_MARITALSTATUS FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(NXTDET.MARITALSTATUS) AND Upper(CATEGORY) = Upper('MARITAL_STATUS') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_MARITALSTATUS = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Marital Status  '||Upper(NXTDET.MARITALSTATUS)||' not found in the System ! Please make sure the Marital Status is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Entity Type  '||Upper(NXTDET.MARITALSTATUS)||' not found in the System ! Please make sure the Marital Status is available in the system.';
    ELSE
      SELECT MAX(CONSTANTVALUE) INTO L_MARITALSTATUS FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(NXTDET.MARITALSTATUS) AND Upper(CATEGORY) = Upper('MARITAL_STATUS') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_ADDMEMBERPOLICYCOUNT FROM IM_REINS_ADDMEMBERPOLICY WHERE POLICYCODE = L_POLICYCODE AND NEXTCAREPRODHDRCODE = P_PRIMKEY;

    IF L_ADDMEMBERPOLICYCOUNT = 0 THEN
      SELECT Nvl(Max(REINSADDMEMBERPOLICYCODE),100000000000000000) + 1 INTO L_ADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_ADDMEMBERSNO FROM IM_REINS_ADDMEMBERPOLICY;
      INSERT INTO IM_REINS_ADDMEMBERPOLICY(NEXTCAREPRODHDRCODE,REINSADDMEMBERPOLICYCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,POLICYCODE,POLICYSTARTDDATE,POLICYENDDDATE,EFFECTIVEDATE,AUTHORIZEDSTATUS,SOURCETYPE)VALUES
      (P_PRIMKEY,L_ADDMEMBERPOLICYCODE,L_ADDMEMBERSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,100000000000000002,1,1,
      L_POLICYCODE,L_STARTDATE,L_ENDDATE,SYSDATE,1,2);
      COMMIT;
    ELSE
      SELECT REINSADDMEMBERPOLICYCODE INTO L_ADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE POLICYCODE = L_POLICYCODE AND NEXTCAREPRODHDRCODE = P_PRIMKEY;
    END IF;


    SELECT Nvl(Max(REINSADDMEMBERDETCODE),100000000000000000) + 1 INTO L_MEMBERDETCODE FROM IM_REINSADDMEMBERDET;
    SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_MEMBERDETSNO FROM IM_REINSADDMEMBERDET;

    SELECT Nvl(Max(MEMBER_CODE),100000000000000000) + 1 INTO L_MEMBERCODE FROM IM_REINS_MEMBERS;
    SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_MEMBERSNO FROM IM_REINS_MEMBERS;


    SELECT CATEGORY_CODE INTO L_CATEGORYCODE FROM IM_CATEGORIES WHERE CATEGORY_ID = NXTDET.CATEGORY;

    SELECT Count(*) INTO L_MEMBERCOUNT FROM  IM_REINS_MEMBERS WHERE CARDNO = NXTDET.CARDNUMBER;

    IF L_MEMBERCOUNT = 0 THEN
        L_MEMBERNAME := NXTDET.FIRSTNAME;
    ELSE
        SELECT Max(MEMBER_CODE),Max(FIRST_NAME) INTO L_MEMCODE,L_MEMBERNAME FROM  IM_REINS_MEMBERS WHERE CARDNO = NXTDET.CARDNUMBER;
        L_MEMBERCODE := L_MEMCODE;
    END IF;

    IF NXTDET.GROSSPREMIUM > 0 THEN
      INSERT INTO IM_REINSADDMEMBERDET(REINSADDMEMBERPOLICYCODE,REINSADDMEMBERDETCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,MEMBERID,MEMBERNAME,DATE_OF_BIRTH,GENDERCODE,MARITALSTATUSCODE,CATEGORYCODE,
      NATIONALITYCODE,INCEPTION_DATE,FMCCARDNO,PREMIUMTYPE,MEMBERRELATIONCODE)VALUES
      (L_ADDMEMBERPOLICYCODE,L_MEMBERDETCODE,L_MEMBERDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,L_MEMBERID,L_MEMBERNAME,SYSDATE-365,0,0,L_CATEGORYCODE,172,To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),NXTDET.CARDNUMBER,1,L_MEMBERRELATION);
      COMMIT;
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,NXTDET.GROSSPREMIUM,0,NXTDET.GROSSPREMIUM,'Base Premium',NULL);
      COMMIT;
    END IF;
    IF NXTDET.GROSSPREMIUM < 0 THEN
      INSERT INTO IM_REINSADDMEMBERDET(REINSADDMEMBERPOLICYCODE,REINSADDMEMBERDETCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,MEMBERID,MEMBERNAME,DATE_OF_BIRTH,GENDERCODE,MARITALSTATUSCODE,CATEGORYCODE,
      NATIONALITYCODE,INCEPTION_DATE,FMCCARDNO,PREMIUMTYPE,MEMBERRELATIONCODE)VALUES
      (L_ADDMEMBERPOLICYCODE,L_MEMBERDETCODE,L_MEMBERDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,L_MEMBERID,L_MEMBERNAME,SYSDATE-365,0,0,L_CATEGORYCODE,172,To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),NXTDET.CARDNUMBER,2,L_MEMBERRELATION);
      COMMIT;
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,Abs(NXTDET.GROSSPREMIUM),0,Abs(NXTDET.GROSSPREMIUM),'Base Premium',NULL);
      COMMIT;
    END IF;
    IF NXTDET.GROSSPREMIUM = 0 THEN
      INSERT INTO IM_REINSADDMEMBERDET(REINSADDMEMBERPOLICYCODE,REINSADDMEMBERDETCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,MEMBERID,MEMBERNAME,DATE_OF_BIRTH,GENDERCODE,MARITALSTATUSCODE,CATEGORYCODE,
      NATIONALITYCODE,INCEPTION_DATE,FMCCARDNO,PREMIUMTYPE,MEMBERRELATIONCODE)VALUES
      (L_ADDMEMBERPOLICYCODE,L_MEMBERDETCODE,L_MEMBERDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,L_MEMBERID,L_MEMBERNAME,SYSDATE-365,0,0,L_CATEGORYCODE,172,To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),NXTDET.CARDNUMBER,2,L_MEMBERRELATION);
      COMMIT;
    END IF;
    L_SUBGROUPCODE := NULL;
    IF L_SUBGROUPCOUNT = 0 AND NXTDET.CONTRACTSHORTNAME IS NOT NULL AND NXTDET.CONTRACTSHORTNAME <> '0' THEN
       SELECT Max(GROUP_CODE) INTO L_SUBGROUPCODE FROM IM_GROUPS WHERE Upper(Trim(GROUP_NAME)) = Upper(Trim(NXTDET.CONTRACTSHORTNAME));
    END IF;


    SELECT Count(*) INTO L_MEMPOLICYCOUNT FROM IM_MEMBERPOLICY WHERE REINSMEMBERCODE = L_MEMBERCODE AND POLICYCODE = L_POLICYCODE;

    IF L_SUBGROUPCODE = 0 THEN
       L_SUBGROUPCODE := NULL;
    END IF;
    L_ERROR := NXTDET.CARDNUMBER || 'A';
    IF L_MEMPOLICYCOUNT = 0 AND NXTDET.GROSSPREMIUM > 0 THEN




      /*IF To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR') > To_Date(L_ENDDATE,'MM/DD/RRRR') THEN
          INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
          ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','SNO :' || NXTDET.CARDNUMBER,'Member Start Date Should be less than Policy End Date');
          COMMIT;
          P_RESULT := 2;
          RETURN 'Member Start Date Should be less than Policy End Date';
      ELSIF To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR') < To_Date(L_STARTDATE,'MM/DD/RRRR') THEN
          INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
          ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','SNO :' || NXTDET.CARDNUMBER,'Member Start Date Should be greated than Policy start Date');
          COMMIT;
          P_RESULT := 2;
          RETURN 'Member Start Date Should be greated than Policy start Date';
      END IF;*/


      INSERT INTO IM_MEMBERPOLICY(A_SUBGROUPCODE,MEMBERPOLICYCODE,SERIALNO,REINSMEMBERCODE,POLICYCODE,MEMBERSTARTDATE,MEMBERENDDATE,
      POLICYSTARTDDATE,POLICYENDDDATE,CATEGORYCODE,FINANCEPOSTDONEFORADDITION,FINANCEPOSTDONEFORDELETION,REINSADDMEMBERPOLICY,
      REINSDELMEMBERPOLICY,AGENDER,AMEMBERNAME,GROUPCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,ACARDID,A_CARDID,TYPEE)VALUES
      (L_SUBGROUPCODE,(SELECT Nvl(Max(MEMBERPOLICYCODE),100000000000000000) + 1  FROM IM_MEMBERPOLICY),
      (SELECT Nvl(Max(SERIALNO),0) + 1  FROM IM_MEMBERPOLICY),L_MEMBERCODE,L_POLICYCODE,To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),L_STARTDATE,
      L_ENDDATE,L_CATEGORYCODE,0,0,L_MEMBERDETCODE,NULL,0,L_MEMBERNAME,L_GROUPCODE,SYSDATE,100000000000000002,
      SYSDATE,100000000000000002,100000000000000002,100000000000000002,1,1,NXTDET.CARDNUMBER,NXTDET.CARDNUMBER,1);
      COMMIT;
      SELECT MEMBERPOLICYCODE INTO L_MEMBERPOLICYCODE FROM IM_MEMBERPOLICY  WHERE REINSMEMBERCODE = L_MEMBERCODE AND POLICYCODE = L_POLICYCODE;
      IF L_MEMBERCOUNT = 0 THEN
      INSERT INTO IM_REINS_MEMBERS(PARENT_ID,MEMBER_CODE,SERIALNO,FIRST_NAME,GENDER,CATEGORY_CODE,GROUP_CODE,
      COVERED_FROM_DATE,COVERED_END_DATE,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,INCEPTION_DATE,
      APOLICYID,APOLICYNAME,POLICYCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,CARDNO,CARDID,MEMBERPOLICYCODE)VALUES
      (L_SUBGROUPCODE,L_MEMBERCODE,L_MEMBERSNO,NXTDET.FIRSTNAME,0,L_CATEGORYCODE,L_GROUPCODE,
      To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),
      To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),
      To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),
      L_POLICYID,L_POLICYNAME,L_POLICYCODE,SYSDATE,100000000000000002,SYSDATE,100000000000000002,
      100000000000000002,100000000000000002,1,1,NXTDET.CARDNUMBER,NXTDET.CARDNUMBER,L_MEMBERPOLICYCODE);
      ELSE
      UPDATE IM_REINS_MEMBERS SET MEMBERPOLICYCODE= L_MEMBERPOLICYCODE WHERE MEMBER_CODE = L_MEMBERCODE;
      COMMIT;
      END IF;

      IF NXTDET.GROSSPREMIUM > 0 THEN
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, NXTDET.GROSSPREMIUM, 0,
          NXTDET.GROSSPREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'Base Premium', NULL);
      END IF;
      COMMIT;
    ELSIF L_MEMPOLICYCOUNT > 0 AND NXTDET.GROSSPREMIUM > 0 THEN
        SELECT Count(*) INTO L_EXISTMEMBER FROM IM_MEMBERPOLICY WHERE REINSMEMBERCODE = L_MEMBERCODE AND (REINSADDMEMBERPOLICY IS NOT NULL OR Nvl(FINANCEPOSTDONEFORADDITION,0) = 1)
        AND POLICYCODE = L_POLICYCODE;

        IF L_EXISTMEMBER > 0 AND  NXTDET.GROSSPREMIUM > 0 THEN
            INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
            ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Card No. '||Upper(NXTDET.CARDNUMBER)||' Already added in the Previous Batches  !');
            COMMIT;
            P_RESULT := 2;
            RETURN 'Card No. '||Upper(NXTDET.CARDNUMBER)||' Already added in the Previous Batches  !';
        END IF;

    ELSIF L_MEMPOLICYCOUNT > 0 AND NXTDET.GROSSPREMIUM < 0 THEN

      SELECT Count(*) INTO L_EXISTMEMBER FROM IM_MEMBERPOLICY WHERE REINSMEMBERCODE = L_MEMBERCODE AND (REINSDELMEMBERPOLICY IS NOT NULL OR Nvl(FINANCEPOSTDONEFORDELETION,0) = 1)
      AND POLICYCODE = L_POLICYCODE;

      IF L_EXISTMEMBER > 0 AND  NXTDET.GROSSPREMIUM < 0 THEN
          INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
          ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Card No. '||Upper(NXTDET.CARDNUMBER)||' Already deleted in the Previous Batches  !');
          COMMIT;
          P_RESULT := 2;
          RETURN 'Card No. '||Upper(NXTDET.CARDNUMBER)||' Already deleted in the Previous Batches  !';
      END IF;

      SELECT MEMBERPOLICYCODE INTO  L_MEMPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSMEMBERCODE = L_MEMCODE AND POLICYCODE = L_POLICYCODE;
      IF NXTDET.GROSSPREMIUM < 0 THEN
        FOR MEMPOLICY IN(SELECT * FROM IM_MEMBERPOLICY WHERE MEMBERPOLICYCODE = L_MEMPOLICYCODE) LOOP
          IF Nvl(MEMPOLICY.FINANCEPOSTDONEFORDELETION,0) = 0 THEN
            UPDATE IM_REINS_MEMBERS SET COVERED_END_DATE = To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),EFFECTIVE_END_DATE = To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR')
            WHERE MEMBER_CODE = L_MEMCODE;
            UPDATE IM_MEMBERPOLICY  SET MEMBERENDDATE = To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),REINSDELMEMBERPOLICY=L_MEMBERDETCODE WHERE REINSMEMBERCODE = L_MEMCODE;
            INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
            (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
            VALUES
            ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMPOLICYCODE, 2, Abs(NXTDET.GROSSPREMIUM), 0,
            Abs(NXTDET.GROSSPREMIUM),1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'Base Premium', NULL);
          ELSE
            INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
            ('ID_NEXTCAREPRODUCTIONBATCH',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Card No. '|| NXTDET.CARDNUMBER ||' duplicated. Already deletion done for this Card No.');
            COMMIT;
            P_RESULT := 2;
            RETURN 'Treaty not attached for this Policy. Please attach the treaty and try to upload again .';
          END IF;
        END LOOP;
      END IF;
      COMMIT;
    ELSIF L_MEMPOLICYCOUNT = 0 AND NXTDET.GROSSPREMIUM < 0 THEN

        INSERT INTO IM_MEMBERPOLICY(A_SUBGROUPCODE,MEMBERPOLICYCODE,SERIALNO,REINSMEMBERCODE,POLICYCODE,MEMBERSTARTDATE,MEMBERENDDATE,
        POLICYSTARTDDATE,POLICYENDDDATE,CATEGORYCODE,FINANCEPOSTDONEFORADDITION,FINANCEPOSTDONEFORDELETION,REINSADDMEMBERPOLICY,
        REINSDELMEMBERPOLICY,AGENDER,AMEMBERNAME,GROUPCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
        LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,ACARDID,A_CARDID,TYPEE)VALUES
        (L_SUBGROUPCODE,(SELECT Nvl(Max(MEMBERPOLICYCODE),100000000000000000) + 1  FROM IM_MEMBERPOLICY),
        (SELECT Nvl(Max(SERIALNO),0) + 1  FROM IM_MEMBERPOLICY),L_MEMBERCODE,L_POLICYCODE,To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),L_STARTDATE,
        L_ENDDATE,L_CATEGORYCODE,0,0,L_MEMBERDETCODE,NULL,0,L_MEMBERNAME,L_GROUPCODE,SYSDATE,100000000000000002,
        SYSDATE,100000000000000002,100000000000000002,100000000000000002,1,1,NXTDET.CARDNUMBER,NXTDET.CARDNUMBER,1);
        COMMIT;

        SELECT MEMBERPOLICYCODE INTO L_MEMBERPOLICYCODE FROM IM_MEMBERPOLICY  WHERE REINSMEMBERCODE = L_MEMBERCODE  AND POLICYCODE = L_POLICYCODE;
        IF L_MEMBERCOUNT = 0 THEN
        INSERT INTO IM_REINS_MEMBERS(PARENT_ID,MEMBER_CODE,SERIALNO,FIRST_NAME,GENDER,CATEGORY_CODE,GROUP_CODE,
        COVERED_FROM_DATE,COVERED_END_DATE,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,INCEPTION_DATE,
        APOLICYID,APOLICYNAME,POLICYCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
        LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,CARDNO,CARDID,MEMBERPOLICYCODE)VALUES
        (L_SUBGROUPCODE,L_MEMBERCODE,L_MEMBERSNO,NXTDET.FIRSTNAME,0,L_CATEGORYCODE,L_GROUPCODE,
        To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),
        To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),To_Date(NXTDET.MEMBERENDDATE,'MM/DD/RRRR'),
        To_Date(NXTDET.MEMBERSTARTDATE,'MM/DD/RRRR'),
        L_POLICYID,L_POLICYNAME,L_POLICYCODE,SYSDATE,100000000000000002,SYSDATE,100000000000000002,
        100000000000000002,100000000000000002,1,1,NXTDET.CARDNUMBER,NXTDET.CARDNUMBER,L_MEMBERPOLICYCODE);
        ELSE
        UPDATE IM_REINS_MEMBERS SET MEMBERPOLICYCODE= L_MEMBERPOLICYCODE WHERE MEMBER_CODE = L_MEMBERCODE;
        COMMIT;
        END IF;


        INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
        (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
        VALUES
        ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, Abs(NXTDET.GROSSPREMIUM), 0,
        Abs(NXTDET.GROSSPREMIUM),1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'Base Premium', NULL);
        COMMIT;
    END IF;
    END LOOP;
COMMIT;
AV_GETMAX_REC('IM_MEMBERPOLICY','SERIALNO');
P_RESULT := 1;
RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
COMMIT;
P_RESULT := 2;
--L_ERROR:= SQLERRM;
RETURN L_ERROR;
END;

END av_nxtproductiondata_upload;
/

