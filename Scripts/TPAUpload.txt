CREATE OR REPLACE PACKAGE av_tpaproductiondata_upload AS

  FUNCTION IM_TPACHECKMEMBEREXCEL_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

  FUNCTION IM_TPAUPLOADMEMBER_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

END AV_TPAPRODUCTIONDATA_UPLOAD;
/

CREATE OR REPLACE PACKAGE BODY av_tpaproductiondata_upload AS

FUNCTION IM_TPACHECKMEMBEREXCEL_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);
L_PRICE NUMBER;
L_COUNT NUMBER;
L_RECORDCOUNT NUMBER;
L_POLICYCOUNT NUMBER;
L_POLICYID NVARCHAR2(100);L_RESULT NUMBER;L_RULES NVARCHAR2(1000);
L_POLICYCODE NUMBER;L_CATEGORYCOUNT NUMBER;
L_POLICYCATEGORYCOUNT NUMBER;L_CATEGORYCODE NUMBER;
L_TREATYCOUNT NUMBER;L_BATCHNO NUMBER;
L_TOTALROWS NUMBER;L_MEMBERROWS NUMBER;
L_CARDCOUNT NUMBER;L_SUBGROUPCOUNT NUMBER;
BEGIN
L_RECORDCOUNT := 0;

DELETE FROM IM_EUT_TPA_PRODUCTION_TEMP;
COMMIT;
DELETE FROM IM_TPAPRODUCTIONDTL WHERE TPAPRODCUTIONHDR = P_PRIMKEY;
COMMIT;
INSERT INTO IM_EUT_TPA_PRODUCTION_TEMP SELECT * FROM IM_EUT_TPA_PRODUCTION;
COMMIT;
INSERT INTO IM_TPAPRODUCTIONDTL SELECT H.*,P_PRIMKEY FROM IM_EUT_TPA_PRODUCTION H;
COMMIT;
DELETE FROM  INSUPLOADERRORLOG WHERE  REFERENCEKEY = P_PRIMKEY;
COMMIT;
DELETE FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY)));
COMMIT;
DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY)));
COMMIT;
DELETE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
UPDATE IM_MEMBERPOLICY SET REINSDELMEMBERPOLICY = NULL WHERE REINSDELMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
DELETE FROM IM_REINSADDMEMBERPREDETL WHERE REINSADDMEMBERDETCODE IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
DELETE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY);
COMMIT;
DELETE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY;
COMMIT;
BEGIN
L_RULES:=IM_TPAUPLOADMEMBER_DATA(P_PRIMKEY,L_RESULT);
END;
IF L_RESULT = 2 THEN
DELETE FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY)));
COMMIT;
DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY)));
COMMIT;
DELETE FROM IM_MEMBERPOLICY WHERE REINSADDMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
UPDATE IM_MEMBERPOLICY SET REINSDELMEMBERPOLICY = NULL WHERE REINSDELMEMBERPOLICY IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
DELETE FROM IM_REINSADDMEMBERPREDETL WHERE REINSADDMEMBERDETCODE IN
(SELECT REINSADDMEMBERDETCODE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY));
COMMIT;
DELETE FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY);
COMMIT;
DELETE FROM IM_REINS_ADDMEMBERPOLICY WHERE TPAPRODHDRCODE = P_PRIMKEY;
COMMIT;
COMMIT;
END IF;
P_RESULT := L_RESULT;
RETURN L_RULES;
EXCEPTION WHEN OTHERS THEN
P_RESULT := 2;
L_ERROR:= SQLERRM;
INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_RECORDCOUNT ,L_ERROR);
COMMIT;
RETURN L_ERROR;
END;


FUNCTION IM_TPAUPLOADMEMBER_DATA(P_PRIMKEY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);L_CALCMETHOD NUMBER;
L_POLICYID VARCHAR2(100);L_POLICYCODE NUMBER;L_POLICYNAME NVARCHAR2(500);L_GROUPCODE NUMBER;
L_ADDMEMBERPOLICYCODE NUMBER;L_ADDMEMBERSNO NUMBER;
L_STARTDATE DATE;L_ENDDATE DATE;L_MARITALSTATUS NUMBER;
L_MEMBERDETCODE NUMBER;L_MEMBERDETSNO NUMBER;
L_PREMIUMDETCODE NUMBER;L_PREMIUMDETSNO NUMBER;L_MEMPOLICYCOUNT NUMBER;
L_MEMBERID NUMBER;L_CATEGORYCODE NUMBER;L_CALCOUNT NUMBER;
L_MEMBERCODE NUMBER;L_MEMBERSNO NUMBER;L_SUBGROUPCODE NUMBER;
L_MEMBERPOLICYCODE NUMBER;L_MEMBERPOLICYSNO NUMBER;L_CARDCOUNT NUMBER;
L_MEMBERNAME VARCHAR2(1000);L_MEMBERCOUNT NUMBER;L_MEMCODE NUMBER;
L_GENDER NUMBER;L_MEMBERRELATION NUMBER;L_NATIONALITY NUMBER;
L_WORKLOCATION NUMBER;L_RESIDENTLOCATION NUMBER;L_ADDMEMBERPOLICYCOUNT NUMBER;
L_EMIRATE NUMBER;L_SALARYBAND NUMBER;L_TREATYCOUNT NUMBER;L_BROKERCOMMISSIONVALUE NUMBER;
L_COMMISSION NUMBER;L_ENTITYTYPE NUMBER;L_POLICYCATEGORYCOUNT NUMBER;L_OTHERCOMMISSIONVALUE NUMBER;
L_POLICYCOUNT NUMBER;L_SUBGROUPCOUNT NUMBER;L_CATEGORYCOUNT NUMBER;L_EXISTMEMBER NUMBER;
BEGIN

    DELETE FROM IM_TPAPRODUCTIONDTL_TEMP;
    COMMIT;
    INSERT INTO IM_TPAPRODUCTIONDTL_TEMP SELECT * FROM IM_TPAPRODUCTIONDTL;
    COMMIT;
    L_MEMBERID := 0;
    FOR TPADET IN(SELECT  * FROM IM_TPAPRODUCTIONDTL_TEMP WHERE TPAPRODCUTIONHDR = P_PRIMKEY) LOOP
    L_MEMBERID := L_MEMBERID + 1;
    L_POLICYID := TPADET.NGI_POLICY_NO;
    L_SUBGROUPCODE := 0;
    L_BROKERCOMMISSIONVALUE := 0;
    L_OTHERCOMMISSIONVALUE := 0;
    SELECT Count(*) INTO L_POLICYCOUNT FROM IM_POLICY  WHERE POLICYID = L_POLICYID;

    SELECT Count(*) INTO L_SUBGROUPCOUNT FROM IM_GROUPS  WHERE UPPER(TRIM(GROUP_NAME)) = Upper(Trim(TPADET.SUBGROUP));

    SELECT Count(*) INTO L_CATEGORYCOUNT FROM IM_CATEGORIES WHERE  CATEGORY_ID = TPADET.CATEGORY;
    IF L_CATEGORYCOUNT = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S,No :' || L_MEMBERID,'Category '||TPADET.CATEGORY||' does not exists in the system . Please check the Category ID');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Category does not exists in the system . Please check the Category ID.';
    ELSE
      SELECT CATEGORY_CODE INTO L_CATEGORYCODE FROM IM_CATEGORIES WHERE  CATEGORY_ID = TPADET.CATEGORY;
    END IF;

    IF L_SUBGROUPCOUNT = 0 AND TPADET.SUBGROUP IS NOT NULL AND TPADET.SUBGROUP <> '0' THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Sub Group '||TPADET.SUBGROUP||' does not exists in the system . Please check the subgroup name');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Sub Group does not exists in the system . Please check the subgroup name.';
    END IF;
    IF L_POLICYCOUNT > 0 THEN
      SELECT POLICYCODE,POLICYNAME,STARTDATE,ENDDATE,GROUPCODE INTO L_POLICYCODE,L_POLICYNAME,L_STARTDATE,L_ENDDATE,L_GROUPCODE
      FROM IM_POLICY WHERE   POLICYID = TPADET.NGI_POLICY_NO;

      SELECT POLICYCODE INTO L_POLICYCODE FROM IM_POLICY WHERE   POLICYID = L_POLICYID;
      SELECT Count(*) INTO L_POLICYCATEGORYCOUNT FROM IM_POLICY_CATEGORYDTL WHERE POLICYCODE = L_POLICYCODE AND CATEGORYCODE = L_CATEGORYCODE;
      IF L_POLICYCATEGORYCOUNT = 0 THEN
        INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
        ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID,'Category ID '||TPADET.CATEGORY||' Not linked for the policy '||L_POLICYID||'. Please correct the category ID or Add the Category for this policy .');
        COMMIT;
        P_RESULT := 2;
        RETURN 'Category ID Not linked for this policy. Please correct the category ID or Add the Category for this policy.';
      END IF;
      SELECT Count(*) INTO L_TREATYCOUNT FROM IM_POLICY_INSURER_DTL WHERE POLICYCODE = L_POLICYCODE;
      /*IF L_TREATYCOUNT = 0 THEN
        INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
        ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Treaty not attached for the Policy '||L_POLICYID||'. Please attach the treaty and try to upload again .');
        COMMIT;
        P_RESULT := 2;
        RETURN 'Treaty not attached for this Policy. Please attach the treaty and try to upload again .';
      END IF;  */
    ELSE
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Policy ID '||L_POLICYID||' Cannot be found in the System ! Please make sure the following policy ID is available in the system '|| L_POLICYID ||'.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Policy ID Cannot be found in the System ! Please make sure the following policy ID is available in the system '|| L_POLICYID ||'.';
    END IF;
    IF Nvl(TPADET.PREMIUM_AMOUNT,0) <> 0 AND Nvl(TPADET.INPATIENT_PREMIUM,0) = 0 AND Nvl(TPADET.OUTPATIENT_PREMIUM,0) = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID,'InPatient Premium and OutPatient Premium is Zero. Please correct the Premium Amount.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'InPatient Premium and OutPatient Premium is Zero. Please correct the Premium Amount.';
    END IF;
    SELECT Count(*) INTO L_GENDER FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.GENDERNAME) AND (CATEGORY) = ('Gender') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_GENDER = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Gender Type '||Upper(TPADET.GENDERNAME)||' not found in the System ! Please make sure the Gender is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Gender Type '||Upper(TPADET.GENDERNAME)||' not found in the System ! Please make sure the Gender is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_GENDER FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.GENDERNAME) AND (CATEGORY) = ('Gender') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;

    SELECT Count(*) INTO L_MEMBERRELATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Decode(Upper(TPADET.RELATION),'PRINCIPAL','SELF',Upper(TPADET.RELATION)) AND Upper(CATEGORY) = Upper('MEMBERRELATION') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_MEMBERRELATION = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Relation Type '||Upper(TPADET.RELATION)||' not found in the System ! Please make sure the Relation is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Relation Type '||Upper(TPADET.RELATION)||' not found in the System ! Please make sure the Relation is available in the system.';
    ELSE
       SELECT Max(CONSTANTVALUE) INTO L_MEMBERRELATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Decode(Upper(TPADET.RELATION),'PRINCIPAL','SELF',Upper(TPADET.RELATION)) AND Upper(CATEGORY) = Upper('MEMBERRELATION') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;

    SELECT Count(*) INTO L_NATIONALITY FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.NATIONALITYNAME) AND Upper(CATEGORY) = Upper('FND_NATIONALITY') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_NATIONALITY = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Nationality  '||Upper(TPADET.NATIONALITYNAME)||' not found in the System ! Please make sure the Nationality is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Nationality  '||Upper(TPADET.NATIONALITYNAME)||' not found in the System ! Please make sure the Nationality is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_NATIONALITY FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.NATIONALITYNAME) AND Upper(CATEGORY) = Upper('FND_NATIONALITY') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_WORKLOCATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.WORKLOCATION) AND Upper(CATEGORY) = Upper('MEMBERLOCATION') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_WORKLOCATION = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Work Location  '||Upper(TPADET.WORKLOCATION)||' not found in the System ! Please make sure the Work Location is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Work Location  '||Upper(TPADET.WORKLOCATION)||' not found in the System ! Please make sure the Work Location is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_WORKLOCATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.WORKLOCATION) AND Upper(CATEGORY) = Upper('MEMBERLOCATION') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_RESIDENTLOCATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.RESIDENTLOCATION) AND Upper(CATEGORY) = Upper('MEMBERLOCATION') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_RESIDENTLOCATION = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Resident Location  '||Upper(TPADET.RESIDENTLOCATION)||' not found in the System ! Please make sure the Resident Location is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Resident Location  '||Upper(TPADET.RESIDENTLOCATION)||' not found in the System ! Please make sure the Resident Location is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_RESIDENTLOCATION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.RESIDENTLOCATION) AND Upper(CATEGORY) = Upper('MEMBERLOCATION') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_EMIRATE FROM GENPROVINCE WHERE Upper(PROVINCENAME) = Upper(TPADET.EMIRATENAME);
    IF L_EMIRATE = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Emirate  '||Upper(TPADET.EMIRATENAME)||' not found in the System ! Please make sure the Emirate is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Emirate  '||Upper(TPADET.EMIRATENAME)||' not found in the System ! Please make sure the Emirate is available in the system.';
    ELSE
      SELECT Max(PROVINCECODE) INTO L_EMIRATE FROM GENPROVINCE WHERE Upper(PROVINCENAME) = Upper(TPADET.EMIRATENAME);
    END IF;
    SELECT Count(*) INTO L_SALARYBAND FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.SALARYBAND) AND Upper(CATEGORY) = Upper('SALARYBANDTYPE') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_SALARYBAND = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Salary Band  '||Upper(TPADET.SALARYBAND)||' not found in the System ! Please make sure the Salary Band is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Salary Band  '||Upper(TPADET.SALARYBAND)||' not found in the System ! Please make sure the Salary Band is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_SALARYBAND FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.SALARYBAND) AND Upper(CATEGORY) = Upper('SALARYBANDTYPE') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_COMMISSION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.COMMISSIONTYPENAME) AND Upper(CATEGORY) = Upper('MEMYSENO') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_COMMISSION = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Commission Type  '||Upper(TPADET.COMMISSIONTYPENAME)||' not found in the System ! Please make sure the Commission Type is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Commission Type  '||Upper(TPADET.COMMISSIONTYPENAME)||' not found in the System ! Please make sure the Commission Type is available in the system.';
    ELSE
      SELECT Max(CONSTANTVALUE) INTO L_COMMISSION FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.COMMISSIONTYPENAME) AND Upper(CATEGORY) = Upper('MEMYSENO') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_ENTITYTYPE FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.ENTITYTYPE) AND Upper(CATEGORY) = Upper('ENTITYTYPE') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_ENTITYTYPE = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Entity Type  '||Upper(TPADET.ENTITYTYPE)||' not found in the System ! Please make sure the Entity Type is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Entity Type  '||Upper(TPADET.ENTITYTYPE)||' not found in the System ! Please make sure the Entity Type is available in the system.';
    ELSE
      SELECT MAX(CONSTANTVALUE) INTO L_ENTITYTYPE FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.ENTITYTYPE) AND Upper(CATEGORY) = Upper('ENTITYTYPE') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_MARITALSTATUS FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.MARITALSTATUS) AND Upper(CATEGORY) = Upper('MARITAL_STATUS') AND Upper(LANGUAGECODE) = 'EN-US';
    IF L_MARITALSTATUS = 0 THEN
      INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
      ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Marital Status  '||Upper(TPADET.MARITALSTATUS)||' not found in the System ! Please make sure the Marital Status is available in the system.');
      COMMIT;
      P_RESULT := 2;
      RETURN 'Marital Status   '||Upper(TPADET.MARITALSTATUS)||' not found in the System ! Please make sure the Marital Status is available in the system.';
    ELSE
      SELECT MAX(CONSTANTVALUE) INTO L_MARITALSTATUS FROM GENCONSTANT WHERE Upper(CONSTANTNAME) = Upper(TPADET.MARITALSTATUS) AND Upper(CATEGORY) = Upper('MARITAL_STATUS') AND Upper(LANGUAGECODE) = 'EN-US';
    END IF;
    SELECT Count(*) INTO L_ADDMEMBERPOLICYCOUNT FROM IM_REINS_ADDMEMBERPOLICY WHERE POLICYCODE = L_POLICYCODE AND TPAPRODHDRCODE = P_PRIMKEY;

    SELECT Count(*) INTO L_CALCOUNT FROM IM_POLICY_COMMISSION WHERE POLICYCODE = L_POLICYCODE;
      IF L_CALCOUNT = 0 THEN
        L_CALCMETHOD:=2;
      ELSE
        SELECT Max(CALC_METHOD) INTO L_CALCMETHOD FROM IM_POLICY_COMMISSION WHERE POLICYCODE = L_POLICYCODE;
    END IF;

    IF L_ADDMEMBERPOLICYCOUNT = 0 THEN
      SELECT Nvl(Max(REINSADDMEMBERPOLICYCODE),100000000000000000) + 1 INTO L_ADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_ADDMEMBERSNO FROM IM_REINS_ADDMEMBERPOLICY;
      INSERT INTO IM_REINS_ADDMEMBERPOLICY(TPAPRODHDRCODE,REINSADDMEMBERPOLICYCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,POLICYCODE,POLICYSTARTDDATE,POLICYENDDDATE,EFFECTIVEDATE,AUTHORIZEDSTATUS,SOURCETYPE)VALUES
      (P_PRIMKEY,L_ADDMEMBERPOLICYCODE,L_ADDMEMBERSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,100000000000000002,1,1,
      L_POLICYCODE,L_STARTDATE,L_ENDDATE,SYSDATE,1,1);
      COMMIT;
      IF L_CALCMETHOD = 0 THEN
        UPDATE IM_POLICY_COMMISSION SET DEFAULTVALUE = 0,COMMISSION_VALUE = 0 WHERE POLICYCODE = L_POLICYCODE;
        COMMIT;
      END IF;
    ELSE
      SELECT REINSADDMEMBERPOLICYCODE INTO L_ADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE POLICYCODE = L_POLICYCODE AND TPAPRODHDRCODE = P_PRIMKEY;
    END IF;


    SELECT Nvl(Max(REINSADDMEMBERDETCODE),100000000000000000) + 1 INTO L_MEMBERDETCODE FROM IM_REINSADDMEMBERDET;
    SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_MEMBERDETSNO FROM IM_REINSADDMEMBERDET;

    SELECT Nvl(Max(MEMBER_CODE),100000000000000000) + L_MEMBERID INTO L_MEMBERCODE FROM IM_REINS_MEMBERS;
    SELECT Nvl(Max(SERIALNO),0) + L_MEMBERID INTO L_MEMBERSNO FROM IM_REINS_MEMBERS;


    SELECT CATEGORY_CODE INTO L_CATEGORYCODE FROM IM_CATEGORIES WHERE CATEGORY_ID = TPADET.CATEGORY;


    SELECT Count(*) INTO L_MEMBERCOUNT FROM  IM_REINS_MEMBERS WHERE CARDNO = TPADET.CARD_NO;

    IF L_MEMBERCOUNT = 0 THEN
        L_MEMBERNAME := TPADET.FIRST_NAME;
    ELSE
        SELECT MEMBER_CODE,FIRST_NAME INTO L_MEMCODE,L_MEMBERNAME FROM  IM_REINS_MEMBERS WHERE CARDNO = TPADET.CARD_NO;
        L_MEMBERCODE := L_MEMCODE;
    END IF;
    L_SUBGROUPCODE := NULL;
    IF L_SUBGROUPCOUNT <> 0 AND TPADET.SUBGROUP IS NOT NULL AND TPADET.SUBGROUP <> '0' THEN
      SELECT Max(GROUP_CODE) INTO L_SUBGROUPCODE FROM IM_GROUPS WHERE Upper(Trim(GROUP_NAME)) = Upper(Trim(TPADET.SUBGROUP));
    END IF;

    IF L_SUBGROUPCODE = 0 THEN
       L_SUBGROUPCODE := NULL;
    END IF;
    INSERT INTO IM_REINSADDMEMBERDET(REINSADDMEMBERPOLICYCODE,REINSADDMEMBERDETCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
    LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,MEMBERID,MEMBERNAME,SECONDNAME,FAMILYNAME,STAFF_ID,DATE_OF_BIRTH,GENDERCODE,MEMBERRELATIONCODE,
    NATIONALITYCODE,PASSPORT_NO,CATEGORYCODE,PARENTGROUPCODE,EMAIL_ID,EFFECTIVEDATE,RESIDENTLOCATION,WORKLOCATION,
    SALARYBAND,ISCOMMISSION,EMIRATES_ID,UIDNUMBER,ENTITYTYPE,MEMBERENTITYIDNAME,EMIRATES_CODE,FMCCARDNO,ACARDID,MARITALSTATUSCODE)VALUES
    (L_ADDMEMBERPOLICYCODE,L_MEMBERDETCODE,L_MEMBERDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
    100000000000000002,1,1,L_MEMBERID,TPADET.FIRST_NAME,TPADET.MIDDLE_NAME,TPADET.LAST_NAME,TPADET.STAFF_NO,
    To_Date(TPADET.BIRTHDATE,'MM/DD/RRRR'),L_GENDER,L_MEMBERRELATION,
    L_NATIONALITY,TPADET.PASSPORT_NO,L_CATEGORYCODE,L_SUBGROUPCODE,TPADET.EMAILID,
    To_Date(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),L_RESIDENTLOCATION,L_WORKLOCATION,
    L_SALARYBAND,L_COMMISSION,TPADET.EMIRATES_ID,
    TPADET.UIDNUMBER,L_ENTITYTYPE,TPADET.ENTITYNAME,L_EMIRATE,TPADET.CARD_NO,TPADET.CARD_NO,L_MARITALSTATUS);
    COMMIT;

    IF TPADET.ADDPREMIUM <> 0 THEN
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.INPATIENT_PREMIUM,0,TPADET.INPATIENT_PREMIUM,'INPATIENT SERVICE',10000000000000017);
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.OUTPATIENT_PREMIUM,0,TPADET.OUTPATIENT_PREMIUM,'OUTPATIENT SERVICE',10000000000000048);
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.TPA_FEES,0,TPADET.TPA_FEES,'COMISSION AND OTHERS',100000000000001356);
      L_OTHERCOMMISSIONVALUE := Nvl(L_OTHERCOMMISSIONVALUE,0) + Nvl(TPADET.TPA_FEES,0);
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE,ISCOMMISSION)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.COMMISSION,0,TPADET.COMMISSION,'COMISSION AND OTHERS',100000000000001356,1);
      SELECT Nvl(Max(REINSADDPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSADDMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSADDMEMBERPREDETL;
      INSERT INTO IM_REINSADDMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSADDPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE,ISCOMMISSION)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.NGI_FEES,0,TPADET.NGI_FEES,'NGI Special Fees',100000000000001496,2);
      COMMIT;
      L_BROKERCOMMISSIONVALUE := Nvl(L_BROKERCOMMISSIONVALUE,0) + Nvl(TPADET.COMMISSION,0);
    END IF;
    IF TPADET.REFUNDPREMIUM <> 0 THEN
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.INPATIENT_PREMIUM,0,TPADET.INPATIENT_PREMIUM,'INPATIENT SERVICE',10000000000000017);
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.OUTPATIENT_PREMIUM,0,TPADET.OUTPATIENT_PREMIUM,'OUTPATIENT SERVICE',10000000000000048);
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.TPA_FEES,0,TPADET.TPA_FEES,'COMISSION AND OTHERS',100000000000001356);
      L_OTHERCOMMISSIONVALUE :=   Nvl(L_OTHERCOMMISSIONVALUE,0) - Nvl(TPADET.TPA_FEES,0);
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE,ISCOMMISSION)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.COMMISSION,0,TPADET.COMMISSION,'COMISSION AND OTHERS',100000000000001356,1);
      SELECT Nvl(Max(REINSDELPREMIUMCODE),100000000000000000) + 1 INTO L_PREMIUMDETCODE FROM IM_REINSDELMEMBERPREDETL;
      SELECT Nvl(Max(SERIALNO),0) + 1 INTO L_PREMIUMDETSNO FROM IM_REINSDELMEMBERPREDETL;
      INSERT INTO IM_REINSDELMEMBERPREDETL(REINSADDMEMBERDETCODE,REINSDELPREMIUMCODE,SERIALNO,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,PREMIUM_TYPES,DEFAULTVALUE,CALC_METHOD,PREMIUM_VALUE,DESCRIPTION,BENEFITCODE,ISCOMMISSION)VALUES
      (L_MEMBERDETCODE,L_PREMIUMDETCODE,L_PREMIUMDETSNO,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000002,
      100000000000000002,1,1,2,TPADET.NGI_FEES,0,TPADET.NGI_FEES,'NGI Special Fees',100000000000001496,2);
      COMMIT;
      L_BROKERCOMMISSIONVALUE := Nvl(L_BROKERCOMMISSIONVALUE,0) - Nvl(TPADET.COMMISSION,0);
    END IF;
    COMMIT;

    UPDATE IM_POLICY_COMMISSION SET CALC_METHOD = 2 WHERE POLICYCODE = L_POLICYCODE AND CALC_METHOD = 0;
    COMMIT;

    SELECT Count(*) INTO L_MEMPOLICYCOUNT FROM IM_MEMBERPOLICY WHERE ACARDID = TPADET.CARD_NO AND POLICYCODE = L_POLICYCODE;


    IF L_MEMPOLICYCOUNT = 0 THEN

      INSERT INTO IM_MEMBERPOLICY(MEMBERPOLICYCODE,SERIALNO,REINSMEMBERCODE,POLICYCODE,MEMBERSTARTDATE,MEMBERENDDATE,
      POLICYSTARTDDATE,POLICYENDDDATE,CATEGORYCODE,FINANCEPOSTDONEFORADDITION,FINANCEPOSTDONEFORDELETION,REINSADDMEMBERPOLICY,
      REINSDELMEMBERPOLICY,AGENDER,AMEMBERNAME,GROUPCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
      LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,ACARDID,A_CARDID,TYPEE,A_SUBGROUPCODE)VALUES
      ((SELECT Nvl(Max(MEMBERPOLICYCODE),100000000000000000) + 1 FROM IM_MEMBERPOLICY),
      (SELECT Nvl(Max(SERIALNO),0) + 1 FROM IM_MEMBERPOLICY),L_MEMBERCODE,L_POLICYCODE,TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),NULL,L_STARTDATE,
      L_ENDDATE,L_CATEGORYCODE,0,0,L_MEMBERDETCODE,NULL,0,L_MEMBERNAME,L_GROUPCODE,SYSDATE,100000000000000002,
      SYSDATE,100000000000000002,100000000000000002,100000000000000002,1,1,TPADET.CARD_NO,TPADET.CARD_NO,1,L_SUBGROUPCODE);
      COMMIT;

      SELECT MEMBERPOLICYCODE INTO L_MEMBERPOLICYCODE FROM IM_MEMBERPOLICY  WHERE ACARDID = TPADET.CARD_NO AND POLICYCODE = L_POLICYCODE;

      IF L_MEMBERCOUNT = 0 THEN
        INSERT INTO IM_REINS_MEMBERS(MEMBERPOLICYCODE,PARENTGROUPCODE,PARENT_ID,MEMBER_CODE,SERIALNO,FIRST_NAME,MIDDLENAME,LAST_NAME,GENDER,CATEGORY_CODE,GROUP_CODE,
        COVERED_FROM_DATE,COVERED_END_DATE,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,INCEPTION_DATE,
        APOLICYID,APOLICYNAME,POLICYCODE,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
        LEGALENTITYCODE,CUSTOMERCODE,COMPANYCODE,LOCATIONCODE,CARDNO,CARDID,RESIDENTLOCATION,WORKLOCATION,
        SALARYBAND,ISCOMMISSION,EMIRATES_ID,UIDNUMBER,ENTITYTYPE,MEMBERENTITYIDNAME)VALUES
        (L_MEMBERPOLICYCODE,L_SUBGROUPCODE,L_SUBGROUPCODE,L_MEMBERCODE,L_MEMBERSNO,L_MEMBERNAME,TPADET.MIDDLE_NAME,TPADET.LAST_NAME,0,L_CATEGORYCODE,L_GROUPCODE,
        TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),L_ENDDATE,TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),L_ENDDATE,TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),
        L_POLICYID,L_POLICYNAME,L_POLICYCODE,SYSDATE,100000000000000002,SYSDATE,100000000000000002,
        100000000000000002,100000000000000002,1,1,TPADET.CARD_NO,TPADET.CARD_NO,L_RESIDENTLOCATION,L_WORKLOCATION,
        L_SALARYBAND,L_COMMISSION,TPADET.EMIRATES_ID,TPADET.UIDNUMBER,L_ENTITYTYPE,TPADET.ENTITYNAME);
        COMMIT;
      ELSE
        UPDATE IM_REINS_MEMBERS SET MEMBERPOLICYCODE= L_MEMBERPOLICYCODE WHERE MEMBER_CODE = L_MEMBERCODE;
        COMMIT;
      END IF;


      IF TPADET.ADDPREMIUM <> 0 THEN
          DELETE FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE = L_MEMBERPOLICYCODE;
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, TPADET.INPATIENT_PREMIUM, 0,
          TPADET.INPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'INPATIENT SERVICE', 10000000000000017);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, TPADET.OUTPATIENT_PREMIUM, 0,
          TPADET.OUTPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'OUTPATIENT SERVICE', 10000000000000048);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, TPADET.TPA_FEES, 0,
          TPADET.TPA_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, TPADET.COMMISSION, 0,
          TPADET.COMMISSION,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMBERPOLICYPREMIUMDTL
          (MEMBERPOLICYPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMBERPOLICYPREMIUMDTLCODE) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), L_MEMBERPOLICYCODE, 2, TPADET.NGI_FEES, 0,
          TPADET.NGI_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMBERPOLICYPREMIUMDTL), 1, 'NGI Special Fees', 100000000000001496);
          COMMIT;
      END IF;
      IF TPADET.REFUNDPREMIUM <> 0 THEN
          DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE = L_MEMBERPOLICYCODE;
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.INPATIENT_PREMIUM, 0,
          TPADET.INPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'INPATIENT SERVICE', 10000000000000017);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.OUTPATIENT_PREMIUM, 0,
          TPADET.OUTPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'OUTPATIENT SERVICE', 10000000000000048);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.TPA_FEES, 0,
          TPADET.TPA_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.COMMISSION, 0,
          TPADET.COMMISSION,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.NGI_FEES, 0,
          TPADET.NGI_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'NGi Special Fees', 100000000000001496);
          COMMIT;
      END IF;
    ELSE
      SELECT Count(*) INTO L_EXISTMEMBER FROM IM_MEMBERPOLICY WHERE ACARDID = TPADET.CARD_NO AND POLICYCODE = L_POLICYCODE AND (REINSADDMEMBERPOLICY IS NOT NULL AND Nvl(FINANCEPOSTDONEFORADDITION,0) = 1);

      IF L_EXISTMEMBER > 0 AND  TPADET.ADDPREMIUM <> 0 THEN
          INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
          ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Card No. '||Upper(TPADET.CARD_NO)||' Already added in the Previous Batches  !');
          COMMIT;
          P_RESULT := 2;
          RETURN 'Card No. '||Upper(TPADET.CARD_NO)||' Already added in the Previous Batches  !';
      ELSE
          SELECT Count(*) INTO L_EXISTMEMBER FROM IM_MEMBERPOLICY WHERE ACARDID = TPADET.CARD_NO AND POLICYCODE = L_POLICYCODE AND (REINSDELMEMBERPOLICY IS NOT NULL AND Nvl(FINANCEPOSTDONEFORDELETION,0) = 1);

          IF L_EXISTMEMBER > 0 AND  TPADET.REFUNDPREMIUM <> 0 THEN
              INSERT INTO INSUPLOADERRORLOG (MENUID,REFERENCEKEY,ERRORCODE,ERRORNAME,DESCRIPTION) VALUES
              ('ID_TPABATCHUPLOAD',P_PRIMKEY,'102','S.No :' || L_MEMBERID ,'Card No. '||Upper(TPADET.CARD_NO)||' Already deleted in the Previous Batches  !');
              COMMIT;
              P_RESULT := 2;
              RETURN 'Card No. '||Upper(TPADET.CARD_NO)||' Already deleted in the Previous Batches  !';
          END IF;
      END IF;

      SELECT MEMBERPOLICYCODE INTO L_MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE ACARDID = TPADET.CARD_NO AND POLICYCODE = L_POLICYCODE;
      IF TPADET.REFUNDPREMIUM <> 0 THEN
          UPDATE IM_REINS_MEMBERS SET COVERED_END_DATE = TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),EFFECTIVE_END_DATE = TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR')
          WHERE MEMBER_CODE = L_MEMBERCODE;
          COMMIT;
          UPDATE IM_MEMBERPOLICY  SET MEMBERENDDATE = TO_DATE(TPADET.INCEPTION_DATE,'MM/DD/RRRR'),REINSDELMEMBERPOLICY = L_MEMBERDETCODE WHERE REINSMEMBERCODE = L_MEMBERCODE;
          COMMIT;
          DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE = L_MEMBERPOLICYCODE;
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.INPATIENT_PREMIUM, 0,
          TPADET.INPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'INPATIENT SERVICE', 10000000000000017);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.OUTPATIENT_PREMIUM, 0,
          TPADET.OUTPATIENT_PREMIUM,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'OUTPATIENT SERVICE', 10000000000000048);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.TPA_FEES, 0,
          TPADET.TPA_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.COMMISSION, 0,
          TPADET.COMMISSION,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'COMISSION AND OTHERS', 100000000000001356);
          COMMIT;
          INSERT INTO ADDVANTAGE_LIVE.IM_MEMPOLICYREFUNDPREMDTL
          (MEMPOLICYREFUNDPREMIUMDTLCODE, MEMBERPOLICYCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
          VALUES
          ((SELECT MAX(MEMPOLICYREFUNDPREMIUMDTLCODE) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), L_MEMBERPOLICYCODE, 2, TPADET.NGI_FEES, 0,
          TPADET.NGI_FEES,1, (SELECT MAX(SERIALNO) + 1 FROM IM_MEMPOLICYREFUNDPREMDTL), 1, 'NGI Special Fees', 100000000000001496);
          COMMIT;
          COMMIT;
      END IF;
    END IF;
    END LOOP;

AV_GETMAX_REC('IM_MEMBERPOLICY','SERIALNO');
P_RESULT := 1;
RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
P_RESULT := 2;
L_ERROR:= SQLERRM;
RETURN L_ERROR;
END;
END AV_TPAPRODUCTIONDATA_UPLOAD;
/

