PROMPT CREATE OR REPLACE PROCEDURE validate_ims_outputdata_bk
CREATE OR REPLACE PROCEDURE VALIDATE_IMS_OUTPUTDATA_BK(P_COMPANYCODE NUMBER) AS
L_RPTPK NUMBER;
L_NETTOTAL NUMBER;
L_ERROR NVARCHAR2(1000);
L_IPPERCENTAGE NUMBER;
L_OPPERCENTAGE NUMBER;
L_OTHERPERCENTAGE NUMBER;
L_TPAPERCENTAGE NUMBER;
L_COMPERCENTAGE NUMBER;
L_DUEDAYS NUMBER;
L_IMSTOTAL NUMBER;
L_RULES VARCHAR2(1000);
L_DOCCOUNT NUMBER;
BEGIN
DELETE FROM IMS_RETRIEVEDATA;
COMMIT; 
INSERT INTO IMS_RETRIEVEDATA  
SELECT  SERIALNO,'' PINCODE,Sum(PAIDAMOUNT) PAIDAMOUNT,
Sum(TOTALLC) TOTALLC,SYSDATE CREATEDON,SYSDATE DUEDATE,SYSDATE PAIDDATE FROM(
SELECT JRNL_CODE SERIALNO,NVL(BAL_AMT,0)PAIDAMOUNT,
Nvl(ORG_AMT,0) TOTALLC FROM IM_OS_IIRIS_VW
WHERE JRNL_CODE IN(SELECT REF_NO FROM IM_NGI_JVPOSTING)) GROUP BY SERIALNO;
COMMIT;


FOR HDR IN(SELECT REF_NO FROM(
SELECT  JV.REF_NO,MAX(NVL(JV.AMOUNT,0)) JPAMT,
SUM(NVL(JVI.AMOUNT,0)) JIAMT FROM IM_NGI_JVPOSTING JV
LEFT JOIN IM_NGI_JV_INSTALLMENT JVI ON JVI.REF_NO = JV.REF_NO
WHERE JV.JVPREMIUMTYPE = 0 AND JV.REF_CODE IS NOT NULL
GROUP BY  JV.REF_NO)WHERE ABS(NVL(JIAMT,0)) <> ABS(NVL(JPAMT,0))) LOOP

UPDATE IM_NGI_JVPOSTING SET MANUALINSTALLMENT = 1 WHERE REF_NO = HDR.REF_NO;
COMMIT;

END LOOP;  


      

FOR HDR IN (SELECT * FROM IMS_RETRIEVEDATA WHERE SERIALNO IN
(SELECT SERIALNO FROM (SELECT  JV.SERIALNO,JVI.REF_NO,MAX(NVL(Abs(JV.TOTALLC),0)) JAMT,
Max(NVL(Abs(JV.PAIDAMOUNT),0)) JPAMT,
SUM(NVL(JVI.AMOUNT,0)) JIAMT,Sum(NVL(RECEIVEDAMOUNT,0)) JIPAMT FROM IMS_RETRIEVEDATA JV
JOIN IM_NGI_JV_INSTALLMENT JVI ON JVI.REF_NO =  JV.SERIALNO
GROUP BY  JVI.REF_NO,JV.SERIALNO) WHERE NVL(JIPAMT,0) <> NVL(JPAMT,0))) LOOP
    L_NETTOTAL := HDR.PAIDAMOUNT;
    L_IMSTOTAL := HDR.PAIDAMOUNT;
    FOR JINS IN (SELECT * FROM IM_NGI_JV_INSTALLMENT WHERE REF_NO =  HDR.SERIALNO AND AMOUNT <> 0 ORDER BY INSTALLMENTNO,INSTALLMENTDATE ASC) LOOP



          IF L_NETTOTAL >=  JINS.AMOUNT THEN
            UPDATE IM_NGI_JV_INSTALLMENT SET RECEIVEDAMOUNT = JINS.AMOUNT,PAIDIPPREMIUM = ADDIPPREMIUM,PAIDOPPREMIUM = ADDOPPREMIUM,
            PAIDOTHERPREMIUM = ADDOTHERPREMIUM WHERE JVINSTALLMENTCODE = JINS.JVINSTALLMENTCODE;
            COMMIT;
            L_NETTOTAL := L_NETTOTAL - JINS.AMOUNT;
          ELSIF L_NETTOTAL < JINS.AMOUNT THEN
              L_IPPERCENTAGE := ROUND((JINS.ADDIPPREMIUM/JINS.AMOUNT) * 100,2);
              L_OPPERCENTAGE := ROUND((JINS.ADDOPPREMIUM/JINS.AMOUNT) * 100,2);
              L_OTHERPERCENTAGE := ROUND((JINS.ADDOTHERPREMIUM/JINS.AMOUNT) * 100,2);
              L_TPAPERCENTAGE := ROUND((JINS.TPAPREMIUM/JINS.AMOUNT) * 100,2);
              L_COMPERCENTAGE := ROUND((JINS.COMMISSIONPREMIUM/JINS.AMOUNT) * 100,2);
              UPDATE IM_NGI_JV_INSTALLMENT SET RECEIVEDAMOUNT = L_NETTOTAL,PAIDIPPREMIUM = (L_NETTOTAL/100) * L_IPPERCENTAGE,
              PAIDOPPREMIUM = (L_NETTOTAL/100) * L_OPPERCENTAGE,
              PAIDOTHERPREMIUM = (L_NETTOTAL/100) * L_OTHERPERCENTAGE,
              TPAPAYABLE = (L_NETTOTAL/100) * L_TPAPERCENTAGE,
              COMMISSIONPAYABLE = (L_NETTOTAL/100) * L_COMPERCENTAGE WHERE JVINSTALLMENTCODE = JINS.JVINSTALLMENTCODE;
              COMMIT;
              L_NETTOTAL := 0;
          END IF;

    END LOOP;

END LOOP;

FOR MG IN (SELECT SUM(Abs(TOTALLC)) AMOUNT,SUM(Abs(PAIDAMOUNT)) PAIDAMOUNT,PINCODE FROM IMS_RETRIEVEDATA GROUP BY PINCODE) LOOP

    UPDATE IM_CREDITMODULE_DTL SET OUTSTANDINGAMOUNT = NVL(MG.AMOUNT,0) - NVL(MG.PAIDAMOUNT,0) WHERE PINCODE = MG.PINCODE;
    COMMIT;

END LOOP;

FOR MG IN (SELECT  SUM(JVI.AMOUNT) PAIDAMOUNT,PINCODE FROM IM_NGI_JV_INSTALLMENT JVI,IM_NGI_JVPOSTING JV
WHERE JV.JVPOSTINGCODE = JVI.JVPOSTINGCODE AND NVL(JV.MEDPOSTINGDONE,0) = 0 GROUP BY PINCODE) LOOP

    UPDATE IM_CREDITMODULE_DTL SET OUTSTANDINGAMOUNT = NVL(OUTSTANDINGAMOUNT,0) + NVL(MG.PAIDAMOUNT,0) WHERE PINCODE = MG.PINCODE;
    COMMIT;

END LOOP;


FOR IMC IN(SELECT * FROM IM_CREDITMODULE_DTL WHERE BILLINGTYPE=2) LOOP
    FOR IMS IN(SELECT Min(INSTALLMENTDATE) CREATEDON,PINCODE FROM IM_NGI_JV_INSTALLMENT WHERE REF_NO IN
(SELECT SERIALNO FROM IMS_RETRIEVEDATA WHERE Abs(TOTALLC) > Abs(PAIDAMOUNT))
GROUP BY PINCODE) LOOP

      SELECT TO_DATE(SYSDATE,'DD/MM/RRRR') - TO_DATE(MIN(IMS.CREATEDON),'DD/MM/RRRR') INTO L_DUEDAYS FROM DUAL;


      IF IMC.OUTSTANDINGAMOUNT > 0 AND (IMC.CREDITLIMIT > 0 OR IMC.CREDITDAYS > 0) THEN
        IF L_DUEDAYS > IMC.CREDITDAYS AND  L_DUEDAYS < IMC.CREDITDAYS+15 THEN --1st REMINDER
           SP_CREDITCONTROL_FNC(IMC.PINCODE,1);
        END IF;
        IF L_DUEDAYS > IMC.CREDITDAYS+14 AND L_DUEDAYS < IMC.CREDITDAYS+21 THEN --2nd REMINDER
           SP_CREDITCONTROL_FNC(IMC.PINCODE,2);
        END IF;
        IF L_DUEDAYS > IMC.CREDITDAYS+20  THEN --3rd REMINDER
           SP_CREDITCONTROL_FNC(IMC.PINCODE,3);
        END IF;
        IF L_DUEDAYS > IMC.CREDITDAYS+30 THEN
          L_DOCCOUNT := SP_CREDITDOC_COUNT(IMC.PINCODE,1);
          IF L_DOCCOUNT > 0 THEN
            UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 1 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
            COMMIT;
          END IF;
        ELSE
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 0 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
        END IF;
        IF IMC.CREDITLIMIT < IMC.OUTSTANDINGAMOUNT AND  IMC.CREDITLIMIT > 0 THEN
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 1 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
        END IF;
      ELSE
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 0 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
      END IF;

    END LOOP;
END LOOP;
FOR IMC IN(SELECT * FROM IM_CREDITMODULE_DTL WHERE BILLINGTYPE<>2) LOOP
    FOR IMS IN(SELECT Min(INSTALLMENTDATE) CREATEDON,PINCODE FROM IM_NGI_JV_INSTALLMENT WHERE REF_NO IN
(SELECT SERIALNO FROM IMS_RETRIEVEDATA WHERE Abs(TOTALLC) > Abs(PAIDAMOUNT))
GROUP BY PINCODE) LOOP

      SELECT TO_DATE(SYSDATE,'DD/MM/RRRR') - TO_DATE(MIN(IMS.CREATEDON),'DD/MM/RRRR') INTO L_DUEDAYS FROM DUAL;


      IF IMC.OUTSTANDINGAMOUNT > 0 AND (IMC.CREDITLIMIT > 0 OR IMC.CREDITDAYS > 0) THEN
        IF L_DUEDAYS > IMC.CREDITDAYS   THEN
          L_DOCCOUNT := SP_CREDITDOC_COUNT(IMC.PINCODE,1);
          IF L_DOCCOUNT > 0 THEN
            UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 1 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
            COMMIT;
          END IF;
        ELSE
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 0 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
        END IF;
        IF IMC.CREDITLIMIT < IMC.OUTSTANDINGAMOUNT AND  IMC.CREDITLIMIT > 0 THEN
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 1 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
        END IF;
      ELSE
          UPDATE IM_CREDITMODULE_DTL SET ISBLACKLIST = 0 WHERE PINCODE = IMC.PINCODE AND NVL(ISMANUAL,0) = 0;
          COMMIT;
      END IF;

    END LOOP;
END LOOP;
UPDATE IM_CLIENTNOTIFICATION_MAIL SET MAILCC=MAILCC||','||'Sanjay@ngiuae.com' WHERE STATUS = 'PEN' AND MAILCC IS NOT NULL;
COMMIT;
BEGIN
L_RULES:=FN_WEBSERVICE_UPLOAD(1,'PATH','ID_SENDCLIENTEMAIL',1);
END;
EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
END ;
/

