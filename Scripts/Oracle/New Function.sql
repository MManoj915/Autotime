CREATE OR REPLACE FUNCTION FN_UWPOLICYPREMUIMDTL_ORA(APOLICYCODE number)    RETURN VARCHAR2
as

POLICYROW  IM_POLICY%rowtype;
ATotalDays number;
AAGE number;
APOLMEMBERDETCounter number;
APOLMEMBERDETPKEY number;
ATTOTALAPPLYAMMOUNT number;
ATOTALPREMIMVALUE number;
ATOTALADDPREMIMVALUE number;
ATOTALFINALPREMIUM number;
ATOTALCOMMISIONVALUE number;
A_EMIRATECOUNT NUMBER;
A_FINELIMIT_DAYS NUMBER;
A_PENALTY_AMT NUMBER;
A_HAADFINE NUMBER;
A_NO_OF_DAYS NUMBER;
L_BENEFITCOUNT NUMBER;
L_ERROR VARCHAR2(500);
L_POLICYBENEFITCODE NUMBER;
begin

select * into POLICYROW from IM_POLICY where POLICYCODE=APolicyCode;

DELETE FROM IM_POLICY_PREMIUM PRE WHERE PRE.POLICY_MEM_CODE IN
(SELECT PM.POLICY_MEM_CODE FROM IM_POLICY_MEMBERS PM WHERE PM.POLICYCODE=APOLICYCODE);
COMMIT;

FOR HDR IN(SELECT * FROM IM_POLICY_CATEGORYDTL WHERE POLICYCODE=APolicyCode) LOOP
   FOR CAN IN (SELECT * FROM IM_HEP_CAN_MASTER WHERE POLICYROW.STARTDATE BETWEEN STARTDATE AND Nvl(ENDDATE,POLICYROW.STARTDATE)) LOOP
    SELECT Count(*) INTO L_BENEFITCOUNT FROM IM_POLICYBEBEFITS WHERE PCDCODE = HDR.PCDCODE
    AND BENEFIT_CODE = CAN.BENEFITCODE;
    IF L_BENEFITCOUNT =  0 THEN     
      INSERT INTO IM_POLICYBEBEFITS
        (POLICYBEBEFITSCODE, 
        PCDCODE, BENEFIT_CODE, TYPECODE, ACTIVE, COMPANYCODE, 
        CREATEDBY, LASTMODIFIEDBY, CREATEDON, LASTMODIFIEDON, LOCATIONCODE, 
        SERIALNO, BENEFIT_TYPE, DEFAULTPREMIUM, APPLYSETTINGPREMIUM, APPLYFULLPERMIUMREFUND, 
        CARDTEXT)
      VALUES
        ((SELECT Max(POLICYBEBEFITSCODE) + 1 FROM IM_POLICYBEBEFITS),HDR.PCDCODE, CAN.BENEFITCODE, 0, 1, 
        1, 100000000000000002, 100000000000000002, SYSDATE, SYSDATE, 
        1, (SELECT Max(SERIALNO) + 1 FROM IM_POLICYBEBEFITS), NULL, NULL, NULL, 
        NULL, NULL);
      COMMIT;

      SELECT Max(BENEFITSETTINGCODE)+1 INTO L_POLICYBENEFITCODE  FROM IM_POLICY_BENEFITSETTING WHERE
      POLICYCODE = POLICYROW.POLICYCODE AND CATEGORYCODE = HDR.CATEGORYCODE AND BENEFITCODE = CAN.BENEFITCODE
	  AND REQTYPE = 0;

      Insert into IM_BENSETTINGAGELIMITS
        (BENSETTLMITAGECODE, 
        BENEFITSETTINGCODE, AGEFROM, AGETO, GENDERCODE, PREMIUM, 
        CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, 
        COMPANYCODE, LOCATIONCODE, DEACTIVATEDON, DEACTIVATEDBY, SERIALNO, 
        APPLICABLEFOR)
      Values
        ((SELECT Max(BENSETTLMITAGECODE) + 1 FROM IM_BENSETTINGAGELIMITS), L_POLICYBENEFITCODE, 0, 90, 2, 
        CAN.PREMIUMVALUE, 1, SYSDATE, 100000000000000002, SYSDATE, 
        100000000000000002, 1, 1, NULL, NULL, 
        (SELECT Max(SERIALNO) + 1 FROM IM_BENSETTINGAGELIMITS),4);
      COMMIT;

    ELSE
      SELECT Max(BENEFITSETTINGCODE)+1 INTO L_POLICYBENEFITCODE  FROM IM_POLICY_BENEFITSETTING WHERE
      POLICYCODE = POLICYROW.POLICYCODE AND CATEGORYCODE = HDR.CATEGORYCODE AND BENEFITCODE = CAN.BENEFITCODE
	  AND REQTYPE = 0;

      UPDATE IM_BENSETTINGAGELIMITS SET PREMIUM = CAN.PREMIUMVALUE,GENDERCODE = 2,APPLICABLEFOR = 4
      WHERE  BENEFITSETTINGCODE =L_POLICYBENEFITCODE;
      COMMIT; 
    END IF;
   END LOOP;
END LOOP;

for MEMDET  in (select * from IM_POLICY_MEMBERS where POLICYCODE=APolicyCode and 
(select count(*) from IM_POLICY_PREMIUM where IM_POLICY_MEMBERS.POLICY_MEM_CODE=IM_POLICY_PREMIUM.POLICY_MEM_CODE)=0)
loop

    begin

        --select (IM_POLICY.enddate-MEMDET.EFFECTIVEDATE) into ATotalDays from IM_POLICY where IM_POLICY.policycode=POLICYROW.policycode;

        AAGE :=ROUND(MONTHS_BETWEEN (SYSDATE,MEMDET.DATE_OF_BIRTH) / 12);

        delete from IM_POLICY_PREMIUM where  IM_POLICY_PREMIUM.POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE;

        select nvl(max(serialno),0)+1,nvl(max(PREMIUM_MEM_CODE),100000000000000000)+1 into APOLMEMBERDETCounter,APOLMEMBERDETPKEY from IM_POLICY_PREMIUM;

        insert into IM_POLICY_PREMIUM (PREMIUM_MEM_CODE,POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
        select APOLMEMBERDETPKEY+rownum PREMIUM_MEM_CODE, MEMDET.POLICY_MEM_CODE,PremiumType PREMIUM_TYPES,PREMIUM DEFAULTVALUE,0 CALC_METHOD,PREMIUM PREMIUM_VALUE, MEMDET.LEGALENTITYCODE, MEMDET.CUSTOMERCODE, MEMDET.LOCATIONCODE,APOLMEMBERDETCounter+rownum  SERIALNO, MEMDET.COMPANYCODE, DESCRIPTION,BENIFTCODE BENEFITCODE
        from table (FN_POLICYBENEFITBREMIUM(0,APolicyCode,MEMDET.POLICY_MEM_CODE, MEMDET.MEMBER_CATEGORY,AAGE,MEMDET.MEMBER_GENDER,MEMDET.MARITAL_STATUS,MEMDET.MEMBER_RELATION,POLICYROW.BASE_PERIMUM));

        --GENDERCODE, MEMBERRELATIONCODE, MARITALSTATUSCODE, CATEGORYCODE

        --select NGI_GETADDBASEPREMIUM(POLICYROW.policycode ,1,MEMDET.CATEGORYCODE,AAGE,MEMDET.GENDERCODE,MEMDET.MARITALSTATUSCODE,MEMDET.MEMBERRELATIONCODE) into ATTOTALAPPLYAMMOUNT from dual ;
        select nvl(max(PREMIUM_VALUE),0) into ATTOTALAPPLYAMMOUNT from IM_POLICY_PREMIUM where POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE and  PREMIUM_TYPES=0 ;

        --update IM_POLICY_MEMBERS set TOTALAPPLYAMOUNT=ATTOTALAPPLYAMMOUNT where IM_POLICY_MEMBERS.POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE;

        update IM_POLICY_ADDTIONALPREMIUM set PREMIUM_VALUE=round(((DEFAULTVALUE/100)*(ATTOTALAPPLYAMMOUNT)),2)  where POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE and CALC_METHOD=1;


        SELECT COUNT(*),NVL(MAX(LIMITS),0),NVL(MAX(PENALTY),0) INTO A_EMIRATECOUNT,A_FINELIMIT_DAYS,A_PENALTY_AMT FROM IM_EMIRATESSETTING WHERE (EMIRATECODE=MEMDET.LOCATION  OR EMIRATECODE IN (SELECT NVL(EMIRATE,-1) FROM IM_CATEGORIES WHERE CATEGORY_CODE= MEMDET.MEMBER_CATEGORY))  AND TYPECODE=MEMDET.ENTRYTYPE;

          IF A_EMIRATECOUNT>0 THEN

            A_NO_OF_DAYS:=ROUND((MEMDET.INCEPTION_DATE-MEMDET.DATE_OF_ENTRY));
            A_HAADFINE:=round(A_NO_OF_DAYS/A_FINELIMIT_DAYS)*A_PENALTY_AMT;
            UPDATE IM_POLICY_MEMBERS  SET NOOFDAYS=A_NO_OF_DAYS,HAADFINE=A_HAADFINE WHERE POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE;

          END IF;
    end;
    commit;
end loop;

        select nvl(sum(PREMIUM_VALUE),0)  into ATOTALPREMIMVALUE from IM_POLICY_PREMIUM where POLICY_MEM_CODE in 
        (select POLICY_MEM_CODE from IM_POLICY_MEMBERS where POLICYCODE=APolicyCode) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        select nvl(sum(PREMIUM_VALUE),0) into ATOTALADDPREMIMVALUE from IM_POLICY_ADDTIONALPREMIUM  where 
        POLICY_MEM_CODE in (select POLICY_MEM_CODE from IM_POLICY_MEMBERS where POLICYCODE=APolicyCode) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        ATOTALFINALPREMIUM := round((ATOTALPREMIMVALUE+ATOTALADDPREMIMVALUE),2);

        update  IM_POLICY set FINAL_PREMIUM=ATOTALFINALPREMIUM   where POLICYCODE=APolicyCode;

        update IM_POLICY_COMMISSION set COMMISSION_VALUE=round(((DEFAULTVALUE/100)*(ATOTALFINALPREMIUM)),2)  
        where POLICYCODE=APolicyCode  and CALC_METHOD=1;

        select nvl(sum(COMMISSION_VALUE),0) into ATOTALCOMMISIONVALUE  from IM_POLICY_COMMISSION where POLICYCODE=APolicyCode;

        update IM_POLICY_SHARINGDTL set FINALPREMIUMVALUE=round((decode(REINSR_NPQTYPE,0,ATOTALFINALPREMIUM,(ATOTALFINALPREMIUM+ATOTALCOMMISIONVALUE))*(REINSURANCE_NPQ/100)),2)  where POLICYCODE=APolicyCode  and REINSUR_VALUETYPE=1;
                                                                               
        NGI_GETMAX_REC('IM_POLICY_PREMIUM','SERIALNO'); 
    commit;

RETURN 'Save Completed Successfully !';
EXCEPTION WHEN OTHERS THEN
L_ERROR := SQLERRM;
RETURN L_ERROR;
end;
/



CREATE OR REPLACE FUNCTION FN_UWINDPOLICYPREMUIMDTL_ORA(AINDIVIDUALPOLICYCODE number) RETURN VARCHAR2
as

INDIVIDUALPOLICYROW  IM_INDIVIDUALPOLICY%rowtype;
ATotalDays number;
AAGE number;
APOLMEMBERDETCounter number;
APOLMEMBERDETPKEY number;
ATTOTALAPPLYAMMOUNT number;
ATOTALPREMIMVALUE number;
ATOTALADDPREMIMVALUE number;
ATOTALFINALPREMIUM number;
ATOTALCOMMISIONVALUE number;
A_EMIRATECOUNT NUMBER;
A_FINELIMIT_DAYS NUMBER;
A_PENALTY_AMT NUMBER;
A_HAADFINE NUMBER;
A_NO_OF_DAYS NUMBER;
L_BENEFITCOUNT NUMBER;
L_ERROR VARCHAR2(500);
L_POLICYBENEFITCODE NUMBER;
begin

select * into INDIVIDUALPOLICYROW from IM_INDIVIDUALPOLICY where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode;

DELETE FROM IM_IP_PREMIUM PRE WHERE PRE.IP_MEM_CODE IN
(SELECT PM.IP_MEM_CODE FROM IM_IP_MEMBERS PM WHERE PM.INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode);
COMMIT;

FOR HDR IN(SELECT * FROM IM_NGIINDPOLICYCATEGORY WHERE INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode) LOOP
   FOR CAN IN (SELECT * FROM IM_HEP_CAN_MASTER WHERE INDIVIDUALPOLICYROW.STARTDATE BETWEEN STARTDATE AND Nvl(ENDDATE,INDIVIDUALPOLICYROW.STARTDATE)) LOOP
    SELECT Count(*) INTO L_BENEFITCOUNT FROM IM_INDIVIDUALPOLICYBEBEFITS WHERE POLICYCATEGORYCODE = HDR.POLICYCATEGORYCODE
    AND BENEFIT_CODE = CAN.BENEFITCODE;
    IF L_BENEFITCOUNT =  0 THEN     
      INSERT INTO IM_INDIVIDUALPOLICYBEBEFITS
        (POLICYBEBEFITSCODE, 
        POLICYCATEGORYCODE, BENEFIT_CODE, TYPECODE, ACTIVE, COMPANYCODE, 
        CREATEDBY, LASTMODIFIEDBY, CREATEDON, LASTMODIFIEDON, LOCATIONCODE, 
        SERIALNO, DEFAULTPREMIUM, APPLYSETTINGPREMIUM, APPLYFULLPERMIUMREFUND, 
        CARDTEXT)
      VALUES
        ((SELECT Max(POLICYBEBEFITSCODE) + 1 FROM IM_INDIVIDUALPOLICYBEBEFITS),HDR.POLICYCATEGORYCODE, CAN.BENEFITCODE, 0, 1, 
        1, 100000000000000002, 100000000000000002, SYSDATE, SYSDATE, 
        1, (SELECT Max(SERIALNO) + 1 FROM IM_INDIVIDUALPOLICYBEBEFITS),  NULL, NULL, 
        NULL, NULL);
      COMMIT;

      SELECT Max(BENEFITSETTINGCODE)+1 INTO L_POLICYBENEFITCODE  FROM IM_POLICY_BENEFITSETTING WHERE
      POLICYCODE = INDIVIDUALPOLICYROW.INDIVIDUALPOLICYCODE AND CATEGORYCODE = HDR.CATEGORYCODE AND BENEFITCODE = CAN.BENEFITCODE
      AND REQTYPE = 1;

      Insert into IM_BENSETTINGAGELIMITS
        (BENSETTLMITAGECODE, 
        BENEFITSETTINGCODE, AGEFROM, AGETO, GENDERCODE, PREMIUM, 
        CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, 
        COMPANYCODE, LOCATIONCODE, DEACTIVATEDON, DEACTIVATEDBY, SERIALNO, 
        APPLICABLEFOR)
      Values
        ((SELECT Max(BENSETTLMITAGECODE) + 1 FROM IM_BENSETTINGAGELIMITS), L_POLICYBENEFITCODE, 0, 90, 2, 
        CAN.PREMIUMVALUE, 1, SYSDATE, 100000000000000002, SYSDATE, 
        100000000000000002, 1, 1, NULL, NULL, 
        (SELECT Max(SERIALNO) + 1 FROM IM_BENSETTINGAGELIMITS),4);
      COMMIT;

    ELSE
      SELECT Max(BENEFITSETTINGCODE)+1 INTO L_POLICYBENEFITCODE  FROM IM_POLICY_BENEFITSETTING WHERE
      POLICYCODE =  INDIVIDUALPOLICYROW.INDIVIDUALPOLICYCODE AND CATEGORYCODE = HDR.CATEGORYCODE AND BENEFITCODE = CAN.BENEFITCODE
      AND REQTYPE = 1;

      UPDATE IM_BENSETTINGAGELIMITS SET PREMIUM = CAN.PREMIUMVALUE,GENDERCODE = 2,APPLICABLEFOR = 4
      WHERE  BENEFITSETTINGCODE =L_POLICYBENEFITCODE;
      COMMIT; 
    END IF;
   END LOOP;
END LOOP;


for MEMDET  in (select * from IM_IP_MEMBERS where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode  and (select count(*) from IM_IP_PREMIUM where IM_IP_MEMBERS.IP_MEM_CODE=IM_IP_PREMIUM.IP_MEM_CODE)=0)
loop

    begin

        --select (IM_INDIVIDUALPOLICY.enddate-MEMDET.EFFECTIVEDATE) into ATotalDays from IM_INDIVIDUALPOLICY where IM_INDIVIDUALPOLICY.INDIVIDUALPOLICYcode=INDIVIDUALPOLICYROW.INDIVIDUALPOLICYcode;

        AAGE := ROUND (MONTHS_BETWEEN (SYSDATE,MEMDET.DATE_OF_BIRTH) / 12);

        delete from IM_IP_PREMIUM where  IM_IP_PREMIUM.IP_MEM_CODE=MEMDET.IP_MEM_CODE;

        select nvl(max(serialno),0)+1,nvl(max(PREMIUM_IND_MEM_CODE),100000000000000000)+1 into APOLMEMBERDETCounter,APOLMEMBERDETPKEY from IM_IP_PREMIUM;

        insert into IM_IP_PREMIUM (PREMIUM_IND_MEM_CODE,IP_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
        select APOLMEMBERDETPKEY+rownum PREMIUM_IND_MEM_CODE, MEMDET.IP_MEM_CODE,PremiumType PREMIUM_TYPES,PREMIUM DEFAULTVALUE,0 CALC_METHOD,PREMIUM PREMIUM_VALUE, MEMDET.LEGALENTITYCODE, MEMDET.CUSTOMERCODE, MEMDET.LOCATIONCODE,APOLMEMBERDETCounter+rownum  SERIALNO, MEMDET.COMPANYCODE, DESCRIPTION,BENIFTCODE BENEFITCODE
        from table (FN_POLICYBENEFITBREMIUM(1,AINDIVIDUALPOLICYCode,MEMDET.IP_MEM_CODE,MEMDET.MEMBER_CATEGORY,AAGE,MEMDET.MEMBER_GENDER,MEMDET.MARITAL_STATUS,MEMDET.MEMBER_RELATION,INDIVIDUALPOLICYROW.BASE_PERIMUM));

        --GENDERCODE, MEMBERRELATIONCODE, MARITALSTATUSCODE, CATEGORYCODE

        --select NGI_GETADDBASEPREMIUM(INDIVIDUALPOLICYROW.INDIVIDUALPOLICYcode ,1,MEMDET.CATEGORYCODE,AAGE,MEMDET.GENDERCODE,MEMDET.MARITALSTATUSCODE,MEMDET.MEMBERRELATIONCODE) into ATTOTALAPPLYAMMOUNT from dual ;
        select nvl(max(PREMIUM_VALUE),0) into ATTOTALAPPLYAMMOUNT from IM_IP_PREMIUM where IP_MEM_CODE=MEMDET.IP_MEM_CODE and  PREMIUM_TYPES=0;

        --update IM_IP_MEMBERS set TOTALAPPLYAMOUNT=ATTOTALAPPLYAMMOUNT where IM_IP_MEMBERS.IP_MEM_CODE=MEMDET.IP_MEM_CODE;

        update IM_IP_ADDITIONALPREMIUM set PREMIUM_VALUE=round(((DEFAULTVALUE/100)*(ATTOTALAPPLYAMMOUNT)),2)  where IP_MEM_CODE=MEMDET.IP_MEM_CODE and CALC_METHOD=1;


        SELECT COUNT(*),NVL(MAX(LIMITS),0),NVL(MAX(PENALTY),0) INTO A_EMIRATECOUNT,A_FINELIMIT_DAYS,A_PENALTY_AMT FROM IM_EMIRATESSETTING WHERE (EMIRATECODE=MEMDET.LOCATION  OR EMIRATECODE IN (SELECT NVL(EMIRATE,-1) FROM IM_CATEGORIES WHERE CATEGORY_CODE= MEMDET.MEMBER_CATEGORY))  AND TYPECODE=MEMDET.ENTRYTYPE;

          IF A_EMIRATECOUNT>0 THEN

            A_NO_OF_DAYS:=ROUND((MEMDET.INCEPTION_DATE-MEMDET.DATE_OF_ENTRY));
            A_HAADFINE:=round(A_NO_OF_DAYS/A_FINELIMIT_DAYS)*A_PENALTY_AMT;
            UPDATE IM_IP_PREMIUM  SET NOOFDAYS=A_NO_OF_DAYS,HAADFINE=A_HAADFINE WHERE IP_MEM_CODE=MEMDET.IP_MEM_CODE;

          END IF;
    end;
end loop;

        select nvl(sum(PREMIUM_VALUE),0)  into ATOTALPREMIMVALUE from IM_IP_PREMIUM where IP_MEM_CODE in 
        (select IP_MEM_CODE from IM_IP_MEMBERS where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        select nvl(sum(PREMIUM_VALUE),0) into ATOTALADDPREMIMVALUE from IM_IP_ADDITIONALPREMIUM  where IP_MEM_CODE in 
        (select IP_MEM_CODE from IM_IP_MEMBERS where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        ATOTALFINALPREMIUM := round((ATOTALPREMIMVALUE+ATOTALADDPREMIMVALUE),2);

        update  IM_INDIVIDUALPOLICY set FINAL_PREMIUM=ATOTALFINALPREMIUM   where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode;

        update IM_IP_COMMISSION set COMMISSION_VALUE=round(((DEFAULTVALUE/100)*(ATOTALFINALPREMIUM)),2)  where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode  and CALC_METHOD=1;

        select nvl(sum(COMMISSION_VALUE),0) into ATOTALCOMMISIONVALUE  from IM_IP_COMMISSION where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode;

        update IM_INDPOLICY_SHARINGDTL set FINALPREMIUMVALUE=round((decode(REINSR_NPQTYPE,0,ATOTALFINALPREMIUM,(ATOTALFINALPREMIUM+ATOTALCOMMISIONVALUE))*(REINSURANCE_NPQ/100)),2)  where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode  and REINSUR_VALUETYPE=1;

        --UPDATE IM_INDIVIDUALPOLICY SET AUTHORIZEDSTATUS = 1 where INDIVIDUALPOLICYCODE=AINDIVIDUALPOLICYCode;

        --delete from adm_tableserial_pk where tablename='IM_IP_PREMIUM';
        NGI_GETMAX_REC('IM_IP_PREMIUM','SERIALNO');
        /*
        AV_GETMAX('IM_MEMBERS','SERIALNO');
        AV_GETMAX('IM_MEMBERINDIVIDUALPOLICY','SERIALNO');
        AV_GETMAX('IM_CORDPRINT','SERIALNO');
        AV_GETMAX('IM_MEMBERINDIVIDUALPOLICYPREMIUMDTL','SERIALNO');
        */
    commit;

RETURN 'Save Completed Successfully !';
EXCEPTION WHEN OTHERS THEN
L_ERROR := SQLERRM;
RETURN L_ERROR;
end;
/

PROMPT CREATE OR REPLACE FUNCTION fn_uwaddmemberpolicypredtl
CREATE OR REPLACE FUNCTION fn_uwaddmemberpolicypredtl(AAddmemberPolicyCode number) RETURN VARCHAR2
as

ADDMEMPOLICYROW  IM_ADDMEMBERPOLICY%rowtype;
ATotalDays number;
AAGE number;
AADDMEMBERDETCounter number;
AADDMEMBERDETPKEY number;
ATTOTALAPPLYAMMOUNT number;
ATOTALPREMIMVALUE number;
ATOTALADDPREMIMVALUE number;
ATOTALFINALPREMIUM number;
ATOTALCOMMISIONVALUE number;
A_EMIRATECOUNT NUMBER;
A_FINELIMIT_DAYS NUMBER;
A_PENALTY_AMT NUMBER;
A_HAADFINE NUMBER;
A_NO_OF_DAYS NUMBER;
L_ERROR nvarchar2(500);
L_COMMISSIONCOUNT NUMBER;
L_COMMISSIONSNO NUMBER;L_COMMISSIONPKEY NUMBER;
begin

select * into ADDMEMPOLICYROW from IM_ADDMEMBERPOLICY where AddmemberPolicyCode=AAddmemberPolicyCode;






for MEMDET  in (select * from IM_ADDMEMBERDET where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode
AND MEMBERRELATIONCODE NOT IN (0,15,77)) LOOP

 if NVL(MEMDET.PARENTID,'0') ='0' THEN
    RETURN  'Parent ID cannot be null for the Member - '||MEMDET.memberid||'-'||MEMDET.MEMBERNAME;
 END IF;

END LOOP;

IF Nvl(ADDMEMPOLICYROW.USERPREMIUM,0) = 0 THEN
DELETE  FROM IM_ADDMEMBERCOMMISIONDET where AddmemberPolicyCode=AAddmemberPolicyCode;
COMMIT;
SELECT Count(*) INTO L_COMMISSIONCOUNT FROM IM_ADDMEMBERCOMMISIONDET where AddmemberPolicyCode=AAddmemberPolicyCode;

IF ADDMEMPOLICYROW.PolicyType = 1 THEN
  IF L_COMMISSIONCOUNT  = 0 THEN
    SELECT Max(ADDMEMBERCOMMDETCODE) INTO L_COMMISSIONPKEY FROM IM_ADDMEMBERCOMMISIONDET;
    SELECT Max(SERIALNO) INTO L_COMMISSIONSNO FROM IM_ADDMEMBERCOMMISIONDET;

    INSERT INTO IM_ADDMEMBERCOMMISIONDET
    SELECT L_COMMISSIONPKEY+ROWNUM,ADDMEMPOLICYROW.AddmemberPolicyCode,
    P.POLICYCODE,P.COMISSION_TYPES,P.DEFAULTVALUE,P.CALC_METHOD,P.COMMISSION_VALUE,
    1,SYSDATE,NULL,SYSDATE,NULL,NULL,NULL,1,L_COMMISSIONSNO+ROWNUM,
    1,P.COMMISSIONTO,P.COMMISIONTONAME DESCRIPTION,P.GENERALCOMMBILLINGCODE,NULL FROM IM_POLICY_COMMISSION P
    WHERE P.POLICYCODE = ADDMEMPOLICYROW.POLICYCODE;
    COMMIT;
  END IF;
ELSIF ADDMEMPOLICYROW.PolicyType = 2 THEN
  IF L_COMMISSIONCOUNT  = 0 THEN
    SELECT Max(ADDMEMBERCOMMDETCODE) INTO L_COMMISSIONPKEY FROM IM_ADDMEMBERCOMMISIONDET;
    SELECT Max(SERIALNO) INTO L_COMMISSIONSNO FROM IM_ADDMEMBERCOMMISIONDET;

    INSERT INTO IM_ADDMEMBERCOMMISIONDET
    SELECT L_COMMISSIONPKEY+ROWNUM,ADDMEMPOLICYROW.AddmemberPolicyCode,
    P.INDIVIDUALPOLICYCODE,P.COMISSION_TYPES,P.DEFAULTVALUE,P.CALC_METHOD,P.COMMISSION_VALUE,
    1,SYSDATE,NULL,SYSDATE,NULL,NULL,NULL,1,L_COMMISSIONSNO+ROWNUM,
    1,P.COMMISSIONTO,P.INDPOLCYCOMMISIONTO DESCRIPTION,P.GENERALCOMMBILLINGCODE,NULL FROM IM_IP_COMMISSION P
    WHERE P.INDIVIDUALPOLICYCODE = ADDMEMPOLICYROW.INDIVIDUALPOLICYCODE;
    COMMIT;
  END IF;
END IF;

for MEMDET  in (SELECT * FROM IM_ADDMEMBERDET WHERE ADDMEMBERPOLICYCODE = AAddmemberPolicyCode)


loop

    begin

        if(Nvl(ADDMEMPOLICYROW.UserDefinedDate,0)=1) THEN
          if(ADDMEMPOLICYROW.PolicyType=1) then
            select (IM_POLICY.enddate-IM_POLICY.STARTdate) into ATotalDays from IM_POLICY where IM_POLICY.policycode=ADDMEMPOLICYROW.policycode;
          else
              select (IM_INDIVIDUALPOLICY.enddate-IM_INDIVIDUALPOLICY.STARTdate) into ATotalDays from IM_INDIVIDUALPOLICY where IM_INDIVIDUALPOLICY.INDIVIDUALpolicycode=ADDMEMPOLICYROW.INDIVIDUALPOLICYCODE;
          end if;
        ELSE
          if(ADDMEMPOLICYROW.PolicyType=1) then
            select (IM_POLICY.enddate-MEMDET.EFFECTIVEDATE) into ATotalDays from IM_POLICY where IM_POLICY.policycode=ADDMEMPOLICYROW.policycode;
          else
              select (IM_INDIVIDUALPOLICY.enddate-MEMDET.EFFECTIVEDATE) into ATotalDays from IM_INDIVIDUALPOLICY where IM_INDIVIDUALPOLICY.INDIVIDUALpolicycode=ADDMEMPOLICYROW.INDIVIDUALPOLICYCODE;
          end if;
        END IF;


        AAGE :=  ROUND (MONTHS_BETWEEN (SYSDATE,MEMDET.DATE_OF_BIRTH) / 12);

        delete from IM_ADDMEMBERPREDETL where  IM_ADDMEMBERPREDETL.ADDMEMBERDETCODE=MEMDET.ADDMEMBERDETCODE;

        select nvl(max(serialno),0)+1,nvl(max(ADDMEMPOLICYPREMIUMCODE),100000000000000000)+1 into AADDMEMBERDETCounter,AADDMEMBERDETPKEY from IM_ADDMEMBERPREDETL;

        insert into IM_ADDMEMBERPREDETL (ADDMEMPOLICYPREMIUMCODE,ADDMEMBERDETCODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)
        select AADDMEMBERDETPKEY+rownum ADDMEMPOLICYPREMIUMCODE, MEMDET.ADDMEMBERDETCODE,PremiumType PREMIUM_TYPES,PREMIUM DEFAULTVALUE,0 CALC_METHOD,PREMIUM PREMIUM_VALUE, MEMDET.LEGALENTITYCODE, MEMDET.CUSTOMERCODE, MEMDET.LOCATIONCODE,AADDMEMBERDETCounter+rownum  SERIALNO, MEMDET.COMPANYCODE, DESCRIPTION,BENIFTCODE BENEFITCODE
        from table (FN_ADDMEMBERBENEFITBREMIUM(AAddmemberPolicyCode,nvl(ADDMEMPOLICYROW.policycode,ADDMEMPOLICYROW.INDIVIDUALPOLICYCODE),ATotalDays,ADDMEMPOLICYROW.PolicyType,MEMDET.CATEGORYCODE,AAGE,MEMDET.GENDERCODE,MEMDET.MARITALSTATUSCODE,MEMDET.MEMBERRELATIONCODE));
        --GENDERCODE, MEMBERRELATIONCODE, MARITALSTATUSCODE, CATEGORYCODE

        select NGI_GETADDBASEPREMIUM(ADDMEMPOLICYROW.policycode ,ADDMEMPOLICYROW.PolicyType,MEMDET.CATEGORYCODE,AAGE,MEMDET.GENDERCODE,MEMDET.MARITALSTATUSCODE,MEMDET.MEMBERRELATIONCODE) into ATTOTALAPPLYAMMOUNT from dual ;

        update IM_ADDMEMBERDET set TOTALAPPLYAMOUNT=ATTOTALAPPLYAMMOUNT where IM_ADDMEMBERDET.ADDMEMBERDETCODE=MEMDET.ADDMEMBERDETCODE;

        update IM_ADDMEM_ADDITIONLPREMIUM set PREMIUM_VALUE=round(((DEFAULTVALUE/100)*(ATTOTALAPPLYAMMOUNT)),2)  where ADDMEMBERDETCODE=MEMDET.ADDMEMBERDETCODE and CALC_METHOD=1;

        SELECT COUNT(*),NVL(MAX(LIMITS),0),NVL(MAX(PENALTY),0) INTO A_EMIRATECOUNT,A_FINELIMIT_DAYS,A_PENALTY_AMT FROM IM_EMIRATESSETTING WHERE (EMIRATECODE=MEMDET.LOCATION  OR EMIRATECODE IN (SELECT NVL(EMIRATE,-1) FROM IM_CATEGORIES WHERE CATEGORY_CODE= MEMDET.CATEGORYCODE))  AND TYPECODE=MEMDET.ENTRYTYPE;

          IF A_EMIRATECOUNT>0 THEN

            A_NO_OF_DAYS:=ROUND((MEMDET.EFFECTIVEDATE-MEMDET.DATE_OF_ENTRY));
            A_HAADFINE:=round(A_NO_OF_DAYS/A_FINELIMIT_DAYS)*A_PENALTY_AMT;
            UPDATE IM_ADDMEMBERDET  SET NOOFDAYS=A_NO_OF_DAYS,HAADFINE=A_HAADFINE WHERE ADDMEMBERDETCODE=MEMDET.ADDMEMBERDETCODE;

        END IF;

    end;
    COMMIT;
end loop;
END IF;

        select nvl(sum(PREMIUM_VALUE),0)  into ATOTALPREMIMVALUE from IM_ADDMEMBERPREDETL where ADDMEMBERDETCODE in 
        (select ADDMEMBERDETCODE from IM_ADDMEMBERDET where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        select nvl(sum(PREMIUM_VALUE),0) into ATOTALADDPREMIMVALUE from IM_ADDMEM_ADDITIONLPREMIUM  where ADDMEMBERDETCODE in 
        (select ADDMEMBERDETCODE from IM_ADDMEMBERDET where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode)AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        ATOTALFINALPREMIUM := round((ATOTALPREMIMVALUE+ATOTALADDPREMIMVALUE),2);

        update  IM_ADDMEMBERPOLICY set TOTALAPPLYAMOUNT=ATOTALFINALPREMIUM   where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode;

        update IM_ADDMEMBERCOMMISIONDET set COMMISSION_VALUE=round(((DEFAULTVALUE/100)*(ATOTALFINALPREMIUM)),2)
        where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode  and CALC_METHOD=1;

        select nvl(sum(COMMISSION_VALUE),0) into ATOTALCOMMISIONVALUE  from IM_ADDMEMBERCOMMISIONDET
        where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode;

        update IM_ADDMEMBERPOL_SHARINGDTL set FinalPremiumValue=round((decode(REINSR_NPQTYPE,0,ATOTALFINALPREMIUM,(ATOTALFINALPREMIUM+ATOTALCOMMISIONVALUE))*(REINSURANCE_NPQ/100)),2)  where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode  and REINSUR_VALUETYPE=1;

        update IM_ADDMEMBERPOL_SHARINGDTL set FinalPremiumValue=REINSURANCE_NPQ  where ADDMEMBERPOLICYCODE=AAddmemberPolicyCode  and REINSUR_VALUETYPE<>1;

        --delete from adm_tableserial_pk where tablename='IM_ADDMEMBERPREDETL';
        NGI_GETMAX_REC('IM_ADDMEMBERPREDETL','SERIALNO');

        RETURN 'Save completed Successfully';
        /*
        AV_GETMAX('IM_MEMBERS','SERIALNO');
        AV_GETMAX('IM_MEMBERPOLICY','SERIALNO');
        AV_GETMAX('IM_CORDPRINT','SERIALNO');
        AV_GETMAX('IM_MEMBERPOLICYPREMIUMDTL','SERIALNO');
        */
    commit;


 EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
RETURN L_ERROR;


end;
/

PROMPT CREATE OR REPLACE PROCEDURE fn_delcancel_premium
CREATE OR REPLACE FUNCTION FN_DELCANCEL_PREMIUM_ORA(ADELCANCELMEMERPOLICYCODE number) RETURN VARCHAR2
as

DELMEMROW  IM_DEL_CANCEL_MEMBER%rowtype;
MEMROW  IM_MEMBERS%rowtype;
A_POLICYCODE  number;
REMAINIGDAYS number;
AAGE number;
DelMemPremiumPkey number;
DelMemPremiumCounter number;
MemberEffectiveDate date;
ATTOTALAPPLYAMMOUNT number;
ATOTALPREMIMVALUE number;
ATOTALADDPREMIMVALUE number;
ATOTALFINALPREMIUM number;
ATOTALCOMMISIONVALUE number;
L_OWNERCODE NUMBER;L_COMMISSIONCOUNT NUMBER;
L_COMMISSIONSNO NUMBER;L_COMMISSIONPKEY NUMBER;
L_ERROR VARCHAR2(500);
begin

select * into DELMEMROW from IM_DEL_CANCEL_MEMBER where DCMEMBER_CODE=ADELCANCELMEMERPOLICYCODE;
DELETE  FROM IM_DELMEMBERCOMMISIONDET where DCMEMBER_CODE=ADELCANCELMEMERPOLICYCODE;
COMMIT;

SELECT Count(*) INTO L_COMMISSIONCOUNT FROM IM_DELMEMBERCOMMISIONDET
WHERE  DCMEMBER_CODE=ADELCANCELMEMERPOLICYCODE;

IF DELMEMROW.POLICYTYPECODE = 1 THEN
  IF L_COMMISSIONCOUNT  = 0 THEN
    SELECT Max(DELMEMBERCOMMDETCODE) INTO L_COMMISSIONPKEY FROM IM_DELMEMBERCOMMISIONDET;
    SELECT Max(SERIALNO) INTO L_COMMISSIONSNO FROM IM_DELMEMBERCOMMISIONDET;

    INSERT INTO IM_DELMEMBERCOMMISIONDET
    SELECT L_COMMISSIONPKEY+ROWNUM,DELMEMROW.DCMEMBER_CODE,
    P.POLICYCODE,P.COMISSION_TYPES,P.DEFAULTVALUE,P.CALC_METHOD,P.COMMISSION_VALUE,
    1,SYSDATE,NULL,SYSDATE,NULL,NULL,NULL,1,L_COMMISSIONSNO+ROWNUM,
    1,P.COMMISSIONTO,P.COMMISIONTONAME DESCRIPTION,P.GENERALCOMMBILLINGCODE FROM IM_POLICY_COMMISSION P
    WHERE P.POLICYCODE = DELMEMROW.POLICYCODE;
    COMMIT;
  END IF;
ELSIF DELMEMROW.POLICYTYPECODE = 2 THEN
  IF L_COMMISSIONCOUNT  = 0 THEN
    SELECT Max(DELMEMBERCOMMDETCODE) INTO L_COMMISSIONPKEY FROM IM_DELMEMBERCOMMISIONDET;
    SELECT Max(SERIALNO) INTO L_COMMISSIONSNO FROM IM_DELMEMBERCOMMISIONDET;

    INSERT INTO IM_DELMEMBERCOMMISIONDET
    SELECT L_COMMISSIONPKEY+ROWNUM,DELMEMROW.DCMEMBER_CODE,
    P.INDIVIDUALPOLICYCODE,P.COMISSION_TYPES,P.DEFAULTVALUE,P.CALC_METHOD,P.COMMISSION_VALUE,
    1,SYSDATE,NULL,SYSDATE,NULL,NULL,NULL,1,L_COMMISSIONSNO+ROWNUM,
    1,P.COMMISSIONTO,P.INDPOLCYCOMMISIONTO DESCRIPTION,P.GENERALCOMMBILLINGCODE FROM IM_IP_COMMISSION P
    WHERE P.INDIVIDUALPOLICYCODE = DELMEMROW.INDIVIDUALPOLICYCODE;
    COMMIT;
  END IF;
END IF;


DELETE FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_MEMBERPOLICY WHERE DCMEMBER_CODE = ADELCANCELMEMERPOLICYCODE);
COMMIT;
for MEMDET  in (select * from IM_DELCAN_MEMBERSDTL where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE)
loop

    begin
        select * into MEMROW from IM_MEMBERS where IM_MEMBERS.MEMBER_CODE=MEMDET.MEMBERCODE;

        if(DELMEMROW.POLICYTYPECODE=1) then
            select (IM_POLICY.ENDDATE-MEMDET.EFFECTIVEDATE),OWNERCODE into REMAINIGDAYS,L_OWNERCODE from IM_POLICY where IM_POLICY.policycode=DELMEMROW.policycode;
            A_POLICYCODE:=DELMEMROW.policycode;
        else
            select (IM_INDIVIDUALPOLICY.ENDDATE-MEMDET.EFFECTIVEDATE),OWNERCODE into REMAINIGDAYS,L_OWNERCODE from IM_INDIVIDUALPOLICY where IM_INDIVIDUALPOLICY.INDIVIDUALpolicycode=DELMEMROW.INDIVIDUALPOLICYCODE;
            A_POLICYCODE:=DELMEMROW.INDIVIDUALPOLICYCODE;
        end if;

        AAGE :=ROUND (MONTHS_BETWEEN (SYSDATE,MEMROW.DATE_OF_BIRTH) / 12);

        MEMBEREFFECTIVEDATE:=MEMROW.COVERED_FROM_DATE;

        if (MEMROW.COVERED_FROM_DATE < MEMROW.EFFECTIVE_START_DATE) then
            MEMBEREFFECTIVEDATE := MEMROW.EFFECTIVE_START_DATE;
        end if;

        if (MEMBEREFFECTIVEDATE = MEMDET.EFFECTIVEDATE) then
            REMAINIGDAYS:=REMAINIGDAYS ;
        end if;

        delete from IM_DELCANREFUNDPREDTL where  POLICY_MEM_CODE=MEMDET.POLICY_MEM_CODE;

        IF L_OWNERCODE = 3 OR L_OWNERCODE = 13 THEN
          select nvl(max(SERIALNO),0)+1,nvl(max(DELCANREFUNDPRE),100000000000000000)+1 into DelMemPremiumCounter,DelMemPremiumPkey from IM_DELCANREFUNDPREDTL;

          insert into IM_DELCANREFUNDPREDTL (DELCANREFUNDPRE, POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
          CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, LEGALENTITYCODE, CUSTOMERCODE,
          LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)

          select DelMemPremiumPkey+rownum DELCANREFUNDPRE,MEMDET.POLICY_MEM_CODE,PREMIUMTYPE,PREMIUM DEFAULTVALUE,0 CALC_METHOD,PREMIUM PREMIUM_VALUE,
          SYSDATE CREATEDON,MEMDET.CREATEDBY,SYSDATE LASTMODIFIEDON,MEMDET.LASTMODIFIEDBY,MEMDET.LEGALENTITYCODE,MEMDET.CUSTOMERCODE,
          MEMDET.LOCATIONCODE,DelMemPremiumCounter+rownum, MEMDET.COMPANYCODE,DESCRIPTION,BENIFTCODE
          --from (table (FN_DELETEORCANCELTYPEREFFULL(DELMEMROW.TYPECODE,A_POLICYCODE,MEMROW.MEMBER_CODE,REMAINIGDAYS,DELMEMROW.CANCELLEDBYCODE,DELMEMROW.POLICYTYPECODE,DECODE(DELMEMROW.POLICYTYPECODE,1,DELMEMROW.REFUNDPREMIUM,2,1))));
          from (table (FN_DELETEORCANCELTYPEREFFULL(DELMEMROW.TYPECODE,A_POLICYCODE,MEMROW.MEMBER_CODE,REMAINIGDAYS,DELMEMROW.CANCELLEDBYCODE,DELMEMROW.POLICYTYPECODE,DELMEMROW.REFUNDPREMIUM)));
        ELSE
          select nvl(max(SERIALNO),0)+1,nvl(max(DELCANREFUNDPRE),100000000000000000)+1 into DelMemPremiumCounter,DelMemPremiumPkey from IM_DELCANREFUNDPREDTL;

          insert into IM_DELCANREFUNDPREDTL (DELCANREFUNDPRE, POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
          CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, LEGALENTITYCODE, CUSTOMERCODE,
          LOCATIONCODE, SERIALNO, COMPANYCODE, DESCRIPTION, BENEFITCODE)

          select DelMemPremiumPkey+rownum DELCANREFUNDPRE,MEMDET.POLICY_MEM_CODE,PREMIUMTYPE,PREMIUM DEFAULTVALUE,0 CALC_METHOD,PREMIUM PREMIUM_VALUE,
          SYSDATE CREATEDON,MEMDET.CREATEDBY,SYSDATE LASTMODIFIEDON,MEMDET.LASTMODIFIEDBY,MEMDET.LEGALENTITYCODE,MEMDET.CUSTOMERCODE,
          MEMDET.LOCATIONCODE,DelMemPremiumCounter+rownum, MEMDET.COMPANYCODE,DESCRIPTION,BENIFTCODE
          --from (table (FN_DELETEORCANCELTYPEREFFULL(DELMEMROW.TYPECODE,A_POLICYCODE,MEMROW.MEMBER_CODE,REMAINIGDAYS,DELMEMROW.CANCELLEDBYCODE,DELMEMROW.POLICYTYPECODE,DECODE(DELMEMROW.POLICYTYPECODE,1,DELMEMROW.REFUNDPREMIUM,2,1))));
          from (table (FN_DELMEMBERBENEFITBREMIUM(MEMROW.MEMBER_CODE,A_POLICYCODE,REMAINIGDAYS,DELMEMROW.POLICYTYPECODE,MEMROW.CATEGORY_CODE,AAGE,MEMROW.GENDER,MEMROW.MARITAL_STATUS,MEMROW.RELATION)));
        END IF;
    end;

end loop;

        select nvl(sum(PREMIUM_VALUE),0)  into ATOTALPREMIMVALUE from IM_DELCANREFUNDPREDTL where POLICY_MEM_CODE in 
        (select POLICY_MEM_CODE from IM_DELCAN_MEMBERSDTL where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE)AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        select nvl(sum(PREMIUM_VALUE),0) into ATOTALADDPREMIMVALUE from IM_DELMEM_ADDITIONLPREMIUM  where POLICY_MEM_CODE in
        (select POLICY_MEM_CODE from IM_DELCAN_MEMBERSDTL where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE) AND BENEFITCODE NOT IN
        (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1);

        ATOTALFINALPREMIUM := round((ATOTALPREMIMVALUE+ATOTALADDPREMIMVALUE),2);

        update  IM_DEL_CANCEL_MEMBER set TOTALAPPLYAMOUNT=ATOTALFINALPREMIUM   where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE;

        update IM_DELMEMBERCOMMISIONDET set COMMISSION_VALUE=round(((DEFAULTVALUE/100)*(ATOTALFINALPREMIUM)),2)  where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE  and CALC_METHOD=1;

        select nvl(sum(COMMISSION_VALUE),0) into ATOTALCOMMISIONVALUE  from IM_DELMEMBERCOMMISIONDET where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE;

        update IM_DELCANCELMEMPOL_SHARINGDTL set FinalPremiumValue=round((decode(REINSR_NPQTYPE,0,ATOTALFINALPREMIUM,(ATOTALFINALPREMIUM+ATOTALCOMMISIONVALUE))*(REINSURANCE_NPQ/100)),2)  where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE  and REINSUR_VALUETYPE=1;

        update IM_DELCANCELMEMPOL_SHARINGDTL set FinalPremiumValue=REINSURANCE_NPQ  where DCMEMBER_CODE=DELMEMROW.DCMEMBER_CODE  and REINSUR_VALUETYPE<>1;

        NGI_GETMAX_REC('IM_DELCANREFUNDPREDTL','SERIALNO');

    commit;

 RETURN 'Save completed Successfully !';
 EXCEPTION WHEN OTHERS THEN
 L_ERROR := SQLERRM;
 RETURN L_ERROR;
end;
/

ALTER TABLE IM_PR_SPONSOR_APPLICATION ADD(BASEPREMIUM NUMBER(19,2),CANPREMIUM NUMBER(19,2),HEPPREMIUM NUMBER(19,2));

CREATE OR REPLACE TRIGGER im_pr_sponsor_application_trg1 BEFORE INSERT  ON im_pr_sponsor_application REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
L_LOGINTYPE NUMBER(3);L_POLICYSTARTDATE DATE;
L_ERROR VARCHAR2(1000);L_PREMIUM NUMBER(19,2);L_SOURCE NUMBER;
L_SPONSOR_ROW IM_PR_SPONSOR%ROWTYPE;L_TOTALDAYS NUMBER;
L_BASE_ROW IM_PR_BASERATES%ROWTYPE;L_POLICYDAYS NUMBER;L_POLICYCOUNT NUMBER;
L_COMMISSION NUMBER(19,2);L_TPAFEE NUMBER(19,2);L_NGIFEE NUMBER(19,2);L_VATPREMIUM NUMBER(19,2);
L_CANPREMIUM NUMBER(19,2);L_HEPPREMIUM NUMBER(19,2);L_BASEPREMIUM NUMBER(19,2);
BEGIN

:NEW.MEMBER_TYPE := :NEW.RELATION;
L_POLICYDAYS := 0;

SELECT * INTO L_SPONSOR_ROW FROM IM_PR_SPONSOR WHERE SPONSOR_CODE = :NEW.SPONSOR_CODE;
IF L_SPONSOR_ROW.POLICYTYPE = 1 THEN
  SELECT Count(*) INTO L_POLICYCOUNT FROM     IM_POLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
  IF L_POLICYCOUNT > 0 THEN
    SELECT (ENDDATE-STARTDATE)+1 INTO L_POLICYDAYS  FROM IM_POLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
    SELECT (ENDDATE-:NEW.STARTDATE) INTO L_TOTALDAYS FROM IM_POLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
  END IF;
ELSIF L_SPONSOR_ROW.POLICYTYPE = 2 THEN
  SELECT Count(*) INTO L_POLICYCOUNT FROM     IM_INDIVIDUALPOLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
  IF L_POLICYCOUNT > 0 THEN
    SELECT (ENDDATE-STARTDATE)+1 INTO L_POLICYDAYS FROM IM_INDIVIDUALPOLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
    SELECT (ENDDATE-:NEW.STARTDATE) INTO L_TOTALDAYS  FROM  IM_INDIVIDUALPOLICY WHERE SPONSORCODE = L_SPONSOR_ROW.SPONSOR_CODE;
  END IF;
END IF;

IF Nvl(L_SPONSOR_ROW.STAFFCODE,0) = 0 THEN
  L_SOURCE := 3;
ELSE
  SELECT Decode(EMPTYPE,1,4,2,5) INTO L_SOURCE FROM IM_PR_STAFF   WHERE STAFFCODE = L_SPONSOR_ROW.STAFFCODE;
END IF;
--L_ERROR := PR_UPLOADBASERATE_FNC(100000000000000001);
SELECT * INTO L_BASE_ROW FROM IM_PR_BASERATES WHERE
RELATION = Decode(:NEW.RELATION,1,77,2,8,3,4,4,1,5,5,6,77,7,77,8,2,9,6)
AND MARITAL_STATUS = Decode(:NEW.MARITAL_STATUS,1,0,2,1,3,2,4,3)
AND Decode(OWNERCODE,7,1,21,3,OWNERCODE) =  L_SPONSOR_ROW.ADMINISTRATEDBY
AND Nvl(PLANCODE,0) = Nvl(L_SPONSOR_ROW.ADMINISTRATEDDTLCODE,0) AND GENDER = :NEW.GENDER
AND SOURCE = L_SOURCE AND ACTIVE = 1 AND CEIL(MONTHS_BETWEEN(SYSDATE, :NEW.DATE_OF_BIRTH) / 12)
BETWEEN FROMAGE AND TOAGE AND ROWNUM < 2;

IF Nvl(L_BASE_ROW.COMMISSION,0) = 0 THEN
  IF Nvl(L_BASE_ROW.COMMISSIONPERCENT,0) = 0 THEN
     L_COMMISSION := 0;
  ELSE
     L_COMMISSION := L_BASE_ROW.NETPREMIUM*(L_BASE_ROW.COMMISSIONPERCENT/100);
  END IF;
ELSE
  L_COMMISSION := L_BASE_ROW.COMMISSION;
END IF;
IF Nvl(L_BASE_ROW.TPAFEE,0) = 0 THEN
  IF Nvl(L_BASE_ROW.TPAFEEPERCENT,0) = 0 THEN
     L_TPAFEE := 0;
  ELSE
     L_TPAFEE := L_BASE_ROW.NETPREMIUM*(L_BASE_ROW.TPAFEEPERCENT/100);
  END IF;
ELSE
  L_TPAFEE := L_BASE_ROW.TPAFEE;
END IF;
IF Nvl(L_BASE_ROW.NGIFEE,0) = 0 THEN
  IF Nvl(L_BASE_ROW.NGIFEEPERCENT,0) = 0 THEN
     L_NGIFEE := 0;
  ELSE
     L_NGIFEE := L_BASE_ROW.NETPREMIUM*(L_BASE_ROW.NGIFEEPERCENT/100);
  END IF;
ELSE
  L_NGIFEE := L_BASE_ROW.NGIFEE;
END IF;

L_PREMIUM := Nvl(L_BASE_ROW.NETPREMIUM,0)+Nvl(L_COMMISSION,0)+Nvl(L_TPAFEE,0)+Nvl(L_NGIFEE,0);

SELECT Sum(Nvl(PREMIUMVALUE,0)) INTO L_CANPREMIUM FROM IM_HEP_CAN_MASTER WHERE 
:NEW.STARTDATE BETWEEN STARTDATE AND Nvl(ENDDATE,:NEW.STARTDATE) AND BENEFITCODE IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(SEPARATEDOCUMENT,0) = 0);  

SELECT Sum(Nvl(PREMIUMVALUE,0)) INTO L_HEPPREMIUM FROM IM_HEP_CAN_MASTER WHERE 
:NEW.STARTDATE BETWEEN STARTDATE AND Nvl(ENDDATE,:NEW.STARTDATE) AND BENEFITCODE IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(SEPARATEDOCUMENT,0) = 1);

IF Nvl(L_POLICYDAYS,0) = 0 THEN
   L_VATPREMIUM := Nvl(L_PREMIUM,0) + Nvl(L_CANPREMIUM,0);
  :NEW.GROSSPREMIUM := L_VATPREMIUM + Nvl(L_HEPPREMIUM,0);
  :NEW.VATPREMIUM := L_VATPREMIUM*0.05;
  :NEW.BASEPREMIUM := L_BASEPREMIUM;
ELSE
   L_PREMIUM := Round((L_PREMIUM/L_POLICYDAYS)*L_TOTALDAYS,2);
   L_CANPREMIUM := Round((L_CANPREMIUM/L_POLICYDAYS)*L_TOTALDAYS,2);
   L_HEPPREMIUM := Round((L_HEPPREMIUM/L_POLICYDAYS)*L_TOTALDAYS,2);
   L_VATPREMIUM := Nvl(L_PREMIUM,0) + Nvl(L_CANPREMIUM,0);
   :NEW.GROSSPREMIUM := L_VATPREMIUM + Nvl(L_HEPPREMIUM,0);
  :NEW.VATPREMIUM := L_VATPREMIUM*0.05;  
  :NEW.BASEPREMIUM := L_BASEPREMIUM;
END IF;

END;
/

PROMPT CREATE OR REPLACE FUNCTION ngi_pr_create_member_orafnc
CREATE OR REPLACE FUNCTION ngi_pr_create_member_orafnc(P_POLICYTYPE NUMBER,P_POLICYCODE NUMBER,P_PAYMENTCODE NUMBER) RETURN VARCHAR2
AS
L_RESULT VARCHAR2(500);
L_PAYMENT_ROW IM_PR_PAYMENT_HDR%ROWTYPE;
APOLMEMPKEY NUMBER;APOLMEMCOUNTER NUMBER;
BEGIN
IF P_POLICYTYPE = 1 THEN
  SELECT Max(POLICY_MEM_CODE) INTO APOLMEMPKEY  FROM IM_POLICY_MEMBERS;
  SELECT Max(SERIALNO) INTO APOLMEMCOUNTER  FROM IM_POLICY_MEMBERS;
  INSERT INTO IM_POLICY_MEMBERS (POLICY_MEM_CODE, POLICYCODE, DATE_OF_BIRTH, MEMBER_GENDER, MEMBER_RELATION, MARITAL_STATUS, MEMBER_CATEGORY,
  NATIONALITY, LOCATION, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, COMPANYCODE, SERIALNO, MEMBERCODE, MEMBERID, MEMBERNAME, PARENTID,
  INCEPTION_DATE, MEMBER_TYPE, EXISTING_INSURER, DATE_OF_ENTRY, OCCUPATION, ADDRESS1, ADDRESS2, PHONE_NO, MOBILE_NO, EMAIL_ID, PASSPORT_NO,
  HEIGHT, WEIGHT, EMIRATES_ID, STAFF_ID,WORKLOCATION,RESIDENTLOCATION,SALARYBAND,ISCOMMISSION,
  SECONDNAME,FAMILYNAME,UIDNUMBER,ENTITYTYPE,MEMBERENTITYIDNAME)
  (SELECT AV_SEQ_POLMEM_PK.NEXTVAL,P_POLICYCODE POLICYCODE,H.DATE_OF_BIRTH,H.GENDER GENDER,
  Decode(H.RELATION,1,15,2,8,3,4,4,1,5,5,6,81,7,81,8,2,9,6) MEMBER_RELATION,
  Decode(H.MARITAL_STATUS,1,0,2,1,3,2,4,3) MARITAL_STATUS,100000000000000003 MEMBER_CATEGORY,
  H.NATIONALITY,H.MEMBER_LOCATION LOCATION, NULL, H.APPLICATIONCODE, NULL, NULL,AV_SEQ_POLMEM_SNO.NEXTVAL,
  NULL,ROWNUM MEMBERID,FIRST_NAME MEMBERNAME,NULL,
  H.STARTDATE  INCEPTION_DATE,H.MEMBER_TYPE,H.EXISTING_INSURER,
  H.STARTDATE DATE_OF_ENTRY,NULL,H.ADDRESS1 ADDRESS1,H.ADDRESS2 ADDRESS2,H.PHONENO PHONE_NO,H.MOBILENO MOBILE_NO,
  H.EMAILID EMAIL_ID,H.PASSPORTNO PASSPORT_NO,H.HEIGHT,H.WEIGHT,H.EMIRATES_ID,NULL,
  H.WORK_LOCATION,H.RESIDENTIAL_LOCATION,H.SALARYBAND,2 ISCOMMISSION,H.SECOND_NAME,
  H.FAMILY_NAME,H.UIDNO,H.ENTITY_TYPE,H.ENTITYID
  FROM IM_PR_SPONSOR_APPLICATION H,IM_PR_PAYMENT_DTL D WHERE H.APPLICATIONCODE = D.APPLICATIONCODE
  AND D.PAYMENTCODE = P_PAYMENTCODE AND D.APPLICATIONCODE NOT IN
  (SELECT CUSTOMERCODE FROM IM_POLICY_MEMBERS WHERE CUSTOMERCODE IS NOT NULL));
  COMMIT;
  UPDATE IM_PR_SPONSOR_APPLICATION SET POLICYCODE =  P_POLICYCODE,POLICYTYPE =  P_POLICYTYPE
  WHERE APPLICATIONCODE IN(SELECT  APPLICATIONCODE FROM IM_PR_PAYMENT_DTL
  WHERE PAYMENTCODE = P_PAYMENTCODE);
  COMMIT;
  DELETE FROM IM_POLICY_PREMIUM WHERE POLICY_MEM_CODE IN
  (SELECT POLICY_MEM_CODE FROM IM_POLICY_MEMBERS WHERE CUSTOMERCODE IN
  (SELECT APPLICATIONCODE FROM IM_PR_PAYMENT_DTL WHERE PAYMENTCODE = P_PAYMENTCODE));
  COMMIT;
  FOR HDR IN(SELECT P.*,H.BASEPREMIUM,H.CANPREMIUM,H.HEPPREMIUM FROM IM_POLICY_MEMBERS P,IM_PR_SPONSOR_APPLICATION H,IM_PR_PAYMENT_DTL D
  WHERE H.APPLICATIONCODE = D.APPLICATIONCODE      AND P.CUSTOMERCODE = H.APPLICATIONCODE
  AND D.PAYMENTCODE = P_PAYMENTCODE AND  P.POLICYCODE = P_POLICYCODE) LOOP
    INSERT INTO CAPPS.IM_POLICY_PREMIUM
    (PREMIUM_MEM_CODE,
    POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE)
    VALUES
    ((SELECT Max(PREMIUM_MEM_CODE)+1 FROM IM_POLICY_PREMIUM),HDR.POLICY_MEM_CODE, 0, HDR.BASEPREMIUM, 0,
    HDR.BASEPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_POLICY_PREMIUM),
    1, 'BASE PREMIUM', NULL);
    COMMIT;
    INSERT INTO CAPPS.IM_POLICY_PREMIUM
    (PREMIUM_MEM_CODE,
    POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE)
    VALUES
    ((SELECT Max(PREMIUM_MEM_CODE)+1 FROM IM_POLICY_PREMIUM),HDR.POLICY_MEM_CODE, 2, HDR.CANPREMIUM, 0,
    HDR.CANPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_POLICY_PREMIUM),
    1, 'Cancer', 100000000000001499);
    COMMIT;
    INSERT INTO CAPPS.IM_POLICY_PREMIUM
    (PREMIUM_MEM_CODE,
    POLICY_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE)
    VALUES
    ((SELECT Max(PREMIUM_MEM_CODE)+1 FROM IM_POLICY_PREMIUM),HDR.POLICY_MEM_CODE, 2, HDR.HEPPREMIUM, 0,
    HDR.HEPPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_POLICY_PREMIUM),
    1, 'Hepatitis C', 100000000000001498);
    COMMIT;  
  END LOOP;

END IF;

IF P_POLICYTYPE = 2 THEN
  SELECT Max(IP_MEM_CODE) INTO APOLMEMPKEY  FROM IM_IP_MEMBERS;
  SELECT Max(SERIALNO) INTO APOLMEMCOUNTER  FROM IM_IP_MEMBERS;
  INSERT INTO IM_IP_MEMBERS (IP_MEM_CODE, INDIVIDUALPOLICYCODE, DATE_OF_BIRTH, MEMBER_GENDER, MEMBER_RELATION, MARITAL_STATUS, MEMBER_CATEGORY,
  NATIONALITY, LOCATION, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, COMPANYCODE, SERIALNO, MEMBERCODE, MEMBERID, MEMBERNAME, PARENTID,
  INCEPTION_DATE, MEMBER_TYPE, EXISTING_INSURER, DATE_OF_ENTRY, OCCUPATION, ADDRESS1, ADDRESS2, PHONE_NO, MOBILE_NO, EMAIL_ID, PASSPORT_NO,
  HEIGHT, WEIGHT, EMIRATES_ID, STAFF_ID,WORKLOCATION,RESIDENTLOCATION,SALARYBAND,ISCOMMISSION,
  SECONDNAME,FAMILYNAME,UIDNUMBER,ENTITYTYPE,MEMBERENTITYIDNAME)
  (SELECT APOLMEMPKEY+ROWNUM IP_MEM_CODE,P_POLICYCODE POLICYCODE,H.DATE_OF_BIRTH,H.GENDER GENDER,
  Decode(H.RELATION,1,15,2,8,3,4,4,2,5,5,6,81,7,81) MEMBER_RELATION,
  Decode(H.MARITAL_STATUS,1,0,2,1,3,2,4,3) MARITAL_STATUS,100000000000000001 MEMBER_CATEGORY,
  H.NATIONALITY,H.MEMBER_LOCATION LOCATION, NULL, H.APPLICATIONCODE, NULL, NULL,APOLMEMCOUNTER+ROWNUM SERIALNO,
  NULL,ROWNUM MEMBERID,FIRST_NAME MEMBERNAME,NULL,H.STARTDATE  INCEPTION_DATE,H.MEMBER_TYPE,H.EXISTING_INSURER,
  H.STARTDATE DATE_OF_ENTRY,NULL,H.ADDRESS1 ADDRESS1,H.ADDRESS2 ADDRESS2,H.PHONENO PHONE_NO,H.MOBILENO MOBILE_NO,
  H.EMAILID EMAIL_ID,H.PASSPORTNO PASSPORT_NO,H.HEIGHT,H.WEIGHT,H.EMIRATES_ID,NULL,
  H.WORK_LOCATION,H.RESIDENTIAL_LOCATION,H.SALARYBAND,2 ISCOMMISSION,H.SECOND_NAME,
  H.FAMILY_NAME,H.UIDNO,H.ENTITY_TYPE,H.ENTITYID
  FROM IM_PR_SPONSOR_APPLICATION H,IM_PR_PAYMENT_DTL D WHERE H.APPLICATIONCODE = D.APPLICATIONCODE
  AND D.PAYMENTCODE = P_PAYMENTCODE AND D.APPLICATIONCODE NOT IN
  (SELECT CUSTOMERCODE FROM IM_IP_MEMBERS WHERE CUSTOMERCODE IS NOT NULL));
  COMMIT;
  UPDATE IM_PR_SPONSOR_APPLICATION SET POLICYCODE =  P_POLICYCODE,POLICYTYPE =  P_POLICYTYPE
  WHERE APPLICATIONCODE IN(SELECT  APPLICATIONCODE FROM IM_PR_PAYMENT_DTL
  WHERE PAYMENTCODE = P_PAYMENTCODE);
  COMMIT;
    DELETE FROM IM_IP_PREMIUM WHERE IP_MEM_CODE IN
  (SELECT IP_MEM_CODE FROM IM_IP_MEMBERS WHERE CUSTOMERCODE IN
  (SELECT APPLICATIONCODE FROM IM_PR_PAYMENT_DTL WHERE PAYMENTCODE = P_PAYMENTCODE));
  COMMIT;
  FOR HDR IN(SELECT  P.*,H.BASEPREMIUM,H.CANPREMIUM,H.HEPPREMIUM FROM IM_IP_MEMBERS P,IM_PR_SPONSOR_APPLICATION H,IM_PR_PAYMENT_DTL D
  WHERE H.APPLICATIONCODE = D.APPLICATIONCODE AND P.CUSTOMERCODE = H.APPLICATIONCODE
  AND D.PAYMENTCODE = P_PAYMENTCODE AND  INDIVIDUALPOLICYCODE = P_POLICYCODE) LOOP
    INSERT INTO CAPPS.IM_IP_PREMIUM
    (PREMIUM_IND_MEM_CODE,
    IP_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE, HAADFINE, NOOFDAYS)
    VALUES
    ((SELECT Max(PREMIUM_IND_MEM_CODE)+1 FROM IM_IP_PREMIUM),HDR.IP_MEM_CODE, 0, HDR.BASEPREMIUM, 0,
    HDR.BASEPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_IP_PREMIUM),
    1, 'BASE PREMIUM', NULL, NULL, NULL);
    COMMIT;
    INSERT INTO CAPPS.IM_IP_PREMIUM
    (PREMIUM_IND_MEM_CODE,
    IP_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE, HAADFINE, NOOFDAYS)
    VALUES
    ((SELECT Max(PREMIUM_IND_MEM_CODE)+1 FROM IM_IP_PREMIUM),HDR.IP_MEM_CODE, 2, HDR.CANPREMIUM, 0,
    HDR.CANPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_IP_PREMIUM),
    1, 'Cancer', 100000000000001499, NULL, NULL);
    COMMIT;
    INSERT INTO CAPPS.IM_IP_PREMIUM
    (PREMIUM_IND_MEM_CODE,
    IP_MEM_CODE, PREMIUM_TYPES, DEFAULTVALUE, CALC_METHOD, PREMIUM_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    DESCRIPTION, BENEFITCODE, HAADFINE, NOOFDAYS)
    VALUES
    ((SELECT Max(PREMIUM_IND_MEM_CODE)+1 FROM IM_IP_PREMIUM),HDR.IP_MEM_CODE, 2, HDR.HEPPREMIUM, 0,
    HDR.HEPPREMIUM, NULL, NULL, NULL, NULL,
    NULL, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO)+1 FROM IM_IP_PREMIUM),
    1, 'Hepatitis C', 100000000000001498, NULL, NULL);    

    COMMIT;
  END LOOP;
END IF;
L_RESULT := 'S';
RETURN L_RESULT;
EXCEPTION WHEN OTHERS THEN
L_RESULT := SQLERRM;
RETURN L_RESULT;
END;
/

PROMPT CREATE OR REPLACE FUNCTION ngi_pr_create_policy_orafnc
CREATE OR REPLACE FUNCTION ngi_pr_create_policy_orafnc(P_PAYMENTCODE NUMBER,P_SPONSORCODE NUMBER,P_CREATEDBY NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2
AS
L_ERROR VARCHAR2(1000);L_SEQ NUMBER;
L_SPONSOR_ROW IM_PR_SPONSOR%ROWTYPE;
L_SPONSOR_APP_ROW IM_PR_SPONSOR_APPLICATION%ROWTYPE;
L_STAFF_ROW IM_PR_STAFF%ROWTYPE;
L_IPPOLICY_ROW IM_INDIVIDUALPOLICY%ROWTYPE;
L_POLICY_ROW IM_POLICY%ROWTYPE;
L_OWNERCODE VARCHAR2(1000);
L_POLICYID VARCHAR2(1000);
L_POLICYNAME VARCHAR2(1000);
L_SOURCETYPE NUMBER;L_SOURCECODE NUMBER;L_SOURCENAME VARCHAR2(500);
L_APPLICANTID VARCHAR2(100);L_BRANCH NUMBER;
L_OTHERBILLINGCODE NUMBER;L_OTHERBILLINGNAME VARCHAR2(500);
L_NGIFEE NUMBER;
L_RULES VARCHAR2(1000);V_RESULT  VARCHAR2(1000);
L_FINANCENO NUMBER;L_PRIMKEY NUMBER;L_SNO NUMBER;
L_ADDPREMIUM NUMBER;L_REFUNDPREMIUM NUMBER;
L_STAFFCOUNT NUMBER;L_AGENTCODE NUMBER;L_ERRORCOUNT NUMBER;
L_AGENTCOUNT NUMBER;L_INDIVIDUALPOLICYCODE NUMBER;
L_INDIVIDUALPOLICYCOUNT NUMBER;L_GROUPCODE NUMBER;L_MEMCODE NUMBER;
L_AGENTNAME  VARCHAR2(1000); L_POLICYCODE NUMBER; L_MEMPOLICYCODE NUMBER;
L_DEFAULTVALUE NUMBER;L_POLICYCOUNT NUMBER;L_LICENSECOUNT NUMBER;
L_PCDCODE NUMBER;L_PAYMENTDTLCOUNT NUMBER;L_TOTALPREMIMVALUE NUMBER;
BEGIN

SELECT * INTO L_SPONSOR_ROW FROM IM_PR_SPONSOR WHERE SPONSOR_CODE = P_SPONSORCODE ;


SELECT Count(*) INTO L_PAYMENTDTLCOUNT    FROM IM_PR_PAYMENT_DTL WHERE PAYMENTCODE=P_PAYMENTCODE;

IF L_PAYMENTDTLCOUNT = 0 THEN
FOR HDR IN(SELECT DTL.*,(Nvl(GROSSPREMIUM,0)+Nvl(VATPREMIUM,0))AMOUNT FROM IM_PR_PAYMENT_SELECTEDMEMBERS DTL
JOIN IM_PR_SPONSOR_APPLICATION SP ON SP.APPLICATIONCODE = DTL.APPLICATIONCODE
WHERE PAYMENTGUID IN(SELECT PAYMENTGUID FROM IM_PR_PAYMENT_HDR  WHERE PAYMENTCODE=P_PAYMENTCODE)) LOOP

INSERT INTO IM_PR_PAYMENT_DTL
SELECT (SELECT Max(PAYMENTDTLCODE)+1 FROM IM_PR_PAYMENT_DTL),P_PAYMENTCODE,HDR.APPLICATIONCODE,HDR.AMOUNT
FROM DUAL;
COMMIT;

END LOOP;
END IF;

UPDATE IM_PR_SPONSOR_APPLICATION SET PAYMENTCODE = P_PAYMENTCODE,PAYMENTSTATUS = 3
WHERE APPLICATIONCODE IN((SELECT APPLICATIONCODE FROM IM_PR_PAYMENT_DTL WHERE PAYMENTCODE=P_PAYMENTCODE));
COMMIT;
SELECT * INTO L_SPONSOR_APP_ROW FROM   IM_PR_SPONSOR_APPLICATION
WHERE APPLICATIONCODE IN(SELECT Max(APPLICATIONCODE) FROM IM_PR_PAYMENT_DTL WHERE PAYMENTCODE=P_PAYMENTCODE);
IF Nvl(L_SPONSOR_ROW.STAFFCODE,0) <> 0 THEN
  SELECT * INTO L_STAFF_ROW FROM IM_PR_STAFF WHERE STAFFCODE = L_SPONSOR_ROW.STAFFCODE;
  IF L_STAFF_ROW.EMPTYPE = 1 THEN
     L_SOURCETYPE := 4;
     L_SOURCECODE := L_STAFF_ROW.EMPCODE;
     SELECT BRANCHCODE,AGENT_NAME_EN INTO L_BRANCH,L_SOURCENAME FROM IM_AGENTS   WHERE AGENTCODE=L_STAFF_ROW.EMPCODE;
  ELSIF L_STAFF_ROW.EMPTYPE = 2 THEN
     L_SOURCETYPE := 5;
     L_SOURCECODE := L_STAFF_ROW.EMPCODE;
     SELECT BRANCHCODE,BROKER_NAME_EN INTO L_BRANCH,L_SOURCENAME FROM IM_BROKERS   WHERE BROKERCODE=L_STAFF_ROW.EMPCODE;
  END IF;
ELSE
  L_SOURCETYPE := 3;
  L_SOURCECODE := 100000000000000004;
  SELECT BRANCHCODE,AGENT_NAME_EN INTO L_BRANCH,L_SOURCENAME FROM IM_AGENTS   WHERE AGENTCODE=100000000000000004;
END IF;

IF L_SPONSOR_ROW.POLICYTYPE = 2 THEN

  SELECT Count(*) INTO L_POLICYCOUNT FROM IM_INDIVIDUALPOLICY WHERE  LOGCODE = L_SPONSOR_ROW.SPONSOR_CODE AND PORTALTYPE='PR';
  IF L_POLICYCOUNT = 0 THEN
    SELECT IM_PR_POLICY_SEQ.NEXTVAL INTO L_SEQ FROM DUAL;

    L_POLICYID := 'PR-'||L_SEQ||'-01';
    L_POLICYNAME := L_POLICYID||'-'||L_SPONSOR_ROW.FIRST_NAME||' '||L_SPONSOR_ROW.LAST_NAME||'-'||TO_CHAR(To_Date(SYSDATE,'DD/MM/RRRR'),'RRRR');
    INSERT INTO IM_INDIVIDUALPOLICY
    (INDIVIDUALPOLICYCODE,
    POLICYID, POLICYNAME, STARTDATE, ENDDATE, GROUPCODE,
    ISFRONTINGGROUP, CATEGORYCODE, PLANCODE, ACTIVE, CALCULATEFINE,
    FINETEMPLATECODE, FRONTINGSETTING, REMARKS, CREATEDIN, CREATEDON,
    CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE,
    DEACTIVATEDON, DEACTIVATEDBY, SERIALNO, ALTERNATENAME, ANUALLIMITSTYPECODE,
    INPATENTSLIMITSTYPECODE, OUTPATENTSLIMITSTYPECODE, ALTLIMITS, IPTLIMITS, OPTLIMITS,
    IPPREFIX, IPNO, IPSUFFIX, IPFULLNO, AUTHORIZEDSTATUS,
    MEMBERCODE, FINAL_PREMIUM, BASE_PERIMUM, PERIMUMCODE, ELEMENTTEMPLATECODE,
    ISMEMBERPOLICYCONVERTED, TEMPLATECODE, COMMISIONTYPE, AGENTCODE, BROKERCODE,
    OWNERCODE, HAADAPPROVALCODE, REINSURANCECODE, OLDPOLICYCODE, RENEWALPOLICYCODE,
    INDIPOLICYSOURCECODE, PAYMENTMODE, CONTRACTTYPE, INSURANCECO, EXCELVALIDATE,
    BILLINGTYPE, BRANCHCODE, POLICYSERIALNO, POSTINGDONE, NGI_FEES,
    INCEPTIONPREMIUM, ISCAPTIVE, ENTITYTYPE, ENTITYID, CONTACTNUMBER,
    EMAILID, PORTALMEMBERID,LOGCODE,PORTALTYPE,A_POLICYTYPE,SPONSORCODE)
    VALUES
    ((SELECT MAX(INDIVIDUALPOLICYCODE) + 1  FROM IM_INDIVIDUALPOLICY),L_POLICYID, L_POLICYNAME,
    L_SPONSOR_APP_ROW.STARTDATE,L_SPONSOR_APP_ROW.STARTDATE+364,NULL,0, NULL, NULL, 1,0, NULL, NULL, NULL, NULL,
    SYSDATE, 100000000000000002,SYSDATE, 100000000000000002, 1,
    1, NULL, NULL, (SELECT MAX(SERIALNO) + 1 FROM IM_INDIVIDUALPOLICY), NULL,
    0, 0, 0, 0, 0,0, NULL,NULL, NULL, '',
    0, 100000000000339720, 0, 0, 1,
    NULL, 0, '65', 0,Decode(L_SOURCETYPE,5,NULL,L_SOURCECODE),
    Decode(L_SOURCETYPE,5,L_SOURCECODE,NULL),Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,3,21,1,7,L_SPONSOR_ROW.ADMINISTRATEDBY), NULL, NULL, NULL,
    NULL, L_SOURCETYPE, 0, 0, NULL,0,Decode(L_SOURCETYPE,5,1,0), L_BRANCH, 1, 0,
    11, NULL, NULL, NULL, NULL,NULL, NULL,L_APPLICANTID,L_SPONSOR_ROW.SPONSOR_CODE,'PR',2,L_SPONSOR_ROW.SPONSOR_CODE);
    COMMIT;

    SELECT INDIVIDUALPOLICYCODE INTO L_INDIVIDUALPOLICYCODE FROM IM_INDIVIDUALPOLICY WHERE POLICYID = L_POLICYID;
    SELECT * INTO L_IPPOLICY_ROW FROM IM_INDIVIDUALPOLICY WHERE POLICYID = L_POLICYID;

    INSERT INTO IM_NGIINDPOLICYCATEGORY
    (POLICYCATEGORYCODE, INDIVIDUALPOLICYCODE, CATEGORYCODE, ALTLIMIT, IPLIMIT, PLANCODE, CALCULATEFINE, ISFRONTINGGROUP,
    COMPANYCODE, CREATEDBY, LASTMODIFIEDBY, CREATEDON, LASTMODIFIEDON, LOCATIONCODE, SERIALNO, OPLIMIT, ACTIVE, MEMBERCODE,
    ROOMTYPE, EMGDETECTWINETWTYPE, EMGDETECTWINETWVALUE, EMGDETECTOONETWTYPE, EMGDETECTOONETWVALUE, TOTALPREMIUM, LIMITTYPE,
    DEDECTABLETYPE, DEDECTABLEVALUE, LIMITS, CO_IN_TYPE, CO_IN_VALUE, OONDEDECTABLETYPE, OONDEDECTABLEVALUE, OONCO_IN_TYPE,
    OONCO_IN_VALUE, ALERTCLAIMSTEAMREMARK, EMIRATECODE,UBIPCODE)
    VALUES
    ((SELECT MAX(POLICYCATEGORYCODE) + 1 FROM IM_NGIINDPOLICYCATEGORY), L_INDIVIDUALPOLICYCODE, 100000000000000001, 150000, 150000,
      Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,1,10000000000000029,3,100000000000000626,11,100000000000000294), 1, 0,
      1, 100000000000000657, 100000000000000657,SYSDATE, SYSDATE,
      1, (SELECT MAX(SERIALNO) + 1 FROM IM_NGIINDPOLICYCATEGORY), 150000, 1,
      100000000000313952, 0, 2, 0,
      2, 0, 0, 0,
      0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 100000000000001994, Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,3,100000000000000560,NULL));
    COMMIT;

    SELECT Max(POLICYCATEGORYCODE) INTO L_PCDCODE FROM IM_NGIINDPOLICYCATEGORY WHERE INDIVIDUALPOLICYCODE = L_INDIVIDUALPOLICYCODE;
    Insert into IM_INDIVIDUALPOLICYNETWORK
    (PCNCODE,
    POLICYCATEGORYCODE, NETWORKCODE, COMPANYCODE, CREATEDBY, LASTMODIFIEDBY,
    CREATEDON, LASTMODIFIEDON, LOCATIONCODE, SERIALNO, ACTIVE,
    APPLICABLEFORCODE)
    Values
    ((SELECT Max(PCNCODE)+1 FROM IM_INDIVIDUALPOLICYNETWORK), L_PCDCODE, 1000000000000000031, 1, 100000000000000002,
    100000000000000002,SYSDATE,SYSDATE, 1, (SELECT Max(SERIALNO)+1 FROM IM_INDIVIDUALPOLICYNETWORK),
    1, NULL);
    COMMIT;


    IF L_SPONSOR_ROW.ADMINISTRATEDBY = 3 THEN
      L_RULES:=NGI_PR_CREATE_IP_CATEGORY(L_PCDCODE);
    END IF;
    --1 - IP,2 - OP,3 - Other,4 - Base
    IF L_SPONSOR_ROW.ADMINISTRATEDBY = 11 THEN
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,1,100000000000000210); --Hannover
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,2,100000000000000209); --FMC
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,3,100000000000000214); --Own
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,5,100000000000000213); --Daycare
    ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 3 THEN
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,3,100000000000000210); -- Hannover
      L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,4,100000000000000210);  -- Hannover
    ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 1 THEN
       L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,3,100000000000000211); -- AWZ Blue
       L_RULES := INSERTTPATREATY(L_INDIVIDUALPOLICYCODE,4,100000000000000211);  -- AWZ Blue
    END IF;

    Insert into IM_IP_COMMISSION
    (IP_COMM_CODE, INDIVIDUALPOLICYCODE, COMISSION_TYPES, DEFAULTVALUE, CALC_METHOD, COMMISSION_VALUE, CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE, COMMISSIONTO, INDPOLCYCOMMISIONTO)
    Values
    ((SELECT MAX(IP_COMM_CODE) + 1 FROM IM_IP_COMMISSION), L_INDIVIDUALPOLICYCODE, 1,Decode(L_SOURCETYPE,3,0,5), 1,
    Decode(L_SOURCETYPE,3,0,5), 1,SYSDATE, 100000000000000002,SYSDATE,
    100000000000000002, 100000000000000001, 100000000000000001,1,(SELECT MAX(SERIALNO) + 1 FROM IM_IP_COMMISSION),
    1, L_SOURCECODE,L_SOURCENAME);
    COMMIT;
    IF L_SPONSOR_ROW.ADMINISTRATEDBY = 11 THEN
      L_OTHERBILLINGCODE :=  100000000000000090;
      L_OTHERBILLINGNAME := 'FMC TPA FEE AND CLAIMS FEE';
    ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 1 THEN
      L_OTHERBILLINGCODE :=  100000000000000027;
      L_OTHERBILLINGNAME := 'NEXT CARE PREMIUM AND COM ACCOUNT';
    END IF;
    IF L_SPONSOR_ROW.ADMINISTRATEDBY <> 3 THEN
      Insert into IM_IP_COMMISSION
      (IP_COMM_CODE, INDIVIDUALPOLICYCODE, COMISSION_TYPES, DEFAULTVALUE, CALC_METHOD, COMMISSION_VALUE, CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE, INDPOLCYCOMMISIONTO, GENERALCOMMBILLINGCODE)
      Values
      ((SELECT MAX(IP_COMM_CODE) + 1 FROM IM_IP_COMMISSION), L_INDIVIDUALPOLICYCODE, 2,5, 1,
      5, 1, SYSDATE, 100000000000000002,SYSDATE,
      100000000000000002, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO) + 1 FROM IM_IP_COMMISSION),
      1,L_OTHERBILLINGNAME,L_OTHERBILLINGCODE);
      COMMIT;
    END IF;



  ELSE
    SELECT * INTO L_IPPOLICY_ROW FROM IM_INDIVIDUALPOLICY WHERE  LOGCODE = L_SPONSOR_ROW.SPONSOR_CODE AND PORTALTYPE='PR';
    UPDATE IM_INDIVIDUALPOLICY SET AUTHORIZEDSTATUS = 0,POSTINGDONE = 0 WHERE INDIVIDUALPOLICYCODE = L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE;
    COMMIT;
  END IF;


ELSIF L_SPONSOR_ROW.POLICYTYPE = 1 THEN  -- GROUP POLICY

  SELECT Count(*) INTO L_POLICYCOUNT FROM IM_POLICY WHERE LOGCODE = L_SPONSOR_ROW.SPONSOR_CODE AND PORTALTYPE='PR';
  IF L_POLICYCOUNT = 0 THEN
    SELECT IM_PR_POLICY_SEQ.NEXTVAL INTO L_SEQ FROM DUAL;

    L_POLICYID := 'PR-'||L_SEQ||'-01';
    L_POLICYNAME := L_POLICYID||'-'||L_SPONSOR_ROW.FIRST_NAME||' '||L_SPONSOR_ROW.LAST_NAME||'-'||TO_CHAR(To_Date(SYSDATE,'DD/MM/RRRR'),'RRRR');

    /*Insert into IM_GROUPS
    (GROUP_CODE,GROUP_NUMBER, GROUP_NAME, ADDRESS, REMARKS, CURRENCY_CODE,
    NATURE_OF_BUSSINESS, STATUS, COMPANYCODE, CREATEDBY, LASTMODIFIEDBY,
    CREATEDON, LASTMODIFIEDON, LOCATIONCODE, SERIALNO, GROUP_ID,
    PARENT_GROUP, ISMANUALMEMBER, PICTURE, ISSTAFFNONEEDED, ISGROUPLOGONEEDED,
    ISHATHNONEEDED, PRINTGROUPTYPE, REDCARDTEXT, USERNAME, PASSWORD)
    Values
    ((SELECT MAX(GROUP_CODE) + 1 FROM IM_GROUPS),L_POLICYID, L_SPONSOR_ROW.FIRST_NAME||' ' ||L_SPONSOR_ROW.LAST_NAME,NULL, NULL,
    0,L_POLICYID, 0, 1, 100000000000000002, 100000000000000002,SYSDATE,SYSDATE,
    1, (SELECT MAX(SERIALNO) + 1 FROM IM_GROUPS),L_POLICYID, NULL, 0, NULL, 0,
    0, 0, 0, NULL,L_POLICYID,'123456');
    COMMIT;*/

    SELECT Max(GROUP_CODE) INTO L_GROUPCODE FROM IM_GROUPS WHERE GROUP_CODE IN
    (SELECT GROUPCODE FROM IM_GROUP_BILLING_DETAIL WHERE GBDCODE = L_SPONSOR_ROW.PINCODE);

    UPDATE  IM_GROUPS SET ISMANUALMEMBER = 0 WHERE   GROUP_CODE = L_GROUPCODE;
    COMMIT;
    Insert into IM_POLICY
    (POLICYCODE,
    POLICYID, POLICYNAME, STARTDATE, ENDDATE, GROUPCODE,
    ISFRONTINGGROUP, CATEGORYCODE, PLANCODE, ACTIVE, CALCULATEFINE,
    FINETEMPLATECODE, REMARKS, CREATEDIN, CREATEDON, CREATEDBY,
    LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE, DEACTIVATEDON,
    DEACTIVATEDBY, SERIALNO, FRONTINGSETTING, ANNUALLIMITTYPE, ALTLIMIT,
    INPATIENT, IPLIMIT, OUTPATIENT, OPLIMIT, AUTHORIZEDSTATUS,
    POLICYPREFIX, POLICYNO, POLICYSUFFIX, POLICYFULLNO, MEMBERCODE,
    FINAL_PREMIUM, BASE_PERIMUM, PERIMUMCODE, ELEMENTTEMPLATECODE, ISMEMBERPOLICYCONVERTED,
    UBIPCODE, COMMISIONTYPE, AGENTCODE, BROKERCODE, OWNERCODE,
    OLDPOLICYCODE, RENEWALPOLICYCODE, REQUEST_SOURCE, HAADAPPROVALCODE, REINSURANCECODE,
    PAYMENTMODE, CONTRACTTYPE, INSURANCECO, EXCELVALIDATE, TEMPLATECODE,
    BILLINGTYPE, BRANCHCODE, POLICYSERIALNO, OLDFINAL_PREMIUM, POSTINGDONE,
    NGI_FEES, INCEPTIONPREMIUM, ISCAPTIVE, ENTITYTYPE, ENTITYID,
    CONTACTNUMBER, EMAILID, FRONTINGFEES, REINSURERTYPE, SUBREINSURERTYPE,
    NOOFINSTALLMENT, EXCELFILENAME, TREATYHDRCODE, FACPERCENTAGE, INSURERCODE,
    RIREFCODE, OLDMANAGEBY, A_POLICYTYPE, PERIMUMCODE_BK, PORTALMEMBERID,LOGCODE,PORTALTYPE,SPONSORCODE)
    Values
    ((SELECT MAX(POLICYCODE) + 1 FROM IM_POLICY), L_POLICYID, L_POLICYNAME,
    L_SPONSOR_APP_ROW.STARTDATE,L_SPONSOR_APP_ROW.STARTDATE+364,L_GROUPCODE, 0, NULL, NULL, 1,
    0, NULL, NULL, 1, TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'),
    100000000000000997, TO_DATE('03/13/2017 15:56:41', 'MM/DD/YYYY HH24:MI:SS'), 100000000000000997, 1, 1,
    TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'), 100000000000000997,
    (SELECT MAX(SERIALNO) + 1 FROM IM_POLICY), NULL, 2,
    0, 2, 0, 2, 0,
    0, NULL, NULL, NULL, '',
    NULL, 0, 0, 1, NULL,
    0, NULL, 0, Decode(L_SOURCETYPE,5,NULL,L_SOURCECODE), Decode(L_SOURCETYPE,5,L_SOURCECODE,NULL),
    Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,3,21,1,7,L_SPONSOR_ROW.ADMINISTRATEDBY), NULL, NULL, L_SOURCETYPE, NULL,
    NULL, 0, 0, NULL, 0,
    '65', 2, L_BRANCH, NULL, NULL,
    0, 11, NULL, 0, NULL,
    NULL, NULL, NULL, 0, 0,
    0, NULL, NULL, NULL, 0,
    NULL, NULL, NULL, 1, NULL,
    L_APPLICANTID,L_SPONSOR_ROW.SPONSOR_CODE,'PR',L_SPONSOR_ROW.SPONSOR_CODE);
    COMMIT;

    SELECT  POLICYCODE INTO L_POLICYCODE FROM IM_POLICY WHERE POLICYID = L_POLICYID;
    SELECT * INTO L_POLICY_ROW FROM IM_POLICY WHERE POLICYID = L_POLICYID;
    Insert into IM_POLICY_CATEGORYDTL
    (PCDCODE,
    POLICYCODE, CATEGORYCODE, ALTLIMIT, IPLIMIT, PLIMIT,
    PLANCODE, CALCULATEFINE, ISFRONTINGGROUP, FRONTINGSETTING, COMPANYCODE,
    CREATEDBY, LASTMODIFIEDBY, CREATEDON, LASTMODIFIEDON, LOCATIONCODE,
    SERIALNO, OPLIMIT, REMARKS, ACTIVE, GROUPCODE,
    MEMBERCODE, ROOMTYPE, EMGDETECTWINETWTYPE, EMGDETECTWINETWVALUE, EMGDETECTOONETWTYPE,
    EMGDETECTOONETWVALUE, TOTALPREMIUM, UBIPCODE, LIMITTYPE, LIMITS,
    CO_IN_TYPE, CO_IN_VALUE, OONDEDECTABLETYPE, OONDEDECTABLEVALUE, OONCO_IN_TYPE,
    OONCO_IN_VALUE, DEDECTABLETYPE, DEDECTABLEVALUE, REPORTTEMPLATECODE, ELEMENTTEMPLATECODE,
    HEALTHAPPROVELNO, ALERTCLAIMSTEAMREMARK)
    Values
    ((SELECT MAX(PCDCODE) + 1 FROM IM_POLICY_CATEGORYDTL), L_POLICYCODE, 100000000000000003, 150000, 150000,
    NULL, Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,1,10000000000000029,3,100000000000000626,11,100000000000000294), 1, 0, NULL,
    1, 100000000000000997, 100000000000000997, TO_DATE('03/13/2017 15:56:23', 'MM/DD/YYYY HH24:MI:SS'),
    TO_DATE('03/13/2017 15:56:23', 'MM/DD/YYYY HH24:MI:SS'),
    1, (SELECT MAX(SERIALNO) + 1 FROM IM_POLICY_CATEGORYDTL), 150000, NULL, NULL,
    100000000000017085, NULL, 0, 2, 0,
    2, 0, 0, Decode(L_SPONSOR_ROW.ADMINISTRATEDBY,3,100000000000000560,NULL), 0,
    0, 0, 0, 0, 0,
    0, 0, 0, 0, NULL,
    NULL, NULL, 0);
    COMMIT;

    Insert into IM_POLICY_COMMISSION
    (POLICY_COMM_CODE,
    POLICYCODE, COMISSION_TYPES, DEFAULTVALUE, CALC_METHOD, COMMISSION_VALUE,
    CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
    LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
    COMMISSIONTO, COMMISIONTONAME, GENERALCOMMBILLINGCODE)
    Values
    ((SELECT MAX(POLICY_COMM_CODE) + 1 FROM IM_POLICY_COMMISSION), L_POLICYCODE, 1, Decode(L_SOURCETYPE,3,0,5), 1,
    Decode(L_SOURCETYPE,3,0,5), 1, TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'), 100000000000000997, TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'),
    100000000000000997, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO) + 1 FROM  IM_POLICY_COMMISSION),
    1,L_SOURCECODE,L_SOURCENAME, NULL);
    COMMIT;
    IF L_SPONSOR_ROW.ADMINISTRATEDBY <>  3 THEN
      IF L_SPONSOR_ROW.ADMINISTRATEDBY = 11 THEN
        L_OTHERBILLINGCODE :=  100000000000000090;
        L_OTHERBILLINGNAME := 'FMC TPA FEE AND CLAIMS FEE';
      ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 1 THEN
        L_OTHERBILLINGCODE :=  100000000000000027;
        L_OTHERBILLINGNAME := 'NEXT CARE PREMIUM AND COM ACCOUNT';
      END IF;
      Insert into IM_POLICY_COMMISSION
      (POLICY_COMM_CODE,
      POLICYCODE, COMISSION_TYPES, DEFAULTVALUE, CALC_METHOD, COMMISSION_VALUE,
      CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
      LEGALENTITYCODE, CUSTOMERCODE, LOCATIONCODE, SERIALNO, COMPANYCODE,
      COMMISSIONTO, COMMISIONTONAME, GENERALCOMMBILLINGCODE)
      Values
      ((SELECT MAX(POLICY_COMM_CODE) + 1 FROM IM_POLICY_COMMISSION), L_POLICYCODE, 2,5, 1,
      5, 1, TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'), 100000000000000997, TO_DATE('03/13/2017 15:50:30', 'MM/DD/YYYY HH24:MI:SS'),
      100000000000000997, 100000000000000001, 100000000000000001, 1, (SELECT MAX(SERIALNO) + 1 FROM  IM_POLICY_COMMISSION),
      1, NULL,L_OTHERBILLINGNAME, L_OTHERBILLINGCODE);
      COMMIT;
    END IF;

    SELECT Max(PCDCODE) INTO L_PCDCODE FROM IM_POLICY_CATEGORYDTL WHERE POLICYCODE = L_POLICYCODE;
    Insert into IM_POLICYCOVEREDNETWORK
    (PCNCODE,
    PCDCODE, NETWORKCODE, COMPANYCODE, CREATEDBY, LASTMODIFIEDBY,
    CREATEDON, LASTMODIFIEDON, LOCATIONCODE, SERIALNO, ACTIVE,
    APPLICABLEFORCODE)
    Values
    ((SELECT Max(PCNCODE)+1 FROM IM_POLICYCOVEREDNETWORK),L_PCDCODE, 1000000000000000031, 1, 100000000000000002,
    100000000000000002,SYSDATE,SYSDATE, 1, (SELECT Max(SERIALNO) + 1 FROM IM_POLICYCOVEREDNETWORK),
    1, NULL);
    COMMIT;

    IF L_SPONSOR_ROW.ADMINISTRATEDBY = 3 THEN
      L_RULES:=NGI_PR_CREATE_CATEGORY(L_PCDCODE);
    END IF;
    --1 - IP,2 - OP,3 - Other,4 - Base
    IF L_SPONSOR_ROW.ADMINISTRATEDBY = 11 THEN
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,1,100000000000000210); --HANNOVER
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,2,100000000000000209); --FMC
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,3,100000000000000214); --OWN
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,5,100000000000000213); --DAYCARE
    ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 3 THEN
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,3,100000000000000210); -- HANNOVER
      L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,4,100000000000000210);  -- HANNOVER
    ELSIF L_SPONSOR_ROW.ADMINISTRATEDBY = 1 THEN
       L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,3,100000000000000211); -- AWZ BLUE
       L_RULES := INSERTGRPTPATREATY(L_POLICYCODE,4,100000000000000211);  -- AWZ BLUE
    END IF;






  ELSE
    SELECT * INTO L_POLICY_ROW FROM IM_POLICY WHERE  LOGCODE = L_SPONSOR_ROW.SPONSOR_CODE AND PORTALTYPE='PR';
    UPDATE IM_POLICY SET AUTHORIZEDSTATUS = 0,POSTINGDONE = 0 WHERE POLICYCODE = L_POLICY_ROW.POLICYCODE;
    COMMIT;
  END IF;

END IF;
IF L_SPONSOR_ROW.POLICYTYPE = 1 THEN
L_MEMPOLICYCODE := L_POLICY_ROW.POLICYCODE;
ELSE
L_MEMPOLICYCODE := L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE;
END IF;
L_RULES := NGI_PR_CREATE_MEMBER_ORAFNC(L_SPONSOR_ROW.POLICYTYPE,L_MEMPOLICYCODE,P_PAYMENTCODE);
IF L_RULES = 'S' THEN
  IF L_SPONSOR_ROW.POLICYTYPE = 1 THEN
    SELECT NVL(SUM(PREMIUM_VALUE),0)  INTO L_TOTALPREMIMVALUE FROM IM_POLICY_PREMIUM WHERE POLICY_MEM_CODE IN 
    (SELECT POLICY_MEM_CODE FROM IM_POLICY_MEMBERS WHERE POLICYCODE=L_POLICY_ROW.POLICYCODE) AND BENEFITCODE NOT IN
    (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE NVL(EXCLUDECOMMISSION,0) = 1);

    UPDATE IM_POLICY_COMMISSION SET COMMISSION_VALUE=ROUND(((DEFAULTVALUE/100)*(L_TOTALPREMIMVALUE)),2)  
    WHERE POLICYCODE=L_POLICY_ROW.POLICYCODE  AND CALC_METHOD=1;
    L_RULES:=FN_UWPOLADDMEMBERPOLICY_ORC(L_POLICY_ROW.POLICYCODE);
  ELSE
    SELECT NVL(SUM(PREMIUM_VALUE),0)  INTO L_TOTALPREMIMVALUE FROM IM_IP_PREMIUM WHERE IP_MEM_CODE IN 
    (SELECT IP_MEM_CODE FROM IM_IP_MEMBERS WHERE INDIVIDUALPOLICYCODE=L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE) AND BENEFITCODE NOT IN
    (SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE NVL(EXCLUDECOMMISSION,0) = 1);

    UPDATE IM_IP_COMMISSION SET COMMISSION_VALUE=ROUND(((DEFAULTVALUE/100)*(L_TOTALPREMIMVALUE)),2)  
    WHERE INDIVIDUALPOLICYCODE=L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE  AND CALC_METHOD=1;
    L_RULES:=FN_UWINDPOLADDMEMBERPOLICY_ORC(L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE);
  END IF;
  IF L_SPONSOR_ROW.POLICYTYPE = 1 THEN
    UPDATE IM_PR_USERS SET GROUP_CODE = L_POLICY_ROW.GROUPCODE WHERE GROUP_CODE IS NULL AND SPONSOR_CODE = L_SPONSOR_ROW.SPONSOR_CODE;
    COMMIT;
  ELSE
    SELECT Max(MEMBER_CODE) INTO L_MEMCODE FROM IM_MEMBERS WHERE POLICYCODE = L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE AND POLICYTYPE = 2;
    IF L_POLICYCOUNT = 0 THEN
      UPDATE  IM_INDIVIDUALPOLICY SET MEMBERCODE = L_MEMCODE WHERE INDIVIDUALPOLICYCODE = L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE;
      COMMIT;
      UPDATE IM_PR_USERS SET MEMBERCODE = L_MEMCODE WHERE MEMBERCODE IS NULL AND SPONSOR_CODE = L_SPONSOR_ROW.SPONSOR_CODE;
      COMMIT;
    END IF;
  END IF;
  SELECT MAX(FINANCENO)+1 INTO L_FINANCENO FROM IM_POLICYFINANCEPOSTING;
  SELECT MAX(POLICYFINANCEPOSTINGCODE) + 1 INTO L_PRIMKEY FROM IM_POLICYFINANCEPOSTING;
  SELECT MAX(SERIALNO) + 1 INTO L_SNO FROM IM_POLICYFINANCEPOSTING;
  INSERT INTO IM_POLICYFINANCEPOSTING
  (ISTEST,POLICYFINANCEPOSTINGCODE,
  REFNO, REFDATE, POLICYTYPECODE, POLICYCODE, INDIVIDUALPOLICYCODE,
  CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY,
  COMPANYCODE, LOCATIONCODE, DEACTIVATEDON, DEACTIVATEDBY, SERIALNO,
  AUTHORIZEDSTATUS, FINANCEPREFIX, FINANCENO, FINANCESUFFIX, FINANCEFULLNO,
  BILLINGTYPE, BILLINGTYPENAME, REVERSEENDORSEMENTCODE, PRVERSEPOSTINGDONE, REVERSEFINACEDONE,
  BRANCHCODE, LOADAFTERSAVE, NOOFINSTALLMENT, ADDPREMIUMTOTAL, DELETEPREMIUMTOTAL,
  TOTAL, REVERSE_JV, OWNERCODE, FMCPRODHDRCODE, NEXTCAREPRODHDRCODE,
  PRODUCTIONBATCHCODE, PRODUCTIONSOURCE,PAYMENTCODE)
  VALUES
  (1,L_PRIMKEY, NULL,
  SYSDATE,L_SPONSOR_ROW.POLICYTYPE,Decode(L_SPONSOR_ROW.POLICYTYPE,1,L_POLICY_ROW.POLICYCODE,NULL),
  Decode(L_SPONSOR_ROW.POLICYTYPE,2,L_IPPOLICY_ROW.INDIVIDUALPOLICYCODE,NULL),1,SYSDATE,P_CREATEDBY,
  SYSDATE,P_CREATEDBY, 1, 1, NULL, NULL,
  L_SNO,0,NULL,L_FINANCENO, NULL,
  '-'||L_FINANCENO||'', 0, Decode(L_SPONSOR_ROW.POLICYTYPE,1,'GROUP','INDIVIDUAL'), NULL, NULL,
  NULL,L_BRANCH,0,1,0,
  0, 0, NULL, NULL, NULL,
  NULL,NULL,NULL,P_PAYMENTCODE);
  COMMIT;

  INSERT INTO IM_POLICYFINANCE_INSTALLMENT
  (POLICYFINANCEPOSTINGCODE,
  POLICYFINANCEINSTALLMENTCODE, PERCENTAGE, CREATEDIN, CREATEDON, CREATEDBY,
  LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE, SERIALNO,
  AMOUNT, INSTALLMENTDATE, INSTALLMENTNO, CALC_METHOD)
  VALUES
  (L_PRIMKEY,
  (SELECT MAX(POLICYFINANCEINSTALLMENTCODE) + 1 FROM IM_POLICYFINANCE_INSTALLMENT),100,NULL,
  SYSDATE,P_CREATEDBY,SYSDATE,P_CREATEDBY,1,1,
  (SELECT MAX(SERIALNO) + 1 FROM IM_POLICYFINANCE_INSTALLMENT),0,SYSDATE,1,1);
  COMMIT;
  UPDATE IM_PR_PAYMENT_HDR SET POLICYFINANCEPOSTINGCODE = L_PRIMKEY WHERE PAYMENTCODE=P_PAYMENTCODE;
  COMMIT;

  IM_UW_ENDORSEMENT_FN(L_PRIMKEY);
  SELECT Sum(Abs(ADDPREMIUM)),Sum(Abs(REFUNDPREMIUM)) INTO L_ADDPREMIUM,L_REFUNDPREMIUM
  FROM IM_POLICYFINANCEPOSTINGDTL WHERE POLICYFINANCEPOSTINGCODE = L_PRIMKEY;
  UPDATE IM_POLICYFINANCEPOSTING SET ADDPREMIUMTOTAL = L_ADDPREMIUM,DELETEPREMIUMTOTAL = L_REFUNDPREMIUM,
  TOTAL = L_ADDPREMIUM-L_REFUNDPREMIUM  WHERE POLICYFINANCEPOSTINGCODE = L_PRIMKEY;
  COMMIT;
  UPDATE IM_POLICYFINANCE_INSTALLMENT SET AMOUNT = L_ADDPREMIUM-L_REFUNDPREMIUM  WHERE POLICYFINANCEPOSTINGCODE = L_PRIMKEY;
  COMMIT;

  V_RESULT:=SF_POSTUWEND_FNC(L_PRIMKEY,P_CREATEDBY);

END IF;
RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
L_ERROR := SQLERRM;
P_RESULT := 2;
RETURN L_ERROR;
END;
/

 
CREATE OR REPLACE FUNCTION FN_POLICYFINANCEPOSTING_HEP
 (
  ATypeCode number default 1,
  APolicyCode  number default 100000000000000139,
  ATPASource NUMBER DEFAULT 1,
  ATPAProductionCode NUMBER DEFAULT 1
)
RETURN POLICYFINANCEPOSTINGTABLE PIPELINED IS
TABLEDATA POLICYFINANCEPOSTINGTYPE := POLICYFINANCEPOSTINGTYPE
(
 NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
);
TYPE LCURTYPE IS REF CURSOR;
LCUR LCURTYPE;

BEGIN
OPEN LCUR FOR

select * from
(Select MEM.CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MemberName,
mem.EFFECTIVE_START_DATE  StartDate,
MEM.EFFECTIVE_END_DATE EndDate
,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORADDITION,1),0,PREMIUM_VALUE,0)),0)  AddPremium from IM_MEMBERPOLICYPREMIUMDTL 
where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1) )  AddPremium,
(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORDELETION,1),0,PREMIUM_VALUE,0)),0) DeletePremium from IM_MEMPOLICYREFUNDPREMDTL 
where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1)) DeletePremium,
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,Cat.Category_Name,
nvl(Mem.PARENTGROUPCODE,Mem.GROUP_CODE) GroupCode
FROM im_memberpolicy memP
  join im_memberS mem on MEMP.MEMBERCODE=MEM.MEMBER_CODE
 left  join im_categories  Cat on Cat.CATEGORY_CODE=MEMP.CATEGORYCODE
 where MEMP.TYPEE=ATypeCode and  MEMP.POLICYCODE=APolicyCode
 AND Nvl(ATPASource,0) = 0
 and (nvl(FINANCEPOSTDONEFORADDITION,1)+nvl(FINANCEPOSTDONEFORDELETION,1))<>2 -- and (memP.FINANCEPOSTDONEFORADDITION is not null or (select count(*) from IM_MEMPOLICYREFUNDPREMDTL DTL where memP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- or memP.FINANCEPOSTDONEFORDELETION is not null
 ) Pol
 where    (AddPremium+DeletePremium)<>0
 UNION
 select * from
(Select Nvl(MEM.CARDID,MEM.CARDNO),MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MemberName,
mem.EFFECTIVE_START_DATE  StartDate,
MEM.EFFECTIVE_END_DATE EndDate
,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORADDITION,1),0,PREMIUM_VALUE,0)),0)  AddPremium FROM
 IM_MEMBERPOLICYPREMIUMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1))  AddPremium,
(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORDELETION,1),0,PREMIUM_VALUE,0)),0) DeletePremium from
IM_MEMPOLICYREFUNDPREMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1)) DeletePremium,
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,Cat.Category_Name,
nvl(Mem.PARENTGROUPCODE,Mem.GROUP_CODE) GroupCode
FROM im_memberpolicy memP
  join im_reins_memberS mem on MEMP.REINSMEMBERCODE=MEM.MEMBER_CODE
 left  join im_categories  Cat on Cat.CATEGORY_CODE=MEM.CATEGORY_CODE
 where  MEMP.TYPEE=ATypeCode and  MEMP.POLICYCODE=APolicyCode AND
 ((NVL(MEM.TPAPRODHDRCODE,MEM.NEXTCAREPRODHDRCODE) = Decode(Nvl(ATPAProductionCode,0),0,NEXTCAREPRODHDRCODE,ATPAProductionCode))
 OR (MEM.PORTALLOGCODE = ATPAProductionCode AND MEM.PORTALTYPE = 'GCI' AND ATPASource = 6)) --AND MEMP.MEMBERPOLICYCODE = 100000000000599320
 /*AND (ACARDID IN (
SELECT FMCCARDNO FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE  Nvl(STATUS,0) = 0 AND SOURCETYPE = ATPASource
AND  NEXTCAREPRODHDRCODE = Decode(Nvl(ATPAProductionCode,0),0,NEXTCAREPRODHDRCODE,ATPAProductionCode))
UNION ALL
SELECT FMCCARDNO FROM IM_REINSADDMEMBERDET WHERE REINSADDMEMBERPOLICYCODE
IN(SELECT REINSADDMEMBERPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY WHERE Nvl(STATUS,0) = 0 AND SOURCETYPE = ATPASource AND TPAPRODHDRCODE = Decode(Nvl(ATPAProductionCode,0),0,TPAPRODHDRCODE,ATPAProductionCode))))*/
 and (nvl(FINANCEPOSTDONEFORADDITION,1)+nvl(FINANCEPOSTDONEFORDELETION,1))<>2 -- and (memP.FINANCEPOSTDONEFORADDITION is not null or (select count(*) from IM_MEMPOLICYREFUNDPREMDTL DTL where memP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- or memP.FINANCEPOSTDONEFORDELETION is not null
 ) Pol
 where    (AddPremium+DeletePremium)<>0
 ;

LOOP
FETCH LCUR INTO
TABLEDATA.CARDNO,
TABLEDATA.MEMBER_ID,
TABLEDATA.MemberName,
TABLEDATA.StartDate,
TABLEDATA.EndDate,
TABLEDATA.AddPremium,
TABLEDATA.DeletePremium,
TABLEDATA.TYPEE,
TABLEDATA.POLICYCODE,
TABLEDATA.MEMBERCODE,
TABLEDATA.categoryName,
TABLEDATA.GroupCode
 ;

EXIT WHEN LCUR%NOTFOUND;
PIPE ROW(TABLEDATA);
END LOOP;
CLOSE LCUR;

END FN_POLICYFINANCEPOSTING_HEP;
/

PROMPT CREATE OR REPLACE FUNCTION fn_policyfinancecommision
CREATE OR REPLACE FUNCTION fn_policyfinancecommision
 (
  ATypeCode number default 1,
  APolicyCode  number default 100000000000000139,
  ATPATYPE NUMBER DEFAULT 1,
  ATPAPRODUCTION NUMBER DEFAULT 1
)
RETURN NGIFINANCEPOSTINGCOMSIONTABLE PIPELINED IS
TABLEDATA NGIFINANCEPOSTINGCOMMISIONTYPE := NGIFINANCEPOSTINGCOMMISIONTYPE
(
 NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
);
TYPE LCURTYPE IS REF CURSOR;
LCUR LCURTYPE;
AAddmemberPremium number(18,3);
ARefundPremium number(18,3);
A_POLICYPERCENT number(18,3);l_policyfinanceposting number;
BEGIN

select nvl(sum(AddPremium),0),nvl(sum(DeletePremium),0) into AAddmemberPremium ,ARefundPremium from TABLE
(FN_POLICYFINANCEPOSTING_HEP(ATypeCode,APolicyCode,ATPATYPE,ATPAPRODUCTION));

/*select policyfinancepostingcode into l_policyfinanceposting from im_policyfinanceposting where policycode = APolicyCode
and productionsource = ATPATYPE and productionbatchcode = ATPAPRODUCTION;
select nvl((AddPremiumtotal),0),nvl((DeletePremiumtotal),0) into AAddmemberPremium ,ARefundPremium from
im_policyfinanceposting where policyfinancepostingcode= l_policyfinanceposting;*/

if ATypeCode=1 then
 select nvl(max(DEFAULTVALUE),0) into A_POLICYPERCENT from IM_POLICY_COMMISSION where IM_POLICY_COMMISSION.POLICYCODE=APolicyCode;
elsif ATypeCode=2 then
 select nvl(max(DEFAULTVALUE),0)  into A_POLICYPERCENT from IM_IP_COMMISSION where IM_IP_COMMISSION.INDIVIDUALPOLICYCODE=APolicyCode;
end if;


OPEN LCUR FOR

SELECT PolicyCode,COMISSION_TYPES,COMISSION_TYPENAME,COMMISSIONTO,Description,
Decode(CALC_METHOD,1,AdditionAmount,Decode(Nvl(ATPATYPE,0),0,AdditionAmount,CASE WHEN AdditionAmount > 0 THEN AdditionAmount ELSE 0 END)) AdditionAmount,
Abs(Decode(CALC_METHOD,1,REFUNDAMOUNT,Decode(Nvl(ATPATYPE,0),0,REFUNDAMOUNT,CASE WHEN REFUNDAMOUNT < 0 THEN REFUNDAMOUNT ELSE 0 END))) REFUNDAMOUNT,
CommisionFrom,CALC_METHOD,DefaultValue FROM(
Select
Com.PolicyCode,
Com.COMISSION_TYPES,
Com.COMISSION_TYPENAME,
Com.COMMISSIONTO,
Com.Description,
--sum(Com.AdditionAmount) AdditionAmount,
--sum(Com.RefundAmount) RefundAmount,

decode(AAddmemberPremium,0,0,decode(max(com.CALC_METHOD),1,round(AAddmemberPremium*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE))) AdditionAmount,
decode(ARefundPremium,0,0,decode(max(com.CALC_METHOD),1,round(ARefundPremium*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE)))  RefundAmount,

--decode(AAddmemberPremium,0,0,decode(max(com.CALC_METHOD),1,round(AAddmemberPremium*(decode(A_POLICYPERCENT,0,max(com.DEFAULTVALUE),A_POLICYPERCENT)/100),2),max(com.DEFAULTVALUE))) AdditionAmount,
--decode(ARefundPremium,0,0,decode(max(com.CALC_METHOD),1,round(ARefundPremium*(decode(A_POLICYPERCENT,0,max(com.DEFAULTVALUE),A_POLICYPERCENT)/100),2),max(com.DEFAULTVALUE)))  RefundAmount,
--
--decode(AAddmemberPremium,0,0,decode(max(com.CALC_METHOD),1,round(AAddmemberPremium*(decode(max(PolComPer),0,max(com.DEFAULTVALUE),max(PolComPer))/100),2),max(com.DEFAULTVALUE))) AdditionAmount,
--decode(ARefundPremium,0,0,decode(max(com.CALC_METHOD),1,round(ARefundPremium*(decode(max(PolComPer),0,max(com.DEFAULTVALUE),max(PolComPer))/100),2),max(com.DEFAULTVALUE)))  RefundAmount,


null CommisionFrom,
max(com.CALC_METHOD) CALC_METHOD,
max(com.DEFAULTVALUE) DEFAULTVALUE

from
(select * from (
(select * from (
select Pol.PolicyCode,PolCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME ,PolCom.GENERALCOMMBILLINGCODE COMMISSIONTO,PolCom.COMMISIONTONAME Description, PolCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE from IM_POLICY_COMMISSION  PolCom
 join Im_policy Pol on Pol.PolicyCode=PolCom.Policycode AND Pol.A_PolicyType = ATypeCode
 join genconstant gen on GEN.CONSTANTVALUE=PolCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where PolCom.DEFAULTVALUE <> 0 AND Pol.PolicyCode in  (select POLICYCODE  from Im_MemberPolicy WHERE REINSMEMBERCODE IS NULL AND ADDMEMBERPOLICYCODE is null and DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORDELETION=0 and FINANCEPOSTDONEFORADDITION=0 AND (Nvl(ATPATYPE,0) = 0 OR Nvl(ATPATYPE,0) = 7) and TYPEE=ATypeCode and POLICYCODE=APolicyCode)
union ALL
select Pol.PolicyCode,PolCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME ,PolCom.GENERALCOMMBILLINGCODE COMMISSIONTO,
PolCom.COMMISIONTONAME Description, PolCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,Decode(ATPATYPE,6,0,CALC_METHOD) CALC_METHOD,
decode(Decode(ATPATYPE,6,0,CALC_METHOD),1,DEFAULTVALUE,GETTPACOMMISSION(COMISSION_TYPES,GENERALCOMMBILLINGCODE,APOLICYCODE,ATPATYPE,ATPAPRODUCTION)) DEFAULTVALUE from IM_POLICY_COMMISSION  PolCom
 join Im_policy Pol on Pol.PolicyCode=PolCom.Policycode AND Pol.A_PolicyType = ATypeCode
 join genconstant gen on GEN.CONSTANTVALUE=PolCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where PolCom.DEFAULTVALUE <> 0 AND Pol.PolicyCode in  (SELECT POLICYCODE FROM IM_REINS_ADDMEMBERPOLICY
WHERE  POLICYCODE = APOLICYCODE   AND SOURCETYPE = ATPATYPE  AND
(GCIHDRCODE = ATPAPRODUCTION OR NEXTCAREPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTION) OR
TPAPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,TPAPRODHDRCODE,ATPAPRODUCTION))))
UNION ALL
(select Pol.INDIVIDUALPOLICYCODE PolicyCode,IndCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
IndCom.GENERALCOMMBILLINGCODE COMMISSIONTO,IndCom.INDPOLCYCOMMISIONTO Description, IndCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE   from IM_IP_COMMISSION  IndCom
join IM_INDIVIDUALPOLICY Pol on Pol.INDIVIDUALPOLICYCODE=IndCom.INDIVIDUALPOLICYCODE  AND Pol.A_PolicyType = ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=IndCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where IndCom.DEFAULTVALUE <> 0  AND Pol.INDIVIDUALPOLICYCODE in   (select POLICYCODE  from Im_MemberPolicy where REINSMEMBERCODE IS NULL AND ADDMEMBERPOLICYCODE is null and DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORDELETION=0 and FINANCEPOSTDONEFORADDITION=0 AND(Nvl(ATPATYPE,0) = 0 OR Nvl(ATPATYPE,0) = 7) and TYPEE=ATypeCode and POLICYCODE=APolicyCode)
 union ALL
select Pol.INDIVIDUALPOLICYCODE PolicyCode,IndCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
IndCom.GENERALCOMMBILLINGCODE COMMISSIONTO,IndCom.INDPOLCYCOMMISIONTO Description, IndCom.COMMISSION_VALUE AdditionAmount,
0 RefundAmount,Decode(ATPATYPE,6,0,CALC_METHOD) CALC_METHOD, decode(Decode(ATPATYPE,6,0,CALC_METHOD),1,DEFAULTVALUE,GETTPACOMMISSION(COMISSION_TYPES,GENERALCOMMBILLINGCODE,APOLICYCODE,ATPATYPE,ATPAPRODUCTION)) DEFAULTVALUE
   from IM_IP_COMMISSION  IndCom
join IM_INDIVIDUALPOLICY Pol on Pol.INDIVIDUALPOLICYCODE=IndCom.INDIVIDUALPOLICYCODE  AND Pol.A_PolicyType = ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=IndCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where IndCom.DEFAULTVALUE <> 0  AND Pol.INDIVIDUALPOLICYCODE in  (SELECT INDIVIDUALPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY
WHERE  INDIVIDUALPOLICYCODE = APOLICYCODE AND SOURCETYPE = ATPATYPE AND
(GCIHDRCODE = ATPAPRODUCTION OR NEXTCAREPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTION) OR TPAPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,TPAPRODHDRCODE,ATPAPRODUCTION))))

union all
(select nvl(Pol.PolicyCode, IndPol.INDIVIDUALPOLICYCODE) PolicyCode,AddCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME, AddCom.GENERALCOMMBILLINGCODE COMMISSIONTO,AddCom.DESCRIPTION Description, AddCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE from IM_ADDMEMBERCOMMISIONDET  AddCom
join IM_ADDMEMBERPOLICY AddMem on AddMem.ADDMEMBERPOLICYCODE=AddCom.ADDMEMBERPOLICYCODE
left join Im_policy Pol on Pol.PolicyCode=AddMem.PolicyCode  and AddMem.PolicyType=ATypeCode   AND Pol.A_PolicyType = ATypeCode
left join IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=AddMem.INDIVIDUALPOLICYCODE  AND IndPol.A_PolicyType = ATypeCode and   AddMem.PolicyType=ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=AddCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where AddMem.AuthorizedStatus=1 and Nvl(ATPATYPE,0) = 0 AND AddCom.ADDMEMBERPOLICYCODE in
(select ADDMEMBERPOLICYCODE  from Im_MemberPolicy MP where DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORADDITION=0  and POLICYCODE=APolicyCode AND
 (SELECT SUM(PREMIUM_VALUE) FROM IM_MEMBERPOLICYPREMIUMDTL PD WHERE PD.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE) <> 0))
union all
(select nvl(Pol.PolicyCode, IndPol.INDIVIDUALPOLICYCODE) PolicyCode, DelCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
DelCom.GENERALCOMMBILLINGCODE   COMMISSIONTO,DelCom.DESCRIPTION Description, 0 AdditionAmount, DelCom.COMMISSION_VALUE RefundAmount,
CALC_METHOD, DEFAULTVALUE from IM_DELMEMBERCOMMISIONDET  DelCom
 join IM_DEL_CANCEL_MEMBER DelMem on DelMem.DCMEMBER_CODE=DelCom.DCMEMBER_CODE
left join Im_policy Pol on Pol.PolicyCode=DelMem.PolicyCode and DelMem.POLICYTYPECODE=ATypeCode   AND Pol.A_PolicyType = ATypeCode
left join IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=DelMem.INDIVIDUALPOLICYCODE AND IndPol.A_PolicyType = ATypeCode and DelMem.POLICYTYPECODE=ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=DelCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where DelMem.AuthorizedStatus=1 and Nvl(ATPATYPE,0) = 0 AND  DelCom.DCMEMBER_CODE in
(select DCMEMBER_CODE  from Im_MemberPolicy MP where  FINANCEPOSTDONEFORDELETION=0  and POLICYCODE=APolicyCode AND
(SELECT SUM(PREMIUM_VALUE) FROM IM_MEMPOLICYREFUNDPREMDTL PD WHERE PD.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE) <> 0
)))
)

 ) Com
 where Com.PolicyCode=APolicyCode
  group by Com.PolicyCode,
Com.COMISSION_TYPES,
Com.COMISSION_TYPENAME,
Com.COMMISSIONTO,
Com.Description
having (Decode(ATPAPRODUCTION,0,sum(Com.AdditionAmount) +sum(Com.RefundAmount),1) <> 0))
;

LOOP
FETCH LCUR INTO
TABLEDATA.PolicyCode,
TABLEDATA.COMISSION_TYPES,
TABLEDATA.COMISSION_TYPENAME,
TABLEDATA.COMMISSIONTO,
TABLEDATA.Description,
TABLEDATA.AdditionAmount,
TABLEDATA.RefundAmount,
TABLEDATA.CommisionFrom,
TABLEDATA.CalculatioMethod,
TABLEDATA.DefaultValue
 ;

EXIT WHEN LCUR%NOTFOUND;
PIPE ROW(TABLEDATA);
END LOOP;
CLOSE LCUR;

END FN_POLICYFINANCECOMMISION;
/

 
CREATE OR REPLACE FUNCTION FN_POLICYFINANCEPOSTING_VAT_H
 (
  ATypeCode number default 1,
  APolicyCode  number default 100000000000000139,
  ATPASource NUMBER DEFAULT 1,
  ATPAProductionCode NUMBER DEFAULT 1,
  ADOCTYPE NUMBER DEFAULT 1,
  AVATAPPLICABLE NUMBER DEFAULT 0
)
RETURN POLICYFINANCEPOSTINGTABLE_VAT PIPELINED IS
TABLEDATA POLICYFINANCEPOSTINGTYPE_VAT := POLICYFINANCEPOSTINGTYPE_VAT
(
 NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
);
TYPE LCURTYPE IS REF CURSOR;
LCUR LCURTYPE;

BEGIN
OPEN LCUR FOR

SELECT CARDID,MEMBER_ID,MemberName,StartDate,EndDate,AddPremium,DeletePremium,TYPEE,POLICYCODE,MEMBERPOLICYCODE,Category_Name,GroupCode,
Decode(ADOCTYPE,1,CASE WHEN To_Date(STARTDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
(ADDPREMIUM/Decode((To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date(STARTDATE,'DD/MM/RRRR')+1),0,1,(To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date(STARTDATE,'DD/MM/RRRR')+1)))*(To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1)
ELSE
ADDPREMIUM END,0) ADDITIONVATAMOUNT,
Decode(ADOCTYPE,1,0,CASE WHEN To_Date(ENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
(DELETEPREMIUM/Decode((To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date(ENDDATE,'DD/MM/RRRR')),0,1,(To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date(ENDDATE,'DD/MM/RRRR'))))*(To_Date(POLICYENDDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1)
ELSE
DELETEPREMIUM END) REFUNDVATAMOUNT
  FROM (
select * from
(Select MEM.CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MemberName,
MEMP.MEMBERSTARTDATE  StartDate,
MEMP.MEMBERENDDATE EndDate,MEMP.POLICYSTARTDDATE,MEMP.POLICYENDDDATE,
Decode(ADOCTYPE,1,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORADDITION,1),0,PREMIUM_VALUE,0)),0)  AddPremium
from IM_MEMBERPOLICYPREMIUMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1)),2,0)  AddPremium,
Decode(ADOCTYPE,1,0,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORDELETION,1),0,PREMIUM_VALUE,0)),0) DeletePremium
from IM_MEMPOLICYREFUNDPREMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1) )) DeletePremium,
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,Cat.Category_Name,
nvl(Mem.PARENTGROUPCODE,Mem.GROUP_CODE) GroupCode
FROM im_memberpolicy memP
  join im_memberS mem on MEMP.MEMBERCODE=MEM.MEMBER_CODE
 left  join im_categories  Cat on Cat.CATEGORY_CODE=MEMP.CATEGORYCODE
 where MEMP.VATAPPLICABLE = AVATAPPLICABLE AND MEMP.TYPEE=ATypeCode and  MEMP.POLICYCODE=APolicyCode
 AND Nvl(ATPASource,0) = 0
 and (nvl(FINANCEPOSTDONEFORADDITION,1)+nvl(FINANCEPOSTDONEFORDELETION,1))<>2 -- and (memP.FINANCEPOSTDONEFORADDITION is not null or (select count(*) from IM_MEMPOLICYREFUNDPREMDTL DTL where memP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- or memP.FINANCEPOSTDONEFORDELETION is not null
 ) Pol
 where    (AddPremium+DeletePremium)<>0
 UNION
 select * from
(Select Nvl(MEM.CARDID,MEM.CARDNO),MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MemberName,
MEMP.MEMBERSTARTDATE  StartDate,
MEMP.MEMBERENDDATE EndDate,MEMP.POLICYSTARTDDATE,MEMP.POLICYENDDDATE,
Decode(ADOCTYPE,1,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORADDITION,1),0,PREMIUM_VALUE,0)),0)  AddPremium FROM
 IM_MEMBERPOLICYPREMIUMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1) ),2,0) AddPremium,
Decode(ADOCTYPE,1,0,(select nvl(SUM(decode(nvl(MemP.FINANCEPOSTDONEFORDELETION,1),0,PREMIUM_VALUE,0)),0) DeletePremium from
IM_MEMPOLICYREFUNDPREMDTL where MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE AND BENEFITCODE NOT IN
(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES WHERE Nvl(EXCLUDECOMMISSION,0) = 1) )) DeletePremium,
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,Cat.Category_Name,
nvl(Mem.PARENTGROUPCODE,Mem.GROUP_CODE) GroupCode
FROM im_memberpolicy memP
  join im_reins_memberS mem on MEMP.REINSMEMBERCODE=MEM.MEMBER_CODE
 left  join im_categories  Cat on Cat.CATEGORY_CODE=MEM.CATEGORY_CODE
 where MEMP.VATAPPLICABLE = AVATAPPLICABLE AND MEMP.TYPEE=ATypeCode and  MEMP.POLICYCODE=APolicyCode AND
 ((NVL(MEM.TPAPRODHDRCODE,MEM.NEXTCAREPRODHDRCODE) = Decode(Nvl(ATPAProductionCode,0),0,NEXTCAREPRODHDRCODE,ATPAProductionCode))
 OR (MEM.PORTALLOGCODE = ATPAProductionCode AND MEM.PORTALTYPE='GCI'))--AND MEMP.MEMBERPOLICYCODE = 100000000000599320
 and (nvl(FINANCEPOSTDONEFORADDITION,1)+nvl(FINANCEPOSTDONEFORDELETION,1))<>2 -- and (memP.FINANCEPOSTDONEFORADDITION is not null or (select count(*) from IM_MEMPOLICYREFUNDPREMDTL DTL where memP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- or memP.FINANCEPOSTDONEFORDELETION is not null
 ) Pol
 where    (AddPremium+DeletePremium)<>0 )H
 ;

LOOP
FETCH LCUR INTO
TABLEDATA.CARDNO,
TABLEDATA.MEMBER_ID,
TABLEDATA.MemberName,
TABLEDATA.StartDate,
TABLEDATA.EndDate,
TABLEDATA.AddPremium,
TABLEDATA.DeletePremium,
TABLEDATA.TYPEE,
TABLEDATA.POLICYCODE,
TABLEDATA.MEMBERCODE,
TABLEDATA.categoryName,
TABLEDATA.GroupCode,
TABLEDATA.ADDITIONVATAMOUNT,
TABLEDATA.REFUNDVATAMOUNT
 ;

EXIT WHEN LCUR%NOTFOUND;
PIPE ROW(TABLEDATA);
END LOOP;
CLOSE LCUR;

END FN_POLICYFINANCEPOSTING_VAT_H;
/

PROMPT CREATE OR REPLACE FUNCTION fn_policyfinancecommision_vat
CREATE OR REPLACE FUNCTION fn_policyfinancecommision_vat
 (
  ATypeCode number default 1,
  APolicyCode  number default 100000000000000139,
  ATPATYPE NUMBER DEFAULT 1,
  ATPAPRODUCTION NUMBER DEFAULT 1,
  ADOCTYPE NUMBER DEFAULT 1,
  AVATAPPLICABLE NUMBER DEFAULT 0
)
RETURN NGIFINANCEPOSTINGCOMTABLE_VAT PIPELINED IS
TABLEDATA NGIFINANCEPOSTINGCOMTYPE_VAT := NGIFINANCEPOSTINGCOMTYPE_VAT
(
 NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
);
TYPE LCURTYPE IS REF CURSOR;
LCUR LCURTYPE;
AAddmemberPremium number(18,3);
ARefundPremium number(18,3);
A_POLICYPERCENT number(18,3);l_policyfinanceposting number;
L_ADDVATCOMMISSION NUMBER(19,2);L_REFUNDVATCOMMISSION NUMBER(19,2);
BEGIN

SELECT NVL(SUM(ADDPREMIUM),0),NVL(SUM(DELETEPREMIUM),0),Nvl(Sum(ADDITIONVATAMOUNT),0),Nvl(Sum(REFUNDVATAMOUNT),0)
INTO AADDMEMBERPREMIUM ,AREFUNDPREMIUM,L_ADDVATCOMMISSION,L_REFUNDVATCOMMISSION FROM TABLE
(FN_POLICYFINANCEPOSTING_VAT_H(ATYPECODE,APOLICYCODE,ATPATYPE,ATPAPRODUCTION,ADOCTYPE,AVATAPPLICABLE));


if ATypeCode=1 then
 select nvl(max(DEFAULTVALUE),0) into A_POLICYPERCENT from IM_POLICY_COMMISSION where IM_POLICY_COMMISSION.POLICYCODE=APolicyCode;
elsif ATypeCode=2 then
 select nvl(max(DEFAULTVALUE),0)  into A_POLICYPERCENT from IM_IP_COMMISSION where IM_IP_COMMISSION.INDIVIDUALPOLICYCODE=APolicyCode;
end if;


OPEN LCUR FOR

SELECT PolicyCode,COMISSION_TYPES,COMISSION_TYPENAME,COMMISSIONTO,Description,
Decode(CALC_METHOD,1,AdditionAmount,Decode(Nvl(ATPATYPE,0),0,AdditionAmount,CASE WHEN AdditionAmount > 0 THEN AdditionAmount ELSE 0 END)) AdditionAmount,
Decode(CALC_METHOD,1,AADDVATCOMMISSION,Decode(Nvl(ATPATYPE,0),0,AADDVATCOMMISSION,CASE WHEN AADDVATCOMMISSION > 0 THEN AADDVATCOMMISSION ELSE 0 END)) AddVatCommission,
Abs(Decode(CALC_METHOD,1,REFUNDAMOUNT,Decode(Nvl(ATPATYPE,0),0,REFUNDAMOUNT,CASE WHEN REFUNDAMOUNT < 0 THEN REFUNDAMOUNT ELSE 0 END))) REFUNDAMOUNT,
Abs(Decode(CALC_METHOD,1,AREFUNDVATCOMMISSION,Decode(Nvl(ATPATYPE,0),0,AREFUNDVATCOMMISSION,CASE WHEN AREFUNDVATCOMMISSION < 0 THEN AREFUNDVATCOMMISSION ELSE 0 END))) RefundVatCommission,
CommisionFrom,CALC_METHOD,DefaultValue FROM(
Select
Com.PolicyCode,
Com.COMISSION_TYPES,
Com.COMISSION_TYPENAME,
Com.COMMISSIONTO,
Com.Description,

decode(AAddmemberPremium,0,0,decode(max(com.CALC_METHOD),1,round(AAddmemberPremium*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE))) AdditionAmount,
decode(ARefundPremium,0,0,decode(max(com.CALC_METHOD),1,round(ARefundPremium*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE)))  RefundAmount,
decode(L_ADDVATCOMMISSION,0,0,decode(max(com.CALC_METHOD),1,round(L_ADDVATCOMMISSION*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE))) AADDVATCOMMISSION,
decode(L_REFUNDVATCOMMISSION,0,0,decode(max(com.CALC_METHOD),1,round(L_REFUNDVATCOMMISSION*(max(com.DEFAULTVALUE)/100),2),Sum(com.DEFAULTVALUE)))  AREFUNDVATCOMMISSION,

null CommisionFrom,
max(com.CALC_METHOD) CALC_METHOD,
max(com.DEFAULTVALUE) DEFAULTVALUE

from
(select * from (
(select * from (
select Pol.PolicyCode,PolCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME ,PolCom.GENERALCOMMBILLINGCODE COMMISSIONTO,PolCom.COMMISIONTONAME Description, PolCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE from IM_POLICY_COMMISSION  PolCom
 join Im_policy Pol on Pol.PolicyCode=PolCom.Policycode AND Pol.A_PolicyType = ATypeCode
 join genconstant gen on GEN.CONSTANTVALUE=PolCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where Pol.PolicyCode in  (select POLICYCODE  from Im_MemberPolicy WHERE REINSMEMBERCODE IS NULL AND ADDMEMBERPOLICYCODE is null and DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORDELETION=0 and FINANCEPOSTDONEFORADDITION=0 and TYPEE=ATypeCode and POLICYCODE=APolicyCode)
union ALL
select Pol.PolicyCode,PolCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME ,PolCom.GENERALCOMMBILLINGCODE COMMISSIONTO,
PolCom.COMMISIONTONAME Description, PolCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,Decode(ATPATYPE,6,0,CALC_METHOD) CALC_METHOD,
decode(Decode(ATPATYPE,6,0,CALC_METHOD),1,DEFAULTVALUE,
GETTPACOMMISSION_VAT(COMISSION_TYPES,GENERALCOMMBILLINGCODE,APOLICYCODE,ATPATYPE,ATPAPRODUCTION,ADOCTYPE,AVATAPPLICABLE)) DEFAULTVALUE from IM_POLICY_COMMISSION  PolCom
 join Im_policy Pol on Pol.PolicyCode=PolCom.Policycode AND Pol.A_PolicyType = ATypeCode
 join genconstant gen on GEN.CONSTANTVALUE=PolCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where Pol.PolicyCode in  (SELECT POLICYCODE FROM IM_REINS_ADDMEMBERPOLICY
WHERE  POLICYCODE = APOLICYCODE   AND SOURCETYPE = ATPATYPE AND
(GCIHDRCODE = ATPAPRODUCTION OR
NEXTCAREPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTION)
OR TPAPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,TPAPRODHDRCODE,ATPAPRODUCTION))))
UNION ALL
(select Pol.INDIVIDUALPOLICYCODE PolicyCode,IndCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
IndCom.GENERALCOMMBILLINGCODE COMMISSIONTO,IndCom.INDPOLCYCOMMISIONTO Description, IndCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE   from IM_IP_COMMISSION  IndCom
join IM_INDIVIDUALPOLICY Pol on Pol.INDIVIDUALPOLICYCODE=IndCom.INDIVIDUALPOLICYCODE  AND Pol.A_PolicyType = ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=IndCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
 where Pol.INDIVIDUALPOLICYCODE in   (select POLICYCODE  from Im_MemberPolicy where REINSMEMBERCODE IS NULL AND ADDMEMBERPOLICYCODE is null and DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORDELETION=0 and FINANCEPOSTDONEFORADDITION=0 and TYPEE=ATypeCode and POLICYCODE=APolicyCode)
 union ALL
select Pol.INDIVIDUALPOLICYCODE PolicyCode,IndCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
IndCom.GENERALCOMMBILLINGCODE COMMISSIONTO,IndCom.INDPOLCYCOMMISIONTO Description, IndCom.COMMISSION_VALUE AdditionAmount,
0 RefundAmount,Decode(ATPATYPE,6,0,CALC_METHOD) CALC_METHOD,decode(Decode(ATPATYPE,6,0,CALC_METHOD),1,DEFAULTVALUE,GETTPACOMMISSION_VAT(COMISSION_TYPES,GENERALCOMMBILLINGCODE,APOLICYCODE,ATPATYPE,ATPAPRODUCTION,ADOCTYPE,AVATAPPLICABLE)) DEFAULTVALUE
   from IM_IP_COMMISSION  IndCom
join IM_INDIVIDUALPOLICY Pol on Pol.INDIVIDUALPOLICYCODE=IndCom.INDIVIDUALPOLICYCODE  AND Pol.A_PolicyType = ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=IndCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where Pol.INDIVIDUALPOLICYCODE in  (SELECT INDIVIDUALPOLICYCODE FROM IM_REINS_ADDMEMBERPOLICY
WHERE  INDIVIDUALPOLICYCODE = APOLICYCODE AND SOURCETYPE = ATPATYPE AND
(GCIHDRCODE = ATPAPRODUCTION OR
NEXTCAREPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTION) OR TPAPRODHDRCODE = DECODE(NVL(ATPAPRODUCTION,0),0,TPAPRODHDRCODE,ATPAPRODUCTION))))

union all
(select nvl(Pol.PolicyCode, IndPol.INDIVIDUALPOLICYCODE) PolicyCode,AddCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME, AddCom.GENERALCOMMBILLINGCODE COMMISSIONTO,AddCom.DESCRIPTION Description, AddCom.COMMISSION_VALUE AdditionAmount, 0 RefundAmount,CALC_METHOD, DEFAULTVALUE from IM_ADDMEMBERCOMMISIONDET  AddCom
join IM_ADDMEMBERPOLICY AddMem on AddMem.ADDMEMBERPOLICYCODE=AddCom.ADDMEMBERPOLICYCODE
left join Im_policy Pol on Pol.PolicyCode=AddMem.PolicyCode  and AddMem.PolicyType=ATypeCode   AND Pol.A_PolicyType = ATypeCode
left join IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=AddMem.INDIVIDUALPOLICYCODE  AND IndPol.A_PolicyType = ATypeCode and   AddMem.PolicyType=ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=AddCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where AddMem.AuthorizedStatus=1 and Nvl(ATPATYPE,0) = 0 AND AddCom.ADDMEMBERPOLICYCODE in
(select ADDMEMBERPOLICYCODE  from Im_MemberPolicy MP where DCMEMBER_CODE is null
 and FINANCEPOSTDONEFORADDITION=0  and POLICYCODE=APolicyCode AND
 (SELECT SUM(PREMIUM_VALUE) FROM IM_MEMBERPOLICYPREMIUMDTL PD WHERE PD.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE) <> 0))
union all
(select nvl(Pol.PolicyCode, IndPol.INDIVIDUALPOLICYCODE) PolicyCode, DelCom.COMISSION_TYPES,gen.ConstantName COMISSION_TYPENAME,
DelCom.GENERALCOMMBILLINGCODE   COMMISSIONTO,DelCom.DESCRIPTION Description, 0 AdditionAmount, DelCom.COMMISSION_VALUE RefundAmount,
CALC_METHOD, DEFAULTVALUE from IM_DELMEMBERCOMMISIONDET  DelCom
 join IM_DEL_CANCEL_MEMBER DelMem on DelMem.DCMEMBER_CODE=DelCom.DCMEMBER_CODE
left join Im_policy Pol on Pol.PolicyCode=DelMem.PolicyCode and DelMem.POLICYTYPECODE=ATypeCode   AND Pol.A_PolicyType = ATypeCode
left join IM_INDIVIDUALPOLICY IndPol on IndPol.INDIVIDUALPOLICYCODE=DelMem.INDIVIDUALPOLICYCODE AND IndPol.A_PolicyType = ATypeCode and DelMem.POLICYTYPECODE=ATypeCode
left join genconstant gen on GEN.CONSTANTVALUE=DelCom.COMISSION_TYPES and GEN.CATEGORY='NGICOMMISSIONTYPE' and GEN.LANGUAGECODE='en-US'
where DelMem.AuthorizedStatus=1 and Nvl(ATPATYPE,0) = 0 AND  DelCom.DCMEMBER_CODE in
(select DCMEMBER_CODE  from Im_MemberPolicy MP where  FINANCEPOSTDONEFORDELETION=0  and POLICYCODE=APolicyCode AND
(SELECT SUM(PREMIUM_VALUE) FROM IM_MEMPOLICYREFUNDPREMDTL PD WHERE PD.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE) <> 0
)))
)

 ) Com
 where Com.PolicyCode=APolicyCode
  group by Com.PolicyCode,
Com.COMISSION_TYPES,
Com.COMISSION_TYPENAME,
Com.COMMISSIONTO,
Com.Description
having (Decode(ATPAPRODUCTION,0,sum(Com.AdditionAmount) +sum(Com.RefundAmount),1) <> 0))
;

LOOP
FETCH LCUR INTO
TABLEDATA.PolicyCode,
TABLEDATA.COMISSION_TYPES,
TABLEDATA.COMISSION_TYPENAME,
TABLEDATA.COMMISSIONTO,
TABLEDATA.Description,
TABLEDATA.AdditionAmount,
TABLEDATA.AddVatCommission,
TABLEDATA.RefundAmount,
TABLEDATA.RefundVatCommission,
TABLEDATA.CommisionFrom,
TABLEDATA.CalculatioMethod,
TABLEDATA.DefaultValue
 ;

EXIT WHEN LCUR%NOTFOUND;
PIPE ROW(TABLEDATA);
END LOOP;
CLOSE LCUR;

END FN_POLICYFINANCECOMMISION_VAT;
/

PROMPT CREATE OR REPLACE FUNCTION im_vatreport_fnc
CREATE OR REPLACE FUNCTION im_vatreport_fnc(P_POLICYFINANCEPOSTINGCODE NUMBER) RETURN NUMBER
AS
L_ERROR VARCHAR2(1000);
L_CNNO NVARCHAR2(100);
L_CNDATE DATE;L_DNNO NVARCHAR2(100);
L_DNDATE DATE;L_COUNT NUMBER;
L_ACTUALDAYS NUMBER;L_UPRDAYS NUMBER;L_HEPPREMIUM NUMBER;
L_ADDVATAMOUNT NUMBER;L_REFUNDVATAMOUNT NUMBER;
BEGIN
DELETE FROM IM_POLICYFINANCE_VAT  WHERE POLICYFINANCEPOSTINGCODE=P_POLICYFINANCEPOSTINGCODE;
COMMIT;

-- Group Policy
FOR HDR IN(
SELECT POS.POLICYFINANCEPOSTINGCODE,DTL.PFPDETAILCODE,MPOL.MEMBERPOLICYCODE,
MPOL.MEMBERCODE,MPOL.REINSMEMBERCODE,POS.POLICYTYPECODE,POS.POLICYCODE,
MPOL.ACARDID,MPOL.MEMBERSTARTDATE,MPOL.MEMBERENDDATE,DTL.ADDPREMIUM,DTL.REFUNDPREMIUM,POS.FINANCENO,
POL.STARTDATE,POL.ENDDATE,POS.TOTAL,POS.DELETEPREMIUMTOTAL,POS.ADDPREMIUMTOTAL,Nvl(MPOL.A_SUBGROUPCODE,MPOL.GROUPCODE) GROUPCODE,
Decode(Nvl(MPOL.ARELATION,0),0,77,15,77,77,77,78,77,80) RELATIONNAME FROM IM_POLICYFINANCEPOSTINGDTL DTL
JOIN IM_POLICYFINANCEPOSTING POS ON POS.POLICYFINANCEPOSTINGCODE = DTL.POLICYFINANCEPOSTINGCODE
JOIN IM_MEMBERPOLICY MPOL ON MPOL.MEMBERPOLICYCODE = DTL.MEMBERPOLICYCODE
LEFT JOIN IM_POLICY POL ON POL.POLICYCODE =POS.POLICYCODE 
WHERE POS.POLICYFINANCEPOSTINGCODE = P_POLICYFINANCEPOSTINGCODE AND POLICYTYPECODE=1 AND DTL.ADDPREMIUM <> 0) LOOP

IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) > 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 1;
END IF;
IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) < 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 0;
END IF;

IF Nvl(L_DNNO,0) = 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0;
END IF;

IF To_Date(HDR.MEMBERSTARTDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_ACTUALDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date(HDR.MEMBERSTARTDATE,'DD/MM/RRRR')+1;
IF To_Date(HDR.ENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_UPRDAYS := 0;
ELSE
L_UPRDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1;
END IF;
SELECT Sum(PREMIUM_VALUE) INTO L_HEPPREMIUM FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE = HDR.MEMBERPOLICYCODE
AND BENEFITCODE IN(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES  WHERE Nvl(VATNOTAPPLICABLE,0) = 1);
L_ADDVATAMOUNT := ((HDR.ADDPREMIUM-L_HEPPREMIUM)/L_ACTUALDAYS)*L_UPRDAYS;
ELSE
L_ADDVATAMOUNT := (HDR.ADDPREMIUM-L_HEPPREMIUM);
END IF;

INSERT INTO IM_POLICYFINANCE_VAT SELECT HDR.POLICYFINANCEPOSTINGCODE,HDR.PFPDETAILCODE,
HDR.MEMBERPOLICYCODE,HDR.MEMBERCODE,HDR.REINSMEMBERCODE,HDR.POLICYTYPECODE,HDR.POLICYCODE,
HDR.ACARDID,L_DNNO,L_DNDATE,NULL,NULL,1,HDR.MEMBERSTARTDATE,NULL,HDR.STARTDATE,HDR.ENDDATE,1,HDR.ADDPREMIUM,L_ADDVATAMOUNT,0,0,
HDR.FINANCENO,NULL,HDR.GROUPCODE,HDR.RELATIONNAME FROM DUAL;
COMMIT;

END LOOP;

FOR HDR IN(
SELECT POS.POLICYFINANCEPOSTINGCODE,DTL.PFPDETAILCODE,MPOL.MEMBERPOLICYCODE,
MPOL.MEMBERCODE,MPOL.REINSMEMBERCODE,POS.POLICYTYPECODE,POS.POLICYCODE,
MPOL.ACARDID,MPOL.MEMBERSTARTDATE,MPOL.MEMBERENDDATE,DTL.ADDPREMIUM,DTL.REFUNDPREMIUM,POS.FINANCENO,
POL.STARTDATE,POL.ENDDATE,POS.TOTAL,POS.DELETEPREMIUMTOTAL,POS.ADDPREMIUMTOTAL,Nvl(MPOL.A_SUBGROUPCODE,MPOL.GROUPCODE) GROUPCODE,
Decode(Nvl(MPOL.ARELATION,0),0,77,15,77,77,77,78,77,80) RELATIONNAME FROM IM_POLICYFINANCEPOSTINGDTL DTL
JOIN IM_POLICYFINANCEPOSTING POS ON POS.POLICYFINANCEPOSTINGCODE = DTL.POLICYFINANCEPOSTINGCODE
JOIN IM_MEMBERPOLICY MPOL ON MPOL.MEMBERPOLICYCODE = DTL.MEMBERPOLICYCODE
LEFT JOIN IM_POLICY POL ON POL.POLICYCODE =POS.POLICYCODE
WHERE  POS.POLICYFINANCEPOSTINGCODE = P_POLICYFINANCEPOSTINGCODE AND POLICYTYPECODE=1 AND DTL.REFUNDPREMIUM <> 0) LOOP

IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) > 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 1;
END IF;
IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) < 0  THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 0;
END IF;

IF Nvl(L_CNNO,0) = 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0;
END IF;

IF To_Date(HDR.MEMBERENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_ACTUALDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date(HDR.MEMBERENDDATE,'DD/MM/RRRR');
IF To_Date(HDR.ENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_UPRDAYS := 0;
ELSE
L_UPRDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1;
END IF;                                   
SELECT Sum(PREMIUM_VALUE) INTO L_HEPPREMIUM FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE = HDR.MEMBERPOLICYCODE
AND BENEFITCODE IN(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES  WHERE Nvl(VATNOTAPPLICABLE,0) = 1);
L_REFUNDVATAMOUNT := ((HDR.REFUNDPREMIUM-L_HEPPREMIUM)/L_ACTUALDAYS)*L_UPRDAYS;
ELSE
L_REFUNDVATAMOUNT := (HDR.REFUNDPREMIUM-L_HEPPREMIUM);
END IF;


INSERT INTO IM_POLICYFINANCE_VAT SELECT HDR.POLICYFINANCEPOSTINGCODE,HDR.PFPDETAILCODE,
HDR.MEMBERPOLICYCODE,HDR.MEMBERCODE,HDR.REINSMEMBERCODE,HDR.POLICYTYPECODE,HDR.POLICYCODE,
HDR.ACARDID,NULL,NULL,L_CNNO,L_CNDATE,1,NULL,HDR.MEMBERENDDATE,HDR.STARTDATE,HDR.ENDDATE,0,0,0,HDR.REFUNDPREMIUM,L_REFUNDVATAMOUNT,
HDR.FINANCENO,NULL,HDR.GROUPCODE,HDR.RELATIONNAME FROM DUAL;
COMMIT;

END LOOP;

-- Individual Policy
FOR HDR IN(
SELECT POS.POLICYFINANCEPOSTINGCODE,DTL.PFPDETAILCODE,MPOL.MEMBERPOLICYCODE,
MPOL.MEMBERCODE,MPOL.REINSMEMBERCODE,POS.POLICYTYPECODE,POS.POLICYCODE,
MPOL.ACARDID,MPOL.MEMBERSTARTDATE,MPOL.MEMBERENDDATE,DTL.ADDPREMIUM,DTL.REFUNDPREMIUM,POS.FINANCENO,
POL.STARTDATE,POL.ENDDATE,POS.TOTAL,POS.DELETEPREMIUMTOTAL,POS.ADDPREMIUMTOTAL,Nvl(MPOL.A_SUBGROUPCODE,MPOL.GROUPCODE) GROUPCODE,
Decode(Nvl(MPOL.ARELATION,0),0,77,15,77,77,77,78,77,80) RELATIONNAME FROM IM_POLICYFINANCEPOSTINGDTL DTL
JOIN IM_POLICYFINANCEPOSTING POS ON POS.POLICYFINANCEPOSTINGCODE = DTL.POLICYFINANCEPOSTINGCODE
JOIN IM_MEMBERPOLICY MPOL ON MPOL.MEMBERPOLICYCODE = DTL.MEMBERPOLICYCODE
LEFT JOIN IM_INDIVIDUALPOLICY POL ON POL.INDIVIDUALPOLICYCODE =POS.INDIVIDUALPOLICYCODE
WHERE  POS.POLICYFINANCEPOSTINGCODE = P_POLICYFINANCEPOSTINGCODE AND  POS.POLICYTYPECODE=2 AND DTL.ADDPREMIUM <> 0) LOOP

IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) > 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 1;
END IF;
IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) < 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 0;
END IF;

IF Nvl(L_DNNO,0) = 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_DNNO,L_DNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0;
END IF;

IF To_Date(HDR.MEMBERSTARTDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_ACTUALDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date(HDR.MEMBERSTARTDATE,'DD/MM/RRRR')+1;
IF To_Date(HDR.ENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_UPRDAYS := 0;
ELSE
L_UPRDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1;
END IF;
SELECT Sum(PREMIUM_VALUE) INTO L_HEPPREMIUM FROM IM_MEMBERPOLICYPREMIUMDTL WHERE MEMBERPOLICYCODE = HDR.MEMBERPOLICYCODE
AND BENEFITCODE IN(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES  WHERE Nvl(VATNOTAPPLICABLE,0) = 1);
L_ADDVATAMOUNT := ((HDR.ADDPREMIUM-L_HEPPREMIUM)/L_ACTUALDAYS)*L_UPRDAYS;
ELSE
L_ADDVATAMOUNT := (HDR.ADDPREMIUM-L_HEPPREMIUM);
END IF;


INSERT INTO IM_POLICYFINANCE_VAT SELECT HDR.POLICYFINANCEPOSTINGCODE,HDR.PFPDETAILCODE,
HDR.MEMBERPOLICYCODE,HDR.MEMBERCODE,HDR.REINSMEMBERCODE,HDR.POLICYTYPECODE,HDR.POLICYCODE,
HDR.ACARDID,L_DNNO,L_DNDATE,NULL,NULL,1,HDR.MEMBERSTARTDATE,NULL,HDR.STARTDATE,HDR.ENDDATE,1,HDR.ADDPREMIUM,L_ADDVATAMOUNT,0,0,
HDR.FINANCENO,NULL,NULL,NULL FROM DUAL;
COMMIT;

END LOOP;

FOR HDR IN(
SELECT POS.POLICYFINANCEPOSTINGCODE,DTL.PFPDETAILCODE,MPOL.MEMBERPOLICYCODE,
MPOL.MEMBERCODE,MPOL.REINSMEMBERCODE,POS.POLICYTYPECODE,POS.POLICYCODE,
MPOL.ACARDID,MPOL.MEMBERSTARTDATE,MPOL.MEMBERENDDATE,DTL.ADDPREMIUM,DTL.REFUNDPREMIUM,POS.FINANCENO,
POL.STARTDATE,POL.ENDDATE,POS.TOTAL,POS.DELETEPREMIUMTOTAL,POS.ADDPREMIUMTOTAL,Nvl(MPOL.A_SUBGROUPCODE,MPOL.GROUPCODE) GROUPCODE  FROM IM_POLICYFINANCEPOSTINGDTL DTL
JOIN IM_POLICYFINANCEPOSTING POS ON POS.POLICYFINANCEPOSTINGCODE = DTL.POLICYFINANCEPOSTINGCODE
JOIN IM_MEMBERPOLICY MPOL ON MPOL.MEMBERPOLICYCODE = DTL.MEMBERPOLICYCODE
LEFT JOIN IM_INDIVIDUALPOLICY POL ON POL.INDIVIDUALPOLICYCODE =POS.INDIVIDUALPOLICYCODE
WHERE  POS.POLICYFINANCEPOSTINGCODE = P_POLICYFINANCEPOSTINGCODE AND  POS.POLICYTYPECODE=2 AND   DTL.REFUNDPREMIUM <> 0) LOOP

IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) > 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 1;
END IF;
IF (HDR.ADDPREMIUMTOTAL-HDR.DELETEPREMIUMTOTAL) < 0  THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0 AND MEMOTYPE = 0;
END IF;

IF Nvl(L_CNNO,0) = 0 THEN
SELECT Min(REF_NO),Min(REFDATE) INTO L_CNNO,L_CNDATE FROM IM_NGI_JVPOSTING
WHERE REF_CODE = HDR.POLICYFINANCEPOSTINGCODE AND JVPREMIUMTYPE = 0;
END IF;

IF To_Date(HDR.MEMBERENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_ACTUALDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date(HDR.MEMBERENDDATE,'DD/MM/RRRR');
IF To_Date(HDR.ENDDATE,'DD/MM/RRRR') < To_Date('01/01/2018','DD/MM/RRRR') THEN
L_UPRDAYS := 0;
ELSE
L_UPRDAYS := To_Date(HDR.ENDDATE,'DD/MM/RRRR')-To_Date('01/01/2018','DD/MM/RRRR')+1;
END IF; 
SELECT Sum(PREMIUM_VALUE) INTO L_HEPPREMIUM FROM IM_MEMPOLICYREFUNDPREMDTL WHERE MEMBERPOLICYCODE = HDR.MEMBERPOLICYCODE
AND BENEFITCODE IN(SELECT BENEFIT_CODE FROM IM_BENEFIT_CODES  WHERE Nvl(VATNOTAPPLICABLE,0) = 1);
L_REFUNDVATAMOUNT := ((HDR.REFUNDPREMIUM-L_HEPPREMIUM)/L_ACTUALDAYS)*L_UPRDAYS;
ELSE
L_REFUNDVATAMOUNT := (HDR.REFUNDPREMIUM-L_HEPPREMIUM);
END IF;


INSERT INTO IM_POLICYFINANCE_VAT SELECT HDR.POLICYFINANCEPOSTINGCODE,HDR.PFPDETAILCODE,
HDR.MEMBERPOLICYCODE,HDR.MEMBERCODE,HDR.REINSMEMBERCODE,HDR.POLICYTYPECODE,HDR.POLICYCODE,
HDR.ACARDID,NULL,NULL,L_CNNO,L_CNDATE,1,NULL,HDR.MEMBERENDDATE,HDR.STARTDATE,HDR.ENDDATE,0,0,0,HDR.REFUNDPREMIUM,L_REFUNDVATAMOUNT,
HDR.FINANCENO,NULL,HDR.GROUPCODE,NULL FROM DUAL;
COMMIT;

END LOOP;
RETURN 'Ok';
EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
RETURN 0;
END;
/



CREATE OR REPLACE TYPE POLICYFINANCEPOSTINGTYPE_SDOC   AS OBJECT
(
CARDNO   VARCHAR2 (200 BYTE),
MEMBER_ID   VARCHAR2 (500 BYTE),
MEMBERNAME  VARCHAR2 (500 BYTE),
STARTDATE    DATE,
ENDDATE  DATE,
ADDPREMIUM      NUMBER (18,3),
DELETEPREMIUM NUMBER (18,3),
TYPEE  NUMBER (2),
POLICYCODE NUMBER(19),
MEMBERCODE NUMBER(19),
CATEGORYNAME VARCHAR2 (100 BYTE),
GROUPCODE NUMBER(19),
BENEFITCODE NUMBER(19),
SEPARATEDOCUMENT NUMBER
)
/

CREATE OR REPLACE TYPE POLICYFINANCEPOSTINGTABLE_SDOC AS TABLE OF POLICYFINANCEPOSTINGTYPE_SDOC;
/


CREATE OR REPLACE FUNCTION FN_POLICYFINANCEPOSTING_SDOC
(
ATYPECODE NUMBER DEFAULT 1,
APOLICYCODE  NUMBER DEFAULT 100000000000000139,
ATPASOURCE NUMBER DEFAULT 1,
ATPAPRODUCTIONCODE NUMBER DEFAULT 1
)
RETURN POLICYFINANCEPOSTINGTABLE_SDOC PIPELINED IS
TABLEDATA POLICYFINANCEPOSTINGTYPE_SDOC := POLICYFINANCEPOSTINGTYPE_SDOC
(
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL
);
TYPE LCURTYPE IS REF CURSOR;
LCUR LCURTYPE;

BEGIN
OPEN LCUR FOR
SELECT * FROM
(SELECT MEM.CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEM.EFFECTIVE_START_DATE  STARTDATE,
MEM.EFFECTIVE_END_DATE ENDDATE,
Nvl(Decode(Nvl(MEMP.FINANCEPOSTDONEFORADDITION,0),0,MPRM.PREMIUM_VALUE,0),0) ADDPREMIUM,0 DELETEPREMIUM, 
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,CAT.CATEGORY_NAME,
NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE,MPRM.BENEFITCODE,IBC.SEPARATEDOCUMENT
FROM IM_MEMBERPOLICY MEMP
JOIN IM_MEMBERS MEM ON MEMP.MEMBERCODE=MEM.MEMBER_CODE  
LEFT JOIN IM_MEMBERPOLICYPREMIUMDTL MPRM ON MPRM.MEMBERPOLICYCODE = MEMP.MEMBERPOLICYCODE  
LEFT JOIN IM_BENEFIT_CODES IBC ON IBC.BENEFIT_CODE = MPRM.BENEFITCODE 
LEFT  JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEMP.CATEGORYCODE
WHERE MEMP.TYPEE=ATYPECODE AND  MEMP.POLICYCODE=APOLICYCODE
AND NVL(ATPASOURCE,0) = 0     
AND (NVL(FINANCEPOSTDONEFORADDITION,1)+NVL(FINANCEPOSTDONEFORDELETION,1))<>2 
) POL
WHERE  ADDPREMIUM <> 0 
UNION
SELECT * FROM
(SELECT MEM.CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEM.EFFECTIVE_START_DATE  STARTDATE,
MEM.EFFECTIVE_END_DATE ENDDATE,
0 ADDPREMIUM,Nvl(Decode(Nvl(MEMP.FINANCEPOSTDONEFORDELETION,0),0,MPRM.PREMIUM_VALUE,0),0) DELETEPREMIUM, 
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,CAT.CATEGORY_NAME,
NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE,MPRM.BENEFITCODE,IBC.SEPARATEDOCUMENT     
FROM IM_MEMBERPOLICY MEMP
JOIN IM_MEMBERS MEM ON MEMP.MEMBERCODE=MEM.MEMBER_CODE  
LEFT JOIN IM_MEMPOLICYREFUNDPREMDTL MPRM ON MPRM.MEMBERPOLICYCODE = MEMP.MEMBERPOLICYCODE  
LEFT JOIN IM_BENEFIT_CODES IBC ON IBC.BENEFIT_CODE = MPRM.BENEFITCODE 
LEFT  JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEMP.CATEGORYCODE
WHERE MEMP.TYPEE=ATYPECODE AND  MEMP.POLICYCODE=APOLICYCODE
AND NVL(ATPASOURCE,0) = 0     
AND (NVL(FINANCEPOSTDONEFORADDITION,1)+NVL(FINANCEPOSTDONEFORDELETION,1))<>2 
) POL
WHERE  DELETEPREMIUM <> 0 
UNION
SELECT * FROM
(SELECT NVL(MEM.CARDID,MEM.CARDNO) CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEM.EFFECTIVE_START_DATE  STARTDATE,
MEM.EFFECTIVE_END_DATE ENDDATE,
Nvl(Decode(Nvl(MEMP.FINANCEPOSTDONEFORADDITION,0),0,MPRM.PREMIUM_VALUE,0),0) ADDPREMIUM,0 DELETEPREMIUM, 
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,CAT.CATEGORY_NAME,
NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE,MPRM.BENEFITCODE,IBC.SEPARATEDOCUMENT   
FROM IM_MEMBERPOLICY MEMP
JOIN IM_REINS_MEMBERS MEM ON MEMP.REINSMEMBERCODE=MEM.MEMBER_CODE
LEFT JOIN IM_MEMBERPOLICYPREMIUMDTL MPRM ON MPRM.MEMBERPOLICYCODE = MEMP.MEMBERPOLICYCODE  
LEFT JOIN IM_BENEFIT_CODES IBC ON IBC.BENEFIT_CODE = MPRM.BENEFITCODE    
LEFT  JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEM.CATEGORY_CODE
WHERE  MEMP.TYPEE=ATYPECODE AND  MEMP.POLICYCODE=APOLICYCODE AND
((NVL(MEM.TPAPRODHDRCODE,MEM.NEXTCAREPRODHDRCODE) = DECODE(NVL(ATPAPRODUCTIONCODE,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTIONCODE))
OR (MEM.PORTALLOGCODE = ATPAPRODUCTIONCODE AND MEM.PORTALTYPE = 'GCI' AND ATPASOURCE = 6)) --AND MEMP.MEMBERPOLICYCODE = 100000000000599320
AND (NVL(FINANCEPOSTDONEFORADDITION,1)+NVL(FINANCEPOSTDONEFORDELETION,1))<>2 -- AND (MEMP.FINANCEPOSTDONEFORADDITION IS NOT NULL OR (SELECT COUNT(*) FROM IM_MEMPOLICYREFUNDPREMDTL DTL WHERE MEMP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- OR MEMP.FINANCEPOSTDONEFORDELETION IS NOT NULL
) POL
WHERE  ADDPREMIUM <> 0   
UNION
SELECT * FROM
(SELECT NVL(MEM.CARDID,MEM.CARDNO) CARDID,MEM.MEMBER_ID,
(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEM.EFFECTIVE_START_DATE  STARTDATE,
MEM.EFFECTIVE_END_DATE ENDDATE,
0 ADDPREMIUM,Nvl(Decode(Nvl(MEMP.FINANCEPOSTDONEFORDELETION,0),0,MPRM.PREMIUM_VALUE,0),0) DELETEPREMIUM, 
MEMP.TYPEE,MEMP.POLICYCODE,MEMP.MEMBERPOLICYCODE,CAT.CATEGORY_NAME,
NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE,MPRM.BENEFITCODE,IBC.SEPARATEDOCUMENT  
FROM IM_MEMBERPOLICY MEMP
JOIN IM_REINS_MEMBERS MEM ON MEMP.REINSMEMBERCODE=MEM.MEMBER_CODE
LEFT JOIN IM_MEMPOLICYREFUNDPREMDTL MPRM ON MPRM.MEMBERPOLICYCODE = MEMP.MEMBERPOLICYCODE  
LEFT JOIN IM_BENEFIT_CODES IBC ON IBC.BENEFIT_CODE = MPRM.BENEFITCODE    
LEFT  JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEM.CATEGORY_CODE
WHERE  MEMP.TYPEE=ATYPECODE AND  MEMP.POLICYCODE=APOLICYCODE AND
((NVL(MEM.TPAPRODHDRCODE,MEM.NEXTCAREPRODHDRCODE) = DECODE(NVL(ATPAPRODUCTIONCODE,0),0,NEXTCAREPRODHDRCODE,ATPAPRODUCTIONCODE))
OR (MEM.PORTALLOGCODE = ATPAPRODUCTIONCODE AND MEM.PORTALTYPE = 'GCI' AND ATPASOURCE = 6)) --AND MEMP.MEMBERPOLICYCODE = 100000000000599320
AND (NVL(FINANCEPOSTDONEFORADDITION,1)+NVL(FINANCEPOSTDONEFORDELETION,1))<>2 -- AND (MEMP.FINANCEPOSTDONEFORADDITION IS NOT NULL OR (SELECT COUNT(*) FROM IM_MEMPOLICYREFUNDPREMDTL DTL WHERE MEMP.MEMBERPOLICYCODE=DTL.MEMBERPOLICYCODE)>0)-- OR MEMP.FINANCEPOSTDONEFORDELETION IS NOT NULL
) POL
WHERE  DELETEPREMIUM <> 0 
;

LOOP
FETCH LCUR INTO
TABLEDATA.CARDNO,
TABLEDATA.MEMBER_ID,
TABLEDATA.MEMBERNAME,
TABLEDATA.STARTDATE,
TABLEDATA.ENDDATE,
TABLEDATA.ADDPREMIUM,
TABLEDATA.DELETEPREMIUM,
TABLEDATA.TYPEE,
TABLEDATA.POLICYCODE,
TABLEDATA.MEMBERCODE,
TABLEDATA.CATEGORYNAME,
TABLEDATA.GROUPCODE,
TABLEDATA.BENEFITCODE,
TABLEDATA.SEPARATEDOCUMENT
;

EXIT WHEN LCUR%NOTFOUND;
PIPE ROW(TABLEDATA);
END LOOP;
CLOSE LCUR;

END FN_POLICYFINANCEPOSTING_SDOC;
/

CREATE TABLE IM_POLICYFINANCEPOSTING_SDOC
AS SELECT * FROM IM_POLICYFINANCEPOSTINGDTL;

ALTER TABLE IM_BENEFIT_CODES ADD(VATNOTAPPLICABLE NUMBER);

ALTER TABLE IM_POLICYFINANCEPOSTING_SDOC ADD(BENEFITCODE NUMBER,SEPARATEDOCUMENT NUMBER)

PROMPT CREATE OR REPLACE PROCEDURE IM_UW_ENDORSEMENT_FN
CREATE OR REPLACE PROCEDURE IM_UW_ENDORSEMENT_FN (ENDORSE_PRIMARY NUMBER) AS
ENDORSEMENT_ROW  IM_POLICYFINANCEPOSTING%ROWTYPE;
APREMIUMPKEY NUMBER;
APREMIUMCOUNTER NUMBER;
ACOMMISIONPKEY NUMBER;
ACOMMISIONCOUNTER NUMBER;L_TOTAL NUMBER;
L_ADDTOTAL NUMBER;L_DELTOTAL NUMBER;
AA_POLICYCODE NUMBER DEFAULT 0;
BEGIN

SELECT * INTO ENDORSEMENT_ROW FROM IM_POLICYFINANCEPOSTING WHERE IM_POLICYFINANCEPOSTING.POLICYFINANCEPOSTINGCODE=ENDORSE_PRIMARY;
IF(NVL(ENDORSEMENT_ROW.REVERSEENDORSEMENTCODE,0)=0) THEN
DELETE FROM IM_POLICYFINANCEPOSTINGDTL WHERE IM_POLICYFINANCEPOSTINGDTL.POLICYFINANCEPOSTINGCODE=ENDORSEMENT_ROW.POLICYFINANCEPOSTINGCODE;
DELETE FROM IM_PFPCOMMISSIONDTL WHERE IM_PFPCOMMISSIONDTL.POLICYFINANCEPOSTINGCODE=ENDORSEMENT_ROW.POLICYFINANCEPOSTINGCODE;

IF ENDORSEMENT_ROW.POLICYTYPECODE=1 THEN
AA_POLICYCODE:=ENDORSEMENT_ROW.POLICYCODE;
ELSIF  ENDORSEMENT_ROW.POLICYTYPECODE=2 THEN
AA_POLICYCODE:=ENDORSEMENT_ROW.INDIVIDUALPOLICYCODE;
END IF;
         
INSERT INTO IM_POLICYFINANCEPOSTINGDTL (PFPDETAILCODE, MEMBERPOLICYCODE, POLICYFINANCEPOSTINGCODE,
CREATEDIN, CREATEDON,CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE,
SERIALNO, ADDPREMIUM, REFUNDPREMIUM)
SELECT (SELECT NVL(MAX(PFPDETAILCODE),100000000000000000) FROM IM_POLICYFINANCEPOSTINGDTL)+ROWNUM,MEMBERCODE MEMBERPOLICYCODE,ENDORSE_PRIMARY POLICYFINANCEPOSTINGCODE,
1 CREATEDIN,SYSDATE,'100000000000000002',SYSDATE,'100000000000000002',1 COMPANYCODE ,1  LOCATIONCODE,
(SELECT NVL(MAX(SERIALNO),0) FROM IM_POLICYFINANCEPOSTINGDTL)+ROWNUM,ADDPREMIUM, DELETEPREMIUM FROM (TABLE (FN_POLICYFINANCEPOSTING(ENDORSEMENT_ROW.POLICYTYPECODE,AA_POLICYCODE,ENDORSEMENT_ROW.PRODUCTIONSOURCE,ENDORSEMENT_ROW.PRODUCTIONBATCHCODE)));
COMMIT;

INSERT INTO IM_POLICYFINANCEPOSTING_SDOC (PFPDETAILCODE, MEMBERPOLICYCODE, POLICYFINANCEPOSTINGCODE,
CREATEDIN, CREATEDON,CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE,
SERIALNO, ADDPREMIUM, REFUNDPREMIUM,BENEFITCODE,SEPARATEDOCUMENT)
SELECT (SELECT NVL(MAX(PFPDETAILCODE),100000000000000000) FROM IM_POLICYFINANCEPOSTINGDTL)+ROWNUM,MEMBERCODE MEMBERPOLICYCODE,ENDORSE_PRIMARY POLICYFINANCEPOSTINGCODE,
1 CREATEDIN,SYSDATE,'100000000000000002',SYSDATE,'100000000000000002',1 COMPANYCODE ,1  LOCATIONCODE,
(SELECT NVL(MAX(SERIALNO),0) FROM IM_POLICYFINANCEPOSTINGDTL)+ROWNUM,ADDPREMIUM, DELETEPREMIUM,BENEFITCODE,SEPARATEDOCUMENT FROM 
(TABLE (FN_POLICYFINANCEPOSTING_SDOC(ENDORSEMENT_ROW.POLICYTYPECODE,AA_POLICYCODE,ENDORSEMENT_ROW.PRODUCTIONSOURCE,ENDORSEMENT_ROW.PRODUCTIONBATCHCODE)));
COMMIT; 
                   
INSERT INTO IM_PFPCOMMISSIONDTL (COMMISSIONDETAILCODE, POLICYFINANCEPOSTINGCODE, POLICYCODE,
COMISSION_TYPES, ADDITIONAMOUNT, REFUNDAMOUNT, COMMISSIONTO, DESCRIPTION, CREATEDON,
CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE, SERIALNO)
SELECT (SELECT NVL(MAX(COMMISSIONDETAILCODE),100000000000000000) FROM IM_PFPCOMMISSIONDTL) +ROWNUM,
ENDORSE_PRIMARY POLICYFINANCEPOSTINGCODE,AA_POLICYCODE POLICYCODE,
COMISSION_TYPES,ADDITIONAMOUNT,REFUNDAMOUNT,COMMISSIONTO,DESCRIPTION,
SYSDATE,'100000000000000002',SYSDATE,'100000000000000002',1 COMPANYCODE ,1  LOCATIONCODE,
(SELECT NVL(MAX(SERIALNO),0) FROM IM_PFPCOMMISSIONDTL) +ROWNUM FROM (TABLE (FN_POLICYFINANCECOMMISION(ENDORSEMENT_ROW.POLICYTYPECODE,AA_POLICYCODE,ENDORSEMENT_ROW.PRODUCTIONSOURCE,ENDORSEMENT_ROW.PRODUCTIONBATCHCODE)));
COMMIT;

END IF;



NGI_GETMAX_REC('IM_POLICYFINANCEPOSTINGDTL','SERIALNO');
NGI_GETMAX_REC('IM_PFPCOMMISSIONDTL','SERIALNO');

COMMIT;

SELECT SUM(ABS(ADDPREMIUM)),SUM(ABS(REFUNDPREMIUM)) INTO L_ADDTOTAL,L_DELTOTAL FROM   IM_POLICYFINANCEPOSTINGDTL
WHERE POLICYFINANCEPOSTINGCODE =ENDORSE_PRIMARY;
L_TOTAL := L_ADDTOTAL - L_DELTOTAL;
UPDATE IM_POLICYFINANCEPOSTING SET TOTAL = ABS(L_TOTAL),ADDPREMIUMTOTAL = L_ADDTOTAL,
DELETEPREMIUMTOTAL = L_DELTOTAL WHERE IM_POLICYFINANCEPOSTING.POLICYFINANCEPOSTINGCODE=ENDORSE_PRIMARY;
COMMIT;    
END;
/


PROMPT CREATE OR REPLACE VIEW im_policyfinancepostdtl_vw
CREATE OR REPLACE VIEW IM_POLICYFINANCEPOST_SDOC_VW   
AS
SELECT POLICYFINANCEPOSTINGCODE,PFPDETAILCODE,MEMBERPOLICYCODE,RELATIONNAME,MEMPARENTID,
MEMMEMBERCODE,CARDID,MEMBER_ID,MEMBERNAME,STARTDATE,ENDDATE,CATEGORY_NAME,GROUPCODE,BENEFITCODE,
Sum(ADDPREMIUM) ADDPREMIUM,Sum(REFUNDPREMIUM) REFUNDPREMIUM,1 VATAPPLICABLE FROM(
SELECT POLICYFINANCEPOSTINGCODE,PFPDETAILCODE,MEMBERPOLICYCODE,RELATIONNAME,ADDPREMIUM ADDPREMIUM,REFUNDPREMIUM,
MEMPARENTID,MEMMEMBERCODE,CARDID,MEMBER_ID,MEMBERNAME,STARTDATE,ENDDATE,CATEGORY_NAME,GROUPCODE,
Decode(Nvl(SEPARATEDOCUMENT,0),0,1,BENEFITCODE) BENEFITCODE
FROM (SELECT  Decode(Nvl(MEM.RELATION,0),0,'SELF',15,'SELF',77,'SELF',78,'SELF','DEPENDENT') RELATIONNAME,PFD.*,
MEM.PARENT_ID MEMPARENTID,MEM.MEMBER_CODE MEMMEMBERCODE,CAR.CARDNO CARDID,
NVL(MEMP.AMEMBERID,MEM.MEMBER_ID) MEMBER_ID,(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEMP.MEMBERSTARTDATE STARTDATE,MEMP.MEMBERENDDATE ENDDATE,
CAT.CATEGORY_NAME,NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE FROM IM_POLICYFINANCEPOSTING_SDOC PFD
JOIN IM_MEMBERPOLICY MEMP ON MEMP.MEMBERPOLICYCODE=PFD.MEMBERPOLICYCODE
LEFT JOIN IM_CORDPRINT  CAR ON CAR.MEMBERPOLICYCODE=MEMP.MEMBERPOLICYCODE
JOIN IM_MEMBERS MEM ON MEM.MEMBER_CODE=MEMP.MEMBERCODE
LEFT JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEMP.CATEGORYCODE
UNION
SELECT  Decode(Nvl(MEM.RELATION,0),0,'SELF',15,'SELF',77,'SELF',78,'SELF','DEPENDENT') RELATIONNAME,PFD.*,
MEM.PARENT_ID MEMPARENTID,MEM.MEMBER_CODE MEMMEMBERCODE,MEM.CARDNO CARDID,
NVL(MEMP.AMEMBERID,MEM.MEMBER_ID) MEMBER_ID,(MEM.FIRST_NAME||''||MEM.LAST_NAME) MEMBERNAME,
MEMP.MEMBERSTARTDATE STARTDATE,MEMP.MEMBERENDDATE ENDDATE,
CAT.CATEGORY_NAME,NVL(MEM.PARENTGROUPCODE,MEM.GROUP_CODE) GROUPCODE  FROM IM_POLICYFINANCEPOSTING_SDOC PFD
JOIN IM_MEMBERPOLICY MEMP ON MEMP.MEMBERPOLICYCODE=PFD.MEMBERPOLICYCODE
JOIN IM_REINS_MEMBERS MEM ON MEM.MEMBER_CODE=MEMP.REINSMEMBERCODE
LEFT JOIN IM_CATEGORIES  CAT ON CAT.CATEGORY_CODE=MEMP.CATEGORYCODE) PFD) GROUP BY
POLICYFINANCEPOSTINGCODE,PFPDETAILCODE,MEMBERPOLICYCODE,RELATIONNAME,MEMPARENTID,
MEMMEMBERCODE,CARDID,MEMBER_ID,MEMBERNAME,STARTDATE,ENDDATE,CATEGORY_NAME,GROUPCODE,BENEFITCODE
/

PROMPT CREATE OR REPLACE FUNCTION sf_postuwend_fnc
CREATE OR REPLACE FUNCTION sf_postuwend_fnc(P_PRIMKEY NUMBER,P_USERCODE NUMBER) RETURN VARCHAR2
AS
L_ERROR VARCHAR2(1000);L_PRIMKEY NUMBER;
L_REFDATE DATE;L_POLICYTYPE NUMBER;
L_POLICYCODE NUMBER;L_INDPOLICYCODE NUMBER;
L_BILLINGTYPE NUMBER;L_AGENTCODE NUMBER;L_POLICYSTARTDATE DATE;
L_BROKERCODE NUMBER;L_MEMOTYPE NUMBER;L_VALUE NUMBER;
L_COUNTERREFNO VARCHAR2(100);L_COUNTERCODE NUMBER;
L_YEAR VARCHAR2(100);L_REFNO VARCHAR2(100);
L_SOURCECODE NUMBER;L_ACCNO VARCHAR2(100);L_BRANCHCODE NUMBER;
JVCOUNTER NUMBER;JVPKEY NUMBER;L_TOTALCOMMISSION NUMBER;
L_PROVIDERPINCODE VARCHAR2(100);L_CURRENCYCODE NUMBER;L_INSTALLMENTAMT NUMBER;
L_MEMBERCODE NUMBER;L_AUTHORIZEDSTATUS NUMBER;L_BLACKCOUNT NUMBER;
L_ADDPREMIUM NUMBER;L_REFUNDPREMIUM NUMBER;L_TOTALPREMIUM NUMBER;L_OWNERCODE NUMBER;
L_AGENTCOMMISSION NUMBER;L_BROKERCOMMISSION NUMBER;L_OTHERCOMMISSION NUMBER;
L_AGENTCOUNT NUMBER;L_BROKERCOUNT NUMBER;L_GROUPCOUNT NUMBER;L_MEMBERCOUNT NUMBER;L_EXCLUDEVAT NUMBER;
L_ALLOWCUSTOMER NUMBER;L_VATAPPLICABLE NUMBER;L_INSTALLMENTCOUNT NUMBER;L_PORTALTYPE VARCHAR2(500);L_PINCOUNT NUMBER;
BEGIN   
  SELECT TO_DATE(SYSDATE,'DD/MM/RRRR'),Decode(POLICYTYPECODE,1,0,2,1),POLICYCODE,INDIVIDUALPOLICYCODE,AUTHORIZEDSTATUS,LOADAFTERSAVE
  INTO L_REFDATE,L_POLICYTYPE,L_POLICYCODE,L_INDPOLICYCODE,L_AUTHORIZEDSTATUS,L_EXCLUDEVAT
  FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;

  IF L_AUTHORIZEDSTATUS = 1 THEN
     RETURN 'Already document posted for this record !';
  END IF;

  IF L_POLICYTYPE = 0 THEN
    SELECT Max(BILLINGTYPE),Max(AGENTCODE),Max(BROKERCODE),Max(BRANCHCODE),Max(PORTALTYPE),Max(LogCode),Max(OWNERCODE),Max(STARTDATE) INTO
    L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_BRANCHCODE,L_PORTALTYPE,L_PRIMKEY,L_OWNERCODE,L_POLICYSTARTDATE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE;
  END IF;
  IF L_POLICYTYPE = 1 THEN
    SELECT Max(BILLINGTYPE),Max(AGENTCODE),Max(BROKERCODE),Max(BRANCHCODE),Max(PORTALTYPE),Max(LogCode),Max(OWNERCODE),Max(STARTDATE) INTO
    L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_BRANCHCODE,L_PORTALTYPE,L_PRIMKEY,L_OWNERCODE,L_POLICYSTARTDATE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = L_INDPOLICYCODE;
  END IF;

  IF L_PORTALTYPE='F' OR L_PORTALTYPE='N' THEN
     L_ERROR := SF_POSTUWPORTALEND_FNC(P_PRIMKEY,L_PRIMKEY,100000000000000002);
     RETURN L_ERROR;
  END IF;

  SELECT Count(*) INTO L_INSTALLMENTCOUNT FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY;
  IF L_INSTALLMENTCOUNT = 0 THEN
     RETURN 'Installment should not be empty';
  ELSE
    SELECT Sum(Nvl(ADDPREMIUM,0)),Sum(Nvl(REFUNDPREMIUM,0)) INTO L_ADDPREMIUM,L_REFUNDPREMIUM FROM IM_POLICYFINANCEPOSTINGDTL
    WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY;
    L_TOTALPREMIUM :=  Abs(L_ADDPREMIUM)-Abs(L_REFUNDPREMIUM);
    UPDATE IM_POLICYFINANCE_INSTALLMENT SET AMOUNT = (L_TOTALPREMIUM)*(PERCENTAGE/100) WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY
    AND CALC_METHOD = 1;
    COMMIT;
    L_TOTALPREMIUM := 0;
    L_ADDPREMIUM := 0;
    L_REFUNDPREMIUM := 0;
  END IF;
               

  DELETE FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
  COMMIT;
  IM_UW_VATCOMMISSION_FN(P_PRIMKEY);
  BEGIN
    L_ERROR:=IM_VATREPORT_FNC(P_PRIMKEY);
  END;

  IF L_EXCLUDEVAT = 1 AND L_OWNERCODE = 4 THEN
     UPDATE  IM_PFPCOMMISSION_VAT SET ADDVATCOMMISSION = 0,REFUNDVATCOMMISSION = 0 WHERE  POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
     COMMIT;
     UPDATE  IM_POLICYFINANCE_VAT SET VATAMOUNT = 0,REFUNDVATAMOUNT = 0 WHERE  POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
     COMMIT;
  END IF;    

  IF NVL(L_AGENTCODE,0) <> 0 THEN
     SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE AGENTCODE = L_AGENTCODE AND ISBLACKLIST = 1;
     IF L_BLACKCOUNT > 0 THEN
      IF  L_POLICYTYPE = 0 THEN
        SELECT Count(*) INTO L_ALLOWCUSTOMER FROM IM_CREDITMODULE_DTL
        WHERE GROUPCODE IN
        (SELECT GROUPCODE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE) AND Nvl(ISBLACKLIST,0) = 0;
      ELSE
        L_ALLOWCUSTOMER := 0;
      END IF;
      IF L_ALLOWCUSTOMER = 0 THEN
        DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
        COMMIT;
        RETURN 'Agent is Blocked ! Please Check with Finance Department !';
      END IF;
     END IF;
  END IF;

  IF NVL(L_BROKERCODE,0) <> 0 THEN
     SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE BROKERCODE = L_BROKERCODE AND ISBLACKLIST = 1;
     IF L_BLACKCOUNT > 0 THEN
      IF  L_POLICYTYPE = 0 THEN
        SELECT Count(*) INTO L_ALLOWCUSTOMER FROM IM_CREDITMODULE_DTL
        WHERE GROUPCODE IN
        (SELECT GROUPCODE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE) AND Nvl(ISBLACKLIST,0) = 0;
      ELSE
        L_ALLOWCUSTOMER := 0;
      END IF;
      IF L_ALLOWCUSTOMER = 0 THEN
        DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
        COMMIT;
        RETURN 'Broker is Blocked ! Please Check with Finance Department !';
      END IF;
     END IF;
  END IF;
  IF L_POLICYTYPE = 0 THEN
    FOR MDTL IN (SELECT DISTINCT RELATIONNAME,GROUPCODE,VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE
    POLICYFINANCEPOSTINGCODE = P_PRIMKEY AND Nvl(ADDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND GROUPCODE = MDTL.GROUPCODE AND VATAPPLICABLE = MDTL.VATAPPLICABLE AND RELATIONNAME = MDTL.RELATIONNAME 
      AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(ABS(SDTL.ADDPREMIUM),0);  
          L_REFUNDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := ABS(L_ADDPREMIUM) - ABS(L_REFUNDPREMIUM);
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;


          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;   */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_GROUPCOUNT FROM IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE
        AND ENDDATE IS NULL;

        IF L_GROUPCOUNT > 0 THEN
          SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE GROUPCODE = MDTL.GROUPCODE AND Nvl(ISBLACKLIST,0) = 1;
          /*IF L_BLACKCOUNT > 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Client is Blocked ! Please Check with Finance Department !';
          END IF; */
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GROUPCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND ENDDATE IS NULL;


          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),2,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          MDTL.GROUPCODE,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Group Pin Code should not be Empty  !'||MDTL.GROUPCODE;
        END IF;
      END IF;
    END LOOP;

    FOR MDTL IN (SELECT DISTINCT RELATIONNAME,GROUPCODE,VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(REFUNDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND GROUPCODE = MDTL.GROUPCODE AND VATAPPLICABLE = MDTL.VATAPPLICABLE AND RELATIONNAME = MDTL.RELATIONNAME
      AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          --L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(ABS(SDTL.ADDPREMIUM),0);
          L_REFUNDPREMIUM  := L_REFUNDPREMIUM + Nvl(ABS(SDTL.REFUNDPREMIUM),0);
          L_ADDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := ABS(L_ADDPREMIUM) - ABS(L_REFUNDPREMIUM);
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;


      IF L_BILLINGTYPE = 0 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

         /* SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_GROUPCOUNT FROM IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND
        ENDDATE IS NULL;

        IF L_GROUPCOUNT > 0 THEN
          SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE GROUPCODE = MDTL.GROUPCODE AND Nvl(ISBLACKLIST,0) = 1; 
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GROUPCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND
          ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),2,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          MDTL.GROUPCODE,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Group Pin Code should not be Empty  !'||MDTL.GROUPCODE;
        END IF;
      END IF;
    END LOOP;

  END IF;

  IF L_POLICYTYPE = 1 THEN
    FOR MDTL IN (SELECT DISTINCT VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(ADDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND  VATAPPLICABLE = MDTL.VATAPPLICABLE AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(SDTL.ADDPREMIUM,0);         
          L_REFUNDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := L_ADDPREMIUM - L_REFUNDPREMIUM;
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT


        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Max(MEMBERCODE) INTO L_MEMBERCODE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE =  L_INDPOLICYCODE;
        SELECT Count(*) INTO L_MEMBERCOUNT FROM IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;
        IF L_MEMBERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT MEMBERBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),3,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          NULL,L_MEMBERCODE,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Member Pin Code should not be Empty  !';
        END IF;
      END IF;
    END LOOP;
    FOR MDTL IN (SELECT DISTINCT VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(REFUNDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND  VATAPPLICABLE = MDTL.VATAPPLICABLE AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          --L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(SDTL.ADDPREMIUM,0);
          L_REFUNDPREMIUM  := L_REFUNDPREMIUM + Nvl(SDTL.REFUNDPREMIUM,0);
          L_ADDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := L_ADDPREMIUM - L_REFUNDPREMIUM;
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT


        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Max(MEMBERCODE) INTO L_MEMBERCODE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE =  L_INDPOLICYCODE;
        SELECT Count(*) INTO L_MEMBERCOUNT FROM IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;
        IF L_MEMBERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT MEMBERBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),3,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          NULL,L_MEMBERCODE,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Member Pin Code should not be Empty  !';
        END IF;
      END IF;
    END LOOP;
  END IF;

  FOR DTL IN (SELECT * FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY) LOOP
      L_AGENTCOMMISSION := 0;L_BROKERCOMMISSION := 0;L_OTHERCOMMISSION := 0;
      L_TOTALCOMMISSION := 0;
      L_TOTALCOMMISSION := Abs(DTL.ADDITIONAMOUNT)-Abs(DTL.REFUNDAMOUNT);
      IF L_TOTALCOMMISSION > 0 THEN
        L_MEMOTYPE := 0;
      ELSE
        L_MEMOTYPE := 1;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF DTL.COMISSION_TYPES = 1 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOMMISSION FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,0);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF DTL.COMISSION_TYPES = 0 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOMMISSION FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,DTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_OTHERCOMMISSION FROM IM_GENERAL_COMM_BILLING_DETAIL  WHERE
        GENERALCOMMBILLINGCODE = DTL.COMMISSIONTO AND ENDDATE IS NULL;
        IF L_OTHERCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GENERALCOMMBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GENERAL_COMM_BILLING_DETAIL  WHERE GENERALCOMMBILLINGCODE = DTL.COMMISSIONTO AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),5,
          L_REFNO,Nvl(L_POLICYCODE,L_POLICYCODE),NULL,NULL,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, DTL.COMMISSIONTO, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,DTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Other commission Pin Code should not be Empty  !';
        END IF;
      END IF;
  END LOOP;
UPDATE IM_POLICYFINANCEPOSTING SET AUTHORIZEDSTATUS = 1 WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
COMMIT;
UPDATE IM_MEMBERPOLICY SET FINANCEPOSTDONEFORADDITION = 1 WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_POLICYFINANCEPOSTINGDTL WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
AND ADDPREMIUM <> 0);
COMMIT;
UPDATE IM_MEMBERPOLICY SET FINANCEPOSTDONEFORDELETION = 1 WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_POLICYFINANCEPOSTINGDTL WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
AND REFUNDPREMIUM <> 0);
COMMIT;
RETURN 'Approved Successfully';
EXCEPTION WHEN OTHERS THEN
DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
COMMIT;
UPDATE IM_POLICYFINANCEPOSTING SET AUTHORIZEDSTATUS = 0 WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
COMMIT;
L_ERROR:= SQLERRM;
RETURN L_ERROR;
END;
/

ALTER TABLE IM_NGI_JVPOSTING ADD(BENEFITCODE NUMBER);
/


PROMPT CREATE OR REPLACE FUNCTION sf_postuwend_fnc
CREATE OR REPLACE FUNCTION sf_postuwend_fnc(P_PRIMKEY NUMBER,P_USERCODE NUMBER) RETURN VARCHAR2
AS
L_ERROR VARCHAR2(1000);L_PRIMKEY NUMBER;
L_REFDATE DATE;L_POLICYTYPE NUMBER;
L_POLICYCODE NUMBER;L_INDPOLICYCODE NUMBER;
L_BILLINGTYPE NUMBER;L_AGENTCODE NUMBER;L_POLICYSTARTDATE DATE;
L_BROKERCODE NUMBER;L_MEMOTYPE NUMBER;L_VALUE NUMBER;
L_COUNTERREFNO VARCHAR2(100);L_COUNTERCODE NUMBER;
L_YEAR VARCHAR2(100);L_REFNO VARCHAR2(100);
L_SOURCECODE NUMBER;L_ACCNO VARCHAR2(100);L_BRANCHCODE NUMBER;
JVCOUNTER NUMBER;JVPKEY NUMBER;L_TOTALCOMMISSION NUMBER;
L_PROVIDERPINCODE VARCHAR2(100);L_CURRENCYCODE NUMBER;L_INSTALLMENTAMT NUMBER;
L_MEMBERCODE NUMBER;L_AUTHORIZEDSTATUS NUMBER;L_BLACKCOUNT NUMBER;
L_ADDPREMIUM NUMBER;L_REFUNDPREMIUM NUMBER;L_TOTALPREMIUM NUMBER;L_OWNERCODE NUMBER;
L_AGENTCOMMISSION NUMBER;L_BROKERCOMMISSION NUMBER;L_OTHERCOMMISSION NUMBER;
L_AGENTCOUNT NUMBER;L_BROKERCOUNT NUMBER;L_GROUPCOUNT NUMBER;L_MEMBERCOUNT NUMBER;L_EXCLUDEVAT NUMBER;
L_ALLOWCUSTOMER NUMBER;L_VATAPPLICABLE NUMBER;L_INSTALLMENTCOUNT NUMBER;L_PORTALTYPE VARCHAR2(500);L_PINCOUNT NUMBER;
BEGIN   
  SELECT TO_DATE(SYSDATE,'DD/MM/RRRR'),Decode(POLICYTYPECODE,1,0,2,1),POLICYCODE,INDIVIDUALPOLICYCODE,AUTHORIZEDSTATUS,LOADAFTERSAVE
  INTO L_REFDATE,L_POLICYTYPE,L_POLICYCODE,L_INDPOLICYCODE,L_AUTHORIZEDSTATUS,L_EXCLUDEVAT
  FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;

  IF L_AUTHORIZEDSTATUS = 1 THEN
     RETURN 'Already document posted for this record !';
  END IF;

  IF L_POLICYTYPE = 0 THEN
    SELECT Max(BILLINGTYPE),Max(AGENTCODE),Max(BROKERCODE),Max(BRANCHCODE),Max(PORTALTYPE),Max(LogCode),Max(OWNERCODE),Max(STARTDATE) INTO
    L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_BRANCHCODE,L_PORTALTYPE,L_PRIMKEY,L_OWNERCODE,L_POLICYSTARTDATE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE;
  END IF;
  IF L_POLICYTYPE = 1 THEN
    SELECT Max(BILLINGTYPE),Max(AGENTCODE),Max(BROKERCODE),Max(BRANCHCODE),Max(PORTALTYPE),Max(LogCode),Max(OWNERCODE),Max(STARTDATE) INTO
    L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_BRANCHCODE,L_PORTALTYPE,L_PRIMKEY,L_OWNERCODE,L_POLICYSTARTDATE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = L_INDPOLICYCODE;
  END IF;

  IF L_PORTALTYPE='F' OR L_PORTALTYPE='N' THEN
     L_ERROR := SF_POSTUWPORTALEND_FNC(P_PRIMKEY,L_PRIMKEY,100000000000000002);
     RETURN L_ERROR;
  END IF;

  SELECT Count(*) INTO L_INSTALLMENTCOUNT FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY;
  IF L_INSTALLMENTCOUNT = 0 THEN
     RETURN 'Installment should not be empty';
  ELSE
    SELECT Sum(Nvl(ADDPREMIUM,0)),Sum(Nvl(REFUNDPREMIUM,0)) INTO L_ADDPREMIUM,L_REFUNDPREMIUM FROM IM_POLICYFINANCEPOSTINGDTL
    WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY;
    L_TOTALPREMIUM :=  Abs(L_ADDPREMIUM)-Abs(L_REFUNDPREMIUM);
    UPDATE IM_POLICYFINANCE_INSTALLMENT SET AMOUNT = (L_TOTALPREMIUM)*(PERCENTAGE/100) WHERE POLICYFINANCEPOSTINGCODE=P_PRIMKEY
    AND CALC_METHOD = 1;
    COMMIT;
    L_TOTALPREMIUM := 0;
    L_ADDPREMIUM := 0;
    L_REFUNDPREMIUM := 0;
  END IF;
               

  DELETE FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
  COMMIT;
  IM_UW_VATCOMMISSION_FN(P_PRIMKEY);
  BEGIN
    L_ERROR:=IM_VATREPORT_FNC(P_PRIMKEY);
  END;

  IF L_EXCLUDEVAT = 1 AND L_OWNERCODE = 4 THEN
     UPDATE  IM_PFPCOMMISSION_VAT SET ADDVATCOMMISSION = 0,REFUNDVATCOMMISSION = 0 WHERE  POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
     COMMIT;
     UPDATE  IM_POLICYFINANCE_VAT SET VATAMOUNT = 0,REFUNDVATAMOUNT = 0 WHERE  POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
     COMMIT;
  END IF;    

  IF NVL(L_AGENTCODE,0) <> 0 THEN
     SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE AGENTCODE = L_AGENTCODE AND ISBLACKLIST = 1;
     IF L_BLACKCOUNT > 0 THEN
      IF  L_POLICYTYPE = 0 THEN
        SELECT Count(*) INTO L_ALLOWCUSTOMER FROM IM_CREDITMODULE_DTL
        WHERE GROUPCODE IN
        (SELECT GROUPCODE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE) AND Nvl(ISBLACKLIST,0) = 0;
      ELSE
        L_ALLOWCUSTOMER := 0;
      END IF;
      IF L_ALLOWCUSTOMER = 0 THEN
        DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
        COMMIT;
        RETURN 'Agent is Blocked ! Please Check with Finance Department !';
      END IF;
     END IF;
  END IF;

  IF NVL(L_BROKERCODE,0) <> 0 THEN
     SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE BROKERCODE = L_BROKERCODE AND ISBLACKLIST = 1;
     IF L_BLACKCOUNT > 0 THEN
      IF  L_POLICYTYPE = 0 THEN
        SELECT Count(*) INTO L_ALLOWCUSTOMER FROM IM_CREDITMODULE_DTL
        WHERE GROUPCODE IN
        (SELECT GROUPCODE FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE) AND Nvl(ISBLACKLIST,0) = 0;
      ELSE
        L_ALLOWCUSTOMER := 0;
      END IF;
      IF L_ALLOWCUSTOMER = 0 THEN
        DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
        COMMIT;
        RETURN 'Broker is Blocked ! Please Check with Finance Department !';
      END IF;
     END IF;
  END IF;
  IF L_POLICYTYPE = 0 THEN
    FOR MDTL IN (SELECT DISTINCT RELATIONNAME,GROUPCODE,VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE
    POLICYFINANCEPOSTINGCODE = P_PRIMKEY AND Nvl(ADDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND GROUPCODE = MDTL.GROUPCODE AND VATAPPLICABLE = MDTL.VATAPPLICABLE AND RELATIONNAME = MDTL.RELATIONNAME 
      AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(ABS(SDTL.ADDPREMIUM),0);  
          L_REFUNDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := ABS(L_ADDPREMIUM) - ABS(L_REFUNDPREMIUM);
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;


          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;   */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_GROUPCOUNT FROM IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE
        AND ENDDATE IS NULL;

        IF L_GROUPCOUNT > 0 THEN
          SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE GROUPCODE = MDTL.GROUPCODE AND Nvl(ISBLACKLIST,0) = 1;
          /*IF L_BLACKCOUNT > 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Client is Blocked ! Please Check with Finance Department !';
          END IF; */
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GROUPCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND ENDDATE IS NULL;


          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),2,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          MDTL.GROUPCODE,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Group Pin Code should not be Empty  !'||MDTL.GROUPCODE;
        END IF;
      END IF;
    END LOOP;

    FOR MDTL IN (SELECT DISTINCT RELATIONNAME,GROUPCODE,VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(REFUNDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND GROUPCODE = MDTL.GROUPCODE AND VATAPPLICABLE = MDTL.VATAPPLICABLE AND RELATIONNAME = MDTL.RELATIONNAME
      AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          --L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(ABS(SDTL.ADDPREMIUM),0);
          L_REFUNDPREMIUM  := L_REFUNDPREMIUM + Nvl(ABS(SDTL.REFUNDPREMIUM),0);
          L_ADDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := ABS(L_ADDPREMIUM) - ABS(L_REFUNDPREMIUM);
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;


      IF L_BILLINGTYPE = 0 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

         /* SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_GROUPCOUNT FROM IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND
        ENDDATE IS NULL;

        IF L_GROUPCOUNT > 0 THEN
          SELECT COUNT(*) INTO L_BLACKCOUNT FROM IM_CREDITMODULE_DTL WHERE GROUPCODE = MDTL.GROUPCODE AND Nvl(ISBLACKLIST,0) = 1; 
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GROUPCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GROUP_BILLING_DETAIL  WHERE GROUPCODE = MDTL.GROUPCODE AND
          ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),2,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          MDTL.GROUPCODE,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, Decode(MDTL.RELATIONNAME,'SELF',77,80),MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Group Pin Code should not be Empty  !'||MDTL.GROUPCODE;
        END IF;
      END IF;
    END LOOP;

  END IF;

  IF L_POLICYTYPE = 1 THEN
    FOR MDTL IN (SELECT DISTINCT VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(ADDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND  VATAPPLICABLE = MDTL.VATAPPLICABLE AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(SDTL.ADDPREMIUM,0);         
          L_REFUNDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := L_ADDPREMIUM - L_REFUNDPREMIUM;
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT


        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Max(MEMBERCODE) INTO L_MEMBERCODE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE =  L_INDPOLICYCODE;
        SELECT Count(*) INTO L_MEMBERCOUNT FROM IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;
        IF L_MEMBERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT MEMBERBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;

          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),3,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          NULL,L_MEMBERCODE,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Member Pin Code should not be Empty  !';
        END IF;
      END IF;
    END LOOP;
    FOR MDTL IN (SELECT DISTINCT VATAPPLICABLE,BENEFITCODE FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
    AND Nvl(REFUNDPREMIUM,0) <> 0) LOOP
      L_ADDPREMIUM := 0;L_REFUNDPREMIUM := 0;L_TOTALPREMIUM := 0;
      FOR SDTL IN (SELECT * FROM IM_POLICYFINANCEPOST_SDOC_VW WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
      AND  VATAPPLICABLE = MDTL.VATAPPLICABLE AND BENEFITCODE = MDTL.BENEFITCODE) LOOP
          --L_ADDPREMIUM  := L_ADDPREMIUM + Nvl(SDTL.ADDPREMIUM,0);
          L_REFUNDPREMIUM  := L_REFUNDPREMIUM + Nvl(SDTL.REFUNDPREMIUM,0);
          L_ADDPREMIUM := 0;
      END LOOP;
      L_TOTALPREMIUM := L_ADDPREMIUM - L_REFUNDPREMIUM;
      IF L_TOTALPREMIUM > 0 THEN
        L_MEMOTYPE := 1;
      ELSE
        L_MEMOTYPE := 0;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF L_BILLINGTYPE = 0 THEN --AGENT


        SELECT Count(*) INTO L_AGENTCOUNT FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF L_BILLINGTYPE = 1 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOUNT FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_ACCNO;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_ACCNO||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_ACCNO,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Max(MEMBERCODE) INTO L_MEMBERCODE FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE =  L_INDPOLICYCODE;
        SELECT Count(*) INTO L_MEMBERCOUNT FROM IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;
        IF L_MEMBERCOUNT > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT MEMBERBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_MEMBER_BILLING_DETAIL  WHERE MEMBER_CODE = L_MEMBERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE,BENEFITCODE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),3,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,NULL,NULL,
          NULL,L_MEMBERCODE,Abs(L_TOTALPREMIUM),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          0, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,MDTL.VATAPPLICABLE,MDTL.BENEFITCODE);
          COMMIT;
        ELSE
          DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
          COMMIT;
          RETURN 'Member Pin Code should not be Empty  !';
        END IF;
      END IF;
    END LOOP;
  END IF;

  FOR DTL IN (SELECT * FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY) LOOP
      L_AGENTCOMMISSION := 0;L_BROKERCOMMISSION := 0;L_OTHERCOMMISSION := 0;
      L_TOTALCOMMISSION := 0;
      L_TOTALCOMMISSION := Abs(DTL.ADDITIONAMOUNT)-Abs(DTL.REFUNDAMOUNT);
      IF L_TOTALCOMMISSION > 0 THEN
        L_MEMOTYPE := 0;
      ELSE
        L_MEMOTYPE := 1;
      END IF;

      IF L_MEMOTYPE = 0 THEN
        L_COUNTERREFNO := '02';
      ELSIF L_MEMOTYPE = 1 THEN
        L_COUNTERREFNO := '01';
      END IF;

      IF DTL.COMISSION_TYPES = 1 THEN --AGENT
        SELECT Count(*) INTO L_AGENTCOMMISSION FROM IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
        IF L_AGENTCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT AGENTCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_AGENTS_BILLING_DETAIL  WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),0,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),L_AGENTCODE,NULL,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,0);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Agent Pin Code should not be Empty  !';
        END IF;
      ELSIF DTL.COMISSION_TYPES = 0 THEN --BROKER
        SELECT Count(*) INTO L_BROKERCOMMISSION FROM IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
        IF L_BROKERCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT BROKERCODE,ACCOUNTNUMBER,PROVIDERPINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_BROKER_BILLING_DETAIL  WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE;*/

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),1,
          L_REFNO,Nvl(L_POLICYCODE,L_INDPOLICYCODE),NULL,L_BROKERCODE,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, NULL, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,DTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Broker Pin Code should not be Empty  !';
        END IF;
      ELSE
        SELECT Count(*) INTO L_OTHERCOMMISSION FROM IM_GENERAL_COMM_BILLING_DETAIL  WHERE
        GENERALCOMMBILLINGCODE = DTL.COMMISSIONTO AND ENDDATE IS NULL;
        IF L_OTHERCOMMISSION > 0 THEN
          SELECT Max(COUNTERCODE) INTO L_COUNTERCODE FROM FND_COUNTERS WHERE CODE=L_COUNTERREFNO||'NGIJV' AND ORG_ID = 2017;
          UPDATE FND_COUNTERS SET VALUE=(VALUE+1) WHERE COUNTERCODE=L_COUNTERCODE;
          COMMIT;
          SELECT Max(Value) INTO L_VALUE FROM FND_COUNTERS WHERE COUNTERCODE=L_COUNTERCODE;
          SELECT To_Char(L_REFDATE,'RR') INTO L_YEAR FROM DUAL;
          L_REFNO := L_COUNTERREFNO||L_YEAR||1||L_VALUE;

          SELECT GENERALCOMMBILLINGCODE,ACCOUNTNUMBER,PINCODE,CURRENCYCODE INTO L_SOURCECODE,L_ACCNO,L_PROVIDERPINCODE,L_CURRENCYCODE
          FROM  IM_GENERAL_COMM_BILLING_DETAIL  WHERE GENERALCOMMBILLINGCODE = DTL.COMMISSIONTO AND ENDDATE IS NULL;

          /*SELECT Count(*) INTO L_PINCOUNT FROM GIM_PARTY@NGI_IIRIS
          WHERE PTY_CODE =L_PROVIDERPINCODE; */

          IF L_PINCOUNT = 0 THEN
            DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY AND MEDPOSTINGDONE = 0;
            COMMIT;
            RETURN 'Pin '||L_PROVIDERPINCODE||' not found in IIRIS system  !';
          END IF;


          SELECT NVL(MAX(SERIALNO),0),NVL(MAX(JVPOSTINGCODE),100000000000000000) INTO JVCOUNTER,JVPKEY FROM IM_NGI_JVPOSTING;
          Insert into IM_NGI_JVPOSTING
          (JVPOSTINGCODE,REF_CODE,REF_TYPE, REFDATE, MEMBERTYPE, REF_NO,
          POLICYCODE, AGENTCODE, BROKERCODE, INSURERCODE, GROUPCODE,
          MEMBERCODE, AMOUNT, ACCOUNTNO, CURRENCYCODE, BINCODE,
          MEMOTYPE, LOCATIONCODE, COMPANYCODE, CREATEDON, CREATEDBY,
          LASTMODIFIEDON, LASTMODIFIEDBY, SERIALNO, POLICYTYPE, SOURCECODE,
          CLAIMREFCODE, PROVIDERCODE, HNMPOSTINGDONE, MEDPOSTINGDONE, JVPREMIUMTYPE,
          OTHERCOMMISIONCODE, REVERSEJVDONE, REVERSEJVCODE, REVERSEFINACEDONE, DISCOUNTVALUE,
          DISCOUNTTYPE, NONPAYCODE, BRANCHNAME, REINSURERCODE, NOOFINSTALLMENT,
          ISADDED, MANUALINSTALLMENT, SESSIONPROCESSDONE,VATAPPLICABLE)
          Values
          (JVPKEY+1,P_PRIMKEY,0,TO_DATE(SYSDATE,'DD/MM/RRRR'),5,
          L_REFNO,Nvl(L_POLICYCODE,L_POLICYCODE),NULL,NULL,NULL,
          NULL,NULL,Abs(L_TOTALCOMMISSION),L_ACCNO, NULL,
          L_PROVIDERPINCODE,L_MEMOTYPE, 1, 1, TO_DATE(SYSDATE,'DD/MM/RRRR'),
          P_USERCODE,TO_DATE(SYSDATE,'DD/MM/RRRR'),P_USERCODE,JVCOUNTER+1,L_POLICYTYPE,
          1, NULL, NULL, 0, 0,
          1, DTL.COMMISSIONTO, NULL, NULL, NULL,
          0, NULL, NULL, NULL, NULL,
          NULL, NULL, NULL, NULL,DTL.VATAPPLICABLE);
          COMMIT;
        ELSE
           DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
           COMMIT;
           RETURN 'Other commission Pin Code should not be Empty  !';
        END IF;
      END IF;
  END LOOP;
UPDATE IM_POLICYFINANCEPOSTING SET AUTHORIZEDSTATUS = 1 WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
COMMIT;
UPDATE IM_MEMBERPOLICY SET FINANCEPOSTDONEFORADDITION = 1 WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_POLICYFINANCEPOSTINGDTL WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
AND ADDPREMIUM <> 0);
COMMIT;
UPDATE IM_MEMBERPOLICY SET FINANCEPOSTDONEFORDELETION = 1 WHERE MEMBERPOLICYCODE IN
(SELECT MEMBERPOLICYCODE FROM IM_POLICYFINANCEPOSTINGDTL WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY
AND REFUNDPREMIUM <> 0);
COMMIT;
RETURN 'Approved Successfully';
EXCEPTION WHEN OTHERS THEN
DELETE FROM IM_NGI_JVPOSTING WHERE REF_CODE = P_PRIMKEY  AND MEDPOSTINGDONE = 0;
COMMIT;
UPDATE IM_POLICYFINANCEPOSTING SET AUTHORIZEDSTATUS = 0 WHERE POLICYFINANCEPOSTINGCODE = P_PRIMKEY;
COMMIT;
L_ERROR:= SQLERRM;
RETURN L_ERROR;
END;
/



PROMPT CREATE OR REPLACE FUNCTION im_finance_link_fnc
CREATE OR REPLACE FUNCTION im_finance_link_fnc(P_COMPANYCODE NUMBER) RETURN VARCHAR2
AS
L_ERROR VARCHAR2(1000);L_POLICYID NVARCHAR2(100);
L_BRANCH NUMBER;L_ORGNAME NVARCHAR2(50);L_POLICYNAME NVARCHAR2(500);
L_PRODUCTID NUMBER;L_PRODUCTIDNAME NVARCHAR2(50);
L_SOURCEID NVARCHAR2(100);L_INSUREDPIN NVARCHAR2(100);
L_DOCTYPE  NVARCHAR2(100);L_PERCENTAGE NUMBER;
L_GLCODE NVARCHAR2(50);L_VATGLCODE NVARCHAR2(50);L_AMOUNT NUMBER(19,2);
L_BILLINGTYPE NUMBER;L_AGENTCODE NUMBER;L_POLICYCODE NUMBER;
L_BROKERCODE NUMBER;L_GROUPCODE NUMBER;L_PROVIDERNAME NVARCHAR2(500);L_AGNPIN NVARCHAR2(500);
L_OWNERCODE NUMBER;L_VATAMT NUMBER(19,2);L_USER NVARCHAR2(500);L_PERCENTAMT NUMBER(19,2);
L_COMMISSIONCREDITNO NVARCHAR2(500);L_REVERSECREDITNO NVARCHAR2(500);L_NARRATION NVARCHAR2(2000);
L_MANAGEDBY NVARCHAR2(500);L_VATPREMIUMAMOUNT NUMBER(19,2); L_INSTALLMENTNO NUMBER;L_SHORTNAME NVARCHAR2(50);
L_VATCOUNT NUMBER;
BEGIN
--RETURN 'S';


-- Group Policy
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS NOT NULL AND POLICYTYPE=0
--AND Nvl(MEDPOSTINGDONE,0)=0
AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0) NOT IN (28,26) AND Nvl(BENEFITCODE,1) = 1) LOOP
  L_INSTALLMENTNO := 0;
  SELECT MAX(POLICYCODE) INTO L_POLICYCODE FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(REQUEST_SOURCE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;
  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
      SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
      IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
          SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
      END IF;
    END IF;
  END IF;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);
  SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE REF_CODE = HDR.REF_CODE
  AND JVPREMIUMTYPE = 0 AND Nvl(GROUPCODE,L_GROUPCODE) = L_GROUPCODE;
  IF L_INSUREDPIN IS NULL THEN
    SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE POLICYCODE = HDR.POLICYCODE
    AND JVPREMIUMTYPE = 0 AND Nvl(GROUPCODE,L_GROUPCODE) = L_GROUPCODE;
  END IF;
  IF HDR.JVPREMIUMTYPE = 0 THEN
    L_DOCTYPE := 'PRM';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 2 AND OWNERCODE=L_OWNERCODE;
  ELSIF HDR.JVPREMIUMTYPE = 1 AND Nvl(HDR.OTHERCOMMISIONCODE,0) = 0 THEN
    L_DOCTYPE := 'COM';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 4 AND OWNERCODE=L_OWNERCODE;
  ELSIF HDR.JVPREMIUMTYPE = 1 AND Nvl(HDR.OTHERCOMMISIONCODE,0) <> 0 THEN
    L_DOCTYPE := 'TPA';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 6 AND OWNERCODE=L_OWNERCODE;
  END IF;




  IF HDR.JVPREMIUMTYPE = 0 THEN
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(VATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0)) AND Nvl(RELATIONNAME,0) = Nvl(HDR.SESSIONPROCESSDONE,0);
    ELSE
      SELECT Sum(Nvl(REFUNDVATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0)) AND Nvl(RELATIONNAME,0) = Nvl(HDR.SESSIONPROCESSDONE,0);
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND OTHERCOMMISIONCODE IS NULL AND JVPREMIUMTYPE<>0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    FOR INS IN(SELECT * FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE AND CALC_METHOD = 1 ORDER BY INSTALLMENTDATE ASC) LOOP
      L_INSTALLMENTNO := L_INSTALLMENTNO + 1;
      IF INS.CALC_METHOD = 0 THEN
        L_PERCENTAMT := INS.AMOUNT;
      ELSE
        L_PERCENTAMT := Round((HDR.AMOUNT*(INS.PERCENTAGE/100)),2);
      END IF;
       IF L_INSTALLMENTNO = 1 THEN
        L_VATAMT := L_VATPREMIUMAMOUNT*(L_PERCENTAGE/100);
      ELSE
        L_VATAMT := 0;
      END IF;
      L_VATAMT := Round(L_VATAMT,2);
      IF HDR.MEMOTYPE = 0 THEN
        L_AMOUNT := ABS(L_PERCENTAMT)*-1;
        L_VATAMT := Abs(L_VATAMT)*-1;
      ELSIF HDR.MEMOTYPE = 1 THEN
        L_AMOUNT := ABS(L_PERCENTAMT);
        L_VATAMT := Abs(L_VATAMT);
      END IF;
     /* SELECT Count(*) INTO L_VATCOUNT FROM GIM_PARTY@NGI_IIRIS WHERE
      PTY_CODE =  HDR.BINCODE AND PTY_VAT_TYPE = '101';
      IF L_VATCOUNT = 0 THEN
         L_VATAMT := 0;
      END IF;          */
      INSERT INTO IM_FINANCE_LINK_POSTING
      SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
      L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,INS.INSTALLMENTDATE,HDR.BINCODE,L_NARRATION,
      L_AMOUNT,L_VATAMT,L_GLCODE,L_VATGLCODE,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
      COMMIT;
    END LOOP;
  ELSE
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(REFUNDVATCOMMISSION,0)) INTO L_VATPREMIUMAMOUNT FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(COMMISSIONTO,0) = Nvl(HDR.OTHERCOMMISIONCODE,0);
    ELSE
      SELECT Sum(Nvl(ADDVATCOMMISSION,0)) INTO L_VATPREMIUMAMOUNT FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(COMMISSIONTO,0) = Nvl(HDR.OTHERCOMMISIONCODE,0);
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND JVPREMIUMTYPE=0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    L_VATAMT := L_VATPREMIUMAMOUNT*(L_PERCENTAGE/100);
    L_VATAMT := Round(L_VATAMT,2);
    IF HDR.MEMOTYPE = 0 THEN
      L_AMOUNT := ABS(HDR.AMOUNT)*-1;
      L_VATAMT := Abs(L_VATAMT)*-1;
    ELSIF HDR.MEMOTYPE = 1 THEN
      L_AMOUNT := ABS(HDR.AMOUNT);
      L_VATAMT := Abs(L_VATAMT);
    END IF;
    IF HDR.MEMBERTYPE = 0 THEN
      L_VATAMT := 0;
    END IF;
  /* SELECT Count(*) INTO L_VATCOUNT FROM GIM_PARTY@NGI_IIRIS WHERE
    PTY_CODE =  HDR.BINCODE AND PTY_VAT_TYPE = '101';
    IF L_VATCOUNT = 0 THEN
        L_VATAMT := 0;
    END IF;   */

    INSERT INTO IM_FINANCE_LINK_POSTING
    SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
    L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,HDR.REFDATE,HDR.BINCODE,L_NARRATION,
    L_AMOUNT,L_VATAMT,L_GLCODE,L_VATGLCODE,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
    COMMIT;
  END IF;
END LOOP;

-- Group HEP Policy
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS NOT NULL AND POLICYTYPE=0      
AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0) NOT IN (28,26) AND Nvl(BENEFITCODE,1) <> 1) LOOP
  L_INSTALLMENTNO := 0;
  SELECT MAX(POLICYCODE) INTO L_POLICYCODE FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(REQUEST_SOURCE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;

  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;
  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
      SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
      IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
          SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
      END IF;
    END IF;
  END IF;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);
  SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE REF_CODE = HDR.REF_CODE
  AND JVPREMIUMTYPE = 0 AND Nvl(GROUPCODE,L_GROUPCODE) = L_GROUPCODE;
  IF L_INSUREDPIN IS NULL THEN
    SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE POLICYCODE = HDR.POLICYCODE
    AND JVPREMIUMTYPE = 0 AND Nvl(GROUPCODE,L_GROUPCODE) = L_GROUPCODE;
  END IF;
  IF HDR.JVPREMIUMTYPE = 0 THEN
    L_DOCTYPE := 'HEP';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 2 AND OWNERCODE=L_OWNERCODE;  
  END IF;




  IF HDR.JVPREMIUMTYPE = 0 THEN
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(VATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0)) AND Nvl(RELATIONNAME,0) = Nvl(HDR.SESSIONPROCESSDONE,0);
    ELSE
      SELECT Sum(Nvl(REFUNDVATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0)) AND Nvl(RELATIONNAME,0) = Nvl(HDR.SESSIONPROCESSDONE,0);
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND OTHERCOMMISIONCODE IS NULL AND JVPREMIUMTYPE<>0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    FOR INS IN(SELECT Min(INSTALLMENTDATE) INSTALLMENTDATE FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE AND CALC_METHOD = 1) LOOP     
      INSERT INTO IM_FINANCE_LINK_POSTING
      SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
      L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,INS.INSTALLMENTDATE,HDR.BINCODE,L_NARRATION,
      HDR.AMOUNT,0,L_GLCODE,NULL,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
      COMMIT; 
    END LOOP;  
  END IF;
END LOOP;


-- Individual Policy
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS NOT NULL AND POLICYTYPE=1
--AND Nvl(MEDPOSTINGDONE,0)=0
AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0)  NOT IN (28,26) AND Nvl(BENEFITCODE,1) = 1) LOOP
  SELECT MAX(INDIVIDUALPOLICYCODE) INTO L_POLICYCODE FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(INDIPOLICYSOURCECODE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;
  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
      IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
          SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
      END IF;
    END IF;
  END IF;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);
  SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE REF_CODE = HDR.REF_CODE
  AND JVPREMIUMTYPE = 0;
  IF HDR.JVPREMIUMTYPE = 0 THEN
    L_DOCTYPE := 'PRM';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 2 AND OWNERCODE=L_OWNERCODE;
  ELSIF HDR.JVPREMIUMTYPE = 1 AND Nvl(HDR.OTHERCOMMISIONCODE,0) = 0 THEN
    L_DOCTYPE := 'COM';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 4 AND OWNERCODE=L_OWNERCODE;
  ELSIF HDR.JVPREMIUMTYPE = 1 AND Nvl(HDR.OTHERCOMMISIONCODE,0) <> 0 THEN
    L_DOCTYPE := 'TPA';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 6 AND OWNERCODE=L_OWNERCODE;
  END IF;

  IF HDR.JVPREMIUMTYPE = 0 THEN
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(VATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0));
    ELSE
      SELECT Sum(Nvl(REFUNDVATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0));
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND  JVPREMIUMTYPE<>0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    FOR INS IN(SELECT * FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE AND CALC_METHOD = 1 ORDER BY INSTALLMENTDATE ASC) LOOP
      IF INS.CALC_METHOD = 0 THEN
        L_PERCENTAMT := INS.AMOUNT;
      ELSE
        L_PERCENTAMT := Round((HDR.AMOUNT*(INS.PERCENTAGE/100)),2);
      END IF;
      L_VATAMT := L_VATPREMIUMAMOUNT*(L_PERCENTAGE/100);
      L_VATAMT := Round(L_VATAMT,2);
      IF HDR.MEMOTYPE = 0 THEN
        L_AMOUNT := ABS(L_PERCENTAMT)*-1;
        L_VATAMT := Abs(L_VATAMT)*-1;
      ELSIF HDR.MEMOTYPE = 1 THEN
        L_AMOUNT := ABS(L_PERCENTAMT);
        L_VATAMT := Abs(L_VATAMT);
      END IF;
     /* SELECT Count(*) INTO L_VATCOUNT FROM GIM_PARTY@NGI_IIRIS WHERE
      PTY_CODE =  HDR.BINCODE AND PTY_VAT_TYPE = '101';
      IF L_VATCOUNT = 0 THEN
         L_VATAMT := 0;
      END IF;     */

      INSERT INTO IM_FINANCE_LINK_POSTING
      SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
      L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,INS.INSTALLMENTDATE,HDR.BINCODE,L_NARRATION,
      L_AMOUNT,L_VATAMT,L_GLCODE,L_VATGLCODE,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
      COMMIT;
    END LOOP;
  ELSE
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(REFUNDVATCOMMISSION,0)) INTO L_VATPREMIUMAMOUNT FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(COMMISSIONTO,0) = Nvl(HDR.OTHERCOMMISIONCODE,0);
    ELSE
      SELECT Sum(Nvl(ADDVATCOMMISSION,0)) INTO L_VATPREMIUMAMOUNT FROM IM_PFPCOMMISSION_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(COMMISSIONTO,0) = Nvl(HDR.OTHERCOMMISIONCODE,0);
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND JVPREMIUMTYPE=0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    L_VATAMT := L_VATPREMIUMAMOUNT*(L_PERCENTAGE/100);
    L_VATAMT := Round(L_VATAMT,2);
    IF HDR.MEMOTYPE = 0 THEN
      L_AMOUNT := ABS(HDR.AMOUNT)*-1;
      L_VATAMT := Abs(L_VATAMT)*-1;
    ELSIF HDR.MEMOTYPE = 1 THEN
      L_AMOUNT := ABS(HDR.AMOUNT);
      L_VATAMT := Abs(L_VATAMT);
    END IF;
    IF HDR.MEMBERTYPE = 0 THEN
      L_VATAMT := 0;
    END IF;
    /* SELECT Count(*) INTO L_VATCOUNT FROM GIM_PARTY@NGI_IIRIS WHERE
    PTY_CODE =  HDR.BINCODE AND PTY_VAT_TYPE = '101';
    IF L_VATCOUNT = 0 THEN
        L_VATAMT := 0;
    END IF;
               */
    INSERT INTO IM_FINANCE_LINK_POSTING
    SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
    L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,HDR.REFDATE,HDR.BINCODE,L_NARRATION,
    L_AMOUNT,L_VATAMT,L_GLCODE,L_VATGLCODE,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
    COMMIT;
  END IF;
END LOOP;

-- Individual HEP Policy
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS NOT NULL AND POLICYTYPE=1
--AND Nvl(MEDPOSTINGDONE,0)=0
AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0)  NOT IN (28,26) AND Nvl(BENEFITCODE,1) <> 1) LOOP
  SELECT MAX(INDIVIDUALPOLICYCODE) INTO L_POLICYCODE FROM IM_POLICYFINANCEPOSTING WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(INDIPOLICYSOURCECODE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;
  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
      IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
          SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
      END IF;
    END IF;
  END IF;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);
  SELECT Max(BINCODE) INTO L_INSUREDPIN FROM IM_NGI_JVPOSTING WHERE REF_CODE = HDR.REF_CODE
  AND JVPREMIUMTYPE = 0;
  IF HDR.JVPREMIUMTYPE = 0 THEN
    L_DOCTYPE := 'HEP';
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 2 AND OWNERCODE=L_OWNERCODE;   
  END IF;

  IF HDR.JVPREMIUMTYPE = 0 THEN
    IF HDR.MEMOTYPE = 1 THEN
      SELECT Sum(Nvl(VATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0));
    ELSE
      SELECT Sum(Nvl(REFUNDVATAMOUNT,0)) INTO L_VATPREMIUMAMOUNT FROM IM_POLICYFINANCE_VAT WHERE POLICYFINANCEPOSTINGCODE = HDR.REF_CODE
      AND Nvl(GROUPCODE,0) = Nvl(HDR.GROUPCODE,Nvl(GROUPCODE,0));
    END IF;
    SELECT LISTAGG(REF_NO, '/') WITHIN GROUP (ORDER BY REF_NO) INTO L_COMMISSIONCREDITNO
    FROM IM_NGI_JVPOSTING WHERE REF_CODE=HDR.REF_CODE AND  JVPREMIUMTYPE<>0;
    L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
    FOR INS IN(SELECT Min(INSTALLMENTDATE) INSTALLMENTDATE FROM IM_POLICYFINANCE_INSTALLMENT WHERE POLICYFINANCEPOSTINGCODE=HDR.REF_CODE AND CALC_METHOD = 1) LOOP 
      INSERT INTO IM_FINANCE_LINK_POSTING
      SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
      L_INSUREDPIN,L_POLICYNAME,L_DOCTYPE,HDR.REF_NO,HDR.REFDATE,INS.INSTALLMENTDATE,HDR.BINCODE,L_NARRATION,
      L_AMOUNT,L_VATAMT,L_GLCODE,L_VATGLCODE,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,L_COMMISSIONCREDITNO FROM DUAL;
      COMMIT;   
    END LOOP;
  END IF;
END LOOP;

-- Provider Claims
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS  NULL
--AND Nvl(MEDPOSTINGDONE,0)=0
AND POLICYTYPE=-1 AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0)  NOT IN (28)) LOOP
  IF HDR.MEMOTYPE = 0 THEN
    L_AMOUNT := ABS(HDR.AMOUNT)*-1;
  ELSIF HDR.MEMOTYPE = 1 THEN
    L_AMOUNT := ABS(HDR.AMOUNT);
  END IF;
  SELECT Nvl(Max(ADMINISTEREDBY),0) INTO L_OWNERCODE FROM IM_ENDORSEMENTPOSTING WHERE ENDORESMENTCODE = HDR.CLAIMREFCODE;

  IF  L_OWNERCODE = 0 THEN
    L_OWNERCODE := 3;
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 7 AND OWNERCODE = 3;
  ELSE
    SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
    FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 7 AND OWNERCODE = L_OWNERCODE;
  END IF;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE'
  AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);

  SELECT Max(PROVIDERNAME) INTO L_PROVIDERNAME FROM IM_PROVIDERS WHERE PROVIDERCODE = HDR.MEMBERCODE;
  L_NARRATION := HDR.REF_NO||' '||L_PROVIDERNAME;
  INSERT INTO IM_FINANCE_LINK_POSTING
  SELECT NULL,NULL,'MED','AED',NULL,HDR.REF_NO,NULL,
  NULL,L_PROVIDERNAME,'CLM',HDR.REF_NO,HDR.REFDATE,NULL,HDR.BINCODE,L_NARRATION,
  L_AMOUNT,NULL,L_GLCODE,NULL,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,NULL,NULL FROM DUAL;
  COMMIT;
END LOOP;

-- Group Claims
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS  NULL
--AND Nvl(MEDPOSTINGDONE,0)=0
AND POLICYTYPE=0 AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0)  NOT IN (28)) LOOP
  IF HDR.MEMOTYPE = 0 THEN
    L_AMOUNT := ABS(HDR.AMOUNT)*-1;
  ELSIF HDR.MEMOTYPE = 1 THEN
    L_AMOUNT := ABS(HDR.AMOUNT);
  END IF;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(REQUEST_SOURCE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_POLICY WHERE POLICYCODE = HDR.POLICYCODE;
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = HDR.POLICYCODE;
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;

  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_POLICY WHERE POLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
    END IF;
  END IF;
  SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
  FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 7 AND OWNERCODE=L_OWNERCODE;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);

  L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
  INSERT INTO IM_FINANCE_LINK_POSTING
  SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
  HDR.BINCODE,L_POLICYNAME,'CLM',HDR.REF_NO,HDR.REFDATE,NULL,HDR.BINCODE,L_NARRATION,
  L_AMOUNT,NULL,L_GLCODE,NULL,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,NULL FROM DUAL;
  COMMIT;
END LOOP;

-- Individual Claims
FOR HDR IN(SELECT * FROM IM_NGI_JVPOSTING WHERE REF_NO NOT IN
(SELECT DOCNO FROM IM_FINANCE_LINK_POSTING) AND REF_CODE IS  NULL
--AND Nvl(MEDPOSTINGDONE,0)=0
AND POLICYTYPE=1 AND TO_DATE(REFDATE,'DD/MM/RRRR')>TO_DATE('31/12/2017','DD/MM/RRRR')
AND Nvl(ISADDED,0)  NOT IN (28)) LOOP
  IF HDR.MEMOTYPE = 0 THEN
    L_AMOUNT := ABS(HDR.AMOUNT)*-1;
  ELSIF HDR.MEMOTYPE = 1 THEN
    L_AMOUNT := ABS(HDR.AMOUNT);
  END IF;
  SELECT Max(PRODUCTIDENTIFIER),Max(POLICYID),Max(POLICYNAME),MAX(INDIPOLICYSOURCECODE),MAX(AGENTCODE),MAX(BROKERCODE),MAX(GROUPCODE),Max(OWNERCODE)
  INTO L_PRODUCTID,L_POLICYID,L_POLICYNAME,L_BILLINGTYPE,L_AGENTCODE,L_BROKERCODE,L_GROUPCODE,L_OWNERCODE
  FROM  IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = HDR.POLICYCODE;
  SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = HDR.POLICYCODE;
  SELECT  Max(AGENT_ID) INTO  L_SOURCEID FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
  SELECT Max(PINCODE) INTO L_AGNPIN FROM IM_AGENTS_BILLING_DETAIL WHERE AGENTCODE = L_AGENTCODE AND ENDDATE IS NULL;
  IF L_SOURCEID IS NULL THEN
   SELECT Max(BROKER_ID) INTO L_SOURCEID FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
   SELECT Max(PROVIDERPINCODE) INTO L_AGNPIN FROM IM_BROKER_BILLING_DETAIL WHERE BROKERCODE = L_BROKERCODE AND ENDDATE IS NULL;
  END IF;

  IF L_BRANCH IS NULL OR L_BRANCH = 0 THEN
    IF L_BILLINGTYPE = 4 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_AGENTS WHERE AGENTCODE = L_AGENTCODE;
    ELSIF L_BILLINGTYPE = 5 THEN
    SELECT MAX(BRANCHCODE)  INTO L_BRANCH FROM IM_BROKERS WHERE BROKERCODE = L_BROKERCODE;
    ELSIF L_BILLINGTYPE = 3 THEN
    SELECT MAX(BRANCHCODE) INTO L_BRANCH FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = NVL(HDR.POLICYCODE,L_POLICYCODE);
    END IF;
  END IF;
  SELECT Max(PERCENTAGE),Max(GLCODE),Max(VATCODE) INTO L_PERCENTAGE,L_GLCODE,L_VATGLCODE
  FROM IM_NGI_GLVAT_SETUP WHERE DOCUMENTTYPE = 7 AND OWNERCODE=L_OWNERCODE;

  SELECT Max(Value),Max(Arabic_Value) INTO L_MANAGEDBY,L_SHORTNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='NGIQUOTATIONTYPE' AND To_Char(LOOKUP_CODE)=To_Char(L_OWNERCODE);
  SELECT Max(SHORT_NAME) INTO L_ORGNAME FROM HR_ORGANIZATIONS_D WHERE ORGANIZATIONS_CODE = L_BRANCH;
  SELECT Max(VALUE) INTO L_PRODUCTIDNAME FROM FND_LOOKUP_VALUES WHERE LOOKUP_TYPE='IMPRODUCTIDENTIFIER'
  AND To_Char(LOOKUP_CODE)=To_Char(L_PRODUCTID);

  L_NARRATION := HDR.REF_NO||' '||L_POLICYID;
  INSERT INTO IM_FINANCE_LINK_POSTING
  SELECT L_POLICYID,L_ORGNAME,'MED','AED',L_PRODUCTIDNAME,HDR.REF_NO,L_SOURCEID,
  HDR.BINCODE,L_POLICYNAME,'CLM',HDR.REF_NO,HDR.REFDATE,NULL,HDR.BINCODE,L_NARRATION,
  L_AMOUNT,NULL,L_GLCODE,NULL,L_MANAGEDBY,L_SHORTNAME,L_USER,NULL,NULL,NULL,L_AGNPIN,NULL FROM DUAL;
  COMMIT;
END LOOP;

RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
RETURN L_ERROR;
END;
/

ALTER TABLE IM_CLAIM_PROCESS_HEADER ADD(CANCER NUMBER,HEPATITIS NUMBER);
/
DROP TABLE IM_CLAIM_PROCESS_HEADER_ORPT;
CREATE TABLE IM_CLAIM_PROCESS_HEADER_ORPT AS SELECT * FROM IM_CLAIM_PROCESS_HEADER;

/
DROP TABLE IM_CLAIM_AUTH_HDR;
CREATE TABLE IM_CLAIM_AUTH_HDR AS SELECT * FROM IM_CLAIM_PROCESS_HEADER;
/


PROMPT CREATE OR REPLACE PACKAGE ngi_loadclaims
CREATE OR REPLACE PACKAGE ngi_loadclaims AS

  FUNCTION RELOADECLAIMACTIVITIES(P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

  FUNCTION NGI_REPROCESSECLAIMS(L_MAPVALUE NUMBER,P_CLAIM_STATUS NUMBER) RETURN VARCHAR2;

  FUNCTION NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE,L_NETWORKCODE NUMBER) RETURN NUMBER ;

  FUNCTION NGI_GETHADDTARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE,L_NETWORKCODE NUMBER) RETURN NUMBER ;

  FUNCTION NGI_UPLOADRACLAIMS(P_COMPANYCODE NUMBER) RETURN VARCHAR2;

  FUNCTION NGI_REPROCESS_MISSING_DETAIL(L_MAPVALUE NUMBER) RETURN VARCHAR2;


END NGI_LOADCLAIMS;
/

PROMPT CREATE OR REPLACE PACKAGE BODY ngi_loadclaims
CREATE OR REPLACE PACKAGE BODY ngi_loadclaims AS

FUNCTION RELOADECLAIMACTIVITIES(P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);
L_MAPVALUE NUMBER;
L_RULES VARCHAR2(1000);
BEGIN
    BEGIN
      L_RULES := ngi_loadclaims.NGI_REPROCESSECLAIMS(1,277);
    END;

    BEGIN
      L_RULES := ngi_loadclaims.NGI_REPROCESSECLAIMS(1,-1);
    END;
    UPDATE IM_CLAIM_PROCESS_HEADER SET FINANCE=1,SUBMITTORA=0 WHERE CLAIM_CODE IN
    (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
    (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING WHERE JVPOSTINGCODE IN
    (SELECT JVCODE FROM IM_HNM_PROVIDERPAYMENTDTLS
    WHERE PROVIDERPAYMENTCODE IN
    (SELECT PROVIDERPAYMENTCODE FROM IM_HNMPROVIDERPAYMENT WHERE AUTHORIZEDSTATUS=1))))
    AND Nvl(FINANCE,0)=0;
    COMMIT;
    BEGIN
    L_RULES:=NGI_LOADCLAIMS.NGI_UPLOADRACLAIMS(1);
    END;

    BEGIN
      L_RULES := UPDATERADATE(1);
    END;
    BEGIN
      L_RULES := DELETECLAIMACTIVITIES(1);
    END;
    DELETE FROM IM_CLAIM_PROCESS_HEADER_ORPT;
    COMMIT;                         
    INSERT INTO IM_CLAIM_PROCESS_HEADER_ORPT SELECT * FROM IM_CLAIM_PROCESS_HEADER;
    COMMIT;
    L_RULES := UPDATECLAIMRPTDATA(1);
    L_RULES := UPDATECLAIMRPTMEMDATA(1);
    L_RULES := UPDATECLAIMCURRENCYDATA(1);
    DELETE FROM IM_CLAIM_AUTH_HDR;
    COMMIT;
    DELETE FROM IM_CLAIM_AUTH_DTL;
    COMMIT;
    DELETE FROM IM_AUTH_HDR;
    COMMIT;
    DELETE FROM IM_AUTH_DTL;
    COMMIT;
    INSERT INTO IM_CLAIM_AUTH_HDR SELECT * FROM  IM_CLAIM_PROCESS_HEADER
    WHERE ENCOUNTER_START_DATE > SYSDATE-100 AND REQUEST_TYPE=1;
    COMMIT;
    INSERT INTO IM_CLAIM_AUTH_DTL SELECT * FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
    (SELECT CLAIM_CODE FROM  IM_CLAIM_PROCESS_HEADER
    WHERE ENCOUNTER_START_DATE > SYSDATE-100 AND REQUEST_TYPE=1) AND Nvl(TYPE,0) = 0;
    COMMIT;
    INSERT INTO IM_AUTH_HDR SELECT * FROM  IM_AUTHORIZATION_PROCESS_HDR
    WHERE ENCOUNTER_START_DATE > SYSDATE-15 AND REQUEST_TYPE=1;
    COMMIT;
    INSERT INTO IM_AUTH_DTL SELECT * FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE IN
    (SELECT CLAIM_CODE FROM  IM_AUTHORIZATION_PROCESS_HDR
    WHERE ENCOUNTER_START_DATE > SYSDATE-15 AND REQUEST_TYPE=1) AND Nvl(TYPE,0) = 0;
    COMMIT;
P_RESULT := 1;
RETURN L_RULES;
EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
P_RESULT := 2;
RETURN L_ERROR;
END;

FUNCTION NGI_REPROCESSECLAIMS(L_MAPVALUE NUMBER,P_CLAIM_STATUS NUMBER) RETURN VARCHAR2 AS
L_MEMBERCODE NUMBER;
L_PBMCOUNT NUMBER;
L_CLAIMCOUNT NUMBER;
L_PROVIDERCODE NUMBER;
L_ERROR VARCHAR2(1000);
ASEQNAME VARCHAR2(1000);
L_TARIFFPRICE NUMBER;
L_INVCOUNT NUMBER;
L_CLINICIAN NUMBER;
L_ACTIVITYSTATUS NUMBER;
L_CLAIMSNO NUMBER;
L_CLAIMCODE NUMBER;
L_ACTIVITYSNO NUMBER;
L_ACTIVITYCODE NUMBER;
L_OBSERVATIONSNO NUMBER;
L_OBSERVATIONCODE NUMBER;
L_POLICYCODE NUMBER;
L_MEMBERPOLICYCODE NUMBER;
L_CATEGORYCODE  NUMBER;
L_CARDNO VARCHAR2(100);
L_COUNT NUMBER;
L_CLAIMINVOICECOUNT NUMBER;
L_TYPECODE NUMBER;
L_DETAILCODE NUMBER;
L_PROVIDERTYPE NUMBER;L_TYPEE NUMBER;L_MANAGEDBYCOUNT NUMBER;
L_TYPE NUMBER;L_AUTHORIZEDCOUNT NUMBER;
L_HADDPROVIDERCOUNT NUMBER;L_TREATMENTTYPE NUMBER;
P_RESULT NUMBER;L_PROVIDER_TYPE NUMBER;
L_PROVINCECOUNT NUMBER;L_BENEFITCODE NUMBER;L_BENEFITCOUNT NUMBER;
L_RULES VARCHAR2(100);L_PBMAUTHORIZATIONCOUNT NUMBER;
L_PBMCLAIMCOUNT NUMBER;L_PRIOR_AUTHORIZATION_ID   VARCHAR2(1000);
L_ELIGIBILITY NVARCHAR2(200);L_NETWORKCODE NUMBER;L_GOVTPROVIDER NUMBER;
L_HEPCOUNT NUMBER;L_CANCERCOUNT NUMBER;L_COE VARCHAR2(50);L_TRUEDOC NUMBER;
BEGIN


/*FOR EC IN (SELECT EC.* FROM ECLAIMS EC,
    IM_MEMBERPOLICY POL WHERE SYS_CLAIM_STATUS = 3
    AND ERROR_MESSAGE = 'Patient is not covered member or member card not correct'
    AND UPPER(TRIM(REPLACE(POL.ACARDID,' ')))=UPPER(TRIM(REPLACE(EC.NEWMEMBER_ID,' ','')))   AND   SYS_CLAIM_ID NOT IN
    (SELECT MAP_VALUE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE IS NOT NULL)
  ) LOOP*/
/*FOR EC IN(SELECT * FROM ECLAIMS WHERE  SYS_CLAIM_STATUS IN(277,-1) AND SYS_CLAIM_ID NOT IN
(SELECT MAP_VALUE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE IS NOT NULL) AND
TRANSACTION_DATE > To_Date('01/01/2015','DD/MM/RRRR') AND
ENCOUNTER_START > To_Date('01/01/2015','DD/MM/RRRR') ) LOOP */
FOR EC IN
( SELECT * FROM ECLAIMS WHERE SYS_CLAIM_STATUS = P_CLAIM_STATUS
  AND DISPOSITION_FLAG='PRODUCTION'
AND SYS_CLAIM_ID NOT IN
(SELECT MAP_VALUE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE IS NOT NULL)

--SELECT * FROM ECLAIMS WHERE   SYS_CLAIM_STATUS = 108

/*AND SENDER_ID IN
(SELECT OTHERLICNECEID FROM IM_PROVIDEr_LICENCES
WHERE PROVIDERCODE IN
(SELECT PROVIDERCODE FROM IM_PROVIDERS WHERE PROVIDERNAME LIKE '%MEDICLI%'))*/
) LOOP
--AND CLAIM_ID IN(SELECT * FROM SOA) AND DISPOSITION_FLAG <> '0') LOOP
   L_ACTIVITYSTATUS:=0;
   L_CLINICIAN := 0;
   L_ERROR := EC.SYS_CLAIM_ID;

   /*IF To_Date(EC.ENCOUNTER_START,'DD/MM/RRRR') < To_Date('01/01/2017','DD/MM/RRRR') THEN
        UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 33,ERROR_MESSAGE  = 'TIME-001',
        CLAIM_DENAIL_CODE='TIME-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='TIME-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
   END IF;

   /*FOR PBMECA IN (SELECT * FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID AND PRIOR_AUTHORIZATION_ID IS NOT NULL) LOOP
      L_PRIOR_AUTHORIZATION_ID := PBMECA.PRIOR_AUTHORIZATION_ID;
      SELECT Count(*) INTO L_PBMAUTHORIZATIONCOUNT FROM EPRIORAUTHORIZATION WHERE Upper(ID_PAYER) = Upper(PBMECA.PRIOR_AUTHORIZATION_ID);

      SELECT Count(*) INTO  L_PBMCLAIMCOUNT FROM  IM_CLAIM_PROCESS_HEADER WHERE
      Upper(PRIOR_AUTHORIZATION_ID) = Upper(PBMECA.PRIOR_AUTHORIZATION_ID) AND PRIOR_AUTHORIZATION_ID IS NOT NULL;
      IF L_PBMCLAIMCOUNT > 0 THEN
          IF EC.RESUBMISSION_COMMENT IS  NULL THEN
          UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 33,ERROR_MESSAGE  = 'Duplication Authorization Claims.',
          CLAIM_DENAIL_CODE='DUPL-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
          COMMIT;
          UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='DUPL-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          CONTINUE;
          END IF;
      END IF;
      IF L_PBMAUTHORIZATIONCOUNT > 0 THEN
        SELECT Count(*) INTO  L_PBMCLAIMCOUNT FROM  IM_CLAIM_PROCESS_HEADER WHERE
        Upper(PRIOR_AUTHORIZATION_ID) = Upper(PBMECA.PRIOR_AUTHORIZATION_ID) AND PRIOR_AUTHORIZATION_ID IS NOT NULL;
        IF L_PBMCLAIMCOUNT > 0 THEN
           IF EC.RESUBMISSION_COMMENT IS  NULL THEN
            UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 33,ERROR_MESSAGE  = 'Duplication Authorization Claims.',
            CLAIM_DENAIL_CODE='DUPL-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
            COMMIT;
            UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
            COMMIT;
            UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='DUPL-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
            COMMIT;
            CONTINUE;
           END IF;
        END IF;
      ELSE --waiting for approval
        UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 33,ERROR_MESSAGE  = 'Authorization not found for the Claims.',
        CLAIM_DENAIL_CODE='AUTH-012',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='AUTH-012'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
      END IF;
   END LOOP;*/


   UPDATE ECLAIMS SET ERROR_MESSAGE = NULL,CLAIM_DENAIL_CODE = NULL WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;
   UPDATE ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS = 0 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;

   SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
   L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO   FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
   WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
   AND UPPER(TRIM(REPLACE(MC.CARDNO,' ')))=UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.MEMBER_ID, '\S*', ''),'-','')))
  -- AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
     -- NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
   AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;



   IF L_MEMBERCODE IS NULL OR L_MEMBERCODE = 0  THEN
      SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
      L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO  FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
      WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
      AND UPPER(TRIM(REPLACE(MC.CARDNO,' ','')))=UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ','')))
      --AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
      --NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
      AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;
   END IF;

   IF L_MEMBERCODE IS NULL OR L_MEMBERCODE = 0  THEN
      SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
      L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP,IM_MEMBERS IM
      WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE      AND IM.MEMBER_CODE = MP.MEMBERCODE
      AND REPLACE(UPPER(TRIM(REPLACE(IM.EMIRATES_ID,' ',''))),'-','')=REPLACE(UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ',''))),'-','')
      --AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
      --NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
      AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;
   END IF;


   IF L_TYPEE = 1 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       SELECT Max(IPCN.NETWORKCODE) INTO L_NETWORKCODE FROM IM_POLICY POL
       LEFT JOIN IM_POLICY_CATEGORYDTL DTL ON DTL.POLICYCODE = POL.POLICYCODE
       LEFT JOIN IM_POLICYCOVEREDNETWORK IPCN ON IPCN.PCDCODE = DTL.PCDCODE
       WHERE POL.POLICYCODE = L_POLICYCODE  AND POL.POLICYCODE = L_POLICYCODE AND DTL.CATEGORYCODE = L_CATEGORYCODE
       AND Nvl(IPCN.ACTIVE,0) = 1;

       IF L_MANAGEDBYCOUNT = 0 THEN
        UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
        CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
       END IF;
   ELSIF L_TYPEE = 2 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       SELECT Max(IPCN.NETWORKCODE) INTO L_NETWORKCODE FROM IM_INDIVIDUALPOLICY POL
       LEFT JOIN IM_NGIINDPOLICYCATEGORY DTL ON DTL.INDIVIDUALPOLICYCODE = POL.INDIVIDUALPOLICYCODE
       LEFT JOIN IM_INDIVIDUALPOLICYNETWORK IPCN ON IPCN.POLICYCATEGORYCODE = DTL.POLICYCATEGORYCODE
       WHERE POL.INDIVIDUALPOLICYCODE = L_POLICYCODE AND DTL.CATEGORYCODE = L_CATEGORYCODE
       AND Nvl(IPCN.ACTIVE,0) = 1;

       IF L_MANAGEDBYCOUNT = 0 THEN
        UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
        CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
       END IF;
   END IF;

   IF L_MEMBERCODE = 0 OR L_MEMBERCODE IS NULL THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
      CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
       UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;
   
   SELECT Count(*) INTO L_TRUEDOC FROM IM_MEMBERS WHERE MEMBER_CODE = L_MEMBERCODE
   AND (Nvl(CANCER,'N') = 'Y' OR Nvl(HEPATITIS_C,'N') = 'Y');


   SELECT MIN(IMP.PROVIDERCODE),Min(IMP.PROVIDERTYPE) INTO L_PROVIDERCODE,L_PROVIDER_TYPE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
   WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.SENDER_ID, '\S*', ''),'-','')))
  -- AND To_Date(EC.TRANSACTION_DATE,'DD/MM/RRRR') BETWEEN  To_Date(IMPL.VALIDFROM,'DD/MM/RRRR') AND  To_Date(IMPL.VALIDTO,'DD/MM/RRRR')
   AND ROWNUM < 2;


   IF L_PROVIDERCODE IS NULL THEN
     SELECT MIN(IMP.PROVIDERCODE),Min(IMP.PROVIDERTYPE) INTO L_PROVIDERCODE,L_PROVIDER_TYPE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
     WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(EC.SENDER_ID,' ','')))
    -- AND To_Date(EC.TRANSACTION_DATE,'DD/MM/RRRR') BETWEEN  To_Date(IMPL.VALIDFROM,'DD/MM/RRRR') AND  To_Date(IMPL.VALIDTO,'DD/MM/RRRR')
     AND ROWNUM < 2;
   END IF;


   IF L_PROVIDERCODE = 0 OR L_PROVIDERCODE IS NULL THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Provider License not availabe in standard codes.',
      CLAIM_DENAIL_CODE='ELIG-007',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-007'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;


   SELECT MIN(IMP.PROVIDERCODE),Min(IMP.PROVIDERTYPE),Min(COE) INTO L_PROVIDERCODE,L_PROVIDER_TYPE,L_COE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
   WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.SENDER_ID, '\S*', ''),'-','')))
   AND To_Date(EC.ENCOUNTER_START,'DD/MM/RRRR') BETWEEN  To_Date(IMPL.VALIDFROM,'DD/MM/RRRR') AND  To_Date(Nvl(IMPL.VALIDTO,SYSDATE),'DD/MM/RRRR')
   AND ROWNUM < 2;


   IF L_PROVIDERCODE IS NULL THEN
     SELECT MIN(IMP.PROVIDERCODE),Min(IMP.PROVIDERTYPE),Min(COE) INTO L_PROVIDERCODE,L_PROVIDER_TYPE,L_COE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
     WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(EC.SENDER_ID,' ','')))
     AND To_Date(EC.ENCOUNTER_START,'DD/MM/RRRR') BETWEEN  To_Date(IMPL.VALIDFROM,'DD/MM/RRRR') AND  To_Date(Nvl(IMPL.VALIDTO,SYSDATE),'DD/MM/RRRR')
     AND ROWNUM < 2;
   END IF;

   IF L_PROVIDERCODE = 0 OR L_PROVIDERCODE IS NULL THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 73,ERROR_MESSAGE  = 'Provider License not availabe in standard codes.',
      CLAIM_DENAIL_CODE='ELIG-007',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-007'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;


   SELECT COUNT(*) INTO L_CLAIMINVOICECOUNT FROM IM_CLAIM_PROCESS_HEADER WHERE INVOICENUMBER = EC.CLAIM_ID
   AND TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR') = TO_DATE(EC.TRANSACTION_DATE,'DD/MM/RRRR') AND PROVIDER_CODE = L_PROVIDERCODE;

   IF L_CLAIMINVOICECOUNT > 0 THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Payment already made for same/similar service within set time frame',
      CLAIM_DENAIL_CODE='DUPL-002',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID,PAYMENTTYPE=1   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='DUPL-002'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;

   IF EC.RESUBMISSION_COMMENT IS NULL THEN
    SELECT COUNT(*) INTO L_CLAIMINVOICECOUNT FROM IM_CLAIM_PROCESS_HEADER WHERE INVOICENUMBER = EC.CLAIM_ID
    AND TO_DATE(ENCOUNTER_START_DATE,'DD/MM/RRRR') = TO_DATE(EC.ENCOUNTER_START,'DD/MM/RRRR') AND PROVIDER_CODE = L_PROVIDERCODE;
   ELSE
    SELECT COUNT(*) INTO L_CLAIMINVOICECOUNT FROM IM_CLAIM_PROCESS_HEADER WHERE INVOICENUMBER = EC.CLAIM_ID
    AND TO_DATE(ENCOUNTER_START_DATE,'DD/MM/RRRR') = TO_DATE(EC.ENCOUNTER_START,'DD/MM/RRRR') AND PROVIDER_CODE = L_PROVIDERCODE
    AND TO_DATE(TRANSACTIONDATE,'DD/MM/RRRR') = TO_DATE(EC.TRANSACTION_DATE,'DD/MM/RRRR');
   END IF;

   IF L_CLAIMINVOICECOUNT > 0 THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Payment already made for same/similar service within set time frame',
      CLAIM_DENAIL_CODE='DUPL-002',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID,PAYMENTTYPE=1   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='DUPL-002'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;


  /* IF L_PROVIDER_TYPE = 2 THEN
      SELECT COUNT(*) INTO L_AUTHORIZEDCOUNT FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID AND PRIOR_AUTHORIZATION_ID IS NULL;

      IF L_AUTHORIZEDCOUNT > 0 THEN
        UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = 33,ERROR_MESSAGE  = 'Authorization not found for the Claims.',
        CLAIM_DENAIL_CODE='AUTH-012',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE ECLAIMS SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE ECLAIM_ACTIVITIES SET ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='AUTH-012'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
      END IF;

   END IF;*/

   SELECT COUNT(*) INTO L_PROVINCECOUNT FROM IM_PROVIDERS WHERE CITYCODE IN(100000000000001992,100000000000001989) AND PROVIDERCODE = L_PROVIDERCODE;


   IF L_PROVINCECOUNT > 0 THEN
      L_PROVIDERTYPE := 2;
   ELSE
      L_PROVIDERTYPE := 1;
   END IF ;




  SELECT COUNT(*) INTO L_PBMCOUNT FROM IM_PROVIDERS WHERE  PROVIDERCODE = L_PROVIDERCODE AND CLAIMQUOTETYPE IN (3,1235);

  /*IF L_PBMCOUNT > 0 AND  EC.SYS_CLAIM_SOURCE <> 3 THEN
     UPDATE  ECLAIMS SET ISWRONGSUBMISSION = 1,SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Provider License not availabe in standard codes.',
     CLAIM_DENAIL_CODE='CLAI-012',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
     COMMIT;
     UPDATE ECLAIMS SET  ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
     COMMIT;
     UPDATE ECLAIM_ACTIVITIES SET  ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='CLAI-012'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
     COMMIT;
     CONTINUE;
   END IF;

   IF L_PBMCOUNT = 0 AND  EC.SYS_CLAIM_SOURCE = 3 THEN
     UPDATE  ECLAIMS SET ISWRONGSUBMISSION = 1,SYS_CLAIM_STATUS = 3,ERROR_MESSAGE  = 'Provider License not availabe in standard codes.',
     CLAIM_DENAIL_CODE='CLAI-012',PAYMENT_REFERENCE = 1,PAYMENTTYPE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
     COMMIT;
     UPDATE ECLAIMS SET ISWRONGSUBMISSION = 1,ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
     COMMIT;
     UPDATE ECLAIM_ACTIVITIES SET  ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='CLAI-012'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
     COMMIT;
     CONTINUE;
   END IF;*/

   SELECT COUNT(*) INTO L_HADDPROVIDERCOUNT FROM IM_MANDATORYTARIFF_ASSIGN WHERE PROVIDERCODE = L_PROVIDERCODE ;--AND NVL(AUTHORIZEDSTATUS,0) = 1;


    --NGI_GETMAX_REC('IM_CLAIM_PROCESS_HEADER','SERIALNO');

    SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_PROCESS_HEADER');

    EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_CLAIMSNO;

    SELECT MAx(CLAIM_CODE)+1 INTO   L_CLAIMCODE   FROM IM_CLAIM_PROCESS_HEADER;
    SELECT MAx(SERIALNO)+1 INTO   L_CLAIMSNO   FROM IM_CLAIM_PROCESS_HEADER;


    /*SELECT COUNT(*) INTO L_INVCOUNT FROM IM_CLAIM_PROCESS_HEADER WHERE PROVIDER_CODE = L_PROVIDERCODE
    AND INVOICENUMBER = EC.CLAIM_ID;*/



    L_INVCOUNT := L_INVCOUNT + 1;

    IF EC.ENCOUNTER_FACILITY_TYPE = 1 OR EC.ENCOUNTER_FACILITY_TYPE = 2 THEN
      L_TREATMENTTYPE := 1;
    ELSIF EC.ENCOUNTER_FACILITY_TYPE = 5 OR EC.ENCOUNTER_FACILITY_TYPE = 6 THEN
      L_TREATMENTTYPE := 2;
    ELSE
      L_TREATMENTTYPE := 0;
    END IF;


    INSERT INTO IM_CLAIM_PROCESS_HEADER
    (CLAIM_CODE,TRANSACTIONDATE,REQUEST_SOURCE,REQUEST_TYPE,PROVIDER_CODE,MEMBER_CODE,AUTHORIZEDSTATUS,
    CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,LEGALENTITYCODE,CUSTOMERCODE,
    LOCATIONCODE,COMPANYCODE,REQUEST_AMOUNT,ENCOUNTER_START_TYPE,ENCOUNTER_END_TYPE,TREATMENT_TYPE,
    ENCOUNTER_START_DATE,ENCOUNTER_END_DATE,CLAIM_STATUS,
    MAP_VALUE,POLICYCODE,CATEGORY_CODE,SERIALNO,INVOICENUMBER,ISRESUBMISSION,
    RESUBMISSION_COMMENTS,RESUBMISSION_TYPE,CDCODE,ACR_FORM_NO,SOURCEPROVIDER,ORGINALPATIENTSHARE,CARDNO,
    MEMBERPOLICYCODE,BATCHCODE,CEEDSTATUS,ACR_INV_NO,ACR_SEQ_NO,PRIOR_AUTHORIZATION_ID,POLICYTYPECODE)
    VALUES
    ((SELECT MAx(CLAIM_CODE)+1  FROM IM_CLAIM_PROCESS_HEADER),EC.TRANSACTION_DATE,6,1,L_PROVIDERCODE,L_MEMBERCODE,0,
    1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000001,100000000000000001,
    1,1,DECODE(EC.SYS_CLAIM_SOURCE,1,EC.CLAIM_NET+EC.CLAIM_PATIENT_SHARE,2,EC.CLAIM_NET,
    DECODE(L_PROVIDERTYPE,1,EC.CLAIM_NET+EC.CLAIM_PATIENT_SHARE,2,EC.CLAIM_NET)),
    EC.ENCOUNTER_START_TYPE,EC.ENCOUNTER_END_TYPE,L_TREATMENTTYPE,    EC.ENCOUNTER_START,EC.ENCOUNTER_END,1,EC.SYS_CLAIM_ID,
    L_POLICYCODE,L_CATEGORYCODE,(SELECT MAx(SERIALNO)+1 FROM IM_CLAIM_PROCESS_HEADER),EC.CLAIM_ID,DECODE(EC.RESUBMISSION_COMMENT,NULL,0,1),
    SUBSTR(EC.RESUBMISSION_COMMENT,0,1000),0,L_CLINICIAN,
    DECODE(EC.SYS_CLAIM_SOURCE,1,'E'||EC.SYS_CLAIM_ID,2,'H'||EC.SYS_CLAIM_ID,DECODE(L_PROVIDERTYPE,1,'E'||EC.SYS_CLAIM_ID,2,'H'||EC.SYS_CLAIM_ID)),
    DECODE(EC.SYS_CLAIM_SOURCE,3,DECODE(L_PROVIDERTYPE,1,1,2,2),EC.SYS_CLAIM_SOURCE),
    EC.CLAIM_PATIENT_SHARE,L_CARDNO,L_MEMBERPOLICYCODE,EC.BATCHCODE,0,L_INVCOUNT,1202,L_PRIOR_AUTHORIZATION_ID,L_TYPEE);
    COMMIT;

    SELECT Max(CLAIM_CODE) INTO  L_CLAIMCODE  FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;

    FOR ECA IN (SELECT * FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID) LOOP

     L_RULES:=ECA.ACTIVITY_CODE;
     SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
     WHERE UPPER(TRIM(LICENSEID)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))   AND
     Nvl(STATUS,0) <> 2 AND ROWNUM < 2;

     IF L_CLINICIAN IS NULL THEN
      SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
      WHERE UPPER(TRIM(ORGINALLICENCE)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
      AND Nvl(STATUS,0) <> 2 AND ROWNUM < 2;
     END IF;


     SELECT COUNT(*) INTO L_COUNT FROM IM_CLAIM_PROCESS_DETAIL WHERE SYS_ACTIVITY_ID = ECA.SYS_ACTIVITY_ID AND CLAIM_CODE = L_CLAIMCODE;

     SELECT MIN(TYPECODE),MIN(DETAILCODE) INTO L_TYPECODE,L_DETAILCODE FROM SF_CLAIMGETVERSIONPRICE_VW WHERE PROVIDERCODE = 0 AND DETAILNAME = ECA.ACTIVITY_CODE
     AND ROWNUM < 2;

     IF L_TYPECODE IS NULL OR L_TYPECODE = 0 THEN
       SELECT TYPECODE INTO L_TYPECODE FROM IM_ACTIVITY_TYPES WHERE VALUE =  TRIM(ECA.ACTIVITY_TYPE);
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN ('5') AND (L_DETAILCODE = 0 OR L_DETAILCODE IS NULL) THEN
       L_DETAILCODE := -1;
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN  ('8','3','6') THEN

      IF  L_HADDPROVIDERCOUNT > 0 AND EC.SYS_CLAIM_SOURCE = 2 THEN
        BEGIN
         L_TARIFFPRICE := NGI_GETHADDTARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.ENCOUNTER_START,L_NETWORKCODE);
        END;
      ELSE
       BEGIN
         L_TARIFFPRICE := NGI_GETDHATARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.ENCOUNTER_START,L_NETWORKCODE);
       END;
      END IF;

     ELSE
       L_TARIFFPRICE := 0;
     END IF;

     IF L_TARIFFPRICE = -1 THEN
      L_TARIFFPRICE := 0;
      L_ACTIVITYSTATUS := -2;
     ELSE
      L_ACTIVITYSTATUS := 1;
     END IF;

     IF L_TARIFFPRICE = -1 THEN
        L_ACTIVITYSTATUS := -1;
        UPDATE ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS=-1 WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
        COMMIT;
     END IF;


     /*IF L_HADDPROVIDERCOUNT = 0 AND L_TARIFFPRICE = -1 THEN
        L_ACTIVITYSTATUS := NULL;
        L_TARIFFPRICE := ECA.ACTIVITY_NET;
        UPDATE ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS=NULL WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
        COMMIT;
     END IF;*/
     IF L_CLINICIAN = 0 OR L_CLINICIAN IS NULL  THEN
       FOR ECA IN (SELECT DISTINCT CLINICIAN,ORDERINGCLINICIAN FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID
       AND UPPER(TRIM(REPLACE(NVL(CLINICIAN,ORDERINGCLINICIAN),' ',''))) IN
       (SELECT UPPER(TRIM(LICENSEID)) FROM IM_CLINICIANS)) LOOP

        SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
        WHERE UPPER(TRIM(LICENSEID)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))   AND
        Nvl(STATUS,0) <> 2 AND ROWNUM < 2;

        IF L_CLINICIAN IS NULL THEN
          SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
          WHERE UPPER(TRIM(ORGINALLICENCE)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
          AND Nvl(STATUS,0) <> 2 AND ROWNUM < 2;
        END IF;
      END LOOP;
     END IF;
     IF L_CLINICIAN = 0 OR L_CLINICIAN IS NULL THEN
        SELECT Count(*) INTO L_COUNT FROM IM_PROVIDERS WHERE Nvl(BYEPASSCLINICIAN,0) = 1 AND PROVIDERCODE = L_PROVIDERCODE;
        IF L_COUNT = 0 THEN
          UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'CLINICIAN NOT FOUND'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          UPDATE  ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS = -1  WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
          COMMIT;
          DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
          (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE);
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE;
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = L_CLAIMCODE;
          COMMIT;
          CONTINUE;
        ELSE
           L_CLINICIAN := INSERTGOVCLINICIAN(L_PROVIDERCODE,NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN));
        END IF;
     END IF;

     IF L_COUNT = 0 THEN

          --NGI_GETMAX_REC('IM_CLAIM_PROCESS_DETAIL','SERIALNO');

          SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_PROCESS_DETAIL');

          EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_ACTIVITYSNO;

          SELECT L_ACTIVITYSNO+100000000000000000  INTO    L_ACTIVITYCODE FROM DUAL;
          SELECT MAX(ACTIVITY_DETAIL_CODE)+1 INTO L_ACTIVITYCODE FROM IM_CLAIM_PROCESS_DETAIL;
          SELECT MAX(SERIALNO)+1 INTO L_ACTIVITYSNO FROM IM_CLAIM_PROCESS_DETAIL;
          INSERT INTO IM_CLAIM_PROCESS_DETAIL (CLAIM_CODE,ACTIVITY_DETAIL_CODE,ACTIVITY_CODE,VERSIONDETAILCODE,
          TARIFFDETAILCODE,PROVIDERNETPRICE,PRICE,REQUESTAMOUNT,REQUESTQTY,QTY,COINSURANCE_AMOUNT,
          DEDUCTIBLE_AMOUNT,ACTIVITY_STATUS,CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
          LEGALENTITYCODE,CUSTOMERCODE,LOCATIONCODE,COMPANYCODE,CLINICIAN_CODE,MAP_VALUE,SERIALNO,ACTIVITYSTARTDATE,ACTIVITYENDDATE,
          SYS_ACTIVITY_ID,PRIOR_ATHORIZATION_ID,SYS_ACTIVITY_STATUS) VALUES
         (L_CLAIMCODE,L_ACTIVITYCODE,L_TYPECODE,L_DETAILCODE,L_DETAILCODE,Decode(L_ACTIVITYSTATUS,-2,-1,L_TARIFFPRICE),Decode(L_ACTIVITYSTATUS,-2,-1,L_TARIFFPRICE),ECA.ACTIVITY_NET,ECA.QUANTITY,ECA.QUANTITY,0,0,
         1,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,NULL,100000000000000001,1,1,L_CLINICIAN,ECA.SYS_ACTIVITY_ID,
         L_ACTIVITYSNO,EC.ENCOUNTER_START,EC.ENCOUNTER_END,ECA.SYS_ACTIVITY_ID,ECA.PRIOR_AUTHORIZATION_ID,L_ACTIVITYSTATUS);
         COMMIT;


         FOR ACTOB IN (SELECT * FROM ACTIVITY_OBSERVATIONS WHERE SYS_ACTIVITY_ID = ECA.SYS_ACTIVITY_ID) LOOP

            --NGI_GETMAX_REC('IM_CLAIM_ACTIVITY_OBSERVATION','SERIALNO');

            SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_ACTIVITY_OBSERVATION');

            EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_OBSERVATIONSNO;
            SELECT L_OBSERVATIONSNO+100000000000000000  INTO    L_OBSERVATIONCODE FROM DUAL;

            SELECT MAX(OBSERVATION_ID)+1 INTO L_OBSERVATIONCODE FROM IM_CLAIM_ACTIVITY_OBSERVATION;
            SELECT MAX(SERIALNO)+1 INTO L_OBSERVATIONSNO FROM IM_CLAIM_ACTIVITY_OBSERVATION;
            INSERT INTO IM_CLAIM_ACTIVITY_OBSERVATION
            (OBSERVATION_ID,OBSERVATION_TYPE,OBSERVATION_CODE,OBSERVATION_VALUE,OBSERVATION_VALUE_TYPE,
            ACTIVITY_DETAIL_CODE,MAP_CODE,MAP_VALUE,SERIALNO)VALUES
            (L_OBSERVATIONCODE,2,ACTOB.OBSERVATION_CODE,ACTOB.VALUE,ACTOB.VALUE_TYPE,L_ACTIVITYCODE,
            ACTOB.SYS_OBSERVATION_ID,ACTOB.SYS_ACTIVITY_ID,L_OBSERVATIONSNO);
            COMMIT;

         END LOOP;



     END IF;

    END LOOP;

    IF L_ACTIVITYSTATUS = -1 THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = ' ACTIVITY CODE DOES NOT EXISIT IN PROVIDER TARIFF'
      WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
      (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
      (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID));
      COMMIT;
      DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
      (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
      COMMIT;
      DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
    END IF;



     FOR ECA IN (SELECT * FROM ECLAIM_DIAGNOSIS WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID) LOOP

     SELECT Count(*) INTO L_CANCERCOUNT FROM IM_TRUEDOC_ICD WHERE  ACTIVITYTYPE = 1
     AND DETAILCODE IN(SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE CODE = ECA.DIAGNOSIS_CODE) AND DOCTYPE = 1;

     IF L_CANCERCOUNT > 0 AND L_TRUEDOC > 0 THEN
        IF Nvl(L_COE,0) = 'Y' THEN
          UPDATE IM_CLAIM_PROCESS_HEADER SET CANCER = 1 WHERE  MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;
        ELSE
          UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'NOT COE PROVIDER'
          WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
          (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID));
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;
          CONTINUE;  
        END IF;
     END IF;


     SELECT Count(*) INTO L_HEPCOUNT FROM IM_TRUEDOC_ICD WHERE  ACTIVITYTYPE = 1
     AND DETAILCODE IN(SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE CODE = ECA.DIAGNOSIS_CODE) AND DOCTYPE = 2;

     IF L_HEPCOUNT > 0 AND L_TRUEDOC > 0 THEN
        IF Nvl(L_COE,0) = 'Y' THEN  
          UPDATE IM_CLAIM_PROCESS_HEADER SET HEPATITIS = 1 WHERE  MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;    
        ELSE
          UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'NOT COE PROVIDER'
          WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
          (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID));
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;
          CONTINUE;  
        END IF;
     END IF;

     SELECT COUNT(*) INTO L_COUNT FROM IM_CLAIM_PROCESS_DETAIL WHERE SYS_ACTIVITY_ID = ECA.SYS_DIAGNOSIS_ID AND CLAIM_CODE = L_CLAIMCODE;


     SELECT TYPECODE,DETAILCODE INTO L_TYPECODE,L_DETAILCODE FROM SF_CLAIMGETVERSIONPRICE_VW WHERE PROVIDERCODE = 0 AND UPPER(DETAILNAME) = UPPER(ECA.DIAGNOSIS_CODE)
     AND ROWNUM < 2;

     SELECT MIN(CONSTANTVALUE) INTO L_TYPE FROM GENCONSTANT WHERE CATEGORY = 'IMDIAGNOSISTYPE' AND
     UPPER(TRIM(CONSTANTNAME)) = UPPER(TRIM(ECA.DIAGNOSIS_TYPE)) AND UPPER(LANGUAGECODE) = 'EN-US';

     IF L_COUNT = 0 THEN

          --NGI_GETMAX_REC('IM_CLAIM_PROCESS_DETAIL','SERIALNO');

          SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_PROCESS_DETAIL');

          EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_ACTIVITYSNO;

          SELECT L_ACTIVITYSNO+100000000000000000  INTO    L_ACTIVITYCODE FROM DUAL;

          SELECT MAX(ACTIVITY_DETAIL_CODE)+1 INTO L_ACTIVITYCODE FROM IM_CLAIM_PROCESS_DETAIL;
          SELECT MAX(SERIALNO)+1 INTO L_ACTIVITYSNO FROM IM_CLAIM_PROCESS_DETAIL;
          INSERT INTO IM_CLAIM_PROCESS_DETAIL (CLAIM_CODE,ACTIVITY_DETAIL_CODE,ACTIVITY_CODE,VERSIONDETAILCODE,
          TARIFFDETAILCODE,PROVIDERNETPRICE,PRICE,REQUESTAMOUNT,REQUESTQTY,QTY,COINSURANCE_AMOUNT,
          DEDUCTIBLE_AMOUNT,ACTIVITY_STATUS,CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
          LEGALENTITYCODE,CUSTOMERCODE,LOCATIONCODE,COMPANYCODE,CLINICIAN_CODE,MAP_VALUE,SERIALNO,
          ACTIVITYSTARTDATE,ACTIVITYENDDATE,SYS_ACTIVITY_ID,TYPE) VALUES
         (L_CLAIMCODE,L_ACTIVITYCODE,L_TYPECODE,L_DETAILCODE,L_DETAILCODE,0,0,0,0,0,0,0,
         1,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,NULL,100000000000000001,1,1,L_CLINICIAN,ECA.SYS_DIAGNOSIS_ID,
         L_ACTIVITYSNO,EC.ENCOUNTER_START,EC.ENCOUNTER_END,ECA.SYS_DIAGNOSIS_ID,L_TYPE);
         COMMIT;

     END IF;
     END LOOP;

     SELECT COUNT(*) INTO L_CLAIMCOUNT FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
     IF L_CLAIMCOUNT > 0 THEN
      UPDATE ECLAIMS SET SYS_CLAIM_STATUS = 31 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
      COMMIT;
     ELSE
      UPDATE ECLAIMS SET SYS_CLAIM_STATUS = -1 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
      COMMIT;
     END IF;
     /*IF L_PBMAUTHORIZATIONCOUNT > 0 AND L_PROVIDER_TYPE = 2 THEN
      L_BENEFITCODE := NULL;
      L_BENEFITCOUNT := 0;
      UPDATE IM_CLAIM_PROCESS_HEADER SET CDCODE = L_CLINICIAN,CLAIM_STATUS = 2,
      AUTHORIZEDSTATUS = 0,FINANCE = 0,ISPOSTED = 0,ISPRIORAUTHORIZATION = 1,PRIOR_AUTHORIZATION_ID = L_PRIOR_AUTHORIZATION_ID,
      APPROVED_AMOUNT = Decode(L_PROVIDERTYPE,1,(REQUEST_AMOUNT-Nvl(ORGINALPATIENTSHARE,0)),2,REQUEST_AMOUNT)
      WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
      COMMIT;


      IF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25002' THEN
         L_BENEFITCODE := 10000000000000100;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25010' THEN
        SELECT Count(*) INTO L_BENEFITCOUNT FROM IM_MEMBERPOLICYBENEFITDTL WHERE MEMBERPOLICYCODE = L_MEMBERPOLICYCODE AND BENEFITCODE = 10000000000000005;
        IF L_BENEFITCOUNT > 0 THEN
         L_BENEFITCODE := 10000000000000005;
        ELSE
         L_BENEFITCODE := 10000000000000043;
        END IF;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25014' THEN
        SELECT Count(*) INTO L_BENEFITCOUNT FROM IM_CATEGORIES WHERE CATEGORY_ID LIKE '%AUH%'
        AND CATEGORY_CODE = L_CATEGORYCODE;
        IF L_BENEFITCOUNT > 0 THEN
          L_BENEFITCODE := 10000000000000086;
        ELSE
          L_BENEFITCODE := 10000000000000070;
        END IF;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25040' THEN
          L_BENEFITCODE := 10000000000000084;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25046' THEN
          L_BENEFITCODE := 100000000000001399;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25048' THEN
          IF L_PROVIDERTYPE = 2 THEN
            L_BENEFITCODE := 10000000000000036;
          ELSE
            SELECT Count(*) INTO L_BENEFITCOUNT FROM IM_CATEGORIES WHERE CATEGORY_ID LIKE '%AUH%'
            AND CATEGORY_CODE = L_CATEGORYCODE;
          END IF;
      ELSIF SubStr(L_PRIOR_AUTHORIZATION_ID,LENGTH(L_PRIOR_AUTHORIZATION_ID)-4,5) = '25040' THEN
         L_BENEFITCODE := 10000000000000043;
      END IF;
      UPDATE IM_CLAIM_PROCESS_DETAIL SET  TOTAL = REQUESTAMOUNT,BENEFIT_CODE = L_BENEFITCODE WHERE CLAIM_CODE IN
      (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
      COMMIT;
     ELSE
      UPDATE IM_CLAIM_PROCESS_HEADER SET CDCODE = L_CLINICIAN WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
      COMMIT;
     END IF;*/
      UPDATE IM_CLAIM_PROCESS_HEADER SET CDCODE = L_CLINICIAN,PRIOR_AUTHORIZATION_ID = L_PRIOR_AUTHORIZATION_ID WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
      COMMIT;
     SELECT Count(*) INTO L_GOVTPROVIDER FROM IM_PROVIDERS WHERE PROVIDERCODE = L_PROVIDERCODE AND Nvl(SUBMISSIONTIMELIMIT,0) = 3;

     IF L_GOVTPROVIDER = 0 AND L_PROVIDER_TYPE <> 2 THEN
     SELECT GET_MEMBER_ELIG(L_MEMBERPOLICYCODE,L_PROVIDERCODE) INTO L_ELIGIBILITY FROM DUAL;
     IF Upper(L_ELIGIBILITY) = 'YES' THEN
        COMMIT;
     ELSIF Upper(L_ELIGIBILITY) = 'NO' THEN

        FOR CDTL IN (SELECT * FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN(SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID)) LOOP
            DELETE FROM IM_CLAIM_PROCESS_DETAIL_dTL WHERE ACTIVITY_DETAIL_CODE = CDTL.ACTIVITY_DETAIL_CODE;
            COMMIT;
            L_RULES:=INSERTACTIVITYDENIALDTL(CDTL.ACTIVITY_DETAIL_CODE,100000000000664258,CDTL.REQUESTAMOUNT,2);
            UPDATE IM_CLAIM_PROCESS_DETAIL SET DENIAL_REASON=100000000000664258,TOTAL = 0
            WHERE ACTIVITY_DETAIL_CODE = CDTL.ACTIVITY_DETAIL_CODE;
            COMMIT;
        END LOOP;

        UPDATE  IM_CLAIM_PROCESS_HEADER  SET APPROVED_AMOUNT = 0,CLAIM_STATUS = 2,AUTHORIZEDSTATUS = 1,ISPOSTED = 1,FINANCE = 0,
        DENIAL_REASON = 100000000000664258,DENAILVALUE = REQUEST_AMOUNT WHERE  MAP_VALUE = EC.SYS_CLAIM_ID;
        COMMIT;
     END IF;
     END IF;

     BEGIN
      L_RULES := UPDATEFRAUDSTATUS(1,EC.SYS_CLAIM_ID);
     END;
  END LOOP;
  RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
L_RULES := SQLERRM;
UPDATE ECLAIMS SET SYS_CLAIM_STATUS = 278,ERROR_MESSAGE=L_RULES WHERE SYS_CLAIM_ID = L_ERROR;
COMMIT;
DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
(SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE);
COMMIT;
DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE;
COMMIT;
DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = L_CLAIMCODE;
COMMIT;
L_RULES := NGI_LOADCLAIMS.RELOADECLAIMACTIVITIES(1,P_RESULT);
--L_RULES := L_INVCOUNT;
--RETURN L_RULES;
END;

FUNCTION NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE,L_NETWORKCODE NUMBER) RETURN NUMBER AS
L_NETPRICE NUMBER(19,2);
L_COUNT  NUMBER;
L_TARIFFCODE NUMBER;
L_TARIFFDETAILCODE NUMBER;
BEGIN

   L_NETPRICE := 0;
   L_COUNT := 0;

    IF L_NETWORKCODE = 1000000000000000030  THEN   --EXCLUSIVE
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND    B.NETWORKCODE  = 1000000000000000030 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000029 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000028 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000027 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;



      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

    ELSIF L_NETWORKCODE = 1000000000000000029  THEN   --PREMIERE
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND    B.NETWORKCODE  = 1000000000000000029 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000028 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000027 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1 ;
      END IF;



      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

    ELSIF L_NETWORKCODE = 1000000000000000028   THEN     -- SD PLUS
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND   B.NETWORKCODE  = 1000000000000000028 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1 ;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE  = 1000000000000000027 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;



      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

    ELSIF L_NETWORKCODE = 1000000000000000027 OR L_NETWORKCODE = 1000000000000000024 THEN   --SD
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND   B.NETWORKCODE  = 1000000000000000027 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;



      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

    ELSIF L_NETWORKCODE = 1000000000000000031  THEN   --BASIC
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND   B.NETWORKCODE  = 1000000000000000031 AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;

      IF Nvl(L_TARIFFDETAILCODE,0) = 0 THEN
        SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
        FROM   IM_PROVIDER_TARIFF A,
        IM_PROVIDER_TARIFF_DETAILS B
        WHERE  A.TARIFFCODE = B.TARIFFCODE
        AND    A.PROVIDERCODE = L_PROVIDERCODE
        AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
        AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
      END IF;

    ELSE
      SELECT Max(TARIFFDETAILCODE) INTO L_TARIFFDETAILCODE
      FROM   IM_PROVIDER_TARIFF A,
      IM_PROVIDER_TARIFF_DETAILS B
      WHERE  A.TARIFFCODE = B.TARIFFCODE
      AND    A.PROVIDERCODE = L_PROVIDERCODE
      AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
      AND   B.NETWORKCODE IS NULL AND  L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1;
    END IF;

    SELECT NETVALUE INTO L_NETPRICE FROM(SELECT (B.NETVALUE) NETVALUE
    FROM   IM_PROVIDER_TARIFF A,
    IM_PROVIDER_TARIFF_DETAILS B

    WHERE  A.TARIFFCODE = B.TARIFFCODE
    AND    A.PROVIDERCODE = L_PROVIDERCODE
    AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
    AND    L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1
    AND TARIFFDETAILCODE = L_TARIFFDETAILCODE);


  RETURN L_NETPRICE;
  EXCEPTION WHEN NO_DATA_FOUND THEN
  RETURN -1;
END;


FUNCTION NGI_GETHADDTARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE,L_NETWORKCODE NUMBER) RETURN NUMBER AS
L_NETPRICE NUMBER(19,2);
L_COUNT  NUMBER;
L_TARIFFCODE NUMBER;
BEGIN

   L_NETPRICE := 0;

   /*IF L_ACTIVITYCODE = '98' THEN
     L_NETPRICE := 2526;
     RETURN L_NETPRICE;
   END IF;  */

   SELECT ((DECODE(C.FACTORTYPECODE,0,NVL(PRICE,0)*C.FACTORVALUE,D.PRICE))) PRICE
   INTO   L_NETPRICE
   FROM   IM_MANDATORYTARIFF_ASSIGN A, -- HERE YOU HAVE TO GET THE MANDATORY TARIFF BASED ON THE CODE TYPE OR CATEGORY WHEATHER IT IS CPT OR IT IS OTHER SERVICES BASED ON THE CATEGORY AND THE VERIONS OF THIS CODE
   IM_CODE_CATASSIGN_DETAIL B,
   IM_CODECAT_ASSIGNSUB_DETAIL C,
   IM_PACKAGES D

   WHERE  A.ASSIGN_CODE = B.ASSIGN_CODE
   AND    B.ASSIGN_DET_CODE = C.ASSIGN_DET_CODE
   AND    D.VERSIONDESCRIPTION BETWEEN C.FROMCODE AND C.TOCODE
   AND    A.PROVIDERCODE = L_PROVIDERCODE
   AND    D.VERSIONDESCRIPTION = L_ACTIVITYCODE
   AND    L_STARTDATE BETWEEN (A.STARTDATE-1) AND NVL(A.ENDDATE,L_STARTDATE)+1 AND ROWNUM < 2;



   RETURN L_NETPRICE;

 EXCEPTION WHEN NO_DATA_FOUND THEN

 BEGIN
  SELECT ((DECODE(B.FACTORTYPECODE,0,NVL(PRICE,0)*B.FACTORVALUE,D.PRICE))) PRICE
  INTO   L_NETPRICE FROM   IM_MANDATORYTARIFF_ASSIGN A,
  IM_TARIFF_PER_CATEGORY B,GENCONSTANT C,
  IM_PACKAGES D
  WHERE  A.ASSIGN_CODE = B.ASSIGN_CODE
  AND    B.CPTCODE = C.CONSTANTVALUE AND C.CATEGORY = 'CPTMAIN'
  AND UPPER(C.CONSTANTNAME) = UPPER(D.REMARKS)
  AND    A.PROVIDERCODE = L_PROVIDERCODE
  AND    D.VERSIONDESCRIPTION = L_ACTIVITYCODE
  AND    L_STARTDATE BETWEEN (A.STARTDATE-1) AND NVL(A.ENDDATE,L_STARTDATE)+1 AND ROWNUM < 2;
  RETURN L_NETPRICE;

  EXCEPTION WHEN NO_DATA_FOUND THEN
  BEGIN
  L_NETPRICE := NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER,L_PROVIDERCODE,L_ACTIVITYCODE,L_STARTDATE,L_NETWORKCODE);
  END;

END;

 RETURN L_NETPRICE;

END;


FUNCTION NGI_UPLOADRACLAIMS (P_COMPANYCODE NUMBER) RETURN VARCHAR2 AS
L_CUR_SYS_CLAIM_ID NUMBER;
L_DEN VARCHAR2(1000);
L_ACTIVITYDENIAL_REASON NUMBER;
L_RULES VARCHAR2(1000);
P_DECLINEAMOUNT NUMBER;
L_CDEN VARCHAR2(1000);
L_IDPAYER NVARCHAR2(500);
BEGIN

   FOR HDR IN (SELECT * FROM   IM_CLAIM_PROCESS_HEADER CH WHERE CH.CLAIM_STATUS IN (2,3)
                AND CH.ISPOSTED=1   AND NVL(CH.SUBMITTORA,0) = 0  AND CH.FINANCE=1
                AND CH.CLAIM_CODE NOT IN (SELECT NVL(CLAIMHEADERPK,0) FROM ECLAIMS WHERE SYS_CLAIM_STATUS <> 291212)
                AND MAP_VALUE IS NOT NULL AND REQUEST_NUMBER IS NULL  AND
                MAP_VALUE IN(SELECT SYS_CLAIM_ID FROM ECLAIMS)) LOOP
      /*FOR HDR IN (SELECT * FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE IN
      (SELECT CLAIMCODE FROM IM_ENDPOSTCLAIMDTL WHERE ENDORESMENTCODE IN
      (SELECT CLAIMREFCODE FROM IM_NGI_JVPOSTING WHERE REF_NO IN('0415107989')))) LOOP*/

      FOR ORGCLAIM IN (SELECT * FROM ECLAIMS  WHERE SYS_CLAIM_ID = HDR.MAP_VALUE) LOOP
        L_CDEN := '';
        L_IDPAYER := '';
        SELECT MAX(SYS_CLAIM_ID) + 1 INTO L_CUR_SYS_CLAIM_ID FROM ECLAIMS;
        INSERT INTO ECLAIMS
        (SYS_CLAIM_ID,SENDER_ID, RECEIVER_ID, TRANSACTION_DATE, DISPOSITION_FLAG,CLAIM_ID, ID_PAYER, MEMBER_ID, PAYER_ID, PROVIDER_ID,
        EMIRATES_ID_NUMBER,CLAIM_GROSS, CLAIM_PATIENT_SHARE, CLAIM_NET,ENCOUNTER_FACILITY_ID, ENCOUNTER_FACILITY_TYPE,
        ENCOUNTER_PATIENT_ID, ENCOUNTER_START, ENCOUNTER_END,ENCOUNTER_START_TYPE, ENCOUNTER_END_TYPE, ENCOUNTER_TRANSFER_SOURCE,
        ENCOUNTER_TRANSFER_DESTINATION, RESUBMISSION_TYPE, RESUBMISSION_COMMENT,RESUBMISSION_ATTACHMENT, CONTRACT_PACKAGE_NAME, SYS_ENTRY_DATE,
        SYS_CLAIM_STATUS, SYS_CLAIM_SOURCE, SYS_RECORD_STATUS,CLAIM_DENAIL_CODE, PAYMENT_REFERENCE, DATE_SETTLEMENT,
        ERROR_MESSAGE, SYS_CLAIM_SRC_ID, CHECKSTATUS, ISRESUBMISSION, RFP,CLAIMHEADERPK,PAYMENTTYPE)
        VALUES
        (L_CUR_SYS_CLAIM_ID,ORGCLAIM.SENDER_ID, ORGCLAIM.RECEIVER_ID, ORGCLAIM.TRANSACTION_DATE,
        '0', ORGCLAIM.CLAIM_ID, 'APP'||L_CUR_SYS_CLAIM_ID, ORGCLAIM.MEMBER_ID,ORGCLAIM.PAYER_ID, ORGCLAIM.PROVIDER_ID, ORGCLAIM.EMIRATES_ID_NUMBER,
        ORGCLAIM.CLAIM_GROSS, ORGCLAIM.CLAIM_PATIENT_SHARE,HDR.APPROVED_AMOUNT, ORGCLAIM.ENCOUNTER_FACILITY_ID, ORGCLAIM.ENCOUNTER_FACILITY_TYPE,
        ORGCLAIM.ENCOUNTER_PATIENT_ID, ORGCLAIM.ENCOUNTER_START, ORGCLAIM.ENCOUNTER_END,ORGCLAIM.ENCOUNTER_START_TYPE, ORGCLAIM.ENCOUNTER_END_TYPE,
        ORGCLAIM.ENCOUNTER_TRANSFER_SOURCE,ORGCLAIM.ENCOUNTER_TRANSFER_DESTINATION, ORGCLAIM.RESUBMISSION_TYPE, ORGCLAIM.RESUBMISSION_COMMENT,
        ORGCLAIM.RESUBMISSION_ATTACHMENT, ORGCLAIM.CONTRACT_PACKAGE_NAME,ORGCLAIM.SYS_ENTRY_DATE, 3, ORGCLAIM.SYS_CLAIM_SOURCE,
        ORGCLAIM.SYS_RECORD_STATUS, L_CDEN,HDR.PAYMENTREFNO,Nvl(HDR.PAYMENTREFDATE,SYSDATE), ORGCLAIM.ERROR_MESSAGE, ORGCLAIM.SYS_CLAIM_SRC_ID,
        ORGCLAIM.CHECKSTATUS, ORGCLAIM.ISRESUBMISSION, ORGCLAIM.RFP,HDR.CLAIM_CODE,1);
        COMMIT;

        FOR ADTL IN(SELECT * FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = HDR.CLAIM_CODE AND NVL(TYPE,0) = 0) LOOP

              P_DECLINEAMOUNT := 0;

              FOR CURACTIVITYDTL IN (SELECT CDT.DENIEDAMOUNT,CDT.DENIEDFOR FROM IM_CLAIM_PROCESS_DETAIL_DTL CDT
              WHERE CDT.ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE AND CDT.DENIEDFOR = 0) LOOP
                P_DECLINEAMOUNT := P_DECLINEAMOUNT + CURACTIVITYDTL.DENIEDAMOUNT;
              END LOOP;
                P_DECLINEAMOUNT := NVL(P_DECLINEAMOUNT,0) + ADTL.TOTAL;
              FOR CURACTIVITYDTL IN (SELECT CDT.DENIEDAMOUNT,CDT.DENIEDFOR FROM IM_CLAIM_PROCESS_DETAIL_DTL CDT
              WHERE CDT.ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE AND CDT.DENIEDFOR = 2) LOOP
                L_DEN :=NGI_HELPER.GET_DENIALREASONNAME(ADTL.DENIAL_REASON);
              END LOOP;

              IF  ADTL.DENIAL_VALUE > 0 AND L_DEN IS NULL AND ADTL.DENIAL_VALUE < 1 THEN
                L_DEN := 'PRCE-001';
                SELECT DETAILCODE INTO L_ACTIVITYDENIAL_REASON FROM IM_VERSION_DETALIS WHERE CODE = 'PRCE-001' AND ROWNUM < 2;
                UPDATE IM_CLAIM_PROCESS_DETAIL SET DENIAL_REASON = L_ACTIVITYDENIAL_REASON WHERE ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE;
                COMMIT;
                L_RULES:=INSERTACTIVITYDENIALDTL(ADTL.ACTIVITY_DETAIL_CODE,L_ACTIVITYDENIAL_REASON,ADTL.DENIAL_VALUE,2);
              END IF;


              IF ADTL.TOTAL <> ADTL.REQUESTAMOUNT  AND L_DEN IS NULL THEN
                SELECT DENIAL_REASON INTO L_ACTIVITYDENIAL_REASON FROM (SELECT DENIAL_REASON FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = HDR.CLAIM_CODE
                GROUP BY DENIAL_REASON HAVING COUNT(*) > 1 ) WHERE ROWNUM < 2;
                L_DEN :=NGI_HELPER.GET_DENIALREASONNAME(L_ACTIVITYDENIAL_REASON);
                UPDATE IM_CLAIM_PROCESS_DETAIL SET DENIAL_REASON = L_ACTIVITYDENIAL_REASON WHERE ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE;
                COMMIT;
                L_RULES:=INSERTACTIVITYDENIALDTL(ADTL.ACTIVITY_DETAIL_CODE,L_ACTIVITYDENIAL_REASON,ADTL.DENIAL_VALUE,2);
              END IF;

              IF ADTL.TOTAL <> ADTL.REQUESTAMOUNT  AND L_DEN IS NULL THEN
                L_DEN := 'CLAI-012';
                SELECT DETAILCODE INTO L_ACTIVITYDENIAL_REASON FROM IM_VERSION_DETALIS WHERE CODE = 'CLAI-012' AND ROWNUM < 2;
                UPDATE IM_CLAIM_PROCESS_DETAIL SET DENIAL_REASON = L_ACTIVITYDENIAL_REASON WHERE ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE;
                COMMIT;
                L_RULES:=INSERTACTIVITYDENIALDTL(ADTL.ACTIVITY_DETAIL_CODE,L_ACTIVITYDENIAL_REASON,ADTL.DENIAL_VALUE,2);
              END IF;

              IF ADTL.DENIAL_VALUE > 1 AND L_DEN IS NULL THEN
                L_DEN := 'CLAI-012';
                SELECT DETAILCODE INTO L_ACTIVITYDENIAL_REASON FROM IM_VERSION_DETALIS WHERE CODE = 'CLAI-012' AND ROWNUM < 2;
                UPDATE IM_CLAIM_PROCESS_DETAIL SET DENIAL_REASON = L_ACTIVITYDENIAL_REASON WHERE ACTIVITY_DETAIL_CODE = ADTL.ACTIVITY_DETAIL_CODE;
                COMMIT;
                L_RULES:=INSERTACTIVITYDENIALDTL(ADTL.ACTIVITY_DETAIL_CODE,L_ACTIVITYDENIAL_REASON,ADTL.DENIAL_VALUE,2);
              END IF;



              FOR ORGACTIVITY IN(SELECT * FROM ECLAIM_ACTIVITIES WHERE SYS_ACTIVITY_ID = ADTL.SYS_ACTIVITY_ID AND SYS_CLAIM_ID = HDR.MAP_VALUE) LOOP

               INSERT INTO ECLAIM_ACTIVITIES B
               (SYS_CLAIM_ID,ACTIVITY_ID,ACTIVITY_START,ACTIVITY_TYPE,ACTIVITY_CODE,QUANTITY,ACTIVITY_NET,ACTIVITY_LIST,CLINICIAN,PRIOR_AUTHORIZATION_ID,
               ACTIVITY_GROSS,ACTIVITY_PATIENT_SHARE,ACTIVITY_PAYMENT_AMOUNT,ACTIVITY_DENIAL_CODE,SYS_ACTIVITY_ID,SYS_RECORD_STATUS,ORDERINGCLINICIAN)
               VALUES
               (L_CUR_SYS_CLAIM_ID,ORGACTIVITY.ACTIVITY_ID,ORGACTIVITY.ACTIVITY_START,ORGACTIVITY.ACTIVITY_TYPE,ORGACTIVITY.ACTIVITY_CODE,ORGACTIVITY.QUANTITY,
                NVL(ORGACTIVITY.ACTIVITY_NET, 0), ORGACTIVITY.ACTIVITY_LIST,TRIM(ORGACTIVITY.CLINICIAN),ORGACTIVITY.PRIOR_AUTHORIZATION_ID,
                ORGACTIVITY.ACTIVITY_GROSS,NULL,Nvl(P_DECLINEAMOUNT,0),L_DEN,(SELECT MAX(SYS_ACTIVITY_ID) + 1 FROM ECLAIM_ACTIVITIES),1,NVL(ORGACTIVITY.ORDERINGCLINICIAN,ORGACTIVITY.CLINICIAN));
                COMMIT;

              END LOOP;

        END LOOP;

      END LOOP;

   END LOOP;

  UPDATE ECLAIMS SET SYS_CLAIM_STATUS = 3 WHERE SYS_CLAIM_STATUS = 5;
  COMMIT;

  UPDATE ECLAIMS SET PAYMENT_REFERENCE = 1  WHERE SYS_CLAIM_STATUS = 3
  AND SYS_CLAIM_SOURCE <> 3 AND PAYMENT_REFERENCE IS NULL;
  COMMIT;

  UPDATE ECLAIMS SET PAYMENTTYPE = 1  WHERE SYS_CLAIM_STATUS = 3
  AND SYS_CLAIM_SOURCE <> 3 AND PAYMENTTYPE IS NULL;
  COMMIT;

  L_RULES:=UPDATEIDPAYER(1);
  RETURN 'OK';
END;


FUNCTION NGI_REPROCESS_MISSING_DETAIL(L_MAPVALUE NUMBER) RETURN VARCHAR2 AS
L_MEMBERCODE NUMBER;
L_PBMCOUNT NUMBER;
L_CLAIMCOUNT NUMBER;
L_PROVIDERCODE NUMBER;
L_ERROR VARCHAR2(1000);
ASEQNAME VARCHAR2(1000);
L_TARIFFPRICE NUMBER;
L_INVCOUNT NUMBER;
L_CLINICIAN NUMBER;
L_ACTIVITYSTATUS NUMBER;
L_CLAIMSNO NUMBER;
L_CLAIMCODE NUMBER;
L_ACTIVITYSNO NUMBER;
L_ACTIVITYCODE NUMBER;
L_OBSERVATIONSNO NUMBER;
L_OBSERVATIONCODE NUMBER;
L_POLICYCODE NUMBER;
L_MEMBERPOLICYCODE NUMBER;
L_CATEGORYCODE  NUMBER;
L_CARDNO VARCHAR2(100);
L_COUNT NUMBER;
L_CLAIMINVOICECOUNT NUMBER;
L_TYPECODE NUMBER;
L_DETAILCODE NUMBER;
L_PROVIDERTYPE NUMBER;L_TYPEE NUMBER;L_MANAGEDBYCOUNT NUMBER;
L_TYPE NUMBER;L_AUTHORIZEDCOUNT NUMBER;
L_HADDPROVIDERCOUNT NUMBER;L_TREATMENTTYPE NUMBER;
P_RESULT NUMBER;L_PROVIDER_TYPE NUMBER;
L_PROVINCECOUNT NUMBER;L_BENEFITCODE NUMBER;L_BENEFITCOUNT NUMBER;
L_RULES VARCHAR2(100);L_PBMAUTHORIZATIONCOUNT NUMBER;
L_PBMCLAIMCOUNT NUMBER;L_PRIOR_AUTHORIZATION_ID   VARCHAR2(1000);
L_ELIGIBILITY NVARCHAR2(200);L_NETWORKCODE NUMBER;
BEGIN


FOR EC IN (SELECT * FROM ECLAIMS WHERE  SYS_CLAIM_ID=L_MAPVALUE) LOOP
   L_ACTIVITYSTATUS:=0;
   L_CLINICIAN := 0;
   L_ERROR := EC.SYS_CLAIM_ID;


   UPDATE ECLAIMS SET ERROR_MESSAGE = NULL,CLAIM_DENAIL_CODE = NULL WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;
   UPDATE ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS = 0 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;

     SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
   L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO   FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
   WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
   AND UPPER(TRIM(REPLACE(MC.CARDNO,' ')))=UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.MEMBER_ID, '\S*', ''),'-','')))
  -- AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
     -- NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
   AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;



   IF L_MEMBERCODE IS NULL OR L_MEMBERCODE = 0  THEN
      SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
      L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO  FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
      WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
      AND UPPER(TRIM(REPLACE(MC.CARDNO,' ','')))=UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ','')))
      --AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
      --NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
      AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;
   END IF;

   IF L_MEMBERCODE IS NULL OR L_MEMBERCODE = 0  THEN
      SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO)  INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
      L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP,IM_MEMBERS IM
      WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE      AND IM.MEMBER_CODE = MP.MEMBERCODE
      AND REPLACE(UPPER(TRIM(REPLACE(IM.EMIRATES_ID,' ',''))),'-','')=REPLACE(UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ',''))),'-','')
      --AND  TO_CHAR(TO_DATE(EC.ENCOUNTER_START,'DD/MM/YYYY')) BETWEEN TO_CHAR(TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/YYYY')) AND
      --NVL(TO_CHAR(TO_DATE(MP.MEMBERENDDATE,'DD/MM/YYYY')),TO_CHAR(TO_DATE(MP.POLICYENDDDATE,'DD/MM/YYYY'))) AND ROWNUM < 2;
      AND EC.ENCOUNTER_START BETWEEN (MP.MEMBERSTARTDATE-1) AND NVL(MP.MEMBERENDDATE,MP.POLICYENDDDATE)+1 AND ROWNUM < 2;
   END IF;


   IF L_TYPEE = 1 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       SELECT Max(IPCN.NETWORKCODE) INTO L_NETWORKCODE FROM IM_POLICY POL
       LEFT JOIN IM_POLICY_CATEGORYDTL DTL ON DTL.POLICYCODE = POL.POLICYCODE
       LEFT JOIN IM_POLICYCOVEREDNETWORK IPCN ON IPCN.PCDCODE = DTL.PCDCODE
       WHERE POL.POLICYCODE = L_POLICYCODE  AND POL.POLICYCODE = L_POLICYCODE AND DTL.CATEGORYCODE = L_CATEGORYCODE
       AND Nvl(IPCN.ACTIVE,0) = 1;

   ELSIF L_TYPEE = 2 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       SELECT Max(IPCN.NETWORKCODE) INTO L_NETWORKCODE FROM IM_INDIVIDUALPOLICY POL
       LEFT JOIN IM_NGIINDPOLICYCATEGORY DTL ON DTL.INDIVIDUALPOLICYCODE = POL.INDIVIDUALPOLICYCODE
       LEFT JOIN IM_INDIVIDUALPOLICYNETWORK IPCN ON IPCN.POLICYCATEGORYCODE = DTL.POLICYCATEGORYCODE
       WHERE POL.INDIVIDUALPOLICYCODE = L_POLICYCODE AND DTL.CATEGORYCODE = L_CATEGORYCODE
       AND Nvl(IPCN.ACTIVE,0) = 1;

   END IF;



   SELECT COUNT(*) INTO L_HADDPROVIDERCOUNT FROM IM_MANDATORYTARIFF_ASSIGN WHERE PROVIDERCODE = L_PROVIDERCODE ;--AND NVL(AUTHORIZEDSTATUS,0) = 1;


    SELECT Max(PROVIDEr_CODE) INTO  L_PROVIDERCODE  FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;


   SELECT Max(CLAIM_CODE) INTO  L_CLAIMCODE  FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;

    FOR ECA IN (SELECT * FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID  AND SYS_ACTIVITY_ID NOT IN
              (SELECT SYS_ACTIVITY_ID FROM IM_CLAIM_PROCESS_DETAIL WHERE Nvl(TYPE,0) = 0 AND CLAIM_CODE  IN
              (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID))) LOOP

     L_RULES:=ECA.ACTIVITY_CODE;
     SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
     WHERE UPPER(TRIM(LICENSEID)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))   AND
     Nvl(STATUS,0) <> 2 AND ROWNUM < 2;

     IF L_CLINICIAN IS NULL THEN
      SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
      WHERE UPPER(TRIM(ORGINALLICENCE)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
      AND Nvl(STATUS,0) <> 2 AND ROWNUM < 2;
     END IF;


     SELECT COUNT(*) INTO L_COUNT FROM IM_CLAIM_PROCESS_DETAIL WHERE SYS_ACTIVITY_ID = ECA.SYS_ACTIVITY_ID AND CLAIM_CODE = L_CLAIMCODE;

     SELECT MIN(TYPECODE),MIN(DETAILCODE) INTO L_TYPECODE,L_DETAILCODE FROM SF_CLAIMGETVERSIONPRICE_VW WHERE PROVIDERCODE = 0 AND DETAILNAME = ECA.ACTIVITY_CODE
     AND ROWNUM < 2;

     IF L_TYPECODE IS NULL OR L_TYPECODE = 0 THEN
       SELECT TYPECODE INTO L_TYPECODE FROM IM_ACTIVITY_TYPES WHERE VALUE =  TRIM(ECA.ACTIVITY_TYPE);
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN ('5') AND (L_DETAILCODE = 0 OR L_DETAILCODE IS NULL) THEN
       L_DETAILCODE := -1;
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN  ('8','3','6') THEN

      IF  L_HADDPROVIDERCOUNT > 0 AND EC.SYS_CLAIM_SOURCE = 2 THEN
        BEGIN
         L_TARIFFPRICE := NGI_GETHADDTARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.ENCOUNTER_START,L_NETWORKCODE);
        END;
      ELSE
       BEGIN
         L_TARIFFPRICE := NGI_GETDHATARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.ENCOUNTER_START,L_NETWORKCODE);
       END;
      END IF;

     ELSE
       L_TARIFFPRICE := 0;
     END IF;

     IF L_TARIFFPRICE = -1 THEN
      L_TARIFFPRICE := 0;
      L_ACTIVITYSTATUS := -2;
     ELSE
      L_ACTIVITYSTATUS := 1;
     END IF;

     IF L_TARIFFPRICE = -1 THEN
        L_ACTIVITYSTATUS := -1;
        UPDATE ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS=-1 WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
        COMMIT;
     END IF;

     IF L_CLINICIAN = 0 OR L_CLINICIAN IS NULL  THEN
       FOR ECA IN (SELECT DISTINCT CLINICIAN,ORDERINGCLINICIAN FROM ECLAIM_ACTIVITIES WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID
       AND UPPER(TRIM(REPLACE(NVL(CLINICIAN,ORDERINGCLINICIAN),' ',''))) IN
       (SELECT UPPER(TRIM(LICENSEID)) FROM IM_CLINICIANS)) LOOP

        SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
        WHERE UPPER(TRIM(LICENSEID)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))   AND
        Nvl(STATUS,0) <> 2 AND ROWNUM < 2;

        IF L_CLINICIAN IS NULL THEN
          SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
          WHERE UPPER(TRIM(ORGINALLICENCE)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
          AND Nvl(STATUS,0) <> 2 AND ROWNUM < 2;
        END IF;
      END LOOP;
     END IF;
     IF L_CLINICIAN = 0 OR L_CLINICIAN IS NULL THEN
        SELECT Count(*) INTO L_COUNT FROM IM_PROVIDERS WHERE Nvl(SUBMISSIONTIMELIMIT,0) = 3 AND PROVIDERCODE = L_PROVIDERCODE;
        IF L_COUNT = 0 THEN
          UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'CLINICIAN NOT FOUND'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;
          UPDATE  ECLAIM_ACTIVITIES SET SYS_ACTIVITY_STATUS = -1  WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
          COMMIT;
          DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
          (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE);
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = L_CLAIMCODE;
          COMMIT;
          DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = L_CLAIMCODE;
          COMMIT;
          CONTINUE;
        ELSE
           L_CLINICIAN := INSERTGOVCLINICIAN(L_PROVIDERCODE,NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN));
        END IF;
     END IF;

     IF L_COUNT = 0 THEN

          --NGI_GETMAX_REC('IM_CLAIM_PROCESS_DETAIL','SERIALNO');

          SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_PROCESS_DETAIL');

          EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_ACTIVITYSNO;

          SELECT L_ACTIVITYSNO+100000000000000000  INTO    L_ACTIVITYCODE FROM DUAL;
          SELECT MAX(ACTIVITY_DETAIL_CODE)+1 INTO L_ACTIVITYCODE FROM IM_CLAIM_PROCESS_DETAIL;
          SELECT MAX(SERIALNO)+1 INTO L_ACTIVITYSNO FROM IM_CLAIM_PROCESS_DETAIL;
          INSERT INTO IM_CLAIM_PROCESS_DETAIL (CLAIM_CODE,ACTIVITY_DETAIL_CODE,ACTIVITY_CODE,VERSIONDETAILCODE,
          TARIFFDETAILCODE,PROVIDERNETPRICE,PRICE,REQUESTAMOUNT,REQUESTQTY,QTY,COINSURANCE_AMOUNT,
          DEDUCTIBLE_AMOUNT,ACTIVITY_STATUS,CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
          LEGALENTITYCODE,CUSTOMERCODE,LOCATIONCODE,COMPANYCODE,CLINICIAN_CODE,MAP_VALUE,SERIALNO,ACTIVITYSTARTDATE,ACTIVITYENDDATE,
          SYS_ACTIVITY_ID,PRIOR_ATHORIZATION_ID,SYS_ACTIVITY_STATUS) VALUES
         (L_CLAIMCODE,L_ACTIVITYCODE,L_TYPECODE,L_DETAILCODE,L_DETAILCODE,Decode(L_ACTIVITYSTATUS,-2,-1,L_TARIFFPRICE),Decode(L_ACTIVITYSTATUS,-2,-1,L_TARIFFPRICE),ECA.ACTIVITY_NET,ECA.QUANTITY,ECA.QUANTITY,0,0,
         1,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,NULL,100000000000000001,1,1,L_CLINICIAN,ECA.SYS_ACTIVITY_ID,
         L_ACTIVITYSNO,EC.ENCOUNTER_START,EC.ENCOUNTER_END,ECA.SYS_ACTIVITY_ID,ECA.PRIOR_AUTHORIZATION_ID,L_ACTIVITYSTATUS);
         COMMIT;


         FOR ACTOB IN (SELECT * FROM ACTIVITY_OBSERVATIONS WHERE SYS_ACTIVITY_ID = ECA.SYS_ACTIVITY_ID) LOOP

            --NGI_GETMAX_REC('IM_CLAIM_ACTIVITY_OBSERVATION','SERIALNO');

            SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_CLAIM_ACTIVITY_OBSERVATION');

            EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_OBSERVATIONSNO;
            SELECT L_OBSERVATIONSNO+100000000000000000  INTO    L_OBSERVATIONCODE FROM DUAL;

            SELECT MAX(OBSERVATION_ID)+1 INTO L_OBSERVATIONCODE FROM IM_CLAIM_ACTIVITY_OBSERVATION;
            SELECT MAX(SERIALNO)+1 INTO L_OBSERVATIONSNO FROM IM_CLAIM_ACTIVITY_OBSERVATION;
            INSERT INTO IM_CLAIM_ACTIVITY_OBSERVATION
            (OBSERVATION_ID,OBSERVATION_TYPE,OBSERVATION_CODE,OBSERVATION_VALUE,OBSERVATION_VALUE_TYPE,
            ACTIVITY_DETAIL_CODE,MAP_CODE,MAP_VALUE,SERIALNO)VALUES
            (L_OBSERVATIONCODE,2,ACTOB.OBSERVATION_CODE,ACTOB.VALUE,ACTOB.VALUE_TYPE,L_ACTIVITYCODE,
            ACTOB.SYS_OBSERVATION_ID,ACTOB.SYS_ACTIVITY_ID,L_OBSERVATIONSNO);
            COMMIT;

         END LOOP;



     END IF;

    END LOOP;

    IF L_ACTIVITYSTATUS = -1 THEN
      UPDATE  ECLAIMS SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = ' ACTIVITY CODE DOES NOT EXISIT IN PROVIDER TARIFF'
      WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
      (SELECT ACTIVITY_DETAIL_CODE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
      (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID));
      COMMIT;
      DELETE FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE IN
      (SELECT CLAIM_CODE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
      COMMIT;
      DELETE FROM IM_CLAIM_PROCESS_HEADER WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
    END IF;



    BEGIN
    L_RULES := UPDATEFRAUDSTATUS(1,EC.SYS_CLAIM_ID);
    END;
  END LOOP;
  RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
L_RULES := SQLERRM;
END;


END NGI_LOADCLAIMS;
/

GRANT EXECUTE ON ngi_loadclaims TO sys;


PROMPT CREATE OR REPLACE PACKAGE ngi_loadauthorization
CREATE OR REPLACE PACKAGE ngi_loadauthorization AS

  FUNCTION RELOADECLAIMACTIVITIES(P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

  FUNCTION NGI_REPROCESSECLAIMS(L_MAPVALUE NUMBER) RETURN VARCHAR2;

  FUNCTION NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE) RETURN NUMBER ;

  FUNCTION NGI_GETHADDTARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE) RETURN NUMBER ;

  FUNCTION NGI_UPLOADRACLAIMS(P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2;

END NGI_LOADAUTHORIZATION;
/

PROMPT CREATE OR REPLACE PACKAGE BODY ngi_loadauthorization
CREATE OR REPLACE PACKAGE BODY ngi_loadauthorization AS

FUNCTION RELOADECLAIMACTIVITIES(P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_ERROR VARCHAR2(1000);
L_MAPVALUE NUMBER;
L_RULES VARCHAR2(1000);
BEGIN
    BEGIN
      L_RULES := NGI_REPROCESSECLAIMS(1);
    END;
P_RESULT := 1;
RETURN L_RULES;
EXCEPTION WHEN OTHERS THEN
L_ERROR:= SQLERRM;
P_RESULT := 2;
RETURN L_ERROR;
END;

FUNCTION NGI_REPROCESSECLAIMS(L_MAPVALUE NUMBER) RETURN VARCHAR2 AS
L_MEMBERCODE NUMBER;
L_PBMCOUNT NUMBER;
L_CLAIMCOUNT NUMBER;
L_PROVIDERCODE NUMBER;
L_ERROR VARCHAR2(1000);
ASEQNAME VARCHAR2(1000);
L_TARIFFPRICE NUMBER;
L_INVCOUNT NUMBER;
L_RECORDCOUNT NUMBER;
L_CLINICIAN NUMBER;
L_ACTIVITYSTATUS NUMBER;
L_CLAIMSNO NUMBER;
L_CLAIMCODE NUMBER;
L_ACTIVITYSNO NUMBER;
L_ACTIVITYCODE NUMBER;
L_OBSERVATIONSNO NUMBER;
L_OBSERVATIONCODE NUMBER;
L_POLICYCODE NUMBER;
L_MEMBERPOLICYCODE NUMBER;
L_CATEGORYCODE  NUMBER;
L_CARDNO VARCHAR2(100);
L_COUNT NUMBER;
L_CLAIMINVOICECOUNT NUMBER;
L_TYPECODE NUMBER;
L_DETAILCODE NUMBER;L_TYPEE NUMBER;L_MANAGEDBYCOUNT NUMBER;
L_PROVIDERTYPE NUMBER;L_MESSAGE NVARCHAR2(200);
L_TYPE NUMBER;L_PROVIDERNAME NVARCHAR2(200);
L_HADDPROVIDERCOUNT NUMBER;
P_RESULT NUMBER;L_AUTHORIZATIONTYPECODE NUMBER;
L_PROVINCECOUNT NUMBER;L_BENEFITCODE NUMBER;L_BENEFITCOUNT NUMBER;
L_RULES VARCHAR2(100);L_PBMAUTHORIZATIONCOUNT NUMBER;L_MOBILENO NVARCHAR2(50);L_ELIGIBILITY VARCHAR2(50);
L_PBMCLAIMCOUNT NUMBER;L_PRIOR_AUTHORIZATION_ID   VARCHAR2(1000);L_TREATMENTTYPE NUMBER;
L_COE VARCHAR2(50);L_HEPCOUNT NUMBER;L_CANCERCOUNT NUMBER;L_TRUEDOC NUMBER;
BEGIN

FOR EC IN(SELECT * FROM EPRIORREQUEST WHERE  TO_DATE(TRANSACTION_DATE,'DD/MM/RRRR') > TO_DATE('11/02/2017','DD/MM/RRRR')
AND SYS_CLAIM_STATUS = 1 AND SYS_CLAIM_ID NOT  IN
(SELECT MAP_VALUE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE IS NOT NULL)  AND DISPOSITION_FLAG <> '0'
--AND MEMBER_ID='100220180005390001'
ORDER BY TRANSACTION_DATE DESC) LOOP
   L_ACTIVITYSTATUS:=0;
   L_CLINICIAN := 0;
   L_ERROR := EC.SYS_CLAIM_ID;
   UPDATE EPriorRequest SET ERROR_MESSAGE = NULL,CLAIM_DENAIL_CODE = NULL WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;
   UPDATE EPriorRequest_Activities SET SYS_ACTIVITY_STATUS = 0 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
   COMMIT;

   IF EC.ENCOUNTER_FACILITY_TYPE = 1 OR EC.ENCOUNTER_FACILITY_TYPE = 2 THEN
      L_TREATMENTTYPE := 1;
   ELSIF EC.ENCOUNTER_FACILITY_TYPE = 5 OR EC.ENCOUNTER_FACILITY_TYPE = 6 THEN
      L_TREATMENTTYPE := 2;
   ELSE
      L_TREATMENTTYPE := 0;
   END IF;

   SELECT MIN(IMP.PROVIDERCODE),MIN(IMP.PROVIDERTYPE),Min(COE) INTO L_PROVIDERCODE,L_PROVIDERTYPE,L_COE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
   WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.SENDER_ID, '\S*', ''),'-','')))
   AND ROWNUM < 2;


   IF L_PROVIDERCODE IS NULL THEN
     SELECT MIN(IMP.PROVIDERCODE),MIN(IMP.PROVIDERTYPE),Min(COE) INTO L_PROVIDERCODE,L_PROVIDERTYPE,L_COE FROM IM_PROVIDER_LICENCES IMPL,IM_PROVIDERS IMP
     WHERE IMP.PROVIDERCODE = IMPL.PROVIDERCODE AND UPPER(TRIM(REPLACE(IMPL.OTHERLICNECEID,' ')))  = UPPER(TRIM(REPLACE(EC.SENDER_ID,' ','')))
     AND ROWNUM < 2;
   END IF;


   IF L_PROVIDERTYPE = 2 THEN
      UPDATE EPriorRequest SET SYS_CLAIM_STATUS=31,ERROR_MESSAGE = NULL,CLAIM_DENAIL_CODE = NULL WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;

   SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO) INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
   L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
   WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
   AND UPPER(TRIM(REPLACE(MC.CARDNO,' ')))=UPPER(TRIM(REPLACE(REGEXP_REPLACE(EC.MEMBER_ID, '\S*', ''),'-','')))
   AND TO_DATE(EC.TRANSACTION_DATE,'DD/MM/RRRR') BETWEEN TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/RRRR')
   AND NVL(TO_DATE(MP.MEMBERENDDATE,'DD/MM/RRRR'),TO_DATE(MP.POLICYENDDDATE,'DD/MM/RRRR')) AND ROWNUM < 2;

   IF L_MEMBERCODE IS NULL OR L_MEMBERCODE = 0  THEN
      SELECT Min(TYPEE),MIN(MP.MEMBERCODE),MIN(MP.POLICYCODE),MIN(MP.MEMBERPOLICYCODE),MIN(MP.CATEGORYCODE),MIN(MC.CARDNO) INTO L_TYPEE,L_MEMBERCODE,L_POLICYCODE,
      L_MEMBERPOLICYCODE,L_CATEGORYCODE,L_CARDNO FROM IM_CORDPRINT MC,IM_MEMBERPOLICY MP
      WHERE MC.MEMBERPOLICYCODE = MP.MEMBERPOLICYCODE
      AND UPPER(TRIM(REPLACE(MC.CARDNO,' ')))=UPPER(TRIM(REPLACE(EC.MEMBER_ID,' ','')))
      AND TO_DATE(EC.TRANSACTION_DATE,'DD/MM/RRRR') BETWEEN TO_DATE(MP.MEMBERSTARTDATE,'DD/MM/RRRR')
      AND NVL(TO_DATE(MP.MEMBERENDDATE,'DD/MM/RRRR'),TO_DATE(MP.POLICYENDDDATE,'DD/MM/RRRR')) AND ROWNUM < 2;
   END IF;

   IF L_TYPEE = 1 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_POLICY WHERE POLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       IF L_MANAGEDBYCOUNT = 0 THEN
         UPDATE  EPriorRequest SET SYS_CLAIM_STATUS = 3,RESULT='No',ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
        CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE EPriorRequest SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE EPriorRequest_Activities SET PATIENTSHARE=0,ACTIVITY_LIST=0,
        ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
       END IF;
   ELSIF L_TYPEE = 2 THEN
       SELECT Count(*) INTO L_MANAGEDBYCOUNT FROM IM_INDIVIDUALPOLICY WHERE INDIVIDUALPOLICYCODE = L_POLICYCODE
       AND OWNERCODE IN (3,13,21);
       IF L_MANAGEDBYCOUNT = 0 THEN
        UPDATE  EPriorRequest SET SYS_CLAIM_STATUS = 3,RESULT='No',ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
        CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        UPDATE EPriorRequest SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
        COMMIT;
        UPDATE EPriorRequest_Activities SET PATIENTSHARE=0,ACTIVITY_LIST=0,
        ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
        COMMIT;
        CONTINUE;
       END IF;
   END IF;


   IF L_MEMBERCODE = 0 OR L_MEMBERCODE IS NULL THEN
      UPDATE  EPriorRequest SET SYS_CLAIM_STATUS = 3,RESULT='No',ERROR_MESSAGE  = 'Patient is not covered member or member card not correct',
      CLAIM_DENAIL_CODE='ELIG-001',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE EPriorRequest SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE EPriorRequest_Activities SET PATIENTSHARE=0,ACTIVITY_LIST=0,
      ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-001'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;

   SELECT Count(*) INTO L_TRUEDOC FROM IM_MEMBER_TRUEDOC WHERE MEMBER_CODE = L_MEMBERCODE
   AND (Nvl(CANCER,'N') = 'Y' OR Nvl(HEPATITIS_C,'N') = 'Y');


   IF L_PROVIDERCODE = 0 OR L_PROVIDERCODE IS NULL THEN
      UPDATE  EPriorRequest SET SYS_CLAIM_STATUS = 3,RESULT='No',ERROR_MESSAGE  = 'Provider License not availabe in standard codes.',
      CLAIM_DENAIL_CODE='ELIG-007',PAYMENT_REFERENCE = 1,DATE_SETTLEMENT = SYSDATE WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      UPDATE EPriorRequest SET ID_PAYER = 'REJ'||EC.SYS_CLAIM_ID   WHERE  SYS_CLAIM_ID=EC.SYS_CLAIM_ID AND ID_PAYER IS NULL;
      COMMIT;
      UPDATE EPriorRequest_Activities SET PATIENTSHARE=0,ACTIVITY_LIST=0,
      ACTIVITY_PAYMENT_AMOUNT = 0,ACTIVITY_DENIAL_CODE='ELIG-007'  WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
      COMMIT;
      CONTINUE;
   END IF;
   SELECT COUNT(*) INTO L_PROVINCECOUNT FROM IM_PROVIDERS WHERE CITYCODE IN(100000000000001992,100000000000001989) AND PROVIDERCODE = L_PROVIDERCODE;


   IF L_PROVINCECOUNT > 0 THEN
      L_PROVIDERTYPE := 2;
   ELSE
      L_PROVIDERTYPE := 1;
   END IF ;

   SELECT COUNT(*) INTO L_HADDPROVIDERCOUNT FROM IM_MANDATORYTARIFF_ASSIGN WHERE PROVIDERCODE = L_PROVIDERCODE AND NVL(AUTHORIZEDSTATUS,0) = 1;


    SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_AUTHORIZATION_PROCESS_HDR');

    EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_CLAIMSNO;

    SELECT 100000000000000000 + L_CLAIMSNO INTO L_CLAIMCODE  FROM DUAL;


    SELECT COUNT(*) INTO L_INVCOUNT FROM IM_AUTHORIZATION_PROCESS_HDR WHERE PROVIDER_CODE = L_PROVIDERCODE
    AND INVOICENUMBER = EC.CLAIM_ID;


    SELECT Max(CONSTANTVALUE) INTO L_AUTHORIZATIONTYPECODE FROM GENCONSTANT WHERE CATEGORY = 'AUTHORIZATIONTYPE' AND
    Upper(CONSTANTNAME) = Upper(EC.TYPE) AND Upper(LANGUAGECODE) = Upper('EN-US');
    L_INVCOUNT := L_INVCOUNT + 1;

    SELECT COUNT(*) INTO L_RECORDCOUNT FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID
    AND MAP_VALUE IS NULL;

    IF L_RECORDCOUNT > 0 THEN
      CONTINUE;
    END IF;

    SELECT Max(NVL(MOBILE_NUMBER,MOBILE_NO)) INTO L_MOBILENO FROM IM_MEMBERS WHERE CARDNO=L_CARDNO;

    IF L_MOBILENO IS NULL OR L_MOBILENO = '0' THEN
        SELECT MAX(MOBILENO) INTO L_MOBILENO FROM IM_AUTHORIZATION_PROCESS_HDR WHERE CARDNO = L_CARDNO AND MOBILENO IS NOT NULL;
    END IF;

    IF  L_MOBILENO IS NOT NULL AND L_MOBILENO <> '0' THEN
      L_MOBILENO := REPLACE(L_MOBILENO,'-','');
      IF Substr(L_MOBILENO,0,1) = '9' THEN
        L_MOBILENO := REPLACE(L_MOBILENO,'971','0');
      END IF;
      IF Substr(L_MOBILENO,0,1) = '+' THEN
        L_MOBILENO := REPLACE(L_MOBILENO,'+971','0');
      END IF;
      IF Substr(L_MOBILENO,0,1) = '5' THEN
        L_MOBILENO := '0'||L_MOBILENO;
      END IF;
    END IF;
    SELECT PROVIDERNAME INTO L_PROVIDERNAME FROM IM_PROVIDERS WHERE PROVIDERCODE = L_PROVIDERCODE;
    L_MESSAGE := 'Dear Customer, We have received your approval request from '||L_PROVIDERNAME||' provider. You will be notified when approval is sent.';
    IF L_MESSAGE IS NOT NULL AND L_MOBILENO IS NOT NULL AND L_MOBILENO <> '0' THEN
           INSERT INTO IM_MESSAGE_LOG SELECT L_CLAIMCODE,NULL,NULL,NULL,
           NULL,NULL,NULL,NULL,L_MESSAGE FROM DUAL;
           COMMIT;
           L_RULES:=FN_WEBSERVICE_UPLOAD(L_CLAIMCODE,L_MESSAGE,'ID_SENDMESSAGE',1);
    END IF;

    INSERT INTO IM_AUTHORIZATION_PROCESS_HDR
    (AUTHORIZATIONTYPECODE,CLAIM_CODE,TRANSACTIONDATE,REQUEST_SOURCE,REQUEST_TYPE,PROVIDER_CODE,MEMBER_CODE,AUTHORIZEDSTATUS,
    CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,LEGALENTITYCODE,CUSTOMERCODE,
    LOCATIONCODE,COMPANYCODE,REQUEST_AMOUNT,ENCOUNTER_START_TYPE,ENCOUNTER_END_TYPE,TREATMENT_TYPE,
    ENCOUNTER_START_DATE,ENCOUNTER_END_DATE,CLAIM_STATUS,
    MAP_VALUE,POLICYCODE,CATEGORY_CODE,SERIALNO,INVOICENUMBER,ISRESUBMISSION,
    RESUBMISSION_COMMENTS,RESUBMISSION_TYPE,CDCODE,ACR_FORM_NO,SOURCEPROVIDER,ORGINALPATIENTSHARE,CARDNO,
    MEMBERPOLICYCODE,BATCHCODE,CEEDSTATUS,ACR_INV_NO,ACR_SEQ_NO,PRIOR_AUTHORIZATION_ID,MOBILENO)
    VALUES
    (L_AUTHORIZATIONTYPECODE,L_CLAIMCODE,EC.ENCOUNTER_START,6,1,L_PROVIDERCODE,L_MEMBERCODE,0,
    1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,100000000000000001,100000000000000001,
    1,1,DECODE(EC.SYS_CLAIM_SOURCE,1,EC.CLAIM_NET+EC.CLAIM_PATIENT_SHARE,2,EC.CLAIM_NET,DECODE(L_PROVIDERTYPE,1,EC.CLAIM_NET+EC.CLAIM_PATIENT_SHARE,2,EC.CLAIM_NET)),
    EC.ENCOUNTER_START_TYPE,EC.ENCOUNTER_END_TYPE,L_TREATMENTTYPE,EC.TRANSACTION_DATE,EC.ENCOUNTER_END,1,EC.SYS_CLAIM_ID,
    L_POLICYCODE,L_CATEGORYCODE,L_CLAIMSNO,EC.CLAIM_ID,DECODE(EC.RESUBMISSION_COMMENT,NULL,0,1),
    SUBSTR(EC.RESUBMISSION_COMMENT,0,1000),0,L_CLINICIAN,
    DECODE(EC.SYS_CLAIM_SOURCE,1,'E'||EC.SYS_CLAIM_ID,2,'H'||EC.SYS_CLAIM_ID,DECODE(L_PROVIDERTYPE,1,'E'||EC.SYS_CLAIM_ID,2,'H'||EC.SYS_CLAIM_ID)),
    DECODE(EC.SYS_CLAIM_SOURCE,3,DECODE(L_PROVIDERTYPE,1,1,2,2),EC.SYS_CLAIM_SOURCE),
    EC.CLAIM_PATIENT_SHARE,L_CARDNO,L_MEMBERPOLICYCODE,EC.BATCHCODE,EC.CEEDSTATUS,L_INVCOUNT,1,L_PRIOR_AUTHORIZATION_ID,L_MOBILENO);
    COMMIT;


    FOR ECA IN (SELECT * FROM EPriorRequest_Activities WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID) LOOP

     L_RULES:=ECA.ACTIVITY_CODE;
     SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
     WHERE UPPER(TRIM(LICENSEID)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
     AND Nvl(STATUS,0) <> 2 AND ROWNUM < 2;

     IF L_CLINICIAN IS NULL THEN
      SELECT MIN(IPL.CDCODE) INTO L_CLINICIAN FROM IM_CLINICIANS IPL
      WHERE UPPER(TRIM(ORGINALLICENCE)) = UPPER(TRIM(REPLACE(NVL(ECA.CLINICIAN,ECA.ORDERINGCLINICIAN),' ','')))
      AND Nvl(STATUS,0) <> 2
       AND ROWNUM < 2;
     END IF;


     IF L_CLINICIAN IS NULL OR L_CLINICIAN = 0 THEN
        L_CLINICIAN := -1;
     END IF;

     SELECT COUNT(*) INTO L_COUNT FROM IM_AUTHORIZATION_PROCESS_DTL WHERE SYS_ACTIVITY_ID = ECA.SYS_ACTIVITY_ID
     AND CLAIM_CODE = L_CLAIMCODE AND Nvl(TYPE,0) = 0;

     SELECT MIN(TYPECODE),MIN(DETAILCODE) INTO L_TYPECODE,L_DETAILCODE FROM SF_CLAIMGETVERSIONPRICE_VW WHERE PROVIDERCODE = 0 AND DETAILNAME = ECA.ACTIVITY_CODE
     AND ROWNUM < 2;

     IF L_TYPECODE IS NULL OR L_TYPECODE = 0 THEN
       SELECT TYPECODE INTO L_TYPECODE FROM IM_ACTIVITY_TYPES WHERE VALUE =  TRIM(ECA.ACTIVITY_TYPE);
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN ('5') AND (L_DETAILCODE = 0 OR L_DETAILCODE IS NULL) THEN
       L_DETAILCODE := -1;
     END IF;
     IF TRIM(ECA.ACTIVITY_TYPE) IN  ('8','3','6') THEN

      IF  L_HADDPROVIDERCOUNT = 0 THEN
        BEGIN
        L_TARIFFPRICE := NGI_GETDHATARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.TRANSACTION_DATE);
        END;
      ELSE
       BEGIN
        L_TARIFFPRICE := NGI_GETHADDTARIFFPRICE(EC.SYS_CLAIM_SOURCE,L_PROVIDERCODE,ECA.ACTIVITY_CODE,EC.TRANSACTION_DATE);
       END;
      END IF;

     ELSE
       L_TARIFFPRICE := 0;
     END IF;

     IF L_TARIFFPRICE = -1 THEN
        L_ACTIVITYSTATUS := -1;
        UPDATE EPriorRequest_Activities SET SYS_ACTIVITY_STATUS=-1 WHERE SYS_ACTIVITY_ID=ECA.SYS_ACTIVITY_ID;
        COMMIT;
     END IF;

     IF L_COUNT = 0 THEN

          --NGI_GETMAX_REC('IM_AUTHORIZATION_PROCESS_DTL','SERIALNO');

          SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_AUTHORIZATION_PROCESS_DTL');

          EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_ACTIVITYSNO;

          SELECT L_ACTIVITYSNO+100000000000000000  INTO    L_ACTIVITYCODE FROM DUAL;

          INSERT INTO IM_AUTHORIZATION_PROCESS_DTL (CLAIM_CODE,ACTIVITY_DETAIL_CODE,ACTIVITY_CODE,VERSIONDETAILCODE,
          TARIFFDETAILCODE,PROVIDERNETPRICE,PRICE,REQUESTAMOUNT,REQUESTQTY,QTY,COINSURANCE_AMOUNT,
          DEDUCTIBLE_AMOUNT,ACTIVITY_STATUS,CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
          LEGALENTITYCODE,CUSTOMERCODE,LOCATIONCODE,COMPANYCODE,CLINICIAN_CODE,MAP_VALUE,SERIALNO,ACTIVITYSTARTDATE,ACTIVITYENDDATE,
          SYS_ACTIVITY_ID,PRIOR_ATHORIZATION_ID) VALUES
         (L_CLAIMCODE,L_ACTIVITYCODE,L_TYPECODE,L_DETAILCODE,L_DETAILCODE,L_TARIFFPRICE,L_TARIFFPRICE,ECA.ACTIVITY_NET,ECA.QUANTITY,ECA.QUANTITY,0,0,
         1,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,NULL,100000000000000001,1,1,L_CLINICIAN,ECA.SYS_ACTIVITY_ID,
         L_ACTIVITYSNO,EC.TRANSACTION_DATE,EC.ENCOUNTER_END,ECA.SYS_ACTIVITY_ID,ECA.PRIOR_AUTHORIZATION_ID);
         COMMIT;
     END IF;

    END LOOP;


     FOR ECA IN (SELECT * FROM EPriorRequest_Diagnosis WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID) LOOP

     SELECT Count(*) INTO L_CANCERCOUNT FROM IM_TRUEDOC_ICD WHERE  ACTIVITYTYPE = 1
     AND DETAILCODE IN(SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE CODE = ECA.DIAGNOSIS_CODE) AND DOCTYPE = 1;

     IF L_CANCERCOUNT > 0 AND L_TRUEDOC > 0 THEN
        IF Nvl(L_COE,0) <> 'Y' THEN   
          UPDATE  EPRIORREQUEST SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'NOT COE PROVIDER'
          WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;    
          DELETE FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
          COMMIT;
          DELETE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;
          CONTINUE;  
        END IF;
     END IF;


     SELECT Count(*) INTO L_HEPCOUNT FROM IM_TRUEDOC_ICD WHERE  ACTIVITYTYPE = 1
     AND DETAILCODE IN(SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE CODE = ECA.DIAGNOSIS_CODE) AND DOCTYPE = 2;

     IF L_HEPCOUNT > 0 AND L_TRUEDOC > 0 THEN
        IF Nvl(L_COE,0) <> 'Y' THEN  
          UPDATE  EPRIORREQUEST SET SYS_CLAIM_STATUS = -1,ERROR_MESSAGE  = 'NOT COE PROVIDER'
          WHERE SYS_CLAIM_ID=EC.SYS_CLAIM_ID;
          COMMIT;    
          DELETE FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE IN
          (SELECT CLAIM_CODE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
          COMMIT;
          DELETE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
          COMMIT;
          CONTINUE; 
        END IF;
     END IF;

      SELECT COUNT(*) INTO L_COUNT FROM IM_AUTHORIZATION_PROCESS_DTL WHERE
      SYS_ACTIVITY_ID = ECA.SYS_DIAGNOSIS_ID AND CLAIM_CODE = L_CLAIMCODE AND Nvl(TYPE,0) <> 0;


     SELECT TYPECODE,DETAILCODE INTO L_TYPECODE,L_DETAILCODE FROM SF_CLAIMGETVERSIONPRICE_VW WHERE PROVIDERCODE = 0 AND UPPER(DETAILNAME) = UPPER(ECA.DIAGNOSIS_CODE)
     AND ROWNUM < 2;

     SELECT MIN(CONSTANTVALUE) INTO L_TYPE FROM GENCONSTANT WHERE CATEGORY = 'IMDIAGNOSISTYPE' AND
     UPPER(TRIM(CONSTANTNAME)) = UPPER(TRIM(ECA.DIAGNOSIS_TYPE)) AND UPPER(LANGUAGECODE) = 'EN-US';

     IF L_COUNT = 0 THEN

          --NGI_GETMAX_REC('IM_AUTHORIZATION_PROCESS_DTL','SERIALNO');

          SELECT NVL(MAX(SEQNAME),0) INTO ASEQNAME FROM NGI_TABLESERIAL_PK WHERE UPPER(TABLENAME)=UPPER('IM_AUTHORIZATION_PROCESS_DTL');

          EXECUTE IMMEDIATE 'SELECT '||ASEQNAME||'.NEXTVAL FROM DUAL'  INTO L_ACTIVITYSNO;

          SELECT L_ACTIVITYSNO+100000000000000000  INTO    L_ACTIVITYCODE FROM DUAL;

          INSERT INTO IM_AUTHORIZATION_PROCESS_DTL (CLAIM_CODE,ACTIVITY_DETAIL_CODE,ACTIVITY_CODE,VERSIONDETAILCODE,
          TARIFFDETAILCODE,PROVIDERNETPRICE,PRICE,REQUESTAMOUNT,REQUESTQTY,QTY,COINSURANCE_AMOUNT,
          DEDUCTIBLE_AMOUNT,ACTIVITY_STATUS,CREATEDIN,CREATEDON,CREATEDBY,LASTMODIFIEDON,LASTMODIFIEDBY,
          LEGALENTITYCODE,CUSTOMERCODE,LOCATIONCODE,COMPANYCODE,CLINICIAN_CODE,MAP_VALUE,SERIALNO,
          ACTIVITYSTARTDATE,ACTIVITYENDDATE,SYS_ACTIVITY_ID,TYPE) VALUES
         (L_CLAIMCODE,L_ACTIVITYCODE,L_TYPECODE,L_DETAILCODE,L_DETAILCODE,0,0,0,0,0,0,0,
         1,1,SYSDATE,100000000000000002,SYSDATE,100000000000000002,NULL,100000000000000001,1,1,L_CLINICIAN,ECA.SYS_DIAGNOSIS_ID,
         L_ACTIVITYSNO,EC.TRANSACTION_DATE,EC.ENCOUNTER_END,ECA.SYS_DIAGNOSIS_ID,L_TYPE);
         COMMIT;

     END IF;
     END LOOP;
     UPDATE IM_AUTHORIZATION_PROCESS_HDR SET  CDCODE=L_CLINICIAN WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
     COMMIT;
     SELECT COUNT(*) INTO L_CLAIMCOUNT FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
     IF L_CLAIMCOUNT > 0 THEN
     UPDATE EPriorRequest SET SYS_CLAIM_STATUS = 31 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
     IF L_AUTHORIZATIONTYPECODE = 1 OR L_AUTHORIZATIONTYPECODE = 3 THEN
        UPDATE IM_AUTHORIZATION_PROCESS_HDR SET CLAIM_STATUS = 2,AUTHORIZEDSTATUS = 1 WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
        COMMIT;
     END IF;
     BEGIN
      L_RULES := UPDATEAUTHFRAUDSTATUS(1,EC.SYS_CLAIM_ID);
     END;
     COMMIT;
     ELSE
     UPDATE EPriorRequest SET SYS_CLAIM_STATUS = -1 WHERE SYS_CLAIM_ID = EC.SYS_CLAIM_ID;
     COMMIT;
     IF L_AUTHORIZATIONTYPECODE = 1  THEN
        UPDATE IM_AUTHORIZATION_PROCESS_HDR SET CLAIM_STATUS = 2,AUTHORIZEDSTATUS = 1
        WHERE MAP_VALUE = EC.SYS_CLAIM_ID;
        COMMIT;
     END IF;
     END IF;

     SELECT GET_MEMBER_ELIG(L_MEMBERPOLICYCODE,L_PROVIDERCODE) INTO L_ELIGIBILITY FROM DUAL;
     IF Upper(L_ELIGIBILITY) = 'YES' THEN
        COMMIT;
     ELSIF Upper(L_ELIGIBILITY) = 'NO' THEN
        UPDATE IM_AUTHORIZATION_PROCESS_DTL SET DENIAL_REASON=100000000000664255,TOTAL = 0
        WHERE CLAIM_CODE IN(SELECT CLAIM_CODE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE MAP_VALUE = EC.SYS_CLAIM_ID);
        COMMIT;
        UPDATE  IM_AUTHORIZATION_PROCESS_HDR  SET APPROVED_AMOUNT = 0,CLAIM_STATUS = 2,AUTHORIZEDSTATUS = 1,
        DENIAL_REASON = 100000000000664255,DENAILVALUE = REQUEST_AMOUNT WHERE  MAP_VALUE = EC.SYS_CLAIM_ID;
        COMMIT;
     END IF;
  END LOOP;
  RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
L_RULES := SQLERRM;
UPDATE EPriorRequest SET SYS_CLAIM_STATUS = 278,ERROR_MESSAGE=L_RULES WHERE SYS_CLAIM_ID = L_ERROR;
COMMIT;
DELETE FROM IM_CLAIM_ACTIVITY_OBSERVATION WHERE ACTIVITY_DETAIL_CODE IN
(SELECT ACTIVITY_DETAIL_CODE FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE = L_CLAIMCODE);
COMMIT;
DELETE FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE = L_CLAIMCODE;
COMMIT;
DELETE FROM IM_AUTHORIZATION_PROCESS_HDR WHERE CLAIM_CODE = L_CLAIMCODE;
COMMIT;
L_RULES := NGI_LOADAUTHORIZATION.RELOADECLAIMACTIVITIES(1,P_RESULT);
RETURN L_RULES;
END;

FUNCTION NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE) RETURN NUMBER AS
L_NETPRICE NUMBER(19,2);
L_COUNT  NUMBER;
L_TARIFFCODE NUMBER;
BEGIN

   L_NETPRICE := 0;
   L_COUNT := 0;


    SELECT NETVALUE INTO L_NETPRICE FROM(SELECT (B.NETVALUE) NETVALUE
    FROM   IM_PROVIDER_TARIFF A,
    IM_PROVIDER_TARIFF_DETAILS B

    WHERE  A.TARIFFCODE = B.TARIFFCODE
    AND    A.PROVIDERCODE = L_PROVIDERCODE
    AND    (A.STANDARDCODE  IN (SELECT DETAILCODE FROM IM_VERSION_DETALIS WHERE UPPER(TRIM(CODE)) = UPPER(TRIM(L_ACTIVITYCODE))))
    AND    L_STARTDATE BETWEEN (B.EFFECTIVEFROM-1) AND NVL(B.EFFECTIVETO,L_STARTDATE)+1 ORDER BY B.NETVALUE DESC) WHERE ROWNUM < 2;



  RETURN L_NETPRICE;
  EXCEPTION WHEN NO_DATA_FOUND THEN
  RETURN -1;
END;


FUNCTION NGI_GETHADDTARIFFPRICE(L_SOURCEPROVIDER NUMBER,L_PROVIDERCODE NUMBER,L_ACTIVITYCODE VARCHAR2,L_STARTDATE DATE) RETURN NUMBER AS
L_NETPRICE NUMBER(19,2);
L_COUNT  NUMBER;
L_TARIFFCODE NUMBER;
BEGIN

   L_NETPRICE := 0;

   IF L_ACTIVITYCODE = '98' THEN
     L_NETPRICE := 2526;
     RETURN L_NETPRICE;
   END IF;

   SELECT ((DECODE(C.FACTORTYPECODE,0,NVL(PRICE,0)*C.FACTORVALUE,D.PRICE))) PRICE
   INTO   L_NETPRICE
   FROM   IM_MANDATORYTARIFF_ASSIGN A, -- HERE YOU HAVE TO GET THE MANDATORY TARIFF BASED ON THE CODE TYPE OR CATEGORY WHEATHER IT IS CPT OR IT IS OTHER SERVICES BASED ON THE CATEGORY AND THE VERIONS OF THIS CODE
   IM_CODE_CATASSIGN_DETAIL B,
   IM_CODECAT_ASSIGNSUB_DETAIL C,
   IM_PACKAGES D

   WHERE  A.ASSIGN_CODE = B.ASSIGN_CODE
   AND    B.ASSIGN_DET_CODE = C.ASSIGN_DET_CODE
   AND    D.VERSIONDESCRIPTION BETWEEN C.FROMCODE AND C.TOCODE
   AND    A.PROVIDERCODE = L_PROVIDERCODE
   AND    D.VERSIONDESCRIPTION = L_ACTIVITYCODE
   AND    L_STARTDATE BETWEEN (A.STARTDATE-1) AND NVL(A.ENDDATE,L_STARTDATE)+1 AND ROWNUM < 2;



   RETURN L_NETPRICE;

 EXCEPTION WHEN NO_DATA_FOUND THEN

 BEGIN
  SELECT ((DECODE(B.FACTORTYPECODE,0,NVL(PRICE,0)*B.FACTORVALUE,D.PRICE))) PRICE
  INTO   L_NETPRICE FROM   IM_MANDATORYTARIFF_ASSIGN A,
  IM_TARIFF_PER_CATEGORY B,GENCONSTANT C,
  IM_PACKAGES D
  WHERE  A.ASSIGN_CODE = B.ASSIGN_CODE
  AND    B.CPTCODE = C.CONSTANTVALUE AND C.CATEGORY = 'CPTMAIN'
  AND UPPER(C.CONSTANTNAME) = UPPER(D.REMARKS)
  AND    A.PROVIDERCODE = L_PROVIDERCODE
  AND    D.VERSIONDESCRIPTION = L_ACTIVITYCODE
  AND    L_STARTDATE BETWEEN (A.STARTDATE-1) AND NVL(A.ENDDATE,L_STARTDATE)+1 AND ROWNUM < 2;
  RETURN L_NETPRICE;

  EXCEPTION WHEN NO_DATA_FOUND THEN
  BEGIN
  L_NETPRICE := NGI_GETDHATARIFFPRICE(L_SOURCEPROVIDER,L_PROVIDERCODE,L_ACTIVITYCODE,L_STARTDATE);
  END;

END;

 RETURN L_NETPRICE;

END;


FUNCTION NGI_UPLOADRACLAIMS (P_COMPANYCODE NUMBER,P_RESULT OUT NUMBER) RETURN VARCHAR2 AS
L_CUR_SYS_CLAIM_ID NUMBER;
L_DEN VARCHAR2(1000);
L_ACTIVITYDENIAL_REASON NUMBER;
L_RULES VARCHAR2(1000);L_ERROR  VARCHAR2(1000);
P_DECLINEAMOUNT NUMBER;L_SEQNUMBER NUMBER;
L_CDEN VARCHAR2(1000);L_CODE  NVARCHAR2(500);
L_IDPAYER NVARCHAR2(500);L_SEQDATE NVARCHAR2(500);
L_MESSAGE NVARCHAR2(1000);L_PROVIDERNAME NVARCHAR2(500);
L_GROSS NUMBER;L_NET NUMBER;L_APPROVALCOUNT NUMBER;
L_MEMBERNAME NVARCHAR2(500);L_PROVIDERID NVARCHAR2(500);L_AID NVARCHAR2(500);
L_REJECTEDCOUNT NUMBER;L_TOTALCOUNT NUMBER;L_REJECTIONCOUNT NUMBER;
BEGIN
   /*UPDATE IM_AUTHORIZATION_PROCESS_HDR SET AUTHORIZEDSTATUS = 1 WHERE CLAIM_STATUS = 2
   AND AUTHORIZEDSTATUS = 0 AND MAP_VALUE IN
   (SELECT SYS_CLAIM_ID FROM EPRIORREQUEST  WHERE Upper(TYPE) <> Upper('Eligibility'));
   COMMIT; */
   /*FOR HDR IN (SELECT * FROM   IM_AUTHORIZATION_PROCESS_HDR CH WHERE CH.CLAIM_STATUS IN (2,3)
                AND Nvl(AUTHORIZEDSTATUS,0) = 1 AND AUTHORIZATIONTYPECODE = 2  AND CLAIM_CODE   NOT IN
                (SELECT CLAIMHEADERPK FROM EPriorRequest WHERE CLAIMHEADERPK IS NOT NULL) AND CH.MAP_VALUE IN
                (SELECT SYS_CLAIM_ID FROM EPRIORREQUEST  WHERE Upper(TYPE) <> Upper('Eligibility'))) LOOP*/
FOR HDR IN (SELECT * FROM   IM_AUTHORIZATION_PROCESS_HDR CH WHERE Nvl(AUTHORIZEDSTATUS,0) = 1 AND   CLAIM_CODE   NOT IN
                (SELECT CLAIMHEADERPK FROM EPriorRequest WHERE CLAIMHEADERPK IS NOT NULL) AND CH.MAP_VALUE IN
                (SELECT SYS_CLAIM_ID FROM EPRIORREQUEST)) LOOP

                L_ERROR := HDR.CLAIM_CODE;
      SELECT PROVIDERID,PROVIDERNAME INTO L_PROVIDERID,L_PROVIDERNAME FROM IM_PROVIDERS WHERE PROVIDERCODE = HDR.PROVIDER_CODE;
      SELECT MAX(AMEMBERNAME) INTO L_MEMBERNAME FROM IM_MEMBERPOLICY WHERE ACARDID = HDR.CARDNO;

      FOR ORGCLAIM IN (SELECT * FROM EPriorRequest  WHERE SYS_CLAIM_ID = HDR.MAP_VALUE) LOOP
        L_CDEN := '';
        IF ORGCLAIM.ID_PAYER IS NULL THEN
          L_IDPAYER := ORGCLAIM.CLAIM_ID;
        END IF;
        IF ORGCLAIM.ID_PAYER = 'A025' OR ORGCLAIM.ID_PAYER = 'INS038' THEN
          L_IDPAYER := ORGCLAIM.CLAIM_ID;
        END IF;

        SELECT AV_NGISEQ_IM_1.NEXTVAL INTO L_SEQNUMBER FROM DUAL;
        SELECT TO_CHAR(SYSDATE,'RRRR')||TO_CHAR(SYSDATE,'MM')||TO_CHAR(SYSDATE,'DD') INTO L_SEQDATE FROM DUAL;

         IF ORGCLAIM.ID_PAYER = 'INS038' OR ORGCLAIM.ID_PAYER IS NULL THEN
          --L_AID :=  'NGI-'||L_SEQDATE||'-'||L_SEQNUMBER;
          SELECT Max(ID_PAYER) INTO  L_AID FROM EPRIORREQUEST WHERE CLAIM_ID = ORGCLAIM.CLAIM_ID
          AND  MEMBER_ID = ORGCLAIM.MEMBER_ID AND SENDER_ID = ORGCLAIM.SENDER_ID AND SYS_CLAIM_ID <> ORGCLAIM.SYS_CLAIM_ID
          AND ORGCLAIM.ID_PAYER <> 'INS038' AND ORGCLAIM.ID_PAYER IS NOT NULL;
          IF Nvl(L_AID,'0') = '0' THEN
             L_AID :=  'NGI-'||L_SEQDATE||'-'||L_SEQNUMBER;
          END IF;
        ELSE
          L_AID :=   ORGCLAIM.ID_PAYER;
        END IF;

        UPDATE IM_AUTHORIZATION_PROCESS_HDR SET PRIOR_AUTHORIZATION_ID=L_AID
        WHERE CLAIM_CODE = HDR.CLAIM_CODE;
        COMMIT;
        SELECT MAX(SYS_CLAIM_ID) + 1 INTO L_CUR_SYS_CLAIM_ID FROM EPriorRequest;
        INSERT INTO EPriorRequest
        (RESULT,CLAIM_REMARKS,SYS_CLAIM_ID,SENDER_ID, RECEIVER_ID, TRANSACTION_DATE, DISPOSITION_FLAG,CLAIM_ID, ID_PAYER, MEMBER_ID, PAYER_ID, PROVIDER_ID,
        EMIRATES_ID_NUMBER,CLAIM_GROSS, CLAIM_PATIENT_SHARE, CLAIM_NET,ENCOUNTER_FACILITY_ID, ENCOUNTER_FACILITY_TYPE,
        ENCOUNTER_PATIENT_ID, ENCOUNTER_START, ENCOUNTER_END,ENCOUNTER_START_TYPE, ENCOUNTER_END_TYPE, ENCOUNTER_TRANSFER_SOURCE,
        ENCOUNTER_TRANSFER_DESTINATION, RESUBMISSION_TYPE, RESUBMISSION_COMMENT,RESUBMISSION_ATTACHMENT, CONTRACT_PACKAGE_NAME, SYS_ENTRY_DATE,
        SYS_CLAIM_STATUS, SYS_CLAIM_SOURCE, SYS_RECORD_STATUS,CLAIM_DENAIL_CODE, PAYMENT_REFERENCE, DATE_SETTLEMENT,
        ERROR_MESSAGE, SYS_CLAIM_SRC_ID, CHECKSTATUS, ISRESUBMISSION, RFP,CLAIMHEADERPK,PAYMENTTYPE)
        VALUES
        ('Yes',HDR.CLAIM_REMARKS,L_CUR_SYS_CLAIM_ID,ORGCLAIM.SENDER_ID, ORGCLAIM.RECEIVER_ID, ORGCLAIM.TRANSACTION_DATE,
        '0', ORGCLAIM.CLAIM_ID, L_AID, ORGCLAIM.MEMBER_ID,ORGCLAIM.PAYER_ID, ORGCLAIM.PROVIDER_ID, ORGCLAIM.EMIRATES_ID_NUMBER,
        ORGCLAIM.CLAIM_GROSS, ORGCLAIM.CLAIM_PATIENT_SHARE,HDR.APPROVED_AMOUNT, ORGCLAIM.ENCOUNTER_FACILITY_ID, ORGCLAIM.ENCOUNTER_FACILITY_TYPE,
        ORGCLAIM.ENCOUNTER_PATIENT_ID,To_DATE(To_Char(HDR.TRANSACTIONDATE,'DD/MM/RRRR HH24:MI'),'DD/MM/RRRR HH24:MI'),
        To_DATE(To_Char(HDR.TRANSACTIONDATE,'DD/MM/RRRR HH24:MI'),'DD/MM/RRRR HH24:MI')+14,ORGCLAIM.ENCOUNTER_START_TYPE, ORGCLAIM.ENCOUNTER_END_TYPE,
        ORGCLAIM.ENCOUNTER_TRANSFER_SOURCE,ORGCLAIM.ENCOUNTER_TRANSFER_DESTINATION, ORGCLAIM.RESUBMISSION_TYPE, ORGCLAIM.RESUBMISSION_COMMENT,
        ORGCLAIM.RESUBMISSION_ATTACHMENT, ORGCLAIM.CONTRACT_PACKAGE_NAME,ORGCLAIM.SYS_ENTRY_DATE, 3, ORGCLAIM.SYS_CLAIM_SOURCE,
        ORGCLAIM.SYS_RECORD_STATUS,HDR.DENIAL_REASON,HDR.PAYMENTREFNO,To_DATE(To_Char(SYSDATE,'DD/MM/RRRR HH24:MI'),'DD/MM/RRRR HH24:MI'), ORGCLAIM.ERROR_MESSAGE, ORGCLAIM.SYS_CLAIM_SRC_ID,
        ORGCLAIM.CHECKSTATUS, ORGCLAIM.ISRESUBMISSION, ORGCLAIM.RFP,HDR.CLAIM_CODE,1);
        COMMIT;

        FOR ADTL IN(SELECT * FROM IM_AUTHORIZATION_PROCESS_DTL WHERE CLAIM_CODE = HDR.CLAIM_CODE AND NVL(TYPE,0) = 0) LOOP

              SELECT Max(CODE) INTO L_CODE FROM IM_VERSION_DETALIS WHERE DETAILCODE = ADTL.DENIAL_REASON;
              FOR ORGACTIVITY IN(SELECT * FROM EPriorRequest_Activities WHERE SYS_ACTIVITY_ID = ADTL.SYS_ACTIVITY_ID AND SYS_CLAIM_ID = HDR.MAP_VALUE) LOOP

              IF L_CODE IS NULL OR L_CODE = '0' THEN
                 L_CODE := NULL;
              END IF;
               INSERT INTO EPriorRequest_Activities B
               (SYS_CLAIM_ID,ACTIVITY_ID,ACTIVITY_START,ACTIVITY_TYPE,ACTIVITY_CODE,QUANTITY,ACTIVITY_NET,ACTIVITY_LIST,CLINICIAN,PRIOR_AUTHORIZATION_ID,
               ACTIVITY_GROSS,ACTIVITY_PATIENT_SHARE,ACTIVITY_PAYMENT_AMOUNT,PATIENTSHARE,ACTIVITY_DENIAL_CODE,SYS_ACTIVITY_ID,SYS_RECORD_STATUS,ORDERINGCLINICIAN)
               VALUES
               (L_CUR_SYS_CLAIM_ID,ORGACTIVITY.ACTIVITY_ID,ORGACTIVITY.ACTIVITY_START,ORGACTIVITY.ACTIVITY_TYPE,ORGACTIVITY.ACTIVITY_CODE,ADTL.APPROVEDQTY,
                NVL(ORGACTIVITY.ACTIVITY_NET,0),NVL(ORGACTIVITY.ACTIVITY_LIST,0),TRIM(ORGACTIVITY.CLINICIAN),ORGACTIVITY.PRIOR_AUTHORIZATION_ID,
                ORGACTIVITY.ACTIVITY_GROSS,NULL,Nvl(Round(ADTL.TOTAL,2),0),NVL(Round(ADTL.PATIENTSHARE,2),0),L_CODE,(SELECT MAX(SYS_ACTIVITY_ID) + 1 FROM EPriorRequest_Activities),1,NVL(ORGACTIVITY.ORDERINGCLINICIAN,ORGACTIVITY.CLINICIAN));
                COMMIT;

              END LOOP;

        END LOOP;

        SELECT COUNT(*) INTO L_APPROVALCOUNT FROM EPriorRequest_Activities WHERE SYS_CLAIM_ID=L_CUR_SYS_CLAIM_ID
        AND UPPER(ACTIVITY_DENIAL_CODE)='AUTH-012';

        SELECT SUM(NVL(ACTIVITY_NET,0)),SUM(NVL(ACTIVITY_PAYMENT_AMOUNT,0)+NVL(PATIENTSHARE,0)) INTO L_GROSS,L_NET
        FROM EPriorRequest_Activities WHERE SYS_cLAIM_ID=L_CUR_SYS_CLAIM_ID;

        SELECT Count(*) INTO L_REJECTEDCOUNT FROM EPriorRequest_Activities  WHERE SYS_CLAIM_ID=L_CUR_SYS_CLAIM_ID
        AND UPPER(ACTIVITY_DENIAL_CODE) NOT IN('PRCE-001','AUTH-012') AND NVL(ACTIVITY_DENIAL_CODE,0) <> 0;

        SELECT Count(*) INTO L_TOTALCOUNT FROM EPriorRequest_Activities   WHERE SYS_CLAIM_ID=L_CUR_SYS_CLAIM_ID;


        IF L_REJECTEDCOUNT = 0 THEN
           L_MESSAGE := 'Dear Customer, Your treatment request from '||L_PROVIDERNAME||' has been approved under ref '||L_AID||'. If you require any assistance, please contact our call center.';
        END IF;
        IF L_REJECTEDCOUNT > 0 THEN
           L_MESSAGE := 'Dear Customer, Your treatment request from '||L_PROVIDERNAME||' has been partially approved under ref NGI-'||L_AID||'. If you require any assistance, please contact our call center.';
        END IF;
        IF L_REJECTEDCOUNT = L_TOTALCOUNT THEN
           L_MESSAGE := NULL;
        END IF;
        IF L_APPROVALCOUNT > 0 THEN
           L_MESSAGE := 'Dear customer, we have sent query for your approval request and await reply from the provider ';
        END IF;

        IF L_NET = 0 AND  L_APPROVALCOUNT = 0 THEN
           L_MESSAGE := NULL;
        END IF;



        IF L_MESSAGE IS NOT NULL AND HDR.MOBILENO IS NOT NULL THEN
           INSERT INTO IM_MESSAGE_LOG SELECT HDR.CLAIM_CODE,L_AID,'1018',L_PROVIDERNAME,
           HDR.CARDNO,L_MEMBERNAME,HDR.TRANSACTIONDATE,HDR.MOBILENO,L_MESSAGE FROM DUAL;
           COMMIT;
           L_RULES:=FN_WEBSERVICE_UPLOAD(HDR.CLAIM_CODE,L_MESSAGE,'ID_SENDMESSAGE',1);
        END IF;


      END LOOP;

   END LOOP;
  RETURN 'OK';
EXCEPTION WHEN OTHERS THEN
  RETURN L_ERROR;
END;

END NGI_LOADAUTHORIZATION;
/

GRANT EXECUTE ON ngi_loadauthorization TO sys;


CREATE TABLE IM_MEMBER_TRUEDOC
(MEMBER_CODE NUMBER,
CANSTARTDATE DATE,
CANEXITDATE DATE,
HEPSTARTDATE DATE,
HEPEXITDATE DATE,
CANEXIT NUMBER,
HEPEXIT NUMBER);
/



PROMPT CREATE OR REPLACE TRIGGER im_members_truedoc_trg
CREATE OR REPLACE TRIGGER im_members_truedoc_trg
BEFORE UPDATE  ON im_members REFERENCING NEW AS NEW
FOR EACH ROW
DECLARE
L_TRUEDOC NUMBER;
BEGIN
SELECT Count(*) INTO L_TRUEDOC FROM IM_MEMBER_TRUEDOC WHERE MEMBER_CODE = :NEW.MEMBER_CODE;
IF L_TRUEDOC = 0 THEN
  IF :NEW.CANCER = 'Y' AND :NEW.HEPATITIS_C = 'Y' THEN
    INSERT INTO IM_MEMBER_TRUEDOC
    SELECT :NEW.MEMBER_CODE,SYSDATE,NULL,SYSDATE,NULL,'N','N' FROM DUAL;
  ELSIF :NEW.CANCER = 'Y' AND :NEW.HEPATITIS_C = 'N' THEN
    INSERT INTO IM_MEMBER_TRUEDOC
    SELECT :NEW.MEMBER_CODE,SYSDATE,NULL,NULL,NULL,'N','N' FROM DUAL;
  ELSIF :NEW.CANCER = 'N' AND :NEW.HEPATITIS_C = 'Y' THEN
    INSERT INTO IM_MEMBER_TRUEDOC
    SELECT :NEW.MEMBER_CODE,NULL,NULL,SYSDATE,NULL,'N','N' FROM DUAL;
  END IF;
ELSE
  IF :NEW.CANCER = 'N' AND :OLD.CANCER = 'Y' THEN
     UPDATE  IM_MEMBER_TRUEDOC SET CANEXITDATE = SYSDATE,CANEXIT = 'Y' WHERE MEMBER_CODE = :NEW.MEMBER_CODE;
  END IF;
  IF :NEW.HEPATITIS_C = 'N' AND :OLD.HEPATITIS_C = 'Y' THEN
     UPDATE  IM_MEMBER_TRUEDOC SET HEPEXITDATE = SYSDATE,HEPEXIT  = 'Y' WHERE MEMBER_CODE = :NEW.MEMBER_CODE;
  END IF;
   IF :NEW.HEPATITIS_C = 'Y' AND :OLD.HEPATITIS_C = 'N' THEN
     UPDATE  IM_MEMBER_TRUEDOC SET HEPSTARTDATE = SYSDATE,HEPEXIT = 'N' WHERE MEMBER_CODE = :NEW.MEMBER_CODE;
  END IF;  
  IF :NEW.CANCER = 'Y' AND :OLD.CANCER = 'N' THEN
     UPDATE  IM_MEMBER_TRUEDOC SET CANSTARTDATE = SYSDATE,CANEXIT = 'N' WHERE MEMBER_CODE = :NEW.MEMBER_CODE;
  END IF;

END IF;
END;
/
