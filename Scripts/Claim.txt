
CREATE TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(
  CLAIM_CODE                NUMBER,
  REQUEST_NUMBER            VARCHAR2(100 BYTE),
  CPPREFIX                  VARCHAR2(50 BYTE),
  CPNO                      NUMBER(10),
  CPSUFFIX                  VARCHAR2(50 BYTE),
  CPFULLNO                  VARCHAR2(50 BYTE),
  AUTHORIZEDSTATUS          NUMBER(3),
  TRANSACTIONDATE           DATE,
  REQUEST_SOURCE            NUMBER(19),
  REQUEST_TYPE              NUMBER(19),
  REQUEST_STATUS            NUMBER(19),
  PROVIDER_CODE             NUMBER(19),
  IS_BLOCKED                NUMBER(3),
  IS_FASTTRACE_PAYMENT      NUMBER(3),
  MEMBER_CODE               NUMBER(19),
  AUTHORIZATOIN_CODE        NUMBER(3),
  CREATEDIN                 NUMBER(19),
  CREATEDON                 DATE,
  CREATEDBY                 NUMBER(19),
  LASTMODIFIEDON            DATE,
  LASTMODIFIEDBY            NUMBER(19),
  LEGALENTITYCODE           NUMBER(19),
  CUSTOMERCODE              NUMBER(19),
  LOCATIONCODE              NUMBER(19),
  COMPANYCODE               NUMBER(19),
  BENEFIT_CODE              NUMBER(19),
  REQUEST_AMOUNT            NUMBER(18,3),
  APPROVED_DATE             DATE,
  APPROVED_AMOUNT           NUMBER(18,3),
  TREATMENT_TYPE            NUMBER(19),
  ENCOUNTER_START_DATE      DATE,
  TYPE                      NUMBER(19),
  CLAIM_STATUS              NUMBER(19),
  DENIAL_REASON             NUMBER(19),
  CASESUMMARY               VARCHAR2(2000 BYTE),
  SERIALNO                  NUMBER(19),
  DENAILVALUE               NUMBER(18,3),
  PICTURE                   VARCHAR2(100 BYTE),
  INVOICENUMBER             VARCHAR2(100 BYTE),
  DENIALREASON              VARCHAR2(100 BYTE),
  REASON                    VARCHAR2(500 BYTE),
  TYPECODE                  NUMBER(19),
  ACTIVITYCODE              NUMBER(19),
  MAP_VALUE                 NUMBER(19),
  BATCH_NUMBER              VARCHAR2(100 BYTE),
  ATHORIZATOIN_CODE         VARCHAR2(100 BYTE),
  ENCOUNTER_END_DATE        DATE,
  DURATION                  NUMBER,
  REQUEST_DATE              DATE,
  RESUBMISSION_TYPE         VARCHAR2(500 BYTE),
  BATCHCODE                 NUMBER(19),
  PARENTCLAIMCODE           NUMBER(19),
  CURRENCYCODE              NUMBER(19),
  NETWORKCODE               NUMBER(19),
  POLICYCODE                NUMBER,
  CATEGORY_CODE             NUMBER,
  ISEMERGENCY               NUMBER(1),
  PROVINCECODE              NUMBER(19),
  CDCODE                    NUMBER,
  UPLOADSTATUS              NUMBER(3),
  DISCOUNTTOTAL             NUMBER,
  ACTIVITYPRICE             NUMBER,
  CO_INS_VALUE              NUMBER,
  DEDUCTABLEVALUE           NUMBER,
  INVOICEDATE               DATE,
  ACR_FORM_NO               VARCHAR2(1000 BYTE),
  ACR_FORM_TYPE             VARCHAR2(1000 BYTE) DEFAULT 0,
  CLAIM_TYPE                VARCHAR2(1000 BYTE) DEFAULT 1,
  NETAMOUNT                 NUMBER(19,2),
  MEMBERPOLICYCODE          NUMBER(19),
  RESUBMISSION              NUMBER,
  ISRESUBMISSION            NUMBER(1),
  CLAIM_REMARKS             VARCHAR2(2000 BYTE),
  ENCOUNTER_START_TYPE      NUMBER(10),
  ENCOUNTER_END_TYPE        NUMBER(10),
  ENCOUNTER_FACILITY_TYPE   NUMBER(10),
  RFP                       NVARCHAR2(2000),
  SUBMITTORA                NUMBER(1),
  FINANCE                   NUMBER(1),
  ORGINALPATIENTSHARE       NUMBER,
  RATE                      VARCHAR2(100 BYTE),
  REIMBURSEMENTAMT          NUMBER(19,2),
  SOURCE_TYPE               VARCHAR2(100 BYTE),
  SOURCE_CODE               NUMBER,
  ACR_FORM_SEQ_NO           NUMBER,
  ACR_PRODUCT_CODE          VARCHAR2(100 BYTE),
  ACR_SERIAL_NO             VARCHAR2(100 BYTE),
  ACR_PRODUCT_CATEGORY      VARCHAR2(100 BYTE),
  ACR_MEMBER_NO             VARCHAR2(100 BYTE),
  ACR_MEMBER_REFERENCE_NO   VARCHAR2(500 BYTE),
  ACR_PROVIDER_CODE         VARCHAR2(100 BYTE),
  ACR_PHYSICIAN_CODE        VARCHAR2(100 BYTE),
  ISPOSTED                  NUMBER(3),
  PAYMENTREFNO              VARCHAR2(50 BYTE),
  SOURCEPROVIDER            NUMBER(3),
  SCREENINGDONE             NUMBER(3)           DEFAULT 0,
  ACR_UW_YEAR               VARCHAR2(1000 BYTE),
  OUTOFNETWORKPROVIDERNAME  NVARCHAR2(2000),
  CARDNO                    NVARCHAR2(25),
  ISNEXTCARE                NUMBER(1),
  POLICYTYPECODE            NUMBER(1),
  NETWORKTYPE               NUMBER(1),
  ADMINISTRATEDBY           NUMBER(3),
  RESUBMISSION_COMMENTS     NVARCHAR2(2000),
  RESUBMISSION_ATTACHMENT   NVARCHAR2(2000),
  UBYMANOJ                  NUMBER(1),
  PROCESSEDDATE             DATE,
  TOBEDELETECLAIMS          NUMBER(1),
  ALREADYSCREENED           NUMBER(1),
  TOBEUPDATED               NUMBER(1),
  ACR_SEQUENCE_NO           NUMBER(19),
  CEEDSTATUS                NUMBER(3),
  REVIEWEDBYDOCTOR          NUMBER(1),
  DECLINEAMOUNT             NUMBER(19,3),
  HNMAMOUNT                 NUMBER(19,3),
  MDEDUCT                   NUMBER,
  MCO_INS                   NUMBER,
  OLDCLAIMS                 NUMBER,
  AUTOREJECT                NUMBER,
  ISDECLINEDPOSTED          NUMBER,
  ISFRAUD                   NUMBER(3),
  ISAUTOMATED               NUMBER,
  LCNT                      NUMBER,
  IBNRMONTH                 NUMBER,
  MEDPOSTINGDONE            NUMBER(1),
  ISPROCESSED               NUMBER,
  CRTCLAIM                  NUMBER,
  ORIGINALDEDUCTABLEAMOUNT  NUMBER(19,2),
  ORIGINALREQUESTAMOUNT     NUMBER(19,2),
  AUTOPROCESSED             NUMBER(1),
  CLAIMMEMBERBATCHCODE      NUMBER,
  ACTCHECKHDR               NUMBER,
  ISREVERSED                NUMBER(1),
  PAYMENTTYPECODE           NUMBER(1),
  REIMBURSEMENT_FORM_NO     NUMBER(19),
  FORMTYPECODE              NUMBER(3),
  BRATE                     VARCHAR2(100 BYTE),
  MEMOTYPE                  NUMBER(1),
  PRICEUPDATE               NUMBER,
  MEDREFDATE                DATE,
  ACR_SEQ_NO                NUMBER              DEFAULT 1,
  ACR_INV_NO                NUMBER              DEFAULT 1,
  ISCARDRESUBMISSION        NUMBER,
  ISREVERSEDFORDEBIT        NUMBER,
  ISREVERSEDFORCREDIT       NUMBER,
  PAYMENTREFDATE            DATE,
  DISCOUNTPERCENTAGE        NUMBER(19,2),
  REVERSEREFNO              NVARCHAR2(100),
  REVERSEREFDATE            DATE,
  NEXTCAREBATCHNO           NUMBER
)
TABLESPACE SBS_TBLS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CEEDSTATUS ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CEEDSTATUS)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CH2COM ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_CODE, COMPANYCODE, INVOICENUMBER, PROVIDER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CHCOM ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_STATUS, AUTHORIZEDSTATUS, TREATMENT_TYPE, MEMBER_CODE, POLICYCODE, 
CATEGORY_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CH_22 ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_CODE, COMPANYCODE, PROVIDER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CH_MCCC ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(MEMBER_CODE, CLAIM_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CH_PM ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(PROVIDER_CODE, MEMBER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_ISFRAUD ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ISFRAUD)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_PAYMENTREFNO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(PAYMENTREFNO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.CLAIM_DUPLICATE_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(MEMBER_CODE, INVOICENUMBER, ACR_FORM_NO, PROVIDER_CODE, INVOICEDATE, 
ACR_SERIAL_NO, ACR_FORM_TYPE, ACR_FORM_SEQ_NO, REQUEST_NUMBER, FORMTYPECODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.DUPLICATE_FORM_NO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_FORM_NO, ACR_SEQ_NO, CLAIM_TYPE, ACR_FORM_TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.DUPLICATE_INVOICE_NO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(INVOICENUMBER, PROVIDER_CODE, ACR_INV_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMACR_SERIAL_NO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_SERIAL_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMAUTHORIZEDSTATUS ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(AUTHORIZEDSTATUS)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMBATCH_CODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(BATCHCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMBENEFITCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(BENEFIT_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMCATEGORY_CODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CATEGORY_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMCLAIMSTATUSCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_STATUS)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMCPNO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CPNO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMFINANCE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(FINANCE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMFORMNO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_FORM_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMINVOICENO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(INVOICENUMBER)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMISNEXTCAREDTS ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(MEMBERPOLICYCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMISNEXTCAREMNEXT ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ISNEXTCARE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMLASTMODIFIEDON ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
("LASTMODIFIEDON" DESC)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMMAPVALUE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(MAP_VALUE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMMEMBERCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(MEMBER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMMODIFIEDON ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(LASTMODIFIEDON)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMPARENTCLAIMCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(PARENTCLAIMCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMPOLICYCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(POLICYCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMPROVIDERCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(PROVIDER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMREQQAMT ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(REQUEST_AMOUNT)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          24K
            NEXT             24K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMREQTYPECODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(REQUEST_TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMREQUESTNETWORKCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(NETWORKCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMREQUEST_SOURCE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(REQUEST_SOURCE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMRTREATMENT_TYPE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(TREATMENT_TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMSERIALNO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(SERIALNO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMSPROCESSTYPECODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMSUBMITTORA ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(SUBMITTORA)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_TREATMENTDATE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(TRANSACTIONDATE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_ACR_FORM_SEQ_NO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_FORM_SEQ_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_CLAIM_ACR_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_SEQ_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_CLAIM_COSUM_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_CODE, ACR_PRODUCT_CODE, ACR_SERIAL_NO, MEMBER_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_CLAIM_INV_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ACR_INV_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(SOURCE_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_PK ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_CLAIM_SOURCE_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(SOURCE_TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IM_ISRESUBMISSION ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(ISRESUBMISSION)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.NEXTCLAIM_DUPLICATE_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(INVOICENUMBER, ACR_FORM_NO, POLICYCODE, BATCHCODE, REQUEST_TYPE, 
ACR_SERIAL_NO, PROVIDER_CODE, ISRESUBMISSION, ACR_FORM_TYPE, ACR_FORM_SEQ_NO, 
REQUEST_NUMBER, MEMBER_CODE, FORMTYPECODE, ACR_SEQ_NO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.PBM_CLAIM_INDX ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER
(CLAIM_CODE, POLICYCODE, CATEGORY_CODE, CLAIM_STATUS, AUTHORIZEDSTATUS)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE."IM_CLAIMPRC_AFTERDELETE_TRG" 
  AFTER DELETE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER   FOR EACH ROW
DECLARE
  P_REQUESTDIFFERENCE NUMBER(19,2);
  L_RPTPK NUMBER;
BEGIN

 
    IF :NEW.REQUEST_TYPE = 3 THEN
      UPDATE IM_CLAIMMEMBERBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT - :OLD.REQUEST_AMOUNT
      WHERE CLAIMMEMBERBATCHCODE = :NEW.BATCHCODE;
    ELSIF :NEW.REQUEST_TYPE = 2 THEN
      UPDATE IM_CLAIMBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT - :OLD.REQUEST_AMOUNT,
    PROCESSEDCLAIMS = PROCESSEDCLAIMS - 1 WHERE CLAIMBATCHCODE = :NEW.BATCHCODE;
   END IF;
   
  SELECT AV_SEQ_IM_RPT_1.NEXTVAL INTO L_RPTPK FROM DUAL;
    
  DELETE FROM IM_CLAIM_PROCESS_HEADER_RPT WHERE CLAIM_CODE = :NEW.CLAIM_CODE AND TO_DATE(TRANSACTIONDATE,'DD\MM\YYYY') = TO_DATE(SYSDATE,'DD\MM\YYYY');
      
  INSERT INTO IM_CLAIM_PROCESS_HEADER_RPT (CLAIM_RPT_CODE,CLAIM_CODE ,REQUEST_TYPE ,CLAIM_STATUS ,AUTHORIZEDSTATUS ,ISPOSTED ,FINANCE ,SUBMITTORA ,APPROVED_AMOUNT ,REQUEST_AMOUNT ,ORGINALPATIENTSHARE ,
  DENAILVALUE ,CO_INS_AMOUNT ,DEDUCTIBLEAMOUNT,TRANSACTIONDATE,ACR_FORM_NO,INVOICENUMBER,CREATEDON,LASTMODIFIEDBY,PROVIDER_CODE,SOURCEPROVIDER,CLAIMTRANSACTIONDATE,ENCOUNTER_START_DATE,
  ENCOUNTER_END_DATE,DISCOUNTTOTAL,IBNRMONTH,MEMBER_CODE,POLICYCODE,CATEGORY_CODE,POLICYTYPECODE,ACR_SERIAL_NO,BATCHCODE,ISDELETED) VALUES
  (L_RPTPK,:NEW.CLAIM_CODE,:NEW.REQUEST_TYPE,:NEW.CLAIM_STATUS,:NEW.AUTHORIZEDSTATUS,:NEW.ISPOSTED,:NEW.FINANCE,:NEW.SUBMITTORA,:NEW.APPROVED_AMOUNT,:NEW.REQUEST_AMOUNT,:NEW.ORGINALPATIENTSHARE,
  :NEW.DENAILVALUE,:NEW.CO_INS_VALUE,:NEW.DEDUCTABLEVALUE,SYSDATE,:NEW.ACR_FORM_NO,:NEW.INVOICENUMBER,SYSDATE,:NEW.LASTMODIFIEDBY,:NEW.PROVIDER_CODE,:NEW.SOURCEPROVIDER,:NEW.TRANSACTIONDATE,:NEW.ENCOUNTER_START_DATE,
  :NEW.ENCOUNTER_END_DATE,:NEW.DISCOUNTTOTAL,:NEW.IBNRMONTH,:NEW.MEMBER_CODE,:NEW.POLICYCODE,:NEW.CATEGORY_CODE,:NEW.POLICYTYPECODE,:NEW.ACR_SERIAL_NO,:NEW.BATCHCODE,1);
     
    
 END ;
/


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE."IM_CLAIMPROCESS_AFTER_TRG" 
  AFTER INSERT OR UPDATE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER   FOR EACH ROW
DISABLE
DECLARE
  P_REQUESTDIFFERENCE NUMBER(19,2);
  L_COUNT NUMBER;
  L_RPTPK NUMBER;
  L_MEDREFDATE DATE;
BEGIN
 
 IF INSERTING THEN
 
   
    IF :NEW.REQUEST_TYPE = 3 THEN
      UPDATE IM_CLAIMMEMBERBATCH SET PROCESSEDAMOUNT = NVL(PROCESSEDAMOUNT,0) + :NEW.REQUEST_AMOUNT 
      WHERE CLAIMMEMBERBATCHCODE = :NEW.BATCHCODE;
    ELSIF :NEW.REQUEST_TYPE = 2 THEN
      UPDATE IM_CLAIMBATCH SET PROCESSEDAMOUNT = NVL(PROCESSEDAMOUNT,0) + :NEW.APPROVED_AMOUNT,
      PROCESSEDCLAIMS =  NVL(PROCESSEDCLAIMS,0) + 1 WHERE CLAIMBATCHCODE = :NEW.BATCHCODE;
    END IF;   
   SELECT AV_SEQ_IM_RPT_1.NEXTVAL INTO L_RPTPK FROM DUAL;
  INSERT INTO IM_CLAIM_PROCESS_HEADER_RPT (CLAIM_RPT_CODE,CLAIM_CODE ,REQUEST_TYPE ,CLAIM_STATUS ,AUTHORIZEDSTATUS ,ISPOSTED ,FINANCE ,SUBMITTORA ,APPROVED_AMOUNT ,REQUEST_AMOUNT ,ORGINALPATIENTSHARE ,
    DENAILVALUE ,CO_INS_AMOUNT ,DEDUCTIBLEAMOUNT,TRANSACTIONDATE,ACR_FORM_NO,INVOICENUMBER,CREATEDON,LASTMODIFIEDBY,PROVIDER_CODE,SOURCEPROVIDER,CLAIMTRANSACTIONDATE,ENCOUNTER_START_DATE,
    ENCOUNTER_END_DATE,DISCOUNTTOTAL,IBNRMONTH,MEMBER_CODE,POLICYCODE,CATEGORY_CODE,POLICYTYPECODE,ACR_SERIAL_NO,BATCHCODE) VALUES
    (L_RPTPK,:NEW.CLAIM_CODE,:NEW.REQUEST_TYPE,:NEW.CLAIM_STATUS,:NEW.AUTHORIZEDSTATUS,:NEW.ISPOSTED,:NEW.FINANCE,:NEW.SUBMITTORA,:NEW.APPROVED_AMOUNT,:NEW.REQUEST_AMOUNT,:NEW.ORGINALPATIENTSHARE,
    :NEW.DENAILVALUE,:NEW.CO_INS_VALUE,:NEW.DEDUCTABLEVALUE,SYSDATE,:NEW.ACR_FORM_NO,:NEW.INVOICENUMBER,SYSDATE,:NEW.LASTMODIFIEDBY,:NEW.PROVIDER_CODE,:NEW.SOURCEPROVIDER,:NEW.TRANSACTIONDATE,:NEW.ENCOUNTER_START_DATE,
      :NEW.ENCOUNTER_END_DATE,:NEW.DISCOUNTTOTAL,:NEW.IBNRMONTH,:NEW.MEMBER_CODE,:NEW.POLICYCODE,:NEW.CATEGORY_CODE,:NEW.POLICYTYPECODE,:NEW.ACR_SERIAL_NO,:NEW.BATCHCODE);
      
 ELSIF UPDATING THEN
  
    IF :NEW.REQUEST_TYPE = 3 THEN
      IF :NEW.REQUEST_AMOUNT > :OLD.REQUEST_AMOUNT THEN
          P_REQUESTDIFFERENCE := :NEW.REQUEST_AMOUNT - :OLD.REQUEST_AMOUNT;
          UPDATE IM_CLAIMMEMBERBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT + P_REQUESTDIFFERENCE
          WHERE CLAIMMEMBERBATCHCODE = :NEW.BATCHCODE;
      ELSIF :NEW.REQUEST_AMOUNT < :OLD.REQUEST_AMOUNT THEN
          P_REQUESTDIFFERENCE := :OLD.REQUEST_AMOUNT - :NEW.REQUEST_AMOUNT;
          UPDATE IM_CLAIMMEMBERBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT - P_REQUESTDIFFERENCE
          WHERE CLAIMMEMBERBATCHCODE = :NEW.BATCHCODE;
      END IF;
    ELSIF :NEW.REQUEST_TYPE = 1 THEN
      IF :NEW.REQUEST_AMOUNT > :OLD.REQUEST_AMOUNT THEN
          P_REQUESTDIFFERENCE := :NEW.REQUEST_AMOUNT - :OLD.REQUEST_AMOUNT;
          UPDATE IM_CLAIMBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT + P_REQUESTDIFFERENCE
          WHERE CLAIMBATCHCODE = :NEW.BATCHCODE;
      ELSIF :NEW.REQUEST_AMOUNT < :OLD.REQUEST_AMOUNT THEN
          P_REQUESTDIFFERENCE := :OLD.REQUEST_AMOUNT - :NEW.REQUEST_AMOUNT;
          UPDATE IM_CLAIMBATCH SET PROCESSEDAMOUNT = PROCESSEDAMOUNT - P_REQUESTDIFFERENCE
          WHERE CLAIMBATCHCODE = :NEW.BATCHCODE;
      END IF;
    END IF;
    
   
    
     SELECT AV_SEQ_IM_RPT_1.NEXTVAL INTO L_RPTPK FROM DUAL;
    
     IF :NEW.MEDREFDATE IS NULL THEN
        L_MEDREFDATE := :NEW.TRANSACTIONDATE;
     ELSE 
        L_MEDREFDATE := :NEW.MEDREFDATE;
     END IF;
      DELETE FROM IM_CLAIM_PROCESS_HEADER_RPT WHERE CLAIM_CODE = :NEW.CLAIM_CODE AND TO_DATE(TRANSACTIONDATE,'DD\MM\YYYY') = TO_DATE(SYSDATE,'DD\MM\YYYY');
      
      INSERT INTO IM_CLAIM_PROCESS_HEADER_RPT (CLAIM_RPT_CODE,CLAIM_CODE ,REQUEST_TYPE ,CLAIM_STATUS ,AUTHORIZEDSTATUS ,ISPOSTED ,FINANCE ,SUBMITTORA ,APPROVED_AMOUNT ,REQUEST_AMOUNT ,ORGINALPATIENTSHARE ,
      DENAILVALUE ,CO_INS_AMOUNT ,DEDUCTIBLEAMOUNT,TRANSACTIONDATE,ACR_FORM_NO,INVOICENUMBER,CREATEDON,LASTMODIFIEDBY,PROVIDER_CODE,SOURCEPROVIDER,CLAIMTRANSACTIONDATE,ENCOUNTER_START_DATE,
      ENCOUNTER_END_DATE,DISCOUNTTOTAL,IBNRMONTH,MEMBER_CODE,POLICYCODE,CATEGORY_CODE,POLICYTYPECODE,ACR_SERIAL_NO,BATCHCODE,MEDPOSTINGDONE) VALUES
      (L_RPTPK,:NEW.CLAIM_CODE,:NEW.REQUEST_TYPE,:NEW.CLAIM_STATUS,:NEW.AUTHORIZEDSTATUS,:NEW.ISPOSTED,:NEW.FINANCE,:NEW.SUBMITTORA,:NEW.APPROVED_AMOUNT,:NEW.REQUEST_AMOUNT,:NEW.ORGINALPATIENTSHARE,
      :NEW.DENAILVALUE,:NEW.CO_INS_VALUE,:NEW.DEDUCTABLEVALUE,TO_DATE(SYSDATE-2,'DD\MM\YYYY'),:NEW.ACR_FORM_NO,:NEW.INVOICENUMBER, TO_DATE(SYSDATE-2,'DD\MM\YYYY'),:NEW.LASTMODIFIEDBY,:NEW.PROVIDER_CODE,:NEW.SOURCEPROVIDER,:NEW.TRANSACTIONDATE,:NEW.ENCOUNTER_START_DATE,
      :NEW.ENCOUNTER_END_DATE,:NEW.DISCOUNTTOTAL,:NEW.IBNRMONTH,:NEW.MEMBER_CODE,:NEW.POLICYCODE,:NEW.CATEGORY_CODE,:NEW.POLICYTYPECODE,:NEW.ACR_SERIAL_NO,:NEW.BATCHCODE,:NEW.MEDPOSTINGDONE);
     
    
 END IF;
 END ;
/


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE.im_claimprocess_trg 
BEFORE INSERT ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER  FOR EACH ROW
DECLARE
P_REQUESTDIFFERENCE NUMBER(19,2);
P_MEMBERCODE NUMBER;
P_MEMBERPOLICYCODE NUMBER;
P_ACRFORMNO NVARCHAR2(50);
P_NOOFCLAIMS NUMBER;
L_COUNT NUMBER;
L_OPENPK NUMBER;
L_CLOSEPK NUMBER;
L_INV_NO NUMBER;
BEGIN

IF NVL(:NEW.ISRESUBMISSION,0) = 0 THEN
IF :NEW.REQUEST_TYPE = 3 THEN
SELECT  NVL(MAX(ACR_INV_NO),0)   INTO  L_INV_NO FROM IM_CLAIM_PROCESS_HEADER WHERE INVOICENUMBER = NVL(:NEW.INVOICENUMBER,0)
AND PROVIDER_CODE = NVL(:NEW.PROVIDER_CODE,0) AND REQUEST_TYPE = 3;
L_INV_NO := NVL(L_INV_NO,0) + 1;
:NEW.ACR_INV_NO := L_INV_NO;
ELSIF :NEW.REQUEST_TYPE = 4 THEN
SELECT NVL(MAX(ACR_INV_NO),0)   INTO  L_INV_NO FROM IM_CLAIM_PROCESS_HEADER WHERE INVOICENUMBER = NVL(:NEW.INVOICENUMBER,0)
AND  NVL(PROVIDER_CODE,0)  = NVL(:NEW.PROVIDER_CODE,0);
L_INV_NO := NVL(L_INV_NO,0) + 1;
:NEW.ACR_INV_NO := L_INV_NO;
ELSIF :NEW.REQUEST_TYPE = 2 THEN
L_INV_NO := 1;
:NEW.ACR_INV_NO := L_INV_NO;
END IF;
END IF;

:NEW.ACR_FORM_TYPE := :NEW.FORMTYPECODE;
IF :NEW.REQUEST_TYPE <> 4 THEN
IF INSERTING THEN
  IF :NEW.ACR_FORM_NO IS NULL AND :NEW.REQUEST_TYPE = 3 THEN
      SELECT ACR_FORM_NO INTO P_ACRFORMNO FROM IM_CLAIMMEMBERBATCH WHERE CLAIMMEMBERBATCHCODE = :NEW.Reimbursement_Form_No;
      :NEW.ACR_FORM_NO := P_ACRFORMNO;
  END IF;

  IF :NEW.REQUEST_TYPE = 2 THEN
    SELECT COUNT(*) INTO L_COUNT FROM IM_CLAIM_PROCESS_HEADER WHERE BATCHCODE = :NEW.BATCHCODE;

    SELECT NUMBEROFCALIMS INTO P_NOOFCLAIMS FROM IM_CLAIMBATCH WHERE CLAIMBATCHCODE = :NEW.BATCHCODE;
    IF L_COUNT = 0 THEN
      SELECT AV_SEQ_IM_214.NEXTVAL INTO L_OPENPK FROM DUAL;
      Insert into ADDVANTAGE_LIVE.IM_CLAIM_BATCH_OPEN
          (CLAIMBATCHOPENCODE, CLAIMBATCHCODE, REASON, AUTHORIZEDSTATUS, CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE, SERIALNO, REFDATE, REFNO)
        Values
          (100000000000000000  + L_OPENPK, :NEW.BATCHCODE, 'Batch Opened', 1,
          1, SYSDATE, :NEW.CREATEDBY, SYSDATE, :NEW.CREATEDBY,
          1, 1, L_OPENPK, SYSDATE, '1');
    END IF;

    IF L_COUNT = P_NOOFCLAIMS - 1 THEN
      SELECT AV_SEQ_IM_215.NEXTVAL INTO L_CLOSEPK FROM DUAL;
        Insert into ADDVANTAGE_LIVE.IM_CLAIM_BATCH_CLOSE
          (CLAIMBATCHCLOSECODE, CLAIMBATCHCODE, OUTSTANDINGAMOUNT, REASON, AUTHORIZEDSTATUS, CREATEDIN, CREATEDON, CREATEDBY, LASTMODIFIEDON, LASTMODIFIEDBY, COMPANYCODE, LOCATIONCODE, SERIALNO, REFDATE, REFNO)
        Values
          (100000000000000000  + L_CLOSEPK, :NEW.BATCHCODE, 0, 'Batch Closed', 1,
          1, SYSDATE, :NEW.CREATEDBY, SYSDATE, :NEW.CREATEDBY,
          1, 1, L_CLOSEPK, SYSDATE, '1');
    END IF;
  END IF;
  IF :NEW.MEMBER_CODE IS NULL THEN
    SELECT NVL(ICP.MEMBERCODE,0) INTO P_MEMBERCODE FROM IM_CORDPRINT ICP WHERE ICP.CARDNO = :NEW.CARDNO AND ICP.POLICYCODE = :NEW.POLICYCODE AND ICP.CATEGORYCODE = :NEW.CATEGORY_CODE;
    :NEW.MEMBER_CODE := P_MEMBERCODE;
  ELSE
    P_MEMBERCODE := :NEW.MEMBER_CODE;
  END IF;
  IF :NEW.MEMBERPOLICYCODE IS NULL THEN
    SELECT NVL(IMP.MEMBERPOLICYCODE,0) INTO P_MEMBERPOLICYCODE FROM IM_MEMBERPOLICY IMP WHERE IMP.MEMBERCODE = P_MEMBERCODE AND IMP.POLICYCODE = :NEW.POLICYCODE AND IMP.CATEGORYCODE = :NEW.CATEGORY_CODE;
    :NEW.MEMBERPOLICYCODE := P_MEMBERPOLICYCODE;
  END IF;
  IF :NEW.ENCOUNTER_END_DATE IS NULL THEN
      IF :NEW.ENCOUNTER_START_DATE IS NOT NULL THEN
        :NEW.ENCOUNTER_END_DATE := :NEW.ENCOUNTER_START_DATE;
      END IF;
  END IF;
END IF;
END IF;
IF :NEW.REQUEST_TYPE = 4 THEN
:NEW.ISNEXTCARE := 1;
:NEW.ISRESUBMISSION := 0;
:NEW.CLAIM_STATUS := 2;
IF :NEW.POLICYTYPECODE IS NULL THEN
:NEW.POLICYTYPECODE := 1;
END IF;
END IF;
END;
/


ALTER TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER ADD (
  CONSTRAINT IM_CLAIM_PROCESS_PK
  PRIMARY KEY
  (CLAIM_CODE)
  USING INDEX ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_PK);

ALTER TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER ADD (
  CONSTRAINT IM_CLAIM_PROCESS_FK 
  FOREIGN KEY (PROVIDER_CODE) 
  REFERENCES ADDVANTAGE_LIVE.IM_PROVIDERS (PROVIDERCODE),
  CONSTRAINT IM_CLAIM_PROCESS_FK1 
  FOREIGN KEY (MEMBER_CODE) 
  REFERENCES ADDVANTAGE_LIVE.IM_MEMBERS (MEMBER_CODE)  DISABLE,
  CONSTRAINT IM_CLAIM_PROCESS_FK2 
  FOREIGN KEY (BENEFIT_CODE) 
  REFERENCES ADDVANTAGE_LIVE.IM_BENEFIT_CODES (BENEFIT_CODE));


ALTER TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
 DROP PRIMARY KEY CASCADE;

DROP TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL CASCADE CONSTRAINTS;

CREATE TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(
  CLAIM_CODE                NUMBER,
  ACTIVITY_DETAIL_CODE      NUMBER,
  ACTIVITY_CODE             NUMBER,
  VERSIONDETAILCODE         NUMBER(19),
  TARIFFDETAILCODE          NUMBER,
  PRICE                     NUMBER,
  QTY                       NUMBER,
  DISCOUNT_AMOUNT           NUMBER,
  COINSURANCE_AMOUNT        NUMBER,
  DEDUCTIBLE_AMOUNT         NUMBER,
  BENEFIT_CODE              NUMBER,
  ACTIVITY_STATUS           NUMBER,
  REQUEST_NUMBER            VARCHAR2(100 BYTE),
  REQUEST_DATE              DATE,
  REQUEST_SOURCE            NUMBER,
  REQUEST_TYPE              NUMBER,
  REQUEST_STATUS            NUMBER,
  PROVIDER_CODE             NUMBER,
  IS_BLOCKED                NUMBER,
  MEMBER_CODE               NUMBER,
  AUTHORIZATOIN_CODE        NUMBER,
  CREATEDIN                 NUMBER,
  CREATEDON                 DATE,
  CREATEDBY                 NUMBER(19),
  LASTMODIFIEDON            DATE,
  LASTMODIFIEDBY            NUMBER(19),
  LEGALENTITYCODE           NUMBER(19),
  CUSTOMERCODE              NUMBER(19),
  LOCATIONCODE              NUMBER(2),
  COMPANYCODE               NUMBER(2),
  RECOVER_FROM_PROVIDER     NUMBER,
  DENIED_TO_MEMBER          NUMBER,
  PRIOR_ATHORIZATION_ID     VARCHAR2(1000 BYTE),
  UTN_VERSIONCODE           NUMBER,
  CLINICIAN_CODE            NUMBER,
  TOTAL                     NUMBER,
  SERIALNO                  NUMBER(19),
  MAP_VALUE                 VARCHAR2(100 BYTE),
  TREATMENTTYPECODE         NUMBER(3),
  DENIAL_REASON             NUMBER(19),
  PRIORAUTHORIZATIONCODE    NUMBER(19),
  DISCOUNTPERCENTAGE        NUMBER(19,2),
  TYPE                      NUMBER(3),
  CLINICIANCODE             NVARCHAR2(200),
  DENIAL_VALUE              NUMBER(19,2),
  APPROVED_AMOUNT           NUMBER,
  NETAMOUNT                 NUMBER(19,2),
  REQUESTAMOUNT             NUMBER(19,2),
  REQUESTQTY                NUMBER(19),
  PROVIDERNETPRICE          NUMBER,
  CURRENCY                  NUMBER(19),
  RATE                      NUMBER(19,2),
  ACTIVITY_REMARKS          VARCHAR2(2000 BYTE),
  DIAGNOSIS_REMARKS         VARCHAR2(2000 BYTE),
  ACTIVITYSTARTDATE         DATE,
  ACTIVITYENDDATE           DATE,
  DETAILCODE                NUMBER(19),
  SYS_ACTIVITY_ID           NUMBER,
  ISPRIMARYDEDUCTIBLE       NUMBER(1),
  ISSECONDARYDEDUCTIBLE     NUMBER(1),
  COINSURANCE_PERCENTAGE    NUMBER(19,2),
  REMARKSADDED              NUMBER(1),
  REIMBURSEMENTAMT          NUMBER(19,2),
  REPAYMENTAMT              NUMBER(19,2),
  SOURCE_TYPE               VARCHAR2(100 BYTE),
  SOURCE_CODE               NUMBER,
  CODE                      VARCHAR2(1000 BYTE),
  ACA_BENEFIT_CODE          VARCHAR2(1000 BYTE),
  ACR_FORM_SEQ_NO           NUMBER,
  ACR_FORM_NO               VARCHAR2(1000 BYTE),
  ACR_SEQUENCE_NO           NUMBER,
  ACR_FORM_TYPE             VARCHAR2(1000 BYTE),
  ACA_DECLINE_CODE          VARCHAR2(1000 BYTE),
  ACA_HNM_RECO_CODE         VARCHAR2(1000 BYTE),
  PROVIDERNETPRICEBK        NUMBER(19,2),
  PRICEBK                   NUMBER(19,2),
  HNMAMOUNT                 NUMBER(19,2)        DEFAULT 0,
  TOBEUP                    NUMBER(1),
  TEMPPRICE                 NUMBER,
  TEMPHNMAMOUNT             NUMBER,
  TEMPDENIALVALUE           NUMBER,
  TEMPTOTAL                 NUMBER,
  ECA_HNM_RECOVERY_AMT      NUMBER,
  ECA_PATIENT_RECOVERY_AMT  NUMBER,
  DECLINEAMOUNT             NUMBER(19,2),
  ORGINALPATIENTSHARE       NUMBER(10,2),
  TEMPDEN                   NUMBER,
  TEMPD                     NUMBER,
  UNPMIGSOURCE              NUMBER,
  MERGED                    NUMBER,
  CRTCLAIM                  NUMBER,
  DTLUPDATE                 NUMBER,
  ACTUALDEDUCTAMT           NUMBER(19),
  EXTRAPATIENTSHARE         NUMBER(19,2),
  ISPROCESSED               NUMBER,
  ORGINALDEDUCTIBLEAMOUNT   NUMBER(19),
  OLDDECLINEAMOUNT          NUMBER(19,2)
)
TABLESPACE SBS_TBLS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_ACTIVITYID ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(SYS_ACTIVITY_ID)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.AV_IDX_CAID ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(CLAIM_CODE, ACTIVITY_CODE, VERSIONDETAILCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMACTSERIALNO ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(SERIALNO)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETACTCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(ACTIVITY_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETBENEFITCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(BENEFIT_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETCLINICANCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(CLINICIAN_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETCURRCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(CURRENCY)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETDENICODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(DENIAL_REASON)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETPRIORCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(PRIORAUTHORIZATIONCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETTARIFCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(TARIFFDETAILCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDETVERCODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(VERSIONDETAILCODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMDTL ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(CLAIM_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE INDEX ADDVANTAGE_LIVE.IDX_CLAIMSPROCESSDTLTYPECODE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(TYPE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE UNIQUE INDEX ADDVANTAGE_LIVE.IM_CLAIM_PROCD_PK ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL
(ACTIVITY_DETAIL_CODE)
LOGGING
TABLESPACE SBS_INDX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE."IM_CLAIMPRCDTL_DELETE_TRG" 
  AFTER DELETE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL   FOR EACH ROW
DISABLE
DECLARE
  P_REQUESTCLAIMCODE NUMBER(19);
  P_MEMBERPOLICYCODE NUMBER(19);
  P_BENEFITDIFFERENCE NUMBER(19,2);
  P_CLAIMACTIVITYCODE NVARCHAR2(200);
  P_REQUESTACTIVITYCODE NVARCHAR2(200);
BEGIN
            SELECT MIN(MEMBERPOLICYCODE) INTO P_MEMBERPOLICYCODE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = :OLD.CLAIM_CODE; 
            UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER - :OLD.TOTAL
            WHERE BENEFITCODE = :OLD.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;     
 END ;
/


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE."IM_CLAIMPROCESSDTL_TRG" 
  AFTER INSERT OR UPDATE ON im_claim_process_detail
  FOR EACH ROW
DISABLE
DECLARE
  P_REQUESTCLAIMCODE NUMBER(19);
  P_MEMBERPOLICYCODE NUMBER(19);
  P_BENEFITDIFFERENCE NUMBER(19,2);
  P_CLAIMACTIVITYCODE NVARCHAR2(200);
  P_REQUESTACTIVITYCODE NVARCHAR2(200);
BEGIN
 SELECT MEMBERPOLICYCODE INTO P_MEMBERPOLICYCODE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = :NEW.CLAIM_CODE;
 SELECT UPPER(TRIM(CODE)) INTO P_CLAIMACTIVITYCODE FROM IM_VERSION_DETALIS WHERE DETAILCODE = :NEW.VERSIONDETAILCODE;
 IF INSERTING THEN
      IF :NEW.PRIORAUTHORIZATIONCODE IS NOT NULL THEN
          -- GET REQUEST PRIMARY KEY BY AUTHORIZATION CODE
          --SELECT CRH.CLAIM_CODE INTO P_REQUESTCLAIMCODE FROM IM_CLAIM_REQUEST_HEADER CRH WHERE CRH.CRNO = :NEW.PRIORAUTHORIZATIONCODE; 
          -- FOR LOOP REQUEST DETAIL
          FOR TRG IN (SELECT * FROM IM_CLAIM_REQUEST_DETAIL WHERE CLAIM_CODE = P_REQUESTCLAIMCODE AND TYPE NOT IN (1,2)) LOOP    
            SELECT UPPER(TRIM(CODE)) INTO P_REQUESTACTIVITYCODE FROM IM_VERSION_DETALIS WHERE DETAILCODE = TRG.VERSIONDETAILCODE;
            IF :NEW.BENEFIT_CODE = TRG.BENEFIT_CODE AND :NEW.ACTIVITY_STATUS = 1 AND P_CLAIMACTIVITYCODE = P_REQUESTACTIVITYCODE THEN
              IF TRG.TOTAL > :NEW.TOTAL THEN
                 P_BENEFITDIFFERENCE := TRG.TOTAL - :NEW.TOTAL;
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER - P_BENEFITDIFFERENCE
                 WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE =P_MEMBERPOLICYCODE;
              END IF;              
            END IF;
          END LOOP;
      ELSE
            UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + :NEW.TOTAL
            WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
      END IF;
 ELSIF UPDATING THEN
       IF :NEW.PRIORAUTHORIZATIONCODE IS NOT NULL THEN
            ---SELECT CRH.CLAIM_CODE INTO P_REQUESTCLAIMCODE FROM IM_CLAIM_REQUEST_HEADER CRH WHERE CRH.CRNO = :NEW.PRIORAUTHORIZATIONCODE;
           FOR TRG IN (SELECT * FROM IM_CLAIM_REQUEST_DETAIL WHERE CLAIM_CODE = P_REQUESTCLAIMCODE AND TYPE NOT IN (1,2)) LOOP    
            SELECT UPPER(TRIM(CODE)) INTO P_REQUESTACTIVITYCODE FROM IM_VERSION_DETALIS WHERE DETAILCODE = TRG.VERSIONDETAILCODE;
            IF :NEW.BENEFIT_CODE = TRG.BENEFIT_CODE AND :NEW.ACTIVITY_STATUS = 1 AND P_CLAIMACTIVITYCODE = P_REQUESTACTIVITYCODE THEN
              IF TRG.TOTAL > :NEW.TOTAL THEN
                 P_BENEFITDIFFERENCE := TRG.TOTAL - :NEW.TOTAL;
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) - P_BENEFITDIFFERENCE
                 WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE =P_MEMBERPOLICYCODE;
              END IF;              
            END IF;
          END LOOP;
        ELSE
           IF :NEW.BENEFIT_CODE = :OLD.BENEFIT_CODE THEN
               IF :NEW.TOTAL > :OLD.TOTAL THEN
                 P_BENEFITDIFFERENCE := :NEW.TOTAL - :OLD.TOTAL;
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + P_BENEFITDIFFERENCE
                 WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
               ELSIF :NEW.TOTAL < :OLD.TOTAL  THEN
                 P_BENEFITDIFFERENCE := :OLD.TOTAL - :NEW.TOTAL;
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) - P_BENEFITDIFFERENCE
                 WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
               END IF;
           ELSE
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + :NEW.TOTAL
                 WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                 UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) - :OLD.TOTAL
                 WHERE BENEFITCODE = :OLD.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
           END IF;

       END IF;
 END IF;
 END ;
/


CREATE OR REPLACE TRIGGER ADDVANTAGE_LIVE.im_claimprocessdtls_trg
  AFTER INSERT OR UPDATE ON ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL   FOR EACH ROW
DECLARE
  P_REQUESTCLAIMCODE NUMBER(19);
  P_MEMBERPOLICYCODE NUMBER(19);
  P_BENEFITDIFFERENCE NUMBER(19,2);
  P_CLAIMACTIVITYCODE NVARCHAR2(200);
  P_REQUESTACTIVITYCODE NVARCHAR2(200);
  P_NEWCONSUMEDAMOUNT NUMBER;
  P_OLDCONSUMEDAMOUNT NUMBER;
  P_REQUEST_TYPE NUMBER;
  P_ISRESUBMISSION NUMBER;
  P_PARENTCLAIMCODE NUMBER;
  P_CLAIMSTATUS NUMBER;
  P_REQUESTTYPE NUMBER(19);
BEGIN

 
    
 SELECT MIN(MEMBERPOLICYCODE),MIN(REQUEST_TYPE),MIN(ISRESUBMISSION) INTO P_MEMBERPOLICYCODE,P_REQUEST_TYPE,P_ISRESUBMISSION FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = :NEW.CLAIM_CODE;
 
  SELECT MIN(REQUEST_TYPE) INTO P_REQUESTTYPE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = :NEW.CLAIM_CODE;
  IF INSERTING THEN

      IF P_MEMBERPOLICYCODE <> 0 AND P_MEMBERPOLICYCODE IS NOT NULL THEN
          IF P_REQUEST_TYPE <> 1 AND P_ISRESUBMISSION <> 1 THEN
          IF :NEW.BENEFIT_CODE IS NOT NULL THEN

              P_NEWCONSUMEDAMOUNT := :NEW.TOTAL + :NEW.HNMAMOUNT + :NEW.COINSURANCE_AMOUNT + :NEW.DEDUCTIBLE_AMOUNT;

              UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_NEWCONSUMEDAMOUNT,0)
              WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
            END IF;
          END IF;
      END IF;

  ELSIF UPDATING THEN

P_NEWCONSUMEDAMOUNT := :NEW.TOTAL + :NEW.HNMAMOUNT + :NEW.COINSURANCE_AMOUNT + :NEW.DEDUCTIBLE_AMOUNT;
            P_OLDCONSUMEDAMOUNT := :OLD.TOTAL + :OLD.HNMAMOUNT + :OLD.COINSURANCE_AMOUNT + :OLD.DEDUCTIBLE_AMOUNT;
      UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_NEWCONSUMEDAMOUNT,0)
      WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
      UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_OLDCONSUMEDAMOUNT,0)
      WHERE BENEFITCODE = :OLD.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
      
      
      
      /* IF P_REQUESTTYPE = 2 THEN
      
        INSERT INTO IM_CLAIM_PROCESS_DETAIL_RPT( 
        ACTIVITY_DETAIL_CODE, CLAIM_CODE, ACTIVITY_CODE, VERSIONDETAILCODE, TARIFFDETAILCODE, PRICE, QTY,
         DISCOUNT_AMOUNT, COINSURANCE_AMOUNT, DEDUCTIBLE_AMOUNT, BENEFIT_CODE, TOTAL, SERIALNO,
         DENIAL_VALUE, APPROVED_AMOUNT, NETAMOUNT, REQUESTAMOUNT, REQUESTQTY, PROVIDERNETPRICE, HNMAMOUNT, DECLINEAMOUNT,
         ACTIVITY_RPT_CODE
        )VALUES(
        :NEW.ACTIVITY_DETAIL_CODE, :NEW.CLAIM_CODE, :NEW.ACTIVITY_CODE, :NEW.VERSIONDETAILCODE, :NEW.TARIFFDETAILCODE, :NEW.PRICE, :NEW.QTY, 
        :NEW.DISCOUNT_AMOUNT, :NEW.COINSURANCE_AMOUNT, :NEW.DEDUCTIBLE_AMOUNT, :NEW.BENEFIT_CODE, :NEW.TOTAL, 
        :NEW.SERIALNO, :NEW.DENIAL_VALUE, :NEW.APPROVED_AMOUNT, :NEW.NETAMOUNT, 
        :NEW.REQUESTAMOUNT, :NEW.REQUESTQTY, :NEW.PROVIDERNETPRICE, :NEW.HNMAMOUNT, :NEW.DECLINEAMOUNT,
        (SELECT MAX(NVL(ACTIVITY_RPT_CODE,0))+1 FROM IM_CLAIM_PROCESS_DETAIL_RPT));
      
      END IF;*/
      /*IF P_ISRESUBMISSION <> 1 THEN
        IF :NEW.BENEFIT_CODE IS NOT NULL THEN
            P_NEWCONSUMEDAMOUNT := :NEW.TOTAL + :NEW.HNMAMOUNT + :NEW.COINSURANCE_AMOUNT + :NEW.DEDUCTIBLE_AMOUNT;
            P_OLDCONSUMEDAMOUNT := :OLD.TOTAL + :OLD.HNMAMOUNT + :OLD.COINSURANCE_AMOUNT + :OLD.DEDUCTIBLE_AMOUNT;
            IF :NEW.BENEFIT_CODE = :OLD.BENEFIT_CODE THEN
                 IF P_NEWCONSUMEDAMOUNT > P_OLDCONSUMEDAMOUNT THEN
                        P_BENEFITDIFFERENCE := P_NEWCONSUMEDAMOUNT - P_OLDCONSUMEDAMOUNT;
                        UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_BENEFITDIFFERENCE,0)
                        WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                  ELSIF P_NEWCONSUMEDAMOUNT < P_OLDCONSUMEDAMOUNT THEN
                        P_BENEFITDIFFERENCE := P_OLDCONSUMEDAMOUNT - P_NEWCONSUMEDAMOUNT;
                        UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) - NVL(P_BENEFITDIFFERENCE,0)
                        WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                  END IF;
             ELSE
                      UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_NEWCONSUMEDAMOUNT,0)
                      WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                      UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = NVL(SUMINSURER,0) + NVL(P_OLDCONSUMEDAMOUNT,0)
                      WHERE BENEFITCODE = :OLD.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
             END IF;
        END IF;
      ELSIF P_ISRESUBMISSION = 1 THEN
        SELECT PARENTCLAIMCODE INTO P_PARENTCLAIMCODE FROM IM_CLAIM_PROCESS_HEADER WHERE CLAIM_CODE = :NEW.CLAIM_CODE;
        /*FOR DTL IN (SELECT * FROM IM_CLAIM_PROCESS_DETAIL WHERE CLAIM_CODE = P_PARENTCLAIMCODE) LOOP
         FOR ADTL IN (SELECT * FROM IM_CLAIM_PROCESS_DETAIL_DTL WHERE ACTIVITY_DETAIL_CODE = DTL.ACTIVITY_DETAIL_CODE) LOOP
            IF ADTL.DENIEDFOR = 0 THEN
              IF :NEW.BENEFIT_CODE IS NOT NULL THEN
              P_NEWCONSUMEDAMOUNT := :NEW.TOTAL + :NEW.HNMAMOUNT + :NEW.COINSURANCE_AMOUNT + :NEW.DEDUCTIBLE_AMOUNT;
              P_OLDCONSUMEDAMOUNT := :OLD.TOTAL + :OLD.HNMAMOUNT + :OLD.COINSURANCE_AMOUNT + :OLD.DEDUCTIBLE_AMOUNT;
              IF :NEW.BENEFIT_CODE = :OLD.BENEFIT_CODE THEN
                IF P_NEWCONSUMEDAMOUNT > P_OLDCONSUMEDAMOUNT THEN
                          P_BENEFITDIFFERENCE := P_NEWCONSUMEDAMOUNT - P_OLDCONSUMEDAMOUNT;
                          UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER + P_BENEFITDIFFERENCE
                          WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                    ELSIF P_NEWCONSUMEDAMOUNT < P_OLDCONSUMEDAMOUNT THEN
                          P_BENEFITDIFFERENCE := P_OLDCONSUMEDAMOUNT - P_NEWCONSUMEDAMOUNT;
                          UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER - P_BENEFITDIFFERENCE
                          WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                    END IF;
                ELSE
                        UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER + P_NEWCONSUMEDAMOUNT
                        WHERE BENEFITCODE = :NEW.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                        UPDATE IM_MEMBERPOLICYBENEFITDTL SET SUMINSURER = SUMINSURER - P_OLDCONSUMEDAMOUNT
                        WHERE BENEFITCODE = :OLD.BENEFIT_CODE AND MEMBERPOLICYCODE = P_MEMBERPOLICYCODE;
                END IF;
            END IF;

            END IF;
         END LOOP;
        END LOOP;
      END IF;*/

   END IF;
 
  
 END ;
/


ALTER TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL ADD (
  CONSTRAINT IM_CLAIM_PROCD_PK
  PRIMARY KEY
  (ACTIVITY_DETAIL_CODE)
  USING INDEX ADDVANTAGE_LIVE.IM_CLAIM_PROCD_PK);

ALTER TABLE ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_DETAIL ADD (
  CONSTRAINT IM_CLAIM_PROCESS_DET_FK1 
  FOREIGN KEY (CLAIM_CODE) 
  REFERENCES ADDVANTAGE_LIVE.IM_CLAIM_PROCESS_HEADER (CLAIM_CODE)
  ON DELETE CASCADE  DISABLE,
  CONSTRAINT IM_CLAIM_PROCESS_DET_FK2 
  FOREIGN KEY (VERSIONDETAILCODE) 
  REFERENCES ADDVANTAGE_LIVE.IM_VERSION_DETALIS (DETAILCODE)  DISABLE);
